{"kt_path": "7824/solution_7824.kt", "deepseek-coder-1.3b-instruct-KExercises-KStack-clean-bytecode-4bit-lora": "/**\n * This exercise requires you to count the number of odd numbers in a given list.\n *\n * You are given a list of numbers. Your task is to write a function that counts the number of odd numbers in the list.\n *\n * Example:\n * testCountOddNumbers(listOf(1, 2, 3, 4, 5, 6, 7, 8, 9, 10))\n * Output: 5\n *\n * Explanation: The odd numbers in the list are 1, 3, 5, 7, and 9. Therefore, the function should return 5.\n */\nfun testCountOddNumbers() {\n// Your code here\n}"}
{"kt_path": "remisultan__multiarm-bandit-algorithm-kotlin__ead934d/core-bandit/src/main/kotlin/org/rsultan/bandit/algorithms/BanditAlgorithm.kt", "deepseek-coder-1.3b-instruct-KExercises-KStack-clean-bytecode-4bit-lora": "package org.rsultan.bandit.algorithms\n\n/**\n * The interface for a bandit algorithm.\n */\ninterface BanditAlgorithm {\n    /**\n     * Selects an arm to explore.\n     *\n     * @return The index of the arm to explore.\n     */\n    fun selectArm(): Int\n\n    /**\n     * Updates the algorithm's parameters based on the results of a trial.\n     *\n     * @param armIndex The index of the arm that was chosen.\n     * @param reward The reward received from the trial.\n     */\n    fun update(armIndex: Int, reward: Float)\n}"}
{"kt_path": "13864/solution_13864.kt", "deepseek-coder-1.3b-instruct-KExercises-KStack-clean-bytecode-4bit-lora": "/**\n * This function calculates the score of a player based on the number of goals scored and the number of assists made.\n *\n * @param goals The number of goals scored by the player.\n * @param assists The number of assists made by the player.\n * @return The score of the player.\n */\nfun calculateScore(goals: Int, assists: Int): Int {\nreturn goals * assists\n}"}
{"kt_path": "9763/solution_9763.kt", "deepseek-coder-1.3b-instruct-KExercises-KStack-clean-bytecode-4bit-lora": "/**\n * This function calculates the final price of a product after applying a discount.\n *\n * @param originalPrice The original price of the product.\n * @param discount The discount percentage to be applied.\n * @return The final price of the product after applying the discount.\n */\nfun calculateFinalPrice(originalPrice: Double, discount: Double): Double {\nreturn originalPrice - (originalPrice * discount / 100)\n}"}
{"kt_path": "8545/solution_8545.kt", "deepseek-coder-1.3b-instruct-KExercises-KStack-clean-bytecode-4bit-lora": "/**\n * This function calculates the conversion rate between two different currencies.\n *\n * @param amount The amount in the source currency.\n * @param targetCurrency The target currency to convert to.\n * @return The conversion rate between the source currency and the target currency.\n */\nfun calculateConversionRate(amount: Int, targetCurrency: Int): Double {\nvar conversionRate = 0.0\n\n    // TODO: Implement the conversion rate calculation logic\n\n    return conversionRate\n}"}
{"kt_path": "13968/solution_13968.kt", "deepseek-coder-1.3b-instruct-KExercises-KStack-clean-bytecode-4bit-lora": "/**\n * This function calculates the performance of an athlete given their distance covered and time taken.\n *\n * @param distance The distance covered by the athlete in meters.\n * @param time The time taken by the athlete in seconds.\n * @return The performance of the athlete in meters per second.\n */\nfun athletePerformanceDistance(distance: Double, time: Double): Double {\nreturn distance / time\n}"}
{"kt_path": "14509/solution_14509.kt", "deepseek-coder-1.3b-instruct-KExercises-KStack-clean-bytecode-4bit-lora": "/**\n * Calculate the area of a room given its length and width.\n *\n * @param length The length of the room in meters.\n * @param width The width of the room in meters.\n * @return The area of the room in square meters.\n */\nfun calculateRoomArea(length: Int, width: Int): Int {\nval area = length * width\n    return area\n}"}
{"kt_path": "7670/solution_7670.kt", "deepseek-coder-1.3b-instruct-KExercises-KStack-clean-bytecode-4bit-lora": "/**\n * This exercise focuses on the concept of identity assignment in Kotlin.\n *\n * Your task is to complete the code to assign the identity of a variable to another variable.\n *\n * Your task is to complete the code to assign the identity of a variable to another variable.\n *\n * @return true if the assignment is successful, false otherwise.\n */\nfun identityAssignment(): Boolean {\n// Assign the identity of a variable to another variable\n    val x = 5\n    val y = x\n\n    return true\n}"}
{"kt_path": "224/solution_224.kt", "deepseek-coder-1.3b-instruct-KExercises-KStack-clean-bytecode-4bit-lora": "/**\n * This function calculates the salary of a person based on their hourly rate and the number of hours worked.\n *\n * @param hourlyRate The hourly rate of the person.\n * @param hoursWorked The number of hours the person worked.\n * @return The total salary of the person.\n */\nfun calculateSalary(hourlyRate: Double, hoursWorked: Int): Long {\nreturn round(hourlyRate * hoursWorked)\n}\n\n// Example usage"}
{"kt_path": "11310/solution_11310.kt", "deepseek-coder-1.3b-instruct-KExercises-KStack-clean-bytecode-4bit-lora": "/**\n * This function calculates the total expenses for a given number of employees and a given salary.\n *\n * @param numEmployees The number of employees.\n * @param salary The salary per employee.\n * @return The total expenses for the given number of employees and salary.\n */\nfun calculateExpenses(numEmployees: Int, salary: Float): Float {\nval totalExpenses = numEmployees * salary\n    return totalExpenses\n}"}
{"kt_path": "10330/solution_10330.kt", "deepseek-coder-1.3b-instruct-KExercises-KStack-clean-bytecode-4bit-lora": "/**\n * This function calculates the power of a number using the multiplication operator.\n *\n * @param base The base number.\n * @param exponent The exponent.\n * @return The result of the power calculation.\n */\nfun calculatePower(base: Double, exponent: Double): Double {\nval result = base * exponent\n    return result\n}"}
{"kt_path": "11101/solution_11101.kt", "deepseek-coder-1.3b-instruct-KExercises-KStack-clean-bytecode-4bit-lora": "/**\n * This function checks if a given number is a positive integer.\n *\n * @param num The number to be checked.\n * @return True if the number is positive, False otherwise.\n */\nfun checkPositiveInteger(num: Int): Boolean {\nreturn num > 0\n}"}
{"kt_path": "432/solution_432.kt", "deepseek-coder-1.3b-instruct-KExercises-KStack-clean-bytecode-4bit-lora": "/**\n * This function calculates the resistance of a circuit given the current and voltage.\n *\n * @param current The current in the circuit.\n * @param voltage The voltage in the circuit.\n * @return The resistance of the circuit.\n */\nfun calculateResistance(current: Double, voltage: Double): Double {\nval resistance = current / voltage\n    return resistance\n}"}
{"kt_path": "n81ur3__kotlin-coding-challenges__fdc5941/src/main/kotlin/adventofcode2018/Day04ReposeRecord.kt", "deepseek-coder-1.3b-instruct-KExercises-KStack-clean-bytecode-4bit-lora": "package adventofcode2018\n\nimport adventofcode2018.Day04ReposeRecord.Companion.parse\n\nclass Day04ReposeRecord {\n    companion object {\n        fun parse(input: String): List<Pair<Int, Int>> {\n            return input.lines()\n                .map { it.split(\" \") }\n                .map { Pair(it[0].toInt(), it[1].toInt()) }\n        }\n    }\n}"}
{"kt_path": "8671/solution_8671.kt", "deepseek-coder-1.3b-instruct-KExercises-KStack-clean-bytecode-4bit-lora": "/**\n * This function calculates the average speed of a vehicle given its distance and time.\n *\n * @param distance The distance covered by the vehicle in kilometers.\n * @param time The time taken by the vehicle in hours.\n * @return The average speed of the vehicle in kilometers per hour.\n */\nfun calculateAverageSpeed(distance: Double, time: Double): Double {\nval averageSpeed = distance / time\n    return averageSpeed\n}"}
{"kt_path": "5601/solution_5601.kt", "deepseek-coder-1.3b-instruct-KExercises-KStack-clean-bytecode-4bit-lora": "/**\n * This function calculates the power of a circuit given the resistance and capacitance values.\n *\n * @param resistance The resistance value of the circuit.\n * @param capacitance The capacitance value of the circuit.\n * @return The power of the circuit.\n */\nfun calculateCircuitPower(resistance: Double, capacitance: Double): Double {\nval power = resistance * capacitance\n    return power\n}"}
{"kt_path": "10329/solution_10329.kt", "deepseek-coder-1.3b-instruct-KExercises-KStack-clean-bytecode-4bit-lora": "/**\n * This function calculates the resistance of a circuit given the current and voltage.\n *\n * @param current The current in the circuit.\n * @param voltage The voltage in the circuit.\n * @return The resistance of the circuit.\n */\nfun calculateResistance(current: Double, voltage: Double): Double {\nval resistance = current / voltage\n    return resistance\n}"}
{"kt_path": "n81ur3__kotlin-coding-challenges__fdc5941/src/main/kotlin/adventofcode2020/Day19MonsterMessage.kt", "deepseek-coder-1.3b-instruct-KExercises-KStack-clean-bytecode-4bit-lora": "package adventofcode2020\n\nclass Day19MonsterMessage\n\n// https://adventofcode.com/2020/day/19\n// https://adventofcode.com/2020/day/19#part2\n\n// 1. Read the input file\n// 2. Parse the input file\n// 3. Find the number of valid messages\n// 4. Find the number of valid messages that match the rule 0\n// 5. Find the number of valid messages that match the rule 1\n// 6. Find the number of valid messages that match the rule 2\n// 7. Find the number of valid messages that match the rule 3\n// 8. Find the number of valid messages that match the rule 4\n// 9. Find the number of valid messages that match the rule 5\n// 10. Find the number of valid messages that match the rule 6\n// 11. Find the number of valid messages that match the rule 7\n// 12. Find the number of valid messages that match the rule 8\n// 13. Find the number of valid messages that match the rule 9\n// 14. Find the number of valid messages that match the rule 10\n// 15. Find the number of valid messages that match the rule 11\n// 16. Find the number of valid messages that match the rule 12\n// 17. Find the number of valid messages that match the rule 13\n// 18. Find the number of valid messages that match the rule 14\n// 19. Find the number of valid messages that match the rule 15\n// 20. Find the number of valid messages that match the rule 16\n// 21. Find the number of valid messages that match the rule 17\n// 22. Find the number of valid messages that match the rule 18\n// 23. Find the number of valid messages that match the rule 19\n// 24. Find the number of valid messages that match the rule 20\n// 25. Find the number of valid messages that match the rule 21\n// 26. Find the number of valid messages that match the rule 22\n// 27. Find the number of valid messages that match the rule 23\n// 28. Find the number of valid messages that match the rule 24"}
{"kt_path": "n81ur3__kotlin-coding-challenges__fdc5941/src/main/kotlin/adventofcode2020/Day07HandyHaversacks.kt", "deepseek-coder-1.3b-instruct-KExercises-KStack-clean-bytecode-4bit-lora": "package adventofcode2020\n\nimport java.util.regex.Pattern\n\nclass Day07HandyHaversacks {\n}\n\nprivate fun String.parseRules() = this.split(\"\\n\")\n    .map { it.replace(\" bags contain \", \": \") }\n    .map { it.replace(\" bag, \", \": \") }\n    .map { it.replace(\" bag, \", \": \") }\n    .map { it.replace(\" bag.\", \"\") }\n    .map { it.replace(\" .\", \"\") }\n    .map { it.replace(\"  \", \" \") }\n    .map { it.replace(\"  \", \" \") }\n    .map { it.replace(\"  \", \" \") }\n    .map { it.replace(\"  \", \" \") }\n    .map { it.replace(\"  \", \" \") }\n    .map { it.replace(\"  \", \" \") }\n    .map { it.replace(\"  \", \" \") }\n    .map { it.replace(\"  \", \" \") }\n    .map { it.replace(\"  \", \" \") }\n    .map { it.replace(\"  \", \" \") }\n    .map { it.replace(\"  \", \" \") }\n    .map { it.replace(\"  \", \" \") }\n    .map { it.replace(\"  \", \" \") }\n    .map { it.replace(\"  \", \" \") }\n    .map { it.replace(\"  \", \" \") }\n    .map { it.replace(\"  \", \" \") }\n    .map { it.replace(\"  \", \" \") }\n    .map { it.replace(\"  \", \" \") }\n    .map { it.replace(\"  \", \" \") }\n    .map { it.replace(\"  \", \" \") }\n    .map { it.replace(\"  \", \" \") }\n    .map { it.replace(\"  \", \" \") }\n    .map { it.replace(\"  \", \" \") }\n    .map { it.replace(\"  \", \" \") }\n    .map { it.replace(\"  \", \" \") }\n    .map { it.replace(\"  \", \" \") }\n    .map { it.replace(\"  \", \" \") }\n    .map { it.replace(\"  \", \" \") }\n    .map { it.replace(\"  \", \" \") }\n    .map { it.replace(\"  \", \" \") }\n    .map { it"}
{"kt_path": "7007/solution_7007.kt", "deepseek-coder-1.3b-instruct-KExercises-KStack-clean-bytecode-4bit-lora": "/**\n * This function checks if a flight is a long one or not.\n *\n * @param distance The distance of the flight in kilometers.\n * @param duration The duration of the flight in minutes.\n * @return True if the flight is a long one, False otherwise.\n */\nfun isLongFlight(distance: Int, duration: Int): Boolean {\nreturn distance > duration\n}"}
{"kt_path": "3696/solution_3696.kt", "deepseek-coder-1.3b-instruct-KExercises-KStack-clean-bytecode-4bit-lora": "/**\n * This function calculates the area of a rectangle given its length, width, and height.\n *\n * @param length The length of the rectangle.\n * @param width The width of the rectangle.\n * @param height The height of the rectangle.\n * @return The area of the rectangle.\n */\nfun findCommonArea(length: Float, width: Float, height: Float): Float {\nval area = length * width * height\n    return area\n}"}
{"kt_path": "9314/solution_9314.kt", "deepseek-coder-1.3b-instruct-KExercises-KStack-clean-bytecode-4bit-lora": "/**\n * This function checks if a given number is even.\n *\n * @param num The number to check.\n * @return True if the number is even, False otherwise.\n */\nfun isEven(num: Int): Boolean {\nreturn num % 2 == 0\n}"}
{"kt_path": "10577/solution_10577.kt", "deepseek-coder-1.3b-instruct-KExercises-KStack-clean-bytecode-4bit-lora": "/**\n * This function checks if a given number is even.\n *\n * @param num The number to check.\n * @return True if the number is even, False otherwise.\n */\nfun isEven(num: Int): Boolean {\nreturn num % 2 == 0\n}"}
{"kt_path": "n81ur3__kotlin-coding-challenges__fdc5941/src/main/kotlin/adventofcode2018/Day06ChronalCoordinates.kt", "deepseek-coder-1.3b-instruct-KExercises-KStack-clean-bytecode-4bit-lora": "package adventofcode2018\n\nimport adventofcode2018.Day06ChronalCoordinates.Companion.toCoordinate\nimport adventofcode2018.Day06ChronalCoordinates.Companion.toPoint\nimport adventofcode2018.Day06ChronalCoordinates.Companion.toVector\nimport kotlin.math.abs\nimport kotlin.math.max\nimport kotlin.math.min\n\nclass Day06ChronalCoordinates {\n\n    fun part1(input: List<String>): Int {\n        val points = input.map { it.toPoint() }\n        val minX = points.minOf { it.x }\n        val maxX = points.maxOf { it.x }\n        val minY = points.minOf { it.y }\n        val maxY = points.maxOf { it.y }\n\n        val area = (minX..maxX).flatMap { x -> (minY..maxY).map { y -> Point(x, y) } }\n            .filter { point -> points.all { it != point } }\n            .count()\n\n        return area\n    }\n\n    fun part2(input: List<String>): Int {\n        val points = input.map { it.toPoint() }\n        val minX = points.minOf { it.x }\n        val maxX = points.maxOf { it.x }\n        val minY = points.minOf { it.y }\n        val maxY = points.maxOf { it.y }\n\n        val area = (minX..maxX).flatMap { x -> (minY..maxY).map { y -> Point(x, y) } }\n            .filter { point -> points.all { it != point } }\n            .count { point ->\n                points.sumOf { abs(point.x - it.x) + abs(point.y - it.y) }\n            }\n\n        return area\n    }\n\n    data class Point(val x: Int, val y: Int)\n\n    companion object {\n        fun String.toPoint(): Point {\n            val (x, y) = this.split(\", \")\n            return Point(x.toInt(), y.toInt())\n        }\n\n        fun"}
{"kt_path": "7819/solution_7819.kt", "deepseek-coder-1.3b-instruct-KExercises-KStack-clean-bytecode-4bit-lora": "/**\n * This function calculates the power consumption of a device based on the given voltage.\n *\n * @param voltage The voltage of the device.\n * @return The power consumption of the device.\n */\nfun calculatePowerConsumption(voltage: Double): Double {\nval powerConsumption = 5 // Assuming a constant power consumption\n    val powerConsumptionPerVoltage = voltage / powerConsumption\n    return powerConsumptionPerVoltage\n}"}
{"kt_path": "8829/solution_8829.kt", "deepseek-coder-1.3b-instruct-KExercises-KStack-clean-bytecode-4bit-lora": "/**\n * This function calculates the daily caloric needs for a given weight loss goal.\n *\n * @param weight The weight loss goal in kilograms.\n * @param caloriesPerDay The number of calories burned per day.\n * @return The daily caloric needs in kilocalories.\n */\nfun calculateDailyCaloricNeeds(weight: Float, caloriesPerDay: Float): Float {\nval dailyCaloricNeeds = weight * 24 * caloriesPerDay\n    return dailyCaloricNeeds\n}"}
{"kt_path": "6256/solution_6256.kt", "deepseek-coder-1.3b-instruct-KExercises-KStack-clean-bytecode-4bit-lora": "/**\n * This function checks if two values are not equal to None.\n *\n * @param value1 The first value.\n * @param value2 The second value.\n * @return True if the values are not equal to None, False otherwise.\n */\nfun notEqualNone(value1: Int?, value2: Int?): Boolean {\nreturn value1 != null || value2 != null\n}"}
{"kt_path": "4238/solution_4238.kt", "deepseek-coder-1.3b-instruct-KExercises-KStack-clean-bytecode-4bit-lora": "/**\n * This function checks if a driver is over the speed limit.\n *\n * @param speed The speed of the driver in km/h.\n * @param limit The speed limit in km/h.\n * @return True if the driver is over the speed limit, False otherwise.\n */\nfun checkSpeedLimit(speed: Float, limit: Float): Boolean {\nreturn speed > limit\n}"}
{"kt_path": "3868/solution_3868.kt", "deepseek-coder-1.3b-instruct-KExercises-KStack-clean-bytecode-4bit-lora": "/**\n * This function takes two integers as input and returns the sum of the numbers between them.\n * However, if the sum is greater than 10, it multiplies the sum by 2.\n *\n * @param start The starting number.\n * @param end The ending number.\n * @return The sum of the numbers between start and end, but if the sum is greater than 10, it multiplies the sum by 2.\n */\nfun sumOfNumbers(start: Int, end: Int): Int {\nval sum = start + end\n    return if (sum > 10) sum * 2 else sum\n}"}
{"kt_path": "5766/solution_5766.kt", "deepseek-coder-1.3b-instruct-KExercises-KStack-clean-bytecode-4bit-lora": "/**\n * This exercise requires you to perform a left shift operation on the given number and then multiply the result by the original number.\n *\n * @param num The number to be shifted and multiplied.\n * @return The result of the left shift operation and multiplication.\n */\nfun shiftAndMultiplyAssignment(num: Int): Int {\n// Perform a left shift operation on the number\n    val shiftedNum = num shl 1\n\n    // Perform a right shift operation on the shifted number\n    val shiftedAndMultipliedNum = shiftedNum shr num\n\n    // Multiply the shifted and multiplied number by the original number\n    val result = shiftedAndMultipliedNum * num\n\n    return result\n}"}
{"kt_path": "4304/solution_4304.kt", "deepseek-coder-1.3b-instruct-KExercises-KStack-clean-bytecode-4bit-lora": "/**\n * This function calculates the sum of two numbers using the addition operator and returns the result.\n *\n * @param num1 The first number.\n * @param num2 The second number.\n * @return The sum of num1 and num2.\n */\nfun architectMath(num1: Int, num2: Int): Int {\nval sum = num1 * 2 + num2 + 1\n    return sum\n}"}
{"kt_path": "alebedev__aoc2022__d6ba46b/src/main/kotlin/Map.kt", "deepseek-coder-1.3b-instruct-KExercises-KStack-clean-bytecode-4bit-lora": "import AocMap\n\nfun main() {\n    AocMap.solve()\n}"}
{"kt_path": "7168/solution_7168.kt", "deepseek-coder-1.3b-instruct-KExercises-KStack-clean-bytecode-4bit-lora": "/**\n * Given four integers a, b, c, and d, multiply them together and return the remainder of the result.\n *\n * @param a The first integer.\n * @param b The second integer.\n * @param c The third integer.\n * @param d The fourth integer.\n * @return The remainder of the multiplication of a, b, c, and d.\n */\nfun multiplyAndModulo(a: Int, b: Int, c: Int, d: Int): Int {\nval result = a * b\n    val remainder = result % c\n    return remainder\n}"}
{"kt_path": "5304/solution_5304.kt", "deepseek-coder-1.3b-instruct-KExercises-KStack-clean-bytecode-4bit-lora": "/**\n * This function calculates the number of circuits in a given range of numbers.\n *\n * @param start The starting number of the range.\n * @param end The ending number of the range.\n * @param divisor The divisor to divide the range by.\n * @return The number of circuits in the range.\n */\nfun numberOfCircuits(start: Int, end: Int, divisor: Int): Int {\nval numCircuits = (end / divisor)\n    val remainder = end % divisor\n\n    return if (remainder != 0) {\n        numCircuits + 1\n    } else {\n        numCircuits\n    }\n}"}
{"kt_path": "7099/solution_7099.kt", "deepseek-coder-1.3b-instruct-KExercises-KStack-clean-bytecode-4bit-lora": "/**\n * This function calculates the distance between two points using the Pythagorean theorem.\n *\n * @param x1 The x-coordinate of the first point.\n * @param y1 The y-coordinate of the first point.\n * @param x2 The x-coordinate of the second point.\n * @param y2 The y-coordinate of the second point.\n * @return The distance between the two points.\n */\nfun calculateDistance(x1: Double, y1: Double, x2: Double, y2: Double): Double {\nval distance = Math.sqrt(Math.pow(x2 - x1, 2) + Math.pow(y2 - y1, 2))\n    return distance\n}"}
{"kt_path": "8138/solution_8138.kt", "deepseek-coder-1.3b-instruct-KExercises-KStack-clean-bytecode-4bit-lora": "/**\n * This function calculates the total points an athlete has earned based on the number of\n * medals they have won and the athlete's age.\n *\n * @param medals The number of medals won by the athlete.\n * @param isAdult A boolean indicating whether the athlete is an adult.\n * @param isSenior A boolean indicating whether the athlete is a senior.\n * @return The total points earned by the athlete.\n */\nfun athletePoints(medals: Int, isAdult: Boolean, isSenior: Boolean): Int {\nreturn if (isAdult) {\n        medals + 3\n    } else if (isSenior) {\n        medals + 1\n    } else {\n        medals\n    }\n}"}
{"kt_path": "6625/solution_6625.kt", "deepseek-coder-1.3b-instruct-KExercises-KStack-clean-bytecode-4bit-lora": "/**\n * This function calculates the length of a cut based on the length of the fabric, the thickness of the cut, and the number of cuts.\n *\n * @param fabricLength The length of the fabric in inches.\n * @param cutThickness The thickness of the cut in inches.\n * @param numCuts The number of cuts to be made.\n * @return The length of the cut in inches.\n */\nfun calculateCutLength(fabricLength: Float, cutThickness: Float, numCuts: Int): Float {\nval cutLength = fabricLength - cutThickness * (numCuts - 1) / numCuts\n    return cutLength\n}"}
{"kt_path": "14820/solution_14820.kt", "deepseek-coder-1.3b-instruct-KExercises-KStack-clean-bytecode-4bit-lora": "/**\n * Given a positive integer n, calculate the sum of all positive integers up to n.\n *\n * @param n A positive integer.\n * @return The sum of all positive integers up to n.\n */\nfun positiveIntegersSum(n: Int): Int {\nvar sum = 0\n    for (i in 1..n) {\n        sum += i\n    }\n    return sum\n}"}
{"kt_path": "3808/solution_3808.kt", "deepseek-coder-1.3b-instruct-KExercises-KStack-clean-bytecode-4bit-lora": "/**\n * Given two integers, count the number of negative numbers between them.\n *\n * @param start The starting integer.\n * @param end The ending integer.\n * @return The count of negative numbers between start and end.\n */\nfun countNegative(start: Int, end: Int): Int {\nvar count = 0\n    for (i in start..end) {\n        if (i < 0) {\n            count++\n        }\n    }\n    return count\n}"}
{"kt_path": "677/solution_677.kt", "deepseek-coder-1.3b-instruct-KExercises-KStack-clean-bytecode-4bit-lora": "/**\n * This exercise requires you to calculate the modulus of a complex number.\n *\n * Given two complex numbers, a and b, the task is to calculate the modulus of the complex number\n * formed by adding a and b.\n *\n * @param a The real part of the first complex number.\n * @param b The imaginary part of the first complex number.\n * @return The modulus of the complex number formed by adding a and b.\n */\nfun modulusComplexNumbers(a: Float, b: Float): Float {\n// Calculate the modulus of the complex number\n    val modulus = Math.sqrt(a * a + b * b)\n\n    return modulus\n}"}
{"kt_path": "1838/solution_1838.kt", "deepseek-coder-1.3b-instruct-KExercises-KStack-clean-bytecode-4bit-lora": "/**\n * This function calculates the sum of all numbers from 1 to n (inclusive).\n *\n * @param n The upper limit of the range.\n * @return The sum of all numbers from 1 to n.\n */\nfun calculateSum(n: Int): Int {\nvar sum = 0\n    var i = 1\n    while (i <= n) {\n        sum += i\n        i++\n    }\n    return sum\n}"}
{"kt_path": "3178/solution_3178.kt", "deepseek-coder-1.3b-instruct-KExercises-KStack-clean-bytecode-4bit-lora": "/**\n * This function calculates the salary of a graphic designer based on the number of years of experience.\n *\n * @param yearsExperience The number of years of experience the graphic designer has.\n * @return The salary of the graphic designer.\n */\nfun graphicDesignerSalary(yearsExperience: Int): Int {\nval baseSalary = 2500\n    val bonus = if (yearsExperience > 10) 500 else 0\n    val totalSalary = baseSalary + bonus\n    return totalSalary\n}"}
{"kt_path": "9504/solution_9504.kt", "deepseek-coder-1.3b-instruct-KExercises-KStack-clean-bytecode-4bit-lora": "/**\n * This function checks if a given number is a prime number.\n *\n * @param num The number to check.\n * @return True if the number is prime, False otherwise.\n */\nfun checkPrimeNumbers(num: Int): Boolean {\nfor (i in 2..num) {\n        if (num % i == 0) {\n            return false\n        }\n    }\n    return true\n}"}
{"kt_path": "5182/solution_5182.kt", "deepseek-coder-1.3b-instruct-KExercises-KStack-clean-bytecode-4bit-lora": "/**\n * This function checks if a number is divisible by 2 or 11.\n *\n * @param num The number to check.\n * @return True if the number is divisible by 2 or 11, False otherwise.\n */\nfun checkDivisible(num: Int): Boolean {\nfor (i in 2..11) {\n        if (num % i == 0) {\n            return true\n        }\n    }\n    return false\n}"}
{"kt_path": "7650/solution_7650.kt", "deepseek-coder-1.3b-instruct-KExercises-KStack-clean-bytecode-4bit-lora": "/**\n * This function takes an integer as input and returns the sum of the squares of all the numbers from 1 to the input number.\n *\n * @param n The input integer.\n * @return The sum of the squares of all the numbers from 1 to the input number.\n */\nfun sumOfSquares(n: Int): Int {\nvar sum = 0\n    for (i in 1..n) {\n        sum += i * i\n    }\n    return sum\n}"}
{"kt_path": "6824/solution_6824.kt", "deepseek-coder-1.3b-instruct-KExercises-KStack-clean-bytecode-4bit-lora": "/**\n * This function calculates the score of a player based on their age and number of games played.\n *\n * @param age The age of the player.\n * @param gamesPlayed The number of games played by the player.\n * @return The score of the player.\n */\nfun calculateScore(age: Int, gamesPlayed: Int): Int {\nval score = (10 * age) - (5 * gamesPlayed)\n    return if (gamesPlayed < 3) {\n        -1\n    } else {\n        score\n    }\n}"}
{"kt_path": "1825/solution_1825.kt", "deepseek-coder-1.3b-instruct-KExercises-KStack-clean-bytecode-4bit-lora": "/**\n * Calculate the salary of a carpenter based on the number of hours worked, hourly rate, and bonus.\n *\n * @param hoursWorked The number of hours worked by the carpenter.\n * @param hourlyRate The hourly rate of the carpenter.\n * @param bonus The bonus amount to be added to the hourly rate.\n * @return The total salary of the carpenter.\n */\nfun calculateCarpenterSalary(hoursWorked: Int, hourlyRate: Double, bonus: Double): Double {\nval salary = (hoursWorked * hourlyRate) + (hoursWorked * hourlyRate * bonus) / 100\n    return salary\n}"}
{"kt_path": "1332/solution_1332.kt", "deepseek-coder-1.3b-instruct-KExercises-KStack-clean-bytecode-4bit-lora": "/**\n * This function takes the temperature of a fire and returns the number of times it needs to be extinguished.\n *\n * @param temperature The current temperature of the fire.\n * @return The number of times the fire needs to be extinguished.\n */\nfun extinguishFire(temperature: Double): Int {\nvar timesExtinguished = 0\n    var currentTemperature = temperature\n\n    while (currentTemperature > 0) {\n        currentTemperature /= 2\n        timesExtinguished++\n    }\n\n    return timesExtinguished\n}"}
{"kt_path": "10817/solution_10817.kt", "deepseek-coder-1.3b-instruct-KExercises-KStack-clean-bytecode-4bit-lora": "/**\n * This function takes three integers as input and returns the maximum value among them.\n */\nfun maxOfThree(a: Int, b: Int, c: Int): Int {\nreturn maxOf(a, maxOf(b, c))\n}"}
{"kt_path": "11536/solution_11536.kt", "deepseek-coder-1.3b-instruct-KExercises-KStack-clean-bytecode-4bit-lora": "/**\n * This function checks if the given value is a float.\n *\n * @param value The value to check.\n * @return True if the value is a float, False otherwise.\n */\nfun isFloat(value: Any): Boolean {\nreturn value is Float\n}"}
{"kt_path": "13694/solution_13694.kt", "deepseek-coder-1.3b-instruct-KExercises-KStack-clean-bytecode-4bit-lora": "/**\n * Calculate the salary of a carpenter based on the number of hours worked, hourly rate, and bonus.\n *\n * @param hoursWorked The number of hours worked by the carpenter.\n * @param hourlyRate The hourly rate of the carpenter.\n * @param bonus The bonus amount to be added to the hourly rate.\n * @return The total salary of the carpenter.\n */\nfun calculateCarpenterSalary(hoursWorked: Int, hourlyRate: Double, bonus: Double): Double {\nval totalSalary = hoursWorked * hourlyRate + bonus\n    return totalSalary\n}"}
{"kt_path": "7127/solution_7127.kt", "deepseek-coder-1.3b-instruct-KExercises-KStack-clean-bytecode-4bit-lora": "/**\n * This function checks if the given input is an integer.\n *\n * @param number The input to be checked.\n * @return True if the input is an integer, False otherwise.\n */\nfun checkInteger(number: Any): Boolean {\nreturn number is Integer\n}"}
{"kt_path": "7144/solution_7144.kt", "deepseek-coder-1.3b-instruct-KExercises-KStack-clean-bytecode-4bit-lora": "/**\n * This exercise requires you to compare two floating-point numbers using identity comparison and floating-point operations.\n *\n * Given two floating-point numbers, you need to write a function that returns true if the two numbers are equal within a certain tolerance,\n * and false otherwise. The tolerance is given as a parameter to the function.\n *\n * Your task is to complete the code below to solve this exercise.\n */\nfun identityComparisonAndFloatingPointOperations(num1: Double, num2: Double, tolerance: Double = 0.01): Boolean {\nreturn Math.abs(num1 - num2) < tolerance\n}"}
{"kt_path": "8240/solution_8240.kt", "deepseek-coder-1.3b-instruct-KExercises-KStack-clean-bytecode-4bit-lora": "/**\n * This function calculates the factorial of a given number.\n *\n * @param n The number to calculate the factorial of.\n * @return The factorial of the given number.\n */\nfun calculateFactorial(n: Int): Int {\nvar factorial = 1\n    for (i in 1..n) {\n        factorial *= i\n    }\n    return factorial\n}"}
{"kt_path": "2140/solution_2140.kt", "deepseek-coder-1.3b-instruct-KExercises-KStack-clean-bytecode-4bit-lora": "/**\n * This function calculates the commission based on the given parameters.\n *\n * @param salesAmount The total sales amount.\n * @param commissionRate The commission rate.\n * @param taxRate The tax rate.\n * @return The commission amount.\n */\nfun commissionCalculator(salesAmount: Double, commissionRate: Double, taxRate: Double): Double {\nvar commission: Double = 0.0\n\n    if (salesAmount > 0 && commissionRate > 0 && taxRate > 0) {\n        commission = salesAmount * commissionRate\n    }\n\n    return commission\n}"}
{"kt_path": "14315/solution_14315.kt", "deepseek-coder-1.3b-instruct-KExercises-KStack-clean-bytecode-4bit-lora": "/**\n * Given a positive integer n, return the sum of all positive integers up to n.\n *\n * Example:\n * sumPositiveIntegers(5) -> 15\n * sumPositiveIntegers(10) -> 55\n */\nfun sumPositiveIntegers(n: Int): Int {\nvar totalSum = 0\n    for (i in 1..n) {\n        totalSum += i\n    }\n    return totalSum\n}"}
{"kt_path": "2523/solution_2523.kt", "deepseek-coder-1.3b-instruct-KExercises-KStack-clean-bytecode-4bit-lora": "/**\n * This function takes two integers as input and returns the sum of all even numbers between them.\n *\n * @param start The starting integer.\n * @param end The ending integer.\n * @return The sum of all even numbers between start and end (inclusive).\n */\nfun sumEvenNumbers(start: Int, end: Int): Int {\nvar sum = 0\n    for (num in start..end) {\n        if (num % 2 == 0) {\n            sum += num\n        }\n    }\n    return sum\n}"}
{"kt_path": "918/solution_918.kt", "deepseek-coder-1.3b-instruct-KExercises-KStack-clean-bytecode-4bit-lora": "/**\n * This function checks if the budget is sufficient for a marketing campaign.\n *\n * @param budget The total budget allocated for the campaign.\n * @return A message indicating whether the budget is sufficient or not.\n */\nfun checkBudget(budget: Int): String {\nval minimumBudget = 4000\n\n    return if (budget < minimumBudget) {\n        \"Insufficient budget, please allocate more funds for the campaign.\"\n    } else {\n        \"Budget is sufficient for the marketing campaign.\"\n    }\n}"}
{"kt_path": "10520/solution_10520.kt", "deepseek-coder-1.3b-instruct-KExercises-KStack-clean-bytecode-4bit-lora": "/**\n * This function takes two integers as input and returns the sum of all even numbers between them.\n *\n * @param start The starting integer.\n * @param end The ending integer.\n * @return The sum of all even numbers between start and end (inclusive).\n */\nfun sumOfEvenNumbers(start: Int, end: Int): Int {\nvar sum = 0\n    for (num in start..end) {\n        if (num % 2 == 0) {\n            sum += num\n        }\n    }\n    return sum\n}"}
{"kt_path": "6399/solution_6399.kt", "deepseek-coder-1.3b-instruct-KExercises-KStack-clean-bytecode-4bit-lora": "/**\n * This function checks if a given percentage is within an acceptable range.\n *\n * @param percentage The percentage to be checked.\n * @return A string indicating whether the percentage is within the acceptable range.\n */\nfun checkPercentage(percentage: Int): String {\nval result = if (percentage in 95..98) {\n        \"Within acceptable range\"\n    } else {\n        \"Outside acceptable range\"\n    }\n    return result\n}"}
{"kt_path": "10731/solution_10731.kt", "deepseek-coder-1.3b-instruct-KExercises-KStack-clean-bytecode-4bit-lora": "/**\n * This function checks if a person is eligible for a certain job application based on their age,\n * experience, and education level.\n *\n * @param age The age of the person.\n * @param experience The years of experience in the field.\n * @param educationLevel The education level of the person.\n * @return A string indicating whether the person is eligible or not.\n */\nfun checkEligibility(age: Int, experience: Int, educationLevel: Int): String {\nreturn if (age >= 18 && experience >= 5 && educationLevel >= 2) {\n        \"Eligible\"\n    } else {\n        \"Not Eligible\"\n    }\n}"}
{"kt_path": "8756/solution_8756.kt", "deepseek-coder-1.3b-instruct-KExercises-KStack-clean-bytecode-4bit-lora": "/**\n * Given three integers, find the maximum value among them.\n *\n * @param a The first integer.\n * @param b The second integer.\n * @param c The third integer.\n * @return The maximum value among a, b, and c.\n */\nfun findMax(a: Int, b: Int, c: Int): Int {\nvar max = a\n\n    if (b > max) {\n        max = b\n    }\n\n    if (c > max) {\n        max = c\n    }\n\n    return max\n}"}
{"kt_path": "10964/solution_10964.kt", "deepseek-coder-1.3b-instruct-KExercises-KStack-clean-bytecode-4bit-lora": "/**\n * This function calculates the growth of an investment over a specified number of years.\n *\n * @param initialAmount The initial amount of the investment.\n * @param annualIncrease The annual increase in the investment.\n * @param years The number of years for which the investment growth is calculated.\n * @return The final amount of the investment after the specified number of years.\n */\nfun calculateInvestmentGrowth(initialAmount: Double, annualIncrease: Double, years: Int): Double {\nvar investment = initialAmount\n\n    repeat(years) {\n        investment += annualIncrease\n    }\n\n    return investment\n}"}
{"kt_path": "9201/solution_9201.kt", "deepseek-coder-1.3b-instruct-KExercises-KStack-clean-bytecode-4bit-lora": "/**\n * This function checks if a given number is close to zero.\n *\n * @param num The number to check.\n * @return True if the number is close to zero, False otherwise.\n */\nfun isCloseToZero(num: Double): Boolean {\nreturn num == 0.0 || num.abs() < 1e-9\n}"}
{"kt_path": "14784/solution_14784.kt", "deepseek-coder-1.3b-instruct-KExercises-KStack-clean-bytecode-4bit-lora": "/**\n * This function takes three integers as input and returns the sum of all multiples of the first integer\n * that are less than the second integer.\n *\n * @param lowerBound The lower bound of the range of numbers to check for multiples.\n * @param upperBound The upper bound of the range of numbers to check for multiples.\n * @param divisor The number to check for multiples.\n * @return The sum of all multiples of the divisor that are less than the upper bound.\n */\nfun sumOfMultiples(lowerBound: Int, upperBound: Int, divisor: Int): Int {\nvar sum = 0\n    for (num in lowerBound..upperBound) {\n        if (num % divisor == 0) {\n            sum += num\n        }\n    }\n    return sum\n}"}
{"kt_path": "12550/solution_12550.kt", "deepseek-coder-1.3b-instruct-KExercises-KStack-clean-bytecode-4bit-lora": "/**\n * This function checks the game conditions based on the given parameters.\n *\n * @param player1Score The score of the first player.\n * @param player2Score The score of the second player.\n * @param player3Score The score of the third player.\n * @param player4Score The score of the fourth player.\n * @return True if the game conditions are met, False otherwise.\n */\nfun checkGameConditions(player1Score: Int, player2Score: Int, player3Score: Int, player4Score: Int): Boolean {\nreturn player1Score >= 1000 && player2Score >= 50 && player3Score >= 10 && player4Score > 0\n}"}
{"kt_path": "2717/solution_2717.kt", "deepseek-coder-1.3b-instruct-KExercises-KStack-clean-bytecode-4bit-lora": "/**\n * Given a list, return the first element of the list.\n *\n * @param lst A list of elements.\n * @return The first element of the list.\n */\nfun getFirstElement(lst: List<Any>): Any {\nreturn lst[0]\n}"}
{"kt_path": "10259/solution_10259.kt", "deepseek-coder-1.3b-instruct-KExercises-KStack-clean-bytecode-4bit-lora": "/**\n * This function calculates the total price of a product based on its price and quantity.\n *\n * @param price The price of the product.\n * @param quantity The quantity of the product.\n * @return The total price of the product.\n */\nfun calculateTotalPrice(price: Float, quantity: Float): Float {\nval epsilon = 1.0e-4f\n\n    // Calculate the total price\n    val totalPrice = if (Math.abs(price) > epsilon) {\n        price * quantity\n    } else {\n        price * quantity - quantity\n    }\n\n    return totalPrice\n}"}
{"kt_path": "1510/solution_1510.kt", "deepseek-coder-1.3b-instruct-KExercises-KStack-clean-bytecode-4bit-lora": "/**\n * Given a list, return the last element of the list.\n *\n * @param lst A list of elements.\n * @return The last element of the list.\n */\nfun getLastElement(lst: List<Any>): Any {\nreturn lst.last()\n}"}
{"kt_path": "2099/solution_2099.kt", "deepseek-coder-1.3b-instruct-KExercises-KStack-clean-bytecode-4bit-lora": "/**\n * This function calculates the total distance covered by a runner.\n *\n * @param speed The speed of the runner in meters per second.\n * @param time The time taken by the runner in seconds.\n * @return The total distance covered by the runner in meters.\n */\nfun calculateTotalDistance(speed: Float, time: Float): Float {\nvar totalDistance = 0.0f\n    var i = 1\n    while (i <= time) {\n        totalDistance += speed\n        i++\n    }\n    return totalDistance\n}"}
{"kt_path": "9202/solution_9202.kt", "deepseek-coder-1.3b-instruct-KExercises-KStack-clean-bytecode-4bit-lora": "/**\n * This exercise requires you to write a function that checks if a given floating-point number has a significant decimal part.\n * The function should take two floating-point numbers as arguments and return true if the first number has a significant decimal part\n * that is greater than or equal to the second number, and false otherwise.\n *\n * Example:\n * hasSignificantDecimalPart(1.23, 0.45) -> true\n * hasSignificantDecimalPart(0.45, 1.23) -> false\n * hasSignificantDecimalPart(1.23, 1.23) -> false\n */\nfun hasSignificantDecimalPart(num1: Double, num2: Double): Boolean {\nreturn Math.abs(num1 - num2) >= Math.abs(num1)\n}"}
{"kt_path": "9289/solution_9289.kt", "deepseek-coder-1.3b-instruct-KExercises-KStack-clean-bytecode-4bit-lora": "/**\n * Given a tuple, this function returns a new tuple containing the elements from the specified start index to the end index (exclusive).\n *\n * @param t The input tuple.\n * @param start The starting index of the slice.\n * @param end The ending index of the slice.\n * @return A new tuple containing the elements from the specified start index to the end index (exclusive).\n */\nfun sliceTuple(t: List<Any>, start: Int, end: Int): List<Any> {\nreturn t.subList(start, end)\n}"}
{"kt_path": "222/solution_222.kt", "deepseek-coder-1.3b-instruct-KExercises-KStack-clean-bytecode-4bit-lora": "/**\n * This function calculates the profit made from selling a product.\n *\n * @param sellingPrice The selling price of the product.\n * @param costPrice The cost price of the product.\n * @param discount The discount percentage applied to the selling price.\n * @return The profit made from selling the product.\n */\nfun calculateProfit(sellingPrice: Double, costPrice: Double, discount: Double): Double {\nval profit = sellingPrice - costPrice\n    val discountedPrice = if (profit > 0) profit else -profit\n    val netProfit = discountedPrice * (1 - discount / 100)\n    return netProfit\n}"}
{"kt_path": "2704/solution_2704.kt", "deepseek-coder-1.3b-instruct-KExercises-KStack-clean-bytecode-4bit-lora": "/**\n * This exercise requires the athlete to calculate the sum of the running distance\n * for a given number of miles. The athlete should use a while loop to iterate\n * over a range of miles and add the running distance to the total sum.\n *\n * The athlete should also use a break statement to terminate the loop if the total\n * sum exceeds a certain threshold.\n *\n * Your task is to complete the code to calculate the sum of the running distance.\n *\n * @return The sum of the running distance.\n */\nfun calculateSum(): Double {\nvar totalDistance = 0.0\n    var distanceStep = 0.1\n\n    while (true) {\n        totalDistance += distanceStep\n        distanceStep += 0.01\n\n        if (totalDistance > 1000) {\n            break\n        }\n    }\n\n    return totalDistance\n}"}
{"kt_path": "7036/solution_7036.kt", "deepseek-coder-1.3b-instruct-KExercises-KStack-clean-bytecode-4bit-lora": "/**\n * This function calculates the total expenses of a business.\n *\n * @param expensesList A list of expenses for the business.\n * @return The total expenses of the business.\n */\nfun calculateExpenses(expensesList: List<Double>): Double {\nreturn expensesList.sum()\n}"}
{"kt_path": "7097/solution_7097.kt", "deepseek-coder-1.3b-instruct-KExercises-KStack-clean-bytecode-4bit-lora": "/**\n * Given a tuple of animals and an index, this function returns the animal at the given index.\n *\n * @param animalTuple A tuple containing the names of animals.\n * @param index The index of the animal to be returned.\n * @return The animal at the given index.\n */\nfun findAnimal(animalTuple: List<String>, index: Int): String {\nreturn animalTuple[index]\n}"}
{"kt_path": "6743/solution_6743.kt", "deepseek-coder-1.3b-instruct-KExercises-KStack-clean-bytecode-4bit-lora": "/**\n * Given a list of integers, convert it to a set.\n *\n * @param data A list of integers.\n * @return A set containing the elements of the input list.\n */\nfun toSet(data: List<Int>): Set<Int> {\nreturn data.toSet()\n}"}
{"kt_path": "14646/solution_14646.kt", "deepseek-coder-1.3b-instruct-KExercises-KStack-clean-bytecode-4bit-lora": "/**\n * This function checks if a person is eligible for a promotion based on their age and salary.\n *\n * @param age The age of the person.\n * @param salary The salary of the person.\n * @return True if the person is eligible for a promotion, False otherwise.\n */\nfun checkPromotionEligibility(age: Int, salary: Double): Boolean {\nreturn if (age < 25 || age > 40) {\n        salary >= 5000\n    } else {\n        false\n    }\n}"}
{"kt_path": "1671/solution_1671.kt", "deepseek-coder-1.3b-instruct-KExercises-KStack-clean-bytecode-4bit-lora": "/**\n * Given a dictionary, create a tuple containing the keys and values of the dictionary.\n *\n * @param dictionary A dictionary containing key-value pairs.\n * @return A tuple containing the keys and values of the dictionary.\n */\nfun createTupleFromDictionary(dictionary: Map<String, Any>): List<Pair<String, Any>> {\nreturn dictionary.toList()\n}"}
{"kt_path": "13442/solution_13442.kt", "deepseek-coder-1.3b-instruct-KExercises-KStack-clean-bytecode-4bit-lora": "/**\n * This exercise requires you to write a function that takes two integers as input and prints all the even numbers between them.\n *\n * @param start The starting number of the range.\n * @param end The ending number of the range.\n */\nfun printEvenNumbers(start: Int, end: Int) {\nfor (num in start..end) {\n        if (num % 2 == 0) {\n            println(num)\n        }\n    }\n}"}
{"kt_path": "13338/solution_13338.kt", "deepseek-coder-1.3b-instruct-KExercises-KStack-clean-bytecode-4bit-lora": "/**\n * Given a list of photo data, convert it into a set.\n *\n * @param photoData A list of photo data.\n * @return A set containing the photo data.\n */\nfun convertToSet(photoData: List<String>): Set<String> {\nreturn photoData.toSet()\n}"}
{"kt_path": "8409/solution_8409.kt", "deepseek-coder-1.3b-instruct-KExercises-KStack-clean-bytecode-4bit-lora": "/**\n * This function calculates the total cost of a product based on its price and quantity.\n *\n * @param price The price of the product.\n * @param quantity The quantity of the product.\n * @return The total cost of the product.\n */\nfun calculateTotalCost(price: Double, quantity: Double): Double {\nval totalCost = price * quantity\n    val discount = if (totalCost > 1000) totalCost * 0.1 else 0.0\n    val netTotalCost = totalCost - discount\n    return netTotalCost\n}"}
{"kt_path": "5263/solution_5263.kt", "deepseek-coder-1.3b-instruct-KExercises-KStack-clean-bytecode-4bit-lora": "/**\n * This function takes four boolean values as input and performs various operations on them.\n * It returns true if the number of true values is greater than or equal to 2, otherwise it returns false.\n *\n * @param a Boolean value\n * @param b Boolean value\n * @param c Boolean value\n * @param d Boolean value\n * @return True if the number of true values is greater than or equal to 2, otherwise False\n */\nfun operationsQuiz(a: Boolean, b: Boolean, c: Boolean, d: Boolean): Boolean {\nvar count = 0\n\n    if (a) {\n        count++\n    }\n\n    if (b) {\n        count++\n    }\n\n    if (c) {\n        count++\n    }\n\n    if (d) {\n        count++\n    }\n\n    return count >= 2\n}"}
{"kt_path": "7005/solution_7005.kt", "deepseek-coder-1.3b-instruct-KExercises-KStack-clean-bytecode-4bit-lora": "/**\n * Given a set, convert it to a list and return it.\n *\n * @param s A set containing elements.\n * @return A list containing the elements of the set.\n */\nfun convertSetToList(s: Set<Any>): List<Any> {\nreturn s.toList()\n}"}
{"kt_path": "7004/solution_7004.kt", "deepseek-coder-1.3b-instruct-KExercises-KStack-clean-bytecode-4bit-lora": "/**\n * This exercise requires converting a list to a set.\n *\n * Given a list, the task is to convert it into a set.\n *\n * @param lst A list of elements.\n * @return A set containing the elements of the input list.\n */\nfun convertListToSet(lst: List<Any>): Set<Any> {\nreturn lst.toSet()\n}"}
{"kt_path": "1559/solution_1559.kt", "deepseek-coder-1.3b-instruct-KExercises-KStack-clean-bytecode-4bit-lora": "/**\n * This function takes a list of game data and converts it into a set.\n *\n * @param gameData A list of game data.\n * @return A set containing the game data.\n */\nfun convertToSet(gameData: List<Any>): Set<Any> {\nreturn gameData.toSet()\n}"}
{"kt_path": "14689/solution_14689.kt", "deepseek-coder-1.3b-instruct-KExercises-KStack-clean-bytecode-4bit-lora": "/**\n * This exercise requires you to write a function that prints all the odd numbers from 1 to a given number.\n *\n * @param n The upper limit of the range of numbers to be printed.\n */\nfun printOddNumbers(n: Int) {\n// Iterate over the range from 1 to n\n    for (i in 1..n) {\n        // Check if the number is odd\n        if (i % 2 != 0) {\n            // Print the odd number\n            println(i)\n        }\n    }\n}"}
{"kt_path": "13400/solution_13400.kt", "deepseek-coder-1.3b-instruct-KExercises-KStack-clean-bytecode-4bit-lora": "/**\n * This function takes four integers as input and returns the greater number.\n *\n * @param num1 The first number.\n * @param num2 The second number.\n * @param num3 The third number.\n * @param num4 The fourth number.\n * @return The greater number between num1, num2, num3, and num4.\n */\nfun findBiggerNumber(num1: Int, num2: Int, num3: Int, num4: Int): Int {\nreturn if (num1 > num2) {\n        if (num1 > num3) {\n            if (num1 > num4) {\n                num1\n            } else {\n                num4\n            }\n        } else {\n            if (num2 > num3) {\n                if (num2 > num4) {\n                    num2\n                } else {\n                    num4\n                }\n            } else {\n                if (num3 > num4) {\n                    num3\n                } else {\n                    num4\n                }\n            }\n        }\n    } else {\n        if (num2 > num3) {\n            if (num2 > num4) {\n                num2\n            } else {\n                num4\n            }\n        } else {\n            if (num3 > num4) {\n                num3\n            } else {\n                num4\n            }\n        }\n    }\n}"}
{"kt_path": "9661/solution_9661.kt", "deepseek-coder-1.3b-instruct-KExercises-KStack-clean-bytecode-4bit-lora": "/**\n * This exercise requires you to calculate the sum of all the numbers from 1 to n that are divisible by 5, 7, and 35.\n *\n * @param n The upper limit of the range.\n * @return The sum of all the numbers from 1 to n that are divisible by 5, 7, and 35.\n */\nfun calculateSums(n: Int): Int {\nvar totalSum = 0\n    for (i in 1..n) {\n        if (i % 5 == 0 && i % 7 == 0 && i % 35 == 0) {\n            totalSum += i\n        }\n    }\n    return totalSum\n}"}
{"kt_path": "8323/solution_8323.kt", "deepseek-coder-1.3b-instruct-KExercises-KStack-clean-bytecode-4bit-lora": "/**\n * This function calculates the remaining number of books after a certain number of days have passed.\n *\n * @param totalBooks The total number of books in the library.\n * @param daysPassed The number of days passed since the library opened.\n * @param booksPerDay The number of books added or removed each day.\n * @return The remaining number of books after the specified number of days have passed.\n */\nfun calculateRemainingBooks(totalBooks: Int, daysPassed: Int, booksPerDay: Int): Int {\nvar remainingBooks = totalBooks\n\n    // Calculate the number of books added or removed in the given number of days\n    for (day in 0 until daysPassed) {\n        remainingBooks += booksPerDay * 3\n    }\n\n    return remainingBooks\n}"}
{"kt_path": "236/solution_236.kt", "deepseek-coder-1.3b-instruct-KExercises-KStack-clean-bytecode-4bit-lora": "/**\n * This exercise requires you to calculate the floor area of a room given its length and width.\n * The floor area is calculated by multiplying the length and width.\n *\n * @param length The length of the room in meters.\n * @param width The width of the room in meters.\n * @return The floor area of the room in square meters.\n */\nfun computeFloorArea(length: Float, width: Float): Any {\nreturn if (length <= 0 || width <= 0) {\n        \"Invalid length or width\"\n    } else {\n        length * width\n    }\n}"}
{"kt_path": "14771/solution_14771.kt", "deepseek-coder-1.3b-instruct-KExercises-KStack-clean-bytecode-4bit-lora": "/**\n * Given a list of nurses and an index, return a tuple containing the elements at the specified index and the elements before it.\n *\n * @param nurse A list of nurses.\n * @param index The index of the element to be returned.\n * @return A tuple containing the elements at the specified index and the elements before it.\n */\nfun indexingAndSlicingTuples(nurse: List<String>, index: Int): List<String> {\nreturn nurse.subList(index, nurse.size)\n}"}
{"kt_path": "9943/solution_9943.kt", "deepseek-coder-1.3b-instruct-KExercises-KStack-clean-bytecode-4bit-lora": "/**\n * Given a list of numbers, add all negative integers to a set and return the set.\n *\n * @param numbers A list of numbers.\n * @return A set containing all negative integers from the input list.\n */\nfun addNegIntegersToSet(numbers: List<Int>): Set<Int> {\n// Convert the list to a set\n    val numSet = numbers.toSet()\n\n    // Add all negative integers to the set\n    // ...\n\n    return numSet\n}"}
{"kt_path": "8713/solution_8713.kt", "deepseek-coder-1.3b-instruct-KExercises-KStack-clean-bytecode-4bit-lora": "/**\n * Given a complex number, return the imaginary part.\n *\n * @param complexNumber A Pair containing the real and imaginary parts of a complex number.\n * @return The imaginary part of the complex number.\n */\nfun accessImaginaryPart(complexNumber: Pair<Double, Double>): Double {\nreturn complexNumber.second\n}"}
{"kt_path": "3773/solution_3773.kt", "deepseek-coder-1.3b-instruct-KExercises-KStack-clean-bytecode-4bit-lora": "/**\n * This function calculates the salary of a social worker based on their experience and level of expertise.\n *\n * @param experience The number of years of experience the social worker has.\n * @param expertiseLevel The level of expertise the social worker has.\n * @return The calculated salary of the social worker.\n */\nfun calculateSocialWorkerSalary(experience: Double, expertiseLevel: Int): Double {\nreturn when {\n        experience >= 10 -> experience * 1000\n        expertiseLevel >= 5 -> experience * 1.5\n        expertiseLevel >= 2 -> experience * 2\n        else -> experience * 3\n    }\n}"}
{"kt_path": "11/solution_11.kt", "deepseek-coder-1.3b-instruct-KExercises-KStack-clean-bytecode-4bit-lora": "/**\n * This function checks if the given three numbers are both odd and even.\n *\n * @param num1 The first number.\n * @param num2 The second number.\n * @param num3 The third number.\n * @return True if both the numbers are odd and even, False otherwise.\n */\nfun checkOddEvenNumbers(num1: Int, num2: Int, num3: Int): Boolean {\nvar count = 0\n\n    if (num1 % 2 == 0) {\n        count++\n    }\n\n    if (num2 % 2 == 0) {\n        count++\n    }\n\n    if (num3 % 2 == 0) {\n        count++\n    }\n\n    return count == 2\n}"}
{"kt_path": "1118/solution_1118.kt", "deepseek-coder-1.3b-instruct-KExercises-KStack-clean-bytecode-4bit-lora": "/**\n * Given a nurse's name, create an empty list to store the patient's data.\n *\n * @param nurse The name of the nurse.\n * @return An empty list containing the patient's data.\n */\nfun createEmptyComplementList(nurse: String): List<Any> {\nval patientData = mutableListOf<Any>()\n    return patientData\n}"}
{"kt_path": "8385/solution_8385.kt", "deepseek-coder-1.3b-instruct-KExercises-KStack-clean-bytecode-4bit-lora": "/**\n * Check if a number is prime.\n *\n * @param num The number to check.\n * @return True if the number is prime, False otherwise.\n */\nfun isPrime(num: Int): Boolean {\nreturn num > 1 && num.all { it != 0 && num % it == 0 }\n}"}
{"kt_path": "14396/solution_14396.kt", "deepseek-coder-1.3b-instruct-KExercises-KStack-clean-bytecode-4bit-lora": "/**\n * Given a list of coordinates, extract the x, y, and z coordinates from the list.\n *\n * @param coordinatesList A list of coordinates in the format (x, y, z).\n * @return A tuple containing the x, y, and z coordinates.\n */\nfun extractCoordinates(coordinatesList: List<Triple<Int, Int, Int>>): Triple<Int, Int, Int> {\nreturn coordinatesList[0]\n}"}
{"kt_path": "5828/solution_5828.kt", "deepseek-coder-1.3b-instruct-KExercises-KStack-clean-bytecode-4bit-lora": "/**\n * This function calculates the number of paint cans needed to paint a given wall area.\n *\n * @param wallAreas A list of the areas of the walls to be painted.\n * @param paintPrice The price per can of paint.\n * @return The number of paint cans needed to paint the given wall area.\n */\nfun calculatePaintCansNeeded(wallAreas: List<Double>, paintPrice: Double): Int {\nval totalArea = wallAreas.sum()\n    val paintCansNeeded = totalArea / paintPrice\n    return paintCansNeeded.toInt()\n}"}
