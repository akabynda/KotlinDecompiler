{"kt_path": "7434/solution_7434.kt", "deepseek-coder-1.3B-kexer": "fun test() {\n    // Convert the byte code into Kotlin code\n}"}
{"kt_path": "7824/solution_7824.kt", "deepseek-coder-1.3B-kexer": "fun testCountOddNumbers() {\n    val numbers = listOf(1, 2, 3, 4, 5, 6, 7, 8, 9, 10)\n    val oddNumbers = numbers.filter { it % 2 != 0 }\n    println(\"Number of odd numbers: ${oddNumbers.size}\")\n}"}
{"kt_path": "2614/solution_2614.kt", "deepseek-coder-1.3B-kexer": "fun investigateSituation() {\n    // Convert the byte-code into Kotlin code\n    // Output only the Kotlin code\n}"}
{"kt_path": "4477/solution_4477.kt", "deepseek-coder-1.3B-kexer": "fun getLeadII(): Int {\n    return 0\n}"}
{"kt_path": "4476/solution_4476.kt", "deepseek-coder-1.3B-kexer": "fun getHeartRate(): Int {\n    return 0\n}"}
{"kt_path": "8909/solution_8909.kt", "deepseek-coder-1.3B-kexer": "/**\n * This function takes an integer as input and returns the result of parentFunction(input).\n *\n * @param input An integer.\n * @return The result of parentFunction(input).\n */\nfun convertToKotlin(input: Int): Int {\n    return parentFunction(input)\n}\n\nfun parentFunction(input: Int): Int {\n    return input\n}"}
{"kt_path": "4699/solution_4699.kt", "deepseek-coder-1.3B-kexer": "fun hasLicense(license: Boolean): Boolean {\n    return license\n}"}
{"kt_path": "6126/solution_6126.kt", "deepseek-coder-1.3B-kexer": "fun checkBoolean(boolean: Boolean): Boolean {\n    return boolean\n}"}
{"kt_path": "5226/solution_5226.kt", "deepseek-coder-1.3B-kexer": "fun intersectPrecedenceTuple(): Boolean {\n    // Convert the byte-code to Kotlin code\n    // Output only the Kotlin code\n    return false\n}"}
{"kt_path": "652/solution_652.kt", "deepseek-coder-1.3B-kexer": "fun checkFloatDivision(a: Float, b: Float): Boolean {\n    return a / b == a.toDouble().toFloat()\n}"}
{"kt_path": "558/solution_558.kt", "deepseek-coder-1.3B-kexer": "/**\n * This function takes two integers as input and returns the result of the XOR operation between them.\n */\nfun function1(a: Int, b: Int): Int {\n    return a xor b\n}"}
{"kt_path": "13973/solution_13973.kt", "deepseek-coder-1.3B-kexer": "fun divide(a: Int, b: Int): Int {\n    return a / b\n}"}
{"kt_path": "13972/solution_13972.kt", "deepseek-coder-1.3B-kexer": "fun multiply(a: Int, b: Int): Int {\n    return a * b\n}"}
{"kt_path": "13970/solution_13970.kt", "deepseek-coder-1.3B-kexer": "/**\n * This function takes an integer as input and increases it by 1 using the addition assignment operator.\n *\n * @param num The integer to be increased.\n * @return The increased integer.\n */\nfun increaseByOne(num: Int): Int {\n    var result = num\n    result++\n    return result\n}"}
{"kt_path": "1606/solution_1606.kt", "deepseek-coder-1.3B-kexer": "/**\n * This function takes two integers as input and returns the remainder of their division.\n */\nfun getRemainder(num1: Int, num2: Int): Int {\n    return num1 % num2\n}"}
{"kt_path": "3900/solution_3900.kt", "deepseek-coder-1.3B-kexer": "fun multiplyNumbers(num1: Int, num2: Int): Int {\n    return num1 * num2\n}"}
{"kt_path": "13864/solution_13864.kt", "deepseek-coder-1.3B-kexer": "/**\n * This function takes two integers as input and returns the product of the two numbers.\n */\nfun calculateScore(num1: Int, num2: Int): Int {\n    return num1 * num2\n}"}
{"kt_path": "7751/solution_7751.kt", "deepseek-coder-1.3B-kexer": "fun getComplement(num: Int): Int {\n    return num.inv()\n}"}
{"kt_path": "9566/solution_9566.kt", "deepseek-coder-1.3B-kexer": "/**\n * This function takes two integers as input and returns the velocity of an object.\n *\n * @param distance The distance traveled by the object.\n * @param time The time taken to travel the distance.\n * @return The velocity of the object.\n */\nfun calculateVelocity(distance: Int, time: Int): Int {\n    val velocity = distance / time\n    return velocity\n}"}
{"kt_path": "4903/solution_4903.kt", "deepseek-coder-1.3B-kexer": "fun calculateDayPublished(year: Int): Int {\n    return year + 1\n}"}
{"kt_path": "11380/solution_11380.kt", "deepseek-coder-1.3B-kexer": "fun determineWallArea(length: Int, width: Int): Int {\n    return length * width\n}"}
{"kt_path": "1194/solution_1194.kt", "deepseek-coder-1.3B-kexer": "/**\n * This function takes two integers and performs a while loop subtraction operation.\n *\n * @param num1 The first integer.\n * @param num2 The second integer.\n * @return The result of the while loop subtraction operation.\n */\nfun whileSubtraction(num1: Int, num2: Int): Int {\n    var result = num1\n    while (result >= num2) {\n        result -= num2\n    }\n    return result\n}"}
{"kt_path": "7844/solution_7844.kt", "deepseek-coder-1.3B-kexer": "fun divideNumbers(num1: Double, num2: Double): Double {\n    return num1 / num2\n}"}
{"kt_path": "599/solution_599.kt", "deepseek-coder-1.3B-kexer": "fun calculateRoomArea(length: Double, width: Double): Double {\n    val area = length * width\n    return area\n}"}
{"kt_path": "8402/solution_8402.kt", "deepseek-coder-1.3B-kexer": "fun calculateNetIncome(salary: Float, bonus: Float): Float {\n    return salary - bonus\n}"}
{"kt_path": "11629/solution_11629.kt", "deepseek-coder-1.3B-kexer": "/**\n * This function takes two floating-point numbers as input and returns the slope of the line formed by the two points.\n *\n * @param x1 The x-coordinate of the first point.\n * @param y1 The y-coordinate of the first point.\n * @param x2 The x-coordinate of the second point.\n * @param y2 The y-coordinate of the second point.\n * @return The slope of the line formed by the two points.\n */\nfun calculateSlope(x1: Double, y1: Double, x2: Double, y2: Double): Double {\n    val slope = (y2 - y1) / (x2 - x1)\n    return slope\n}"}
{"kt_path": "2587/solution_2587.kt", "deepseek-coder-1.3B-kexer": "/**\n * This function takes the length and width of a room and calculates its area.\n */\nfun calculateRoomArea(length: Double, width: Double): Double {\n    val area = length * width\n    return area\n}"}
{"kt_path": "5733/solution_5733.kt", "deepseek-coder-1.3B-kexer": "fun calculateBuildingArea(length: Float, width: Float): Float {\n    return length * width\n}"}
{"kt_path": "12144/solution_12144.kt", "deepseek-coder-1.3B-kexer": "/**\n * This function takes two numbers as input and returns the profits earned.\n *\n * @param expenses The total expenses incurred.\n * @param revenue The total revenue generated.\n * @return The profits earned.\n */\nfun calculateProfits(expenses: Double, revenue: Double): Double {\n    val profits = revenue - expenses\n    return profits\n}"}
{"kt_path": "9763/solution_9763.kt", "deepseek-coder-1.3B-kexer": "fun calculateFinalPrice(discount: Double, price: Double): Double {\n    return price - (price * discount)\n}"}
{"kt_path": "11762/solution_11762.kt", "deepseek-coder-1.3B-kexer": "/**\n * This function takes the length and width of a room and calculates its area.\n */\nfun calculateRoomArea(length: Double, width: Double): Double {\n    val area = length * width\n    return area\n}"}
{"kt_path": "9178/solution_9178.kt", "deepseek-coder-1.3B-kexer": "/**\n * This function takes two arguments: mass and acceleration, and calculates the gravitational force exerted on an object.\n * The gravitational force is calculated using the formula: F = mass * acceleration.\n *\n * @param mass The mass of the object in kilograms.\n * @param acceleration The acceleration of the object in meters per second squared.\n * @return The gravitational force exerted on the object in newtons.\n */\nfun calculateGravityForce(mass: Double, acceleration: Double): Double {\n    val force = mass * acceleration\n    return force\n}"}
{"kt_path": "8545/solution_8545.kt", "deepseek-coder-1.3B-kexer": "fun calculateConversionRate(initialAmount: Int, finalAmount: Int): Double {\n    val conversionRate = finalAmount.toDouble() / initialAmount.toDouble()\n    return conversionRate\n}"}
{"kt_path": "13968/solution_13968.kt", "deepseek-coder-1.3B-kexer": "/**\n * This function takes two distances as arguments and returns the average distance\n * achieved by an athlete.\n */\nfun athletePerformanceDistance(distance1: Double, distance2: Double): Double {\n    val averageDistance = (distance1 + distance2) / 2\n    return averageDistance\n}"}
{"kt_path": "7841/solution_7841.kt", "deepseek-coder-1.3B-kexer": "fun assignXor(x: Int, y: Int): Int {\n    return x xor y\n}"}
{"kt_path": "2909/solution_2909.kt", "deepseek-coder-1.3B-kexer": "fun addNumbers(a: Int, b: Int): Int {\n    return a + b\n}"}
{"kt_path": "302/solution_302.kt", "deepseek-coder-1.3B-kexer": "/**\n * This function takes two integers as input and returns the XOR of the two numbers.\n */\nfun calculateXor(num1: Int, num2: Int): Int {\n    return num1 xor num2\n}"}
{"kt_path": "12753/solution_12753.kt", "deepseek-coder-1.3B-kexer": "fun trimLumber(length: Int, width: Int): Int {\n    return length - width\n}"}
{"kt_path": "5694/solution_5694.kt", "deepseek-coder-1.3B-kexer": "/**\n * This function takes two integers representing the age of a person and calculates their age.\n *\n * @param age1 The age of the person.\n * @param age2 The age of the person.\n * @return The calculated age.\n */\nfun calculateAge(age1: Int, age2: Int): Int {\n    val ageDifference = age1 - age2\n    return ageDifference\n}"}
{"kt_path": "7772/solution_7772.kt", "deepseek-coder-1.3B-kexer": "fun increaseSpeed(speed: Int, distance: Int): Int {\n    return speed + distance\n}"}
{"kt_path": "13321/solution_13321.kt", "deepseek-coder-1.3B-kexer": "/**\n * This function takes two integers as input and returns the result of the XOR operation between them.\n */\nfun xorOperation(num1: Int, num2: Int): Int {\n    return num1 xor num2\n}"}
{"kt_path": "3882/solution_3882.kt", "deepseek-coder-1.3B-kexer": "/**\n * This function takes two integers representing the number of hours worked by a nurse\n * and the number of days worked, and calculates the total number of hours worked.\n *\n * @param hoursWorked The number of hours worked by the nurse.\n * @param daysWorked The number of days worked by the nurse.\n * @return The total number of hours worked by the nurse.\n */\nfun calcTotalHours(hoursWorked: Int, daysWorked: Int): Int {\n    val totalHours = hoursWorked * daysWorked\n    return totalHours\n}"}
{"kt_path": "7919/solution_7919.kt", "deepseek-coder-1.3B-kexer": "/**\n * This function takes two integers as input and performs an addition operation on them.\n * The function returns the result of the addition operation.\n */\nfun addOrOperation(num1: Int, num2: Int): Int {\n    return num1 + num2\n}"}
{"kt_path": "640/solution_640.kt", "deepseek-coder-1.3B-kexer": "/**\n * This function takes two integers and multiplies them, then assigns the result back to the first argument.\n *\n * @param a The first integer.\n * @param b The second integer.\n * @return The result of multiplying a and b.\n */\nfun multiplyAndAssign(a: Int, b: Int): Int {\n    val result = a * b\n    a = result\n    return result\n}"}
{"kt_path": "797/solution_797.kt", "deepseek-coder-1.3B-kexer": "fun calculateTax(income: Float, taxRate: Float): Float {\n    val tax = income * taxRate\n    return tax\n}"}
{"kt_path": "3049/solution_3049.kt", "deepseek-coder-1.3B-kexer": "fun calculateVolume(length: Int, width: Int, height: Int): Int {\n    val volume = length * width * height\n    return volume\n}"}
{"kt_path": "6128/solution_6128.kt", "deepseek-coder-1.3B-kexer": "/**\n * This function takes an integer as input and returns its absolute value.\n */\nfun absoluteValue(num: Int): Int {\n    return Math.abs(num)\n}"}
{"kt_path": "5969/solution_5969.kt", "deepseek-coder-1.3B-kexer": "/**\n * Given two integers, find the negative index of the second integer in the first integer's binary representation.\n *\n * @param num1 The first integer.\n * @param num2 The second integer.\n * @return The negative index of the second integer in the first integer's binary representation.\n */\nfun getNegativeIndex(num1: Int, num2: Int): Int {\n    val binaryRepresentation = Integer.toBinaryString(num1)\n    val index = binaryRepresentation.indexOf(Integer.toBinaryString(num2))\n    return -index - 1\n}"}
{"kt_path": "1224/solution_1224.kt", "deepseek-coder-1.3B-kexer": "fun subtractIntegers(a: Int, b: Int): Int {\n    return a - b\n}"}
{"kt_path": "1810/solution_1810.kt", "deepseek-coder-1.3B-kexer": "fun calculateLandArea(width: Int, height: Int): Int {\n    return width * height\n}"}
{"kt_path": "1562/solution_1562.kt", "deepseek-coder-1.3B-kexer": "fun calculateTax(income: Float, taxRate: Float): Float {\n    val tax = income * taxRate\n    return tax\n}"}
{"kt_path": "2870/solution_2870.kt", "deepseek-coder-1.3B-kexer": "/**\n * Given two integers, calculate the fine based on the following conditions:\n * - If the difference between the two numbers is less than or equal to 10, return 0.\n * - If the difference is between 11 and 20 (inclusive), return 100.\n * - If the difference is greater than 20, return 200.\n *\n * @param num1 The first number.\n * @param num2 The second number.\n * @return The calculated fine.\n */\nfun calculateFine(num1: Int, num2: Int): Int {\n    val difference = Math.abs(num1 - num2)\n    return when {\n        difference <= 10 -> 0\n        difference in 11..20 -> 100\n        else -> 200\n    }\n}"}
{"kt_path": "6759/solution_6759.kt", "deepseek-coder-1.3B-kexer": "fun averageSpeed(speed1: Float, speed2: Float): Float {\n    return (speed1 + speed2) / 2\n}"}
{"kt_path": "2736/solution_2736.kt", "deepseek-coder-1.3B-kexer": "fun calculatePatientAge(age: Int, height: Int): Int {\n    return age - height\n}"}
{"kt_path": "4004/solution_4004.kt", "deepseek-coder-1.3B-kexer": "/**\n * This function takes two integers representing the patient's age and the current year,\n * and returns the age of the patient in years.\n */\nfun calculatePatientAge(patientAge: Int, currentYear: Int): Int {\n    val ageInYears = currentYear - patientAge\n    return ageInYears\n}"}
{"kt_path": "12220/solution_12220.kt", "deepseek-coder-1.3B-kexer": "/**\n * This function takes two integers as input and performs an AND operation on them.\n * The function returns the result of the AND operation.\n */\nfun updateAndOperator(num1: Int, num2: Int): Int {\n    // Perform the AND operation on the two numbers\n    val result = num1 and num2\n    return result\n}"}
{"kt_path": "14509/solution_14509.kt", "deepseek-coder-1.3B-kexer": "fun calculateRoomArea(length: Int, width: Int): Int {\n    val area = length * width\n    return area\n}"}
{"kt_path": "13481/solution_13481.kt", "deepseek-coder-1.3B-kexer": "/**\n * This function takes the shutter speed, aperture, and ISO value as arguments and calculates the final shutter speed.\n *\n * @param shutterSpeed The initial shutter speed.\n * @param aperture The aperture value.\n * @param iso The ISO value.\n * @return The final shutter speed.\n */\nfun calculateShutterSpeed(shutterSpeed: Double, aperture: Int, iso: Double): Double {\n    val finalShutterSpeed = shutterSpeed * (aperture / iso)\n    return finalShutterSpeed\n}"}
{"kt_path": "10181/solution_10181.kt", "deepseek-coder-1.3B-kexer": "fun calculateTax(income: Float, taxRate: Float): Float {\n    val tax = income * taxRate\n    return tax\n}"}
{"kt_path": "3783/solution_3783.kt", "deepseek-coder-1.3B-kexer": "/**\n * This function calculates the voltage drop across a circuit given the voltage source and resistance.\n *\n * @param voltageSource The voltage source in volts.\n * @param resistance The resistance in ohms.\n * @return The voltage drop in volts.\n */\nfun calculateVoltageDrop(voltageSource: Int, resistance: Int): Int {\n    val voltageDrop = voltageSource * resistance\n    return voltageDrop\n}"}
{"kt_path": "7670/solution_7670.kt", "deepseek-coder-1.3B-kexer": "fun identityAssignment(): Boolean {\n    // Convert the byte code into Kotlin code\n    val byteCode = \"\"\"\n        public final class Solution_7670Kt {\n            public static final boolean identityAssignment() {\n                Code:\n                    0: iconst_5\n                    1: istore_0\n                    2: iload_0\n                    3: istore_1\n                    4: iconst_1\n                    5: ireturn\n            }\n        }\n    \"\"\".trimIndent()\n\n    // Compile the Kotlin code\n    val kotlinCode = compileKotlin(byteCode)\n\n    // Execute the Kotlin code\n    val result = kotlinCode.identityAssignment()\n\n    return result\n}"}
{"kt_path": "13453/solution_13453.kt", "deepseek-coder-1.3B-kexer": "fun calculateTax(income: Float, taxRate: Float): Float {\n    val taxAmount = income * taxRate\n    return taxAmount\n}"}
{"kt_path": "6574/solution_6574.kt", "deepseek-coder-1.3B-kexer": "/**\n * This function takes two floats as input and calculates the profit.\n *\n * @param cost The cost of the product.\n * @param sellingPrice The selling price of the product.\n * @return The profit earned from selling the product.\n */\nfun calculateProfit(cost: Float, sellingPrice: Float): Float {\n    val profit = sellingPrice - cost\n    return profit\n}"}
{"kt_path": "985/solution_985.kt", "deepseek-coder-1.3B-kexer": "fun multiplyAssignAndRepeat(a: Int, b: Int): Int {\n    var result = a\n    repeat(b) {\n        result += a\n    }\n    return result\n}"}
{"kt_path": "3069/solution_3069.kt", "deepseek-coder-1.3B-kexer": "fun calculateStress(temperature: Float, pressure: Float): Float {\n    // Calculate stress based on temperature and pressure\n    val stress = temperature * pressure\n    return stress\n}"}
{"kt_path": "9567/solution_9567.kt", "deepseek-coder-1.3B-kexer": "/**\n * This function takes three integers as input and returns the acceleration\n * calculated from the given formula: acceleration = (distance / time)\n */\nfun calculateAcceleration(distance: Int, time: Int, velocity: Int): Int {\n    val acceleration = distance / time\n    return acceleration\n}"}
{"kt_path": "9762/solution_9762.kt", "deepseek-coder-1.3B-kexer": "fun calculateDiscount(discount: Double): Double {\n    return discount * 0.2\n}"}
{"kt_path": "12787/solution_12787.kt", "deepseek-coder-1.3B-kexer": "fun calculatePower(base: Float, exponent: Float): Float {\n    return base.pow(exponent)\n}"}
{"kt_path": "14674/solution_14674.kt", "deepseek-coder-1.3B-kexer": "fun calculateTaxes(income: Float, expenses: Float): Float {\n    val taxRate = 0.15f\n    val taxes = income * taxRate - expenses\n    return taxes\n}"}
{"kt_path": "144/solution_144.kt", "deepseek-coder-1.3B-kexer": "fun calculateNetIncome(salary: Float, bonus: Float): Float {\n    return salary - bonus\n}"}
{"kt_path": "224/solution_224.kt", "deepseek-coder-1.3B-kexer": "fun calculateSalary(salary: Double): Int {\n    val roundedSalary = Math.round(salary)\n    return roundedSalary\n}"}
{"kt_path": "12602/solution_12602.kt", "deepseek-coder-1.3B-kexer": "fun calculateTotalIncome(income: Int, expenses: Int): Int {\n    val totalIncome = income + expenses\n    return totalIncome\n}"}
{"kt_path": "2061/solution_2061.kt", "deepseek-coder-1.3B-kexer": "fun calculateFurnitureArea(length: Int, width: Int): Int {\n    val area = length * width\n    return area\n}"}
{"kt_path": "1884/solution_1884.kt", "deepseek-coder-1.3B-kexer": "fun calculateWallArea(length: Float, width: Float): Float {\n    val area = length * width\n    return area\n}"}
{"kt_path": "5140/solution_5140.kt", "deepseek-coder-1.3B-kexer": "fun calculateNetIncome(salary: Float, bonus: Float): Float {\n    val netIncome = salary - bonus\n    return netIncome\n}"}
{"kt_path": "1945/solution_1945.kt", "deepseek-coder-1.3B-kexer": "fun subtractTaxidermyAnimals(animals: Int, taxidermy: Int): Int {\n    val result = animals - taxidermy\n    return result\n}"}
{"kt_path": "2025/solution_2025.kt", "deepseek-coder-1.3B-kexer": "fun calculateAnimalPopulation(numAnimals: Int, numBabies: Int): Int {\n    val population = numAnimals - numBabies\n    return population\n}"}
{"kt_path": "14511/solution_14511.kt", "deepseek-coder-1.3B-kexer": "/**\n * This function takes two integers as input and returns the number of lights required to illuminate all the rooms.\n *\n * @param numRooms Number of rooms in the house.\n * @param numLights Number of lights in the house.\n * @return The number of lights required to illuminate all the rooms.\n */\nfun calculateNumberOfLights(numRooms: Int, numLights: Int): Int {\n    var lightsRequired = 0\n    var roomsLeft = numRooms\n\n    while (roomsLeft > 0) {\n        val lightsRequiredInARoom = numLights / roomsLeft\n        lightsRequired += lightsRequiredInARoom\n        roomsLeft--\n    }\n\n    return lightsRequired\n}"}
{"kt_path": "13493/solution_13493.kt", "deepseek-coder-1.3B-kexer": "fun calculateDistance(x: Float, y: Float): Float {\n    val distance = Math.sqrt((x * x) + (y * y))\n    return distance\n}"}
{"kt_path": "4381/solution_4381.kt", "deepseek-coder-1.3B-kexer": "fun calculateAverageSpeed(distance: Float, time: Float): Float {\n    val averageSpeed = distance / time\n    return averageSpeed\n}"}
{"kt_path": "9587/solution_9587.kt", "deepseek-coder-1.3B-kexer": "/**\n * This function takes two boolean values and returns the result of the logical AND operation.\n *\n * @param a The first boolean value.\n * @param b The second boolean value.\n * @return The result of the logical AND operation.\n */\nfun bAnd(a: Boolean, b: Boolean): Boolean {\n    return if (a) b else false\n}"}
{"kt_path": "6576/solution_6576.kt", "deepseek-coder-1.3B-kexer": "fun calculateDividendRatio(dividend: Float, divisor: Float): Float {\n    return dividend / divisor\n}"}
{"kt_path": "11550/solution_11550.kt", "deepseek-coder-1.3B-kexer": "fun calculateAverageSpeed(distance: Float, time: Float): Float {\n    val averageSpeed = distance / time\n    return averageSpeed\n}"}
{"kt_path": "7386/solution_7386.kt", "deepseek-coder-1.3B-kexer": "fun intersectionAdditionAssignmentOperator(num: Int): Int {\n    var result = num\n    result += 12\n    return result\n}"}
{"kt_path": "12691/solution_12691.kt", "deepseek-coder-1.3B-kexer": "fun calculateRemainingBudget(totalBudget: Float, spentAmount: Float): Float {\n    val remainingBudget = totalBudget - spentAmount\n    return remainingBudget\n}"}
{"kt_path": "8209/solution_8209.kt", "deepseek-coder-1.3B-kexer": "fun calculateRequiredMaterials(materials: Float, materialsRequired: Float): Float {\n    val requiredMaterials = materials / materialsRequired\n    return requiredMaterials\n}"}
{"kt_path": "2049/solution_2049.kt", "deepseek-coder-1.3B-kexer": "/**\n * This function takes three arguments:\n * - price: the price of the item\n * - quantity: the quantity of the item\n * - discount: the discount percentage\n *\n * It calculates the final price after applying the discount.\n *\n * @param price The price of the item.\n * @param quantity The quantity of the item.\n * @param discount The discount percentage.\n * @return The final price after applying the discount.\n */\nfun calculatePrice(price: Double, quantity: Double, discount: Double): Double {\n    val finalPrice = price * quantity * (1 - discount / 100)\n    return finalPrice\n}"}
{"kt_path": "586/solution_586.kt", "deepseek-coder-1.3B-kexer": "fun calculateArea(length: Double, width: Double): Double {\n    val area = length * width\n    return area\n}"}
{"kt_path": "5139/solution_5139.kt", "deepseek-coder-1.3B-kexer": "fun calculateTax(income: Double, taxRate: Double): Double {\n    val tax = income * taxRate\n    return tax\n}"}
{"kt_path": "7904/solution_7904.kt", "deepseek-coder-1.3B-kexer": "/**\n * This function takes two floating-point numbers as input and returns the result of dividing the first number by the second number.\n * If the second number is zero, it returns null.\n */\nfun checkCurrent(current: Double, voltage: Double): Double? {\n    if (voltage == 0.0) {\n        return null\n    }\n    return current / voltage\n}"}
{"kt_path": "9335/solution_9335.kt", "deepseek-coder-1.3B-kexer": "fun calculateTax(income: Double, taxRate: Double): Double {\n    val tax = income * taxRate\n    return tax\n}"}
{"kt_path": "2329/solution_2329.kt", "deepseek-coder-1.3B-kexer": "fun calculateTotalCost(numItems: Int, itemPrice: Float): Float {\n    val totalCost = numItems * itemPrice\n    return totalCost\n}"}
{"kt_path": "6572/solution_6572.kt", "deepseek-coder-1.3B-kexer": "/**\n * This function takes two arguments:\n * - numberOfItems: an integer representing the number of items\n * - itemPrice: a float representing the price of each item\n *\n * It calculates the total price of all the items by multiplying the number of items with the item price.\n *\n * @param numberOfItems an integer representing the number of items\n * @param itemPrice a float representing the price of each item\n * @return totalPrice a float representing the total price of all the items\n */\nfun calculateTotalPrice(numberOfItems: Int, itemPrice: Float): Float {\n    val totalPrice = numberOfItems * itemPrice\n    return totalPrice\n}"}
{"kt_path": "8071/solution_8071.kt", "deepseek-coder-1.3B-kexer": "fun calculateArea(length: Double, width: Double): Double {\n    return length * width\n}"}
{"kt_path": "11310/solution_11310.kt", "deepseek-coder-1.3B-kexer": "fun calculateExpenses(numOfHours: Int, hourlyRate: Float): Float {\n    val expenses = numOfHours * hourlyRate\n    return expenses\n}"}
{"kt_path": "10435/solution_10435.kt", "deepseek-coder-1.3B-kexer": "fun calculateWeight(height: Double, age: Int): Double {\n    val weight = height * 2.54 * age\n    return weight\n}"}
{"kt_path": "5594/solution_5594.kt", "deepseek-coder-1.3B-kexer": "fun checkRealPart(real: Int, imaginary: Int): Boolean {\n    return real != 0\n}"}
{"kt_path": "1356/solution_1356.kt", "deepseek-coder-1.3B-kexer": "fun isNone(obj: Any?): Boolean {\n    return obj == null\n}"}
{"kt_path": "8902/solution_8902.kt", "deepseek-coder-1.3B-kexer": "/**\n * This function takes two numbers as input and calculates the power of the first number raised to the second number.\n *\n * @param base The base number.\n * @param exponent The exponent number.\n * @return The power of the base raised to the exponent.\n */\nfun calculatePower(base: Double, exponent: Double): Double {\n    return base.pow(exponent)\n}"}
{"kt_path": "6573/solution_6573.kt", "deepseek-coder-1.3B-kexer": "fun calculateAveragePrice(price: Float, quantity: Int): Float {\n    val averagePrice = price * quantity / 2\n    return averagePrice\n}"}
