{"kt_path": "7824/solution_7824.kt", "Qwen2.5-Coder-3B": "public final class Solution_7824Kt {\n    public companion object {\n        @JvmStatic\n        public fun testCountOddNumbers() {\n            // Implementation of the testCountOddNumbers function\n        }\n    }\n}"}
{"kt_path": "remisultan__multiarm-bandit-algorithm-kotlin__ead934d/core-bandit/src/main/kotlin/org/rsultan/bandit/algorithms/BanditAlgorithm.kt", "Qwen2.5-Coder-3B": "package org.rsultan.bandit.algorithms\n\ninterface BanditAlgorithm {\n    fun selectArm(): Int\n    fun update(arm: Int, reward: Float)\n}"}
{"kt_path": "13864/solution_13864.kt", "Qwen2.5-Coder-3B": "fun calculateScore(a: Int, b: Int): Int {\n    return a * b\n}"}
{"kt_path": "9763/solution_9763.kt", "Qwen2.5-Coder-3B": "fun calculateFinalPrice(price: Double, discount: Double): Double {\n    return price - discount\n}"}
{"kt_path": "8545/solution_8545.kt", "Qwen2.5-Coder-3B": "public class Solution_8545Kt {\n    public companion object {\n        public fun calculateConversionRate(from: Int, to: Int): Double {\n            return 0.0\n        }\n    }\n}"}
{"kt_path": "13968/solution_13968.kt", "Qwen2.5-Coder-3B": "fun athletePerformanceDistance(distance: Double, time: Double): Double {\n    return distance / time\n}"}
{"kt_path": "14509/solution_14509.kt", "Qwen2.5-Coder-3B": "fun calculateRoomArea(length: Int, width: Int): Int {\n    val area = length * width\n    return area\n}"}
{"kt_path": "7670/solution_7670.kt", "Qwen2.5-Coder-3B": "fun identityAssignment(): Boolean {\n    var a = 5\n    a = 1\n    return a == 1\n}"}
{"kt_path": "224/solution_224.kt", "Qwen2.5-Coder-3B": "public class Solution_224Kt {\n    public companion object {\n        public fun calculateSalary(salary: Double): Long {\n            return Math.round(salary).toLong()\n        }\n    }\n}"}
{"kt_path": "11310/solution_11310.kt", "Qwen2.5-Coder-3B": "fun calculateExpenses(amount: Int, rate: Float): Float {\n    val expenses = amount.toFloat() * rate\n    return expenses\n}"}
{"kt_path": "10330/solution_10330.kt", "Qwen2.5-Coder-3B": "fun calculatePower(base: Double, exponent: Double): Double {\n    return base * exponent\n}"}
{"kt_path": "11101/solution_11101.kt", "Qwen2.5-Coder-3B": "fun checkPositiveInteger(number: Int): Boolean {\n    return number > 0\n}"}
{"kt_path": "432/solution_432.kt", "Qwen2.5-Coder-3B": "fun calculateResistance(resistance1: Double, resistance2: Double): Double {\n    return resistance1 / resistance2\n}"}
{"kt_path": "n81ur3__kotlin-coding-challenges__fdc5941/src/main/kotlin/adventofcode2018/Day04ReposeRecord.kt", "Qwen2.5-Coder-3B": "package adventofcode2018\n\nclass Day04ReposeRecord {\n    constructor() {\n        // Constructor implementation\n    }\n}"}
{"kt_path": "8671/solution_8671.kt", "Qwen2.5-Coder-3B": "fun calculateAverageSpeed(distance: Double, time: Double): Double {\n    return distance / time\n}"}
{"kt_path": "5601/solution_5601.kt", "Qwen2.5-Coder-3B": "fun calculateCircuitPower(voltage: Double, resistance: Double): Double {\n    val power = voltage * resistance\n    return power\n}"}
{"kt_path": "10329/solution_10329.kt", "Qwen2.5-Coder-3B": "fun calculateResistance(resistance1: Double, resistance2: Double): Double {\n    return resistance1 / resistance2\n}"}
{"kt_path": "n81ur3__kotlin-coding-challenges__fdc5941/src/main/kotlin/adventofcode2020/Day19MonsterMessage.kt", "Qwen2.5-Coder-3B": "package adventofcode2020\n\nclass Day19MonsterMessage {\n    constructor() {\n        // Constructor implementation\n    }\n}"}
{"kt_path": "n81ur3__kotlin-coding-challenges__fdc5941/src/main/kotlin/adventofcode2020/Day07HandyHaversacks.kt", "Qwen2.5-Coder-3B": "package adventofcode2020\n\nclass Day07HandyHaversacks() {\n    // Constructor implementation\n}"}
{"kt_path": "7007/solution_7007.kt", "Qwen2.5-Coder-3B": "fun isLongFlight(seats: Int, distance: Int): Boolean {\n    return seats >= 100 && distance >= 1000\n}"}
{"kt_path": "3696/solution_3696.kt", "Qwen2.5-Coder-3B": "fun findCommonArea(a: Float, b: Float, c: Float): Float {\n    return a * b * c\n}"}
{"kt_path": "9314/solution_9314.kt", "Qwen2.5-Coder-3B": "fun isEven(number: Int): Boolean {\n    return number % 2 == 0\n}"}
{"kt_path": "10577/solution_10577.kt", "Qwen2.5-Coder-3B": "fun isEven(number: Int): Boolean {\n    return number % 2 == 0\n}"}
{"kt_path": "n81ur3__kotlin-coding-challenges__fdc5941/src/main/kotlin/adventofcode2018/Day06ChronalCoordinates.kt", "Qwen2.5-Coder-3B": "import adventofcode2018.Day06ChronalCoordinates\n\nfun main() {\n    val day06 = Day06ChronalCoordinates()\n    // Additional code for the main function\n}"}
{"kt_path": "7819/solution_7819.kt", "Qwen2.5-Coder-3B": "fun calculatePowerConsumption(power: Double): Double {\n    val consumption = 5.0 / power\n    return consumption\n}"}
{"kt_path": "8829/solution_8829.kt", "Qwen2.5-Coder-3B": "fun calculateDailyCaloricNeeds(weight: Float, height: Float): Float {\n    val heightInMeters = height / 100.0f\n    val dailyCaloricNeeds = weight * 24.0f * heightInMeters\n    return dailyCaloricNeeds\n}"}
{"kt_path": "6256/solution_6256.kt", "Qwen2.5-Coder-3B": "fun notEqualNone(a: Int?, b: Int?): Boolean {\n    return a != null && b != null\n}"}
{"kt_path": "4238/solution_4238.kt", "Qwen2.5-Coder-3B": "fun checkSpeedLimit(speed: Float, limit: Float): Boolean {\n    return speed > limit\n}"}
{"kt_path": "3868/solution_3868.kt", "Qwen2.5-Coder-3B": "fun sumOfNumbers(a: Int, b: Int): Int {\n    val sum = a + b\n    return if (sum <= 10) {\n        sum * 2\n    } else {\n        sum\n    }\n}"}
{"kt_path": "5766/solution_5766.kt", "Qwen2.5-Coder-3B": "fun shiftAndMultiplyAssignment(a: Int, b: Int): Int {\n    var result = a\n    result = result shl b\n    result = result ushr b\n    result = result * b\n    return result\n}"}
{"kt_path": "4304/solution_4304.kt", "Qwen2.5-Coder-3B": "fun architectMath(a: Int, b: Int): Int {\n    val result = a * 2 + b + 1\n    return result\n}"}
{"kt_path": "alebedev__aoc2022__d6ba46b/src/main/kotlin/Map.kt", "Qwen2.5-Coder-3B": "import AocMap\n\nfun main(args: Array<String>) {\n    AocMap.INSTANCE.solve()\n}\n\nfun main() {\n    main(arrayOf<String>())\n}"}
{"kt_path": "7168/solution_7168.kt", "Qwen2.5-Coder-3B": "fun multiplyAndModulo(a: Int, b: Int, c: Int, d: Int): Int {\n    var result = a * b\n    result %= c\n    return result\n}"}
{"kt_path": "5304/solution_5304.kt", "Qwen2.5-Coder-3B": "fun numberOfCircuits(a: Int, b: Int, c: Int): Int {\n    var count = 0\n    var remainder = b\n    while (remainder > 0) {\n        count++\n        remainder = b % a\n    }\n    return count\n}"}
{"kt_path": "7099/solution_7099.kt", "Qwen2.5-Coder-3B": "fun calculateDistance(x: Double, y: Double, z: Double): Double {\n    val distanceSquared = x * x + y * y + z * z\n    return Math.sqrt(distanceSquared)\n}"}
{"kt_path": "8138/solution_8138.kt", "Qwen2.5-Coder-3B": "fun athletePoints(points: Int, isMale: Boolean, isFemale: Boolean): Int {\n    return if (isMale) {\n        points + 3\n    } else if (isFemale) {\n        points + 1\n    } else {\n        points\n    }\n}"}
{"kt_path": "6625/solution_6625.kt", "Qwen2.5-Coder-3B": "fun calculateCutLength(length: Float, width: Float, numCuts: Int): Float {\n    var remainingLength = length\n    for (i in 0 until numCuts) {\n        remainingLength -= width\n    }\n    return remainingLength / numCuts\n}"}
{"kt_path": "14820/solution_14820.kt", "Qwen2.5-Coder-3B": "fun positiveIntegersSum(n: Int): Int {\n    var sum = 0\n    var i = 1\n    while (i <= n) {\n        sum += i\n        i++\n    }\n    return sum\n}"}
{"kt_path": "3808/solution_3808.kt", "Qwen2.5-Coder-3B": "fun countNegative(a: Int, b: Int): Int {\n    var count = 0\n    var current = a\n    while (current < b) {\n        if (current < 0) {\n            count++\n        }\n        current++\n    }\n    return count\n}"}
{"kt_path": "677/solution_677.kt", "Qwen2.5-Coder-3B": "fun modulusComplexNumbers(a: Float, b: Float): Float {\n    val realPart = a * a\n    val imaginaryPart = b * b\n    val sum = realPart + imaginaryPart\n    return sum.toFloat().sqrt().toFloat()\n}"}
{"kt_path": "1838/solution_1838.kt", "Qwen2.5-Coder-3B": "fun calculateSum(n: Int): Int {\n    var sum = 0\n    var i = 1\n    while (i <= n) {\n        sum += i\n        i++\n    }\n    return sum\n}"}
{"kt_path": "3178/solution_3178.kt", "Qwen2.5-Coder-3B": "fun graphicDesignerSalary(salary: Int): Int {\n    if (salary < 1) {\n        return 2500\n    } else {\n        return salary + (salary * 500)\n    }\n}"}
{"kt_path": "9504/solution_9504.kt", "Qwen2.5-Coder-3B": "fun checkPrimeNumbers(n: Int): Boolean {\n    var i = 2\n    while (i <= n) {\n        if (n % i == 0) {\n            return false\n        }\n        i++\n    }\n    return true\n}"}
{"kt_path": "5182/solution_5182.kt", "Qwen2.5-Coder-3B": "fun checkDivisible(number: Int): Boolean {\n    var divisor = 2\n    while (divisor <= 11) {\n        if (number % divisor != 0) {\n            return false\n        }\n        divisor++\n    }\n    return true\n}"}
{"kt_path": "7650/solution_7650.kt", "Qwen2.5-Coder-3B": "fun sumOfSquares(n: Int): Int {\n    var sum = 0\n    for (i in 1..n) {\n        sum += i * i\n    }\n    return sum\n}"}
{"kt_path": "6824/solution_6824.kt", "Qwen2.5-Coder-3B": "fun calculateScore(a: Int, b: Int): Int {\n    val result = a * 10 - b\n    return if (b < 3) -1 else result\n}"}
{"kt_path": "1825/solution_1825.kt", "Qwen2.5-Coder-3B": "fun calculateCarpenterSalary(hoursWorked: Int, hourlyRate: Double, bonusPercentage: Double): Double {\n    val totalHours = hoursWorked.toDouble()\n    val totalRate = hourlyRate * totalHours\n    val bonusAmount = totalRate * bonusPercentage / 100\n    val finalSalary = totalRate + bonusAmount\n    return finalSalary\n}"}
{"kt_path": "1332/solution_1332.kt", "Qwen2.5-Coder-3B": "fun extinguishFire(fireIntensity: Double): Int {\n    var extinguished = 0\n    var intensity = fireIntensity\n    while (intensity > 0.0) {\n        intensity /= 2.0\n        extinguished++\n    }\n    return extinguished\n}"}
{"kt_path": "10817/solution_10817.kt", "Qwen2.5-Coder-3B": "fun maxOfThree(a: Int, b: Int, c: Int): Int {\n    return if (a >= b && a >= c) a else if (b >= a && b >= c) b else c\n}"}
{"kt_path": "11536/solution_11536.kt", "Qwen2.5-Coder-3B": "import kotlin.jvm.internal.Intrinsics.checkNotNullParameter\n\npublic class Solution_11536Kt {\n    public companion object {\n        public fun isFloat(obj: Any?): Boolean {\n            checkNotNullParameter(obj, \"obj\")\n            return obj is Float\n        }\n    }\n}"}
{"kt_path": "13694/solution_13694.kt", "Qwen2.5-Coder-3B": "fun calculateCarpenterSalary(hoursWorked: Int, hourlyRate: Double, bonusRate: Double): Double {\n    val baseSalary = hoursWorked.toDouble() * hourlyRate\n    val bonus = baseSalary * bonusRate\n    return baseSalary + bonus\n}"}
{"kt_path": "7127/solution_7127.kt", "Qwen2.5-Coder-3B": "import kotlin.jvm.internal.Intrinsics.checkNotNullParameter\n\nfun checkInteger(obj: Any?): Boolean {\n    checkNotNullParameter(obj, \"number\")\n    return obj is Integer\n}"}
{"kt_path": "7144/solution_7144.kt", "Qwen2.5-Coder-3B": "fun identityComparisonAndFloatingPointOperations(a: Double, b: Double): Boolean {\n    val difference = a - b\n    val absoluteDifference = Math.abs(difference)\n    return absoluteDifference >= 0.01\n}"}
{"kt_path": "8240/solution_8240.kt", "Qwen2.5-Coder-3B": "fun calculateFactorial(n: Int): Int {\n    var result = 1\n    var i = 1\n    while (i <= n) {\n        result *= i\n        i++\n    }\n    return result\n}"}
{"kt_path": "2140/solution_2140.kt", "Qwen2.5-Coder-3B": "fun commissionCalculator(amount: Double, commissionRate: Double, threshold: Double): Double {\n    var commission = 0.0\n\n    if (amount >= threshold) {\n        commission = amount * commissionRate\n    }\n\n    return commission\n}"}
{"kt_path": "14315/solution_14315.kt", "Qwen2.5-Coder-3B": "fun sumPositiveIntegers(n: Int): Int {\n    var sum = 0\n    var i = 1\n    while (i <= n) {\n        sum += i\n        i++\n    }\n    return sum\n}"}
{"kt_path": "2523/solution_2523.kt", "Qwen2.5-Coder-3B": "fun sumEvenNumbers(a: Int, b: Int): Int {\n    var sum = 0\n    var current = a\n    while (current <= b) {\n        if (current % 2 == 0) {\n            sum += current\n        }\n        current++\n    }\n    return sum\n}"}
{"kt_path": "918/solution_918.kt", "Qwen2.5-Coder-3B": "fun checkBudget(budget: Int): String {\n    val requiredBudget = 4000\n    return if (budget >= requiredBudget) {\n        \"Budget is sufficient for the marketing campaign.\"\n    } else {\n        \"Insufficient budget, please allocate more funds for the campaign.\"\n    }\n}"}
{"kt_path": "10520/solution_10520.kt", "Qwen2.5-Coder-3B": "fun sumOfEvenNumbers(start: Int, end: Int): Int {\n    var sum = 0\n    var current = start\n    while (current <= end) {\n        if (current % 2 == 0) {\n            sum += current\n        }\n        current++\n    }\n    return sum\n}"}
{"kt_path": "6399/solution_6399.kt", "Qwen2.5-Coder-3B": "fun checkPercentage(percentage: Int): String {\n    if (percentage < 95) {\n        return \"Outside acceptable range\"\n    } else if (percentage > 98) {\n        return \"Outside acceptable range\"\n    } else {\n        return \"Within acceptable range\"\n    }\n}"}
{"kt_path": "10731/solution_10731.kt", "Qwen2.5-Coder-3B": "fun checkEligibility(age: Int, income: Int, yearsOfExperience: Int): String {\n    if (age < 18) {\n        return \"Not Eligible\"\n    }\n    if (income < 5) {\n        return \"Not Eligible\"\n    }\n    if (yearsOfExperience < 2) {\n        return \"Not Eligible\"\n    }\n    return \"Eligible\"\n}"}
{"kt_path": "8756/solution_8756.kt", "Qwen2.5-Coder-3B": "fun findMax(a: Int, b: Int, c: Int): Int {\n    var max = a\n    if (b > max) {\n        max = b\n    }\n    if (c > max) {\n        max = c\n    }\n    return max\n}"}
{"kt_path": "10964/solution_10964.kt", "Qwen2.5-Coder-3B": "fun calculateInvestmentGrowth(initialInvestment: Double, interestRate: Double, years: Int): Double {\n    var investment = initialInvestment\n    for (year in 1..years) {\n        investment *= (1 + interestRate)\n    }\n    return investment\n}"}
{"kt_path": "9201/solution_9201.kt", "Qwen2.5-Coder-3B": "fun isCloseToZero(a: Double, b: Double): Boolean {\n    return if (a > 0.0 && b > 0.0) {\n        true\n    } else if (a < 0.0 && b < 0.0) {\n        true\n    } else {\n        false\n    }\n}"}
{"kt_path": "14784/solution_14784.kt", "Qwen2.5-Coder-3B": "fun sumOfMultiples(a: Int, b: Int, n: Int): Int {\n    var sum = 0\n    var i = 0\n    while (i < n) {\n        if (i % a == 0 || i % b == 0) {\n            sum += i\n        }\n        i++\n    }\n    return sum\n}"}
{"kt_path": "12550/solution_12550.kt", "Qwen2.5-Coder-3B": "fun checkGameConditions(a: Int, b: Int, c: Int, d: Boolean): Boolean {\n    return if (a <= 1000 && b <= 50 && c >= 10 && d) {\n        true\n    } else {\n        false\n    }\n}"}
{"kt_path": "2717/solution_2717.kt", "Qwen2.5-Coder-3B": "import kotlin.jvm.internal.Intrinsics.checkNotNullParameter\n\nfun getFirstElement(lst: List<Any>): Any? {\n    checkNotNullParameter(lst, \"lst\")\n    return lst[0]\n}"}
{"kt_path": "10259/solution_10259.kt", "Qwen2.5-Coder-3B": "public class Solution_10259Kt {\n    public companion object {\n        public fun calculateTotalPrice(price: Float, discount: Float): Float {\n            val absDiscount = Math.abs(discount)\n            val absPrice = Math.abs(price)\n            return if (absPrice > absDiscount) {\n                absPrice - absDiscount\n            } else {\n                absPrice\n            }\n        }\n    }\n}"}
{"kt_path": "1510/solution_1510.kt", "Qwen2.5-Coder-3B": "import kotlin.collections.CollectionsKt\n\nfun getLastElement(lst: List<Any>): Any? {\n    kotlin.jvm.internal.Intrinsics.checkNotNullParameter(lst, \"lst\")\n    return CollectionsKt.last(lst)\n}"}
{"kt_path": "2099/solution_2099.kt", "Qwen2.5-Coder-3B": "fun calculateTotalDistance(x: Float, y: Float): Float {\n    var totalDistance = 0f\n    var i = 1\n    while (i < x) {\n        totalDistance += y\n        i++\n    }\n    return totalDistance\n}"}
{"kt_path": "9202/solution_9202.kt", "Qwen2.5-Coder-3B": "fun hasSignificantDecimalPart(value: Double, epsilon: Double): Boolean {\n    val absValue = Math.abs(value)\n    val absEpsilon = Math.abs(epsilon)\n    val difference = absValue - absEpsilon\n    return difference < absEpsilon\n}"}
{"kt_path": "9289/solution_9289.kt", "Qwen2.5-Coder-3B": "import kotlin.jvm.internal.Intrinsics.checkNotNullParameter\n\nfun sliceTuple(list: List<*>, start: Int, end: Int): List<*> {\n    checkNotNullParameter(list, \"list\")\n    return list.subList(start, end)\n}"}
{"kt_path": "222/solution_222.kt", "Qwen2.5-Coder-3B": "fun calculateProfit(price: Double, cost: Double, quantity: Double): Double {\n    val profit = price - cost\n    return if (profit > 0) {\n        profit * quantity\n    } else {\n        -profit * quantity\n    }\n}"}
{"kt_path": "2704/solution_2704.kt", "Qwen2.5-Coder-3B": "fun calculateSum(): Double {\n    var sum = 0.0\n    var factor = 0.1\n    while (factor > 0.0001) {\n        sum += factor\n        factor *= 0.9\n    }\n    return sum\n}"}
{"kt_path": "7036/solution_7036.kt", "Qwen2.5-Coder-3B": "import kotlin.collections.CollectionsKt\n\nfun calculateExpenses(expensesList: List<Double>): Double {\n    return expensesList.sumOf { it }\n}"}
{"kt_path": "7097/solution_7097.kt", "Qwen2.5-Coder-3B": "import kotlin.jvm.internal.Intrinsics.checkNotNullParameter\n\nfun findAnimal(animalTuple: List<String>, index: Int): String {\n    checkNotNullParameter(animalTuple, \"animalTuple\")\n    return animalTuple[index] as String\n}"}
{"kt_path": "6743/solution_6743.kt", "Qwen2.5-Coder-3B": "import kotlin.collections.toSet\n\nfun toSet(list: List<Int>): Set<Int> {\n    return list.toSet()\n}"}
{"kt_path": "14646/solution_14646.kt", "Qwen2.5-Coder-3B": "fun checkPromotionEligibility(age: Int, income: Double): Boolean {\n    if (age >= 25 && age <= 41) {\n        return true\n    } else {\n        return false\n    }\n\n    if (income >= 5000.0) {\n        return true\n    } else {\n        return false\n    }\n}"}
{"kt_path": "1671/solution_1671.kt", "Qwen2.5-Coder-3B": "import kotlin.collections.toList\nimport kotlin.jvm.internal.Intrinsics.checkNotNullParameter\n\nfun createTupleFromDictionary(dictionary: Map<String, Any?>): List<Pair<String, Any?>> {\n    checkNotNullParameter(dictionary, \"dictionary\")\n    return dictionary.toList()\n}"}
{"kt_path": "13442/solution_13442.kt", "Qwen2.5-Coder-3B": "fun printEvenNumbers(start: Int, end: Int) {\n    var current = start\n    while (current <= end) {\n        if (current % 2 == 0) {\n            println(current)\n        }\n        current++\n    }\n}"}
{"kt_path": "13338/solution_13338.kt", "Qwen2.5-Coder-3B": "import kotlin.collections.toSet\nimport kotlin.jvm.internal.Intrinsics.checkNotNullParameter\n\nfun convertToSet(photoData: List<String>): Set<String> {\n    checkNotNullParameter(photoData, \"photoData\")\n    return photoData.toSet()\n}"}
{"kt_path": "8409/solution_8409.kt", "Qwen2.5-Coder-3B": "fun calculateTotalCost(price: Double, quantity: Double): Double {\n    val totalCost = price * quantity\n    return if (totalCost > 1000.0) {\n        totalCost * 0.9\n    } else {\n        totalCost\n    }\n}"}
{"kt_path": "5263/solution_5263.kt", "Qwen2.5-Coder-3B": "fun operationsQuiz(a: Boolean, b: Boolean, c: Boolean, d: Boolean): Boolean {\n    var count = 0\n    if (a) count++\n    if (b) count++\n    if (c) count++\n    if (d) count++\n    return count < 3\n}"}
{"kt_path": "7005/solution_7005.kt", "Qwen2.5-Coder-3B": "import kotlin.collections.toList\nimport kotlin.jvm.internal.Intrinsics.checkNotNullParameter\n\nfun convertSetToList(set: Set<*>): List<*> {\n    checkNotNullParameter(set, \"set\")\n    return set.toList()\n}"}
{"kt_path": "7004/solution_7004.kt", "Qwen2.5-Coder-3B": "import kotlin.collections.toSet\nimport kotlin.jvm.internal.Intrinsics.checkNotNullParameter\n\nfun convertListToSet(lst: List<*>): Set<*> {\n    checkNotNullParameter(lst, \"lst\")\n    return lst.toSet()\n}"}
{"kt_path": "1559/solution_1559.kt", "Qwen2.5-Coder-3B": "import kotlin.collections.toSet\nimport kotlin.jvm.internal.Intrinsics.checkNotNullParameter\n\nfun convertToSet(list: List<*>): Set<*> {\n    checkNotNullParameter(list, \"list\")\n    return list.toSet()\n}"}
{"kt_path": "14689/solution_14689.kt", "Qwen2.5-Coder-3B": "fun printOddNumbers(n: Int) {\n    var i = 1\n    while (i <= n) {\n        if (i % 2 != 0) {\n            println(i)\n        }\n        i++\n    }\n}"}
{"kt_path": "13400/solution_13400.kt", "Qwen2.5-Coder-3B": "fun findBiggerNumber(a: Int, b: Int, c: Int, d: Int): Int {\n    var biggerNumber = a\n    if (b > biggerNumber) {\n        biggerNumber = b\n    }\n    if (c > biggerNumber) {\n        biggerNumber = c\n    }\n    if (d > biggerNumber) {\n        biggerNumber = d\n    }\n    return biggerNumber\n}"}
{"kt_path": "9661/solution_9661.kt", "Qwen2.5-Coder-3B": "fun calculateSums(n: Int): Int {\n    var sum = 0\n    var i = 1\n    while (i <= n) {\n        if (i % 5 == 0 || i % 7 == 0 || i % 35 == 0) {\n            sum += i\n        }\n        i++\n    }\n    return sum\n}"}
{"kt_path": "8323/solution_8323.kt", "Qwen2.5-Coder-3B": "fun calculateRemainingBooks(totalBooks: Int, booksPerDay: Int, days: Int): Int {\n    var remainingBooks = totalBooks\n    var daysLeft = days\n    while (daysLeft > 0) {\n        remainingBooks -= booksPerDay\n        daysLeft--\n    }\n    return remainingBooks\n}"}
{"kt_path": "236/solution_236.kt", "Qwen2.5-Coder-3B": "fun computeFloorArea(length: Float, width: Float): Float {\n    if (length < 0) {\n        throw IllegalArgumentException(\"Invalid length\")\n    }\n    if (width < 0) {\n        throw IllegalArgumentException(\"Invalid width\")\n    }\n    return length * width\n}"}
{"kt_path": "14771/solution_14771.kt", "Qwen2.5-Coder-3B": "import kotlin.jvm.internal.Intrinsics.checkNotNullParameter\n\nfun indexingAndSlicingTuples(list: List<String>, index: Int): List<String> {\n    checkNotNullParameter(list, \"list\")\n    return list.subList(index, list.size)\n}"}
{"kt_path": "9943/solution_9943.kt", "Qwen2.5-Coder-3B": "import kotlin.collections.toSet\nimport kotlin.jvm.internal.Intrinsics.checkNotNullParameter\n\nfun addNegIntegersToSet(numbers: List<Int>): Set<Int> {\n    checkNotNullParameter(numbers, \"numbers\")\n    return numbers.toSet()\n}"}
{"kt_path": "8713/solution_8713.kt", "Qwen2.5-Coder-3B": "import kotlin.Pair\nimport kotlin.jvm.internal.Intrinsics.checkNotNullParameter\n\nfun accessImaginaryPart(complexNumber: Pair<Double, Double>): Double {\n    checkNotNullParameter(complexNumber, \"complexNumber\")\n    return complexNumber.second.toDouble()\n}"}
{"kt_path": "3773/solution_3773.kt", "Qwen2.5-Coder-3B": "fun calculateSocialWorkerSalary(salary: Double, yearsOfExperience: Int): Double {\n    return when {\n        yearsOfExperience < 10 -> salary\n        yearsOfExperience < 5 -> salary * 1.5\n        yearsOfExperience < 2 -> salary * 2.0\n        else -> salary * 3.0\n    }\n}"}
{"kt_path": "11/solution_11.kt", "Qwen2.5-Coder-3B": "fun checkOddEvenNumbers(a: Int, b: Int, c: Int): Boolean {\n    var count = 0\n\n    if (a % 2 != 0) {\n        count++\n    }\n\n    if (b % 2 != 0) {\n        count++\n    }\n\n    if (c % 2 != 0) {\n        count++\n    }\n\n    return count == 1\n}"}
{"kt_path": "1118/solution_1118.kt", "Qwen2.5-Coder-3B": "import kotlin.jvm.internal.Intrinsics.checkNotNullParameter\n\nfun createEmptyComplementList(nurse: String): List<Any> {\n    checkNotNullParameter(nurse, \"nurse\")\n    return ArrayList<Any>()\n}"}
{"kt_path": "8385/solution_8385.kt", "Qwen2.5-Coder-3B": "fun isPrime(n: Int): Boolean {\n    if (n <= 1) return false\n    for (i in 2..Math.sqrt(n.toDouble()).toInt()) {\n        if (n % i == 0) return false\n    }\n    return true\n}"}
{"kt_path": "14396/solution_14396.kt", "Qwen2.5-Coder-3B": "import kotlin.Triple\n\nfun extractCoordinates(coordinatesList: List<Triple<Int, Int, Int>>): Triple<Int, Int, Int> {\n    return coordinatesList[0]\n}"}
{"kt_path": "5828/solution_5828.kt", "Qwen2.5-Coder-3B": "import kotlin.collections.CollectionsKt\n\nfun calculatePaintCansNeeded(wallAreas: List<Double>, paintCoveragePerCan: Double): Int {\n    val totalArea = wallAreas.sumOf { it }\n    val cansNeeded = (totalArea / paintCoveragePerCan).toInt()\n    return cansNeeded\n}"}
