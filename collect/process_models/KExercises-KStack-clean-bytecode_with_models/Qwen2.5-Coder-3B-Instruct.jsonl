{"kt_path": "7824/solution_7824.kt", "Qwen2.5-Coder-3B-Instruct": "class Solution_7824Kt {\n    companion object {\n        @JvmStatic\n        fun testCountOddNumbers() {\n            // This method does nothing and returns immediately\n        }\n    }\n}"}
{"kt_path": "remisultan__multiarm-bandit-algorithm-kotlin__ead934d/core-bandit/src/main/kotlin/org/rsultan/bandit/algorithms/BanditAlgorithm.kt", "Qwen2.5-Coder-3B-Instruct": "interface BanditAlgorithm {\n    fun selectArm(): Int\n\n    fun update(arm: Int, reward: Float)\n}"}
{"kt_path": "13864/solution_13864.kt", "Qwen2.5-Coder-3B-Instruct": "fun calculateScore(a: Int, b: Int): Int {\n    return a * b\n}"}
{"kt_path": "9763/solution_9763.kt", "Qwen2.5-Coder-3B-Instruct": "fun calculateFinalPrice(price: Double, discount: Double): Double {\n    return price - discount\n}"}
{"kt_path": "8545/solution_8545.kt", "Qwen2.5-Coder-3B-Instruct": "fun calculateConversionRate(a: Int, b: Int): Double {\n    return 0.0\n}"}
{"kt_path": "13968/solution_13968.kt", "Qwen2.5-Coder-3B-Instruct": "fun athletePerformanceDistance(distance: Double, time: Double): Double {\n    return distance / time\n}"}
{"kt_path": "14509/solution_14509.kt", "Qwen2.5-Coder-3B-Instruct": "fun calculateRoomArea(length: Int, width: Int): Int {\n    return length * width\n}"}
{"kt_path": "7670/solution_7670.kt", "Qwen2.5-Coder-3B-Instruct": "fun identityAssignment(): Boolean {\n    val a = 5\n    val b = a\n    return b == 1\n}"}
{"kt_path": "224/solution_224.kt", "Qwen2.5-Coder-3B-Instruct": "fun calculateSalary(salary: Double): Long {\n    return Math.round(salary).toLong()\n}"}
{"kt_path": "11310/solution_11310.kt", "Qwen2.5-Coder-3B-Instruct": "fun calculateExpenses(amount: Int, rate: Float): Float {\n    return amount.toFloat() * rate\n}"}
{"kt_path": "10330/solution_10330.kt", "Qwen2.5-Coder-3B-Instruct": "fun calculatePower(a: Double, b: Double): Double {\n    return a * b\n}"}
{"kt_path": "11101/solution_11101.kt", "Qwen2.5-Coder-3B-Instruct": "fun checkPositiveInteger(num: Int): Boolean {\n    return num > 0\n}"}
{"kt_path": "432/solution_432.kt", "Qwen2.5-Coder-3B-Instruct": "fun calculateResistance(resistance1: Double, resistance2: Double): Double {\n    return resistance1 / resistance2\n}"}
{"kt_path": "n81ur3__kotlin-coding-challenges__fdc5941/src/main/kotlin/adventofcode2018/Day04ReposeRecord.kt", "Qwen2.5-Coder-3B-Instruct": "class Day04ReposeRecord"}
{"kt_path": "8671/solution_8671.kt", "Qwen2.5-Coder-3B-Instruct": "fun calculateAverageSpeed(distance: Double, time: Double): Double {\n    return distance / time\n}"}
{"kt_path": "5601/solution_5601.kt", "Qwen2.5-Coder-3B-Instruct": "fun calculateCircuitPower(voltage: Double, resistance: Double): Double {\n    return voltage * resistance\n}"}
{"kt_path": "10329/solution_10329.kt", "Qwen2.5-Coder-3B-Instruct": "fun calculateResistance(resistance: Double, voltage: Double): Double {\n    return resistance / voltage\n}"}
{"kt_path": "n81ur3__kotlin-coding-challenges__fdc5941/src/main/kotlin/adventofcode2020/Day19MonsterMessage.kt", "Qwen2.5-Coder-3B-Instruct": "class Day19MonsterMessage {\n    constructor()\n}"}
{"kt_path": "n81ur3__kotlin-coding-challenges__fdc5941/src/main/kotlin/adventofcode2020/Day07HandyHaversacks.kt", "Qwen2.5-Coder-3B-Instruct": "class Day07HandyHaversacks"}
{"kt_path": "7007/solution_7007.kt", "Qwen2.5-Coder-3B-Instruct": "fun isLongFlight(distance: Int, duration: Int): Boolean {\n    return distance > duration\n}"}
{"kt_path": "3696/solution_3696.kt", "Qwen2.5-Coder-3B-Instruct": "fun findCommonArea(a: Float, b: Float, c: Float): Float {\n    return a * b * c\n}"}
{"kt_path": "9314/solution_9314.kt", "Qwen2.5-Coder-3B-Instruct": "fun isEven(num: Int): Boolean {\n    return num % 2 == 0\n}"}
{"kt_path": "10577/solution_10577.kt", "Qwen2.5-Coder-3B-Instruct": "fun isEven(num: Int): Boolean {\n    return num % 2 == 0\n}"}
{"kt_path": "n81ur3__kotlin-coding-challenges__fdc5941/src/main/kotlin/adventofcode2018/Day06ChronalCoordinates.kt", "Qwen2.5-Coder-3B-Instruct": "class Day06ChronalCoordinates() {\n}"}
{"kt_path": "7819/solution_7819.kt", "Qwen2.5-Coder-3B-Instruct": "fun calculatePowerConsumption(power: Double): Double {\n    val efficiency = 5.0\n    return power / efficiency\n}"}
{"kt_path": "8829/solution_8829.kt", "Qwen2.5-Coder-3B-Instruct": "fun calculateDailyCaloricNeeds(weight: Float, height: Float): Float {\n    return weight * 24.0f * height\n}"}
{"kt_path": "6256/solution_6256.kt", "Qwen2.5-Coder-3B-Instruct": "fun notEqualNone(a: Int?, b: Int?): Boolean {\n    return a != null && b != null\n}"}
{"kt_path": "4238/solution_4238.kt", "Qwen2.5-Coder-3B-Instruct": "fun checkSpeedLimit(speed: Float, limit: Float): Boolean {\n    return speed > limit\n}"}
{"kt_path": "3868/solution_3868.kt", "Qwen2.5-Coder-3B-Instruct": "fun sumOfNumbers(a: Int, b: Int): Int {\n    val result = a + b\n    return if (result <= 10) result else result * 2\n}"}
{"kt_path": "5766/solution_5766.kt", "Qwen2.5-Coder-3B-Instruct": "fun shiftAndMultiplyAssignment(a: Int, b: Int): Int {\n    val shifted = a shl b\n    val shr = shifted shr b\n    return shr * shifted\n}"}
{"kt_path": "4304/solution_4304.kt", "Qwen2.5-Coder-3B-Instruct": "fun architectMath(a: Int, b: Int): Int {\n    return (a * 2) + (b + 1)\n}"}
{"kt_path": "alebedev__aoc2022__d6ba46b/src/main/kotlin/Map.kt", "Qwen2.5-Coder-3B-Instruct": "class AocMap {\n    companion object {\n        val INSTANCE = AocMap()\n\n        fun solve() {\n            println(\"Solving the map...\")\n        }\n    }\n}\n\nfun main(args: Array<String>) {\n    AocMap.INSTANCE.solve()\n}"}
{"kt_path": "7168/solution_7168.kt", "Qwen2.5-Coder-3B-Instruct": "fun multiplyAndModulo(a: Int, b: Int, c: Int, d: Int): Int {\n    val result = a * b\n    return result % c\n}"}
{"kt_path": "5304/solution_5304.kt", "Qwen2.5-Coder-3B-Instruct": "fun numberOfCircuits(a: Int, b: Int, c: Int): Int {\n    var d = b / a\n    var e = b % a\n    while (e != 0) {\n        d++\n        e = b % a\n    }\n    return d\n}"}
{"kt_path": "7099/solution_7099.kt", "Qwen2.5-Coder-3B-Instruct": "fun calculateDistance(x: Double, y: Double, z: Double): Double {\n    val xSquared = x * x\n    val ySquared = y * y\n    val zSquared = z * z\n    return Math.sqrt(xSquared + ySquared + zSquared)\n}"}
{"kt_path": "8138/solution_8138.kt", "Qwen2.5-Coder-3B-Instruct": "fun athletePoints(points: Int, isQualified: Boolean, isWinner: Boolean): Int {\n    return if (isQualified) {\n        points + 3\n    } else if (isWinner) {\n        points + 1\n    } else {\n        points\n    }\n}"}
{"kt_path": "6625/solution_6625.kt", "Qwen2.5-Coder-3B-Instruct": "fun calculateCutLength(length: Float, width: Float, numSides: Int): Float {\n    val cutLength = length - width\n    return cutLength * (numSides - 1) / numSides\n}"}
{"kt_path": "14820/solution_14820.kt", "Qwen2.5-Coder-3B-Instruct": "fun positiveIntegersSum(n: Int): Int {\n    var sum = 0\n    var i = 1\n    while (i <= n) {\n        sum += i\n        i++\n    }\n    return sum\n}"}
{"kt_path": "3808/solution_3808.kt", "Qwen2.5-Coder-3B-Instruct": "fun countNegative(a: Int, b: Int): Int {\n    var count = 0\n    var current = a\n\n    while (current <= b) {\n        if (current < 0) {\n            count++\n        }\n        current++\n    }\n\n    return count\n}"}
{"kt_path": "677/solution_677.kt", "Qwen2.5-Coder-3B-Instruct": "fun modulusComplexNumbers(a: Float, b: Float): Float {\n    val realPart = a * a + b * b\n    return sqrt(realPart.toDouble()).toFloat()\n}"}
{"kt_path": "1838/solution_1838.kt", "Qwen2.5-Coder-3B-Instruct": "fun calculateSum(n: Int): Int {\n    var sum = 0\n    var i = 1\n    while (i <= n) {\n        sum += i\n        i++\n    }\n    return sum\n}"}
{"kt_path": "3178/solution_3178.kt", "Qwen2.5-Coder-3B-Instruct": "fun graphicDesignerSalary(salary: Int): Int {\n    return if (salary < 500) 2500 else salary * 500 + salary\n}"}
{"kt_path": "9504/solution_9504.kt", "Qwen2.5-Coder-3B-Instruct": "fun checkPrimeNumbers(n: Int): Boolean {\n    if (n <= 2) return false\n    for (i in 2 until n) {\n        if (n % i == 0) return false\n    }\n    return true\n}"}
{"kt_path": "5182/solution_5182.kt", "Qwen2.5-Coder-3B-Instruct": "fun checkDivisible(n: Int): Boolean {\n    var divisor = 2\n    while (divisor <= 11) {\n        if (n % divisor != 0) {\n            return false\n        }\n        divisor++\n    }\n    return true\n}"}
{"kt_path": "7650/solution_7650.kt", "Qwen2.5-Coder-3B-Instruct": "fun sumOfSquares(n: Int): Int {\n    var sum = 0\n    for (i in 1..n) {\n        sum += i * i\n    }\n    return sum\n}"}
{"kt_path": "6824/solution_6824.kt", "Qwen2.5-Coder-3B-Instruct": "fun calculateScore(a: Int, b: Int): Int {\n    val score = a * 10 - b * 5\n    return if (b < 3) -1 else score\n}"}
{"kt_path": "1825/solution_1825.kt", "Qwen2.5-Coder-3B-Instruct": "fun calculateCarpenterSalary(hours: Int, hourlyRate: Double, overtimeRate: Double): Double {\n    val basePay = hours.toDouble() * hourlyRate\n    val overtimePay = (hours - 40).coerceAtLeast(0) * overtimeRate\n    return basePay + overtimePay\n}"}
{"kt_path": "1332/solution_1332.kt", "Qwen2.5-Coder-3B-Instruct": "fun extinguishFire(damage: Double): Int {\n    var health = 0\n    var damagePerSecond = damage\n\n    while (damagePerSecond > 0) {\n        health += 2\n        damagePerSecond /= 2\n    }\n\n    return health\n}"}
{"kt_path": "10817/solution_10817.kt", "Qwen2.5-Coder-3B-Instruct": "fun maxOfThree(a: Int, b: Int, c: Int): Int {\n    return when {\n        a > b && a > c -> a\n        b > a && b > c -> b\n        else -> c\n    }\n}"}
{"kt_path": "11536/solution_11536.kt", "Qwen2.5-Coder-3B-Instruct": "fun isFloat(obj: Any): Boolean {\n    checkNotNull(obj) { \"Argument must not be null\" }\n    return obj is Float\n}"}
{"kt_path": "13694/solution_13694.kt", "Qwen2.5-Coder-3B-Instruct": "fun calculateCarpenterSalary(hours: Int, hourlyRate: Double, overtimeRate: Double): Double {\n    val basePay = hours.toDouble() * hourlyRate\n    val overtimePay = (hours - 40) * overtimeRate\n    return basePay + overtimePay\n}"}
{"kt_path": "7127/solution_7127.kt", "Qwen2.5-Coder-3B-Instruct": "fun checkInteger(obj: Any): Boolean {\n    requireNotNull(obj) { \"number\" }\n    return obj is Integer\n}"}
{"kt_path": "7144/solution_7144.kt", "Qwen2.5-Coder-3B-Instruct": "fun identityComparisonAndFloatingPointOperations(a: Double, b: Double): Boolean {\n    val difference = a - b\n    return Math.abs(difference) > 0.01\n}"}
{"kt_path": "8240/solution_8240.kt", "Qwen2.5-Coder-3B-Instruct": "fun calculateFactorial(n: Int): Int {\n    var result = 1\n    var i = 1\n    while (i <= n) {\n        result *= i\n        i++\n    }\n    return result\n}"}
{"kt_path": "2140/solution_2140.kt", "Qwen2.5-Coder-3B-Instruct": "fun commissionCalculator(price: Double, commissionRate: Double, threshold: Double): Double {\n    return if (price >= threshold) {\n        price * commissionRate\n    } else {\n        0.0\n    }\n}"}
{"kt_path": "14315/solution_14315.kt", "Qwen2.5-Coder-3B-Instruct": "fun sumPositiveIntegers(n: Int): Int {\n    var sum = 0\n    var i = 1\n    while (i <= n) {\n        sum += i\n        i++\n    }\n    return sum\n}"}
{"kt_path": "2523/solution_2523.kt", "Qwen2.5-Coder-3B-Instruct": "fun sumEvenNumbers(a: Int, b: Int): Int {\n    var sum = 0\n    var current = a\n\n    while (current <= b) {\n        if (current % 2 == 0) {\n            sum += current\n        }\n        current++\n    }\n\n    return sum\n}"}
{"kt_path": "918/solution_918.kt", "Qwen2.5-Coder-3B-Instruct": "fun checkBudget(budget: Int): String {\n    val requiredBudget = 4000\n    return if (budget >= requiredBudget) {\n        \"Budget is sufficient for the marketing campaign.\"\n    } else {\n        \"Insufficient budget, please allocate more funds for the campaign.\"\n    }\n}"}
{"kt_path": "10520/solution_10520.kt", "Qwen2.5-Coder-3B-Instruct": "fun sumOfEvenNumbers(start: Int, end: Int): Int {\n    var sum = 0\n    for (i in start..end) {\n        if (i % 2 == 0) {\n            sum += i\n        }\n    }\n    return sum\n}"}
{"kt_path": "6399/solution_6399.kt", "Qwen2.5-Coder-3B-Instruct": "fun checkPercentage(value: Int): String {\n    return if (value >= 95 && value <= 98) {\n        \"Within acceptable range\"\n    } else {\n        \"Outside acceptable range\"\n    }\n}"}
{"kt_path": "10731/solution_10731.kt", "Qwen2.5-Coder-3B-Instruct": "fun checkEligibility(age: Int, income: Int, yearsOfExperience: Int): String {\n    return if (age >= 18 && income >= 5000 && yearsOfExperience >= 2) {\n        \"Eligible\"\n    } else {\n        \"Not Eligible\"\n    }\n}"}
{"kt_path": "8756/solution_8756.kt", "Qwen2.5-Coder-3B-Instruct": "fun findMax(a: Int, b: Int, c: Int): Int {\n    var max = a\n    if (b > max) max = b\n    if (c > max) max = c\n    return max\n}"}
{"kt_path": "10964/solution_10964.kt", "Qwen2.5-Coder-3B-Instruct": "fun calculateInvestmentGrowth(initialAmount: Double, growthRate: Double, years: Int): Double {\n    var amount = initialAmount\n    for (i in 0 until years) {\n        amount *= (1 + growthRate)\n    }\n    return amount\n}"}
{"kt_path": "9201/solution_9201.kt", "Qwen2.5-Coder-3B-Instruct": "fun isCloseToZero(a: Double, b: Double): Boolean {\n    val absA = Math.abs(a)\n    return absA <= b\n}"}
{"kt_path": "14784/solution_14784.kt", "Qwen2.5-Coder-3B-Instruct": "fun sumOfMultiples(a: Int, b: Int, n: Int): Int {\n    var sum = 0\n    for (i in 1..n) {\n        if (i % a == 0 || i % b == 0) {\n            sum += i\n        }\n    }\n    return sum\n}"}
{"kt_path": "12550/solution_12550.kt", "Qwen2.5-Coder-3B-Instruct": "fun checkGameConditions(a: Int, b: Int, c: Int, d: Boolean): Boolean {\n    return a >= 1000 && b >= 50 && c > 10 && d\n}"}
{"kt_path": "2717/solution_2717.kt", "Qwen2.5-Coder-3B-Instruct": "fun getFirstElement(lst: List<*>): Any? {\n    checkNotNull(lst) { \"lst\" }\n    return lst[0]\n}"}
{"kt_path": "10259/solution_10259.kt", "Qwen2.5-Coder-3B-Instruct": "fun calculateTotalPrice(price: Float, discount: Float): Float {\n    val absDiscount = Math.abs(discount)\n    return if (absDiscount <= price) {\n        price * (1 - absDiscount)\n    } else {\n        price\n    }\n}"}
{"kt_path": "1510/solution_1510.kt", "Qwen2.5-Coder-3B-Instruct": "fun getLastElement(lst: List<*>): Any? {\n    return lst.last()\n}"}
{"kt_path": "2099/solution_2099.kt", "Qwen2.5-Coder-3B-Instruct": "fun calculateTotalDistance(a: Float, b: Float): Float {\n    var totalDistance = 0f\n    var count = 0\n\n    while (count < 2) {\n        totalDistance += a + b\n        count++\n    }\n\n    return totalDistance\n}"}
{"kt_path": "9202/solution_9202.kt", "Qwen2.5-Coder-3B-Instruct": "fun hasSignificantDecimalPart(a: Double, b: Double): Boolean {\n    val absA = Math.abs(a)\n    val absB = Math.abs(b)\n    val diff = absA - absB\n    return diff > 0.000000000000001\n}"}
{"kt_path": "9289/solution_9289.kt", "Qwen2.5-Coder-3B-Instruct": "import kotlin.jvm.internal.Intrinsics.checkNotNullParameter\n\nfun sliceTuple(list: List<*>, start: Int, end: Int): List<Any> {\n    checkNotNullParameter(list, \"list\")\n    return list.subList(start, end)\n}"}
{"kt_path": "222/solution_222.kt", "Qwen2.5-Coder-3B-Instruct": "fun calculateProfit(cost: Double, price: Double, quantity: Double): Double {\n    val profitPerUnit = price - cost\n    return if (profitPerUnit > 0) {\n        profitPerUnit * quantity\n    } else {\n        -profitPerUnit * quantity\n    }\n}"}
{"kt_path": "2704/solution_2704.kt", "Qwen2.5-Coder-3B-Instruct": "fun calculateSum(): Double {\n    var sum = 0.0\n    var factor = 0.1\n    while (factor <= 1000.0) {\n        sum += factor\n        factor *= 10\n    }\n    return sum\n}"}
{"kt_path": "7036/solution_7036.kt", "Qwen2.5-Coder-3B-Instruct": "import kotlin.collections.CollectionsKt.sumOfDouble\n\nfun calculateExpenses(expensesList: List<Double>): Double {\n    return sumOfDouble(expensesList)\n}"}
{"kt_path": "7097/solution_7097.kt", "Qwen2.5-Coder-3B-Instruct": "fun findAnimal(animalTuple: List<String>, index: Int): String {\n    requireNotNull(animalTuple) { \"animalTuple cannot be null\" }\n    return animalTuple[index]\n}"}
{"kt_path": "6743/solution_6743.kt", "Qwen2.5-Coder-3B-Instruct": "import kotlin.collections.toSet\n\nfun toSet(list: List<Int>): Set<Int> {\n    return list.toSet()\n}"}
{"kt_path": "14646/solution_14646.kt", "Qwen2.5-Coder-3B-Instruct": "fun checkPromotionEligibility(age: Int, income: Double): Boolean {\n    return age > 25 && age < 41 && income >= 5000.0\n}"}
{"kt_path": "1671/solution_1671.kt", "Qwen2.5-Coder-3B-Instruct": "import kotlin.Pair\nimport kotlin.collections.toList\n\nfun createTupleFromDictionary(dictionary: Map<String, Any>): List<Pair<String, Any>> {\n    return dictionary.toList()\n}"}
{"kt_path": "13442/solution_13442.kt", "Qwen2.5-Coder-3B-Instruct": "fun printEvenNumbers(start: Int, end: Int) {\n    for (i in start..end) {\n        if (i % 2 == 0) {\n            println(i)\n        }\n    }\n}"}
{"kt_path": "13338/solution_13338.kt", "Qwen2.5-Coder-3B-Instruct": "import kotlin.collections.toSet\n\nfun convertToSet(photoData: List<String>): Set<String> {\n    return photoData.toSet()\n}"}
{"kt_path": "8409/solution_8409.kt", "Qwen2.5-Coder-3B-Instruct": "fun calculateTotalCost(price: Double, discountRate: Double): Double {\n    val totalCost = price * discountRate\n    return if (totalCost < 1000.0) {\n        totalCost\n    } else {\n        totalCost - 1000.0\n    }\n}"}
{"kt_path": "5263/solution_5263.kt", "Qwen2.5-Coder-3B-Instruct": "fun operationsQuiz(a: Boolean, b: Boolean, c: Boolean, d: Boolean): Boolean {\n    return (a || b || c || d) && !(a && b && c && d)\n}"}
{"kt_path": "7005/solution_7005.kt", "Qwen2.5-Coder-3B-Instruct": "import kotlin.collections.toList\n\nfun convertSetToList(set: Set<*>): List<Any> {\n    return set.toList()\n}"}
{"kt_path": "7004/solution_7004.kt", "Qwen2.5-Coder-3B-Instruct": "import kotlin.collections.toSet\n\nfun convertListToSet(lst: List<*>) = lst.toSet()"}
{"kt_path": "1559/solution_1559.kt", "Qwen2.5-Coder-3B-Instruct": "import kotlin.collections.toSet\n\nfun convertToSet(gameData: List<*>): Set<Any> {\n    return gameData.toSet()\n}"}
{"kt_path": "14689/solution_14689.kt", "Qwen2.5-Coder-3B-Instruct": "fun printOddNumbers(n: Int) {\n    var i = 1\n    while (i <= n) {\n        if (i % 2 != 0) {\n            println(i)\n        }\n        i++\n    }\n}"}
{"kt_path": "13400/solution_13400.kt", "Qwen2.5-Coder-3B-Instruct": "fun findBiggerNumber(a: Int, b: Int, c: Int, d: Int): Int {\n    return when {\n        a > b && a > c && a > d -> a\n        b > a && b > c && b > d -> b\n        c > a && c > b && c > d -> c\n        else -> d\n    }\n}"}
{"kt_path": "9661/solution_9661.kt", "Qwen2.5-Coder-3B-Instruct": "fun calculateSums(n: Int): Int {\n    var sum = 0\n    var i = 1\n    while (i <= n) {\n        when {\n            i % 5 == 0 -> sum += i\n            i % 7 == 0 -> sum += i\n            else -> sum += i\n        }\n        i++\n    }\n    return sum\n}"}
{"kt_path": "8323/solution_8323.kt", "Qwen2.5-Coder-3B-Instruct": "fun calculateRemainingBooks(totalBooks: Int, booksBorrowed: Int, daysLeft: Int): Int {\n    var remainingBooks = totalBooks\n    var daysPassed = 0\n\n    while (daysPassed < daysLeft) {\n        remainingBooks /= booksBorrowed\n        daysPassed += 3\n    }\n\n    return remainingBooks\n}"}
{"kt_path": "236/solution_236.kt", "Qwen2.5-Coder-3B-Instruct": "fun computeFloorArea(length: Float, width: Float): Float {\n    if (length < 0) {\n        throw IllegalArgumentException(\"Invalid length\")\n    }\n    if (width < 0) {\n        throw IllegalArgumentException(\"Invalid width\")\n    }\n    return length * width\n}"}
{"kt_path": "14771/solution_14771.kt", "Qwen2.5-Coder-3B-Instruct": "import kotlin.jvm.internal.Intrinsics.checkNotNullParameter\n\nfun indexingAndSlicingTuples(strings: List<String>, index: Int): List<String> {\n    checkNotNullParameter(strings, \"strings\")\n    return strings.subList(index, strings.size)\n}"}
{"kt_path": "9943/solution_9943.kt", "Qwen2.5-Coder-3B-Instruct": "import kotlin.collections.*\n\nfun addNegIntegersToSet(numbers: List<Int>): Set<Int> {\n    requireNotNull(numbers) { \"numbers must not be null\" }\n    return numbers.toSet()\n}"}
{"kt_path": "8713/solution_8713.kt", "Qwen2.5-Coder-3B-Instruct": "fun accessImaginaryPart(complexNumber: Pair<Double, Double>): Double {\n    return complexNumber.second.toDouble()\n}"}
{"kt_path": "3773/solution_3773.kt", "Qwen2.5-Coder-3B-Instruct": "fun calculateSocialWorkerSalary(salary: Double, yearsOfExperience: Int): Double {\n    return when (yearsOfExperience) {\n        in 0..10 -> salary\n        in 11..50 -> salary * 1.5\n        else -> salary * 2.0\n    }\n}"}
{"kt_path": "11/solution_11.kt", "Qwen2.5-Coder-3B-Instruct": "fun checkOddEvenNumbers(a: Int, b: Int, c: Int): Boolean {\n    val isOddA = a % 2 != 0\n    val isOddB = b % 2 != 0\n    val isOddC = c % 2 != 0\n\n    return isOddA || isOddB || isOddC\n}"}
{"kt_path": "1118/solution_1118.kt", "Qwen2.5-Coder-3B-Instruct": "import kotlin.jvm.internal.Intrinsics.checkNotNullParameter\n\nfun createEmptyComplementList(nurse: String): List<Any> {\n    checkNotNullParameter(nurse, \"nurse\")\n    return ArrayList<Any>()\n}"}
{"kt_path": "8385/solution_8385.kt", "Qwen2.5-Coder-3B-Instruct": "fun isPrime(n: Int): Boolean {\n    if (n <= 1) return false\n    for (i in 2..Math.sqrt(n.toDouble()).toInt()) {\n        if (n % i == 0) return false\n    }\n    return true\n}"}
{"kt_path": "14396/solution_14396.kt", "Qwen2.5-Coder-3B-Instruct": "import kotlin.Triple\n\nfun extractCoordinates(coordinatesList: List<Triple<Int, Int, Int>>): Triple<Int, Int, Int> {\n    return coordinatesList[0]\n}"}
{"kt_path": "5828/solution_5828.kt", "Qwen2.5-Coder-3B-Instruct": "fun calculatePaintCansNeeded(wallAreas: List<Double>, costPerSquareMeter: Double): Int {\n    val totalArea = wallAreas.sumOf { it }\n    return (totalArea / costPerSquareMeter).toInt()\n}"}
