{"kt_path": "7824/solution_7824.kt", "CodeLlama-7B-KStack-clean": "fun testCountOddNumbers() {\n    val numbers = listOf(1, 2, 3, 4, 5, 6, 7, 8, 9, 10)\n    val oddNumbers = numbers.filter { it % 2 != 0 }\n    println(\"Count of odd numbers: ${oddNumbers.size}\")\n}"}
{"kt_path": "remisultan__multiarm-bandit-algorithm-kotlin__ead934d/core-bandit/src/main/kotlin/org/rsultan/bandit/algorithms/BanditAlgorithm.kt", "CodeLlama-7B-KStack-clean": "public interface BanditAlgorithm {\n    fun selectArm(): Int\n\n    fun update(arm: Int, reward: Float)\n}"}
{"kt_path": "13864/solution_13864.kt", "CodeLlama-7B-KStack-clean": "fun calculateScore(a: Int, b: Int): Int {\n    return a * b\n}"}
{"kt_path": "9763/solution_9763.kt", "CodeLlama-7B-KStack-clean": "fun calculateFinalPrice(initialPrice: Double, discount: Double): Double {\n    return initialPrice - (initialPrice * discount)\n}"}
{"kt_path": "8545/solution_8545.kt", "CodeLlama-7B-KStack-clean": "fun calculateConversionRate(n: Int, m: Int): Double {\n    return 0.0\n}"}
{"kt_path": "13968/solution_13968.kt", "CodeLlama-7B-KStack-clean": "fun athletePerformanceDistance(d1: Double, d2: Double): Double {\n    return d1 / d2\n}"}
{"kt_path": "14509/solution_14509.kt", "CodeLlama-7B-KStack-clean": "fun calculateRoomArea(length: Int, width: Int): Int {\n    val area = length * width\n    return area\n}"}
{"kt_path": "7670/solution_7670.kt", "CodeLlama-7B-KStack-clean": "fun identityAssignment(): Boolean {\n    var a = 5\n    var b = a\n    return b == 5\n}"}
{"kt_path": "224/solution_224.kt", "CodeLlama-7B-KStack-clean": "fun calculateSalary(a: Double): Long {\n    return Math.round(a).toLong()\n}"}
{"kt_path": "11310/solution_11310.kt", "CodeLlama-7B-KStack-clean": "fun calculateExpenses(n: Int, p: Float): Float {\n    var expenses = n.toFloat() * p\n    return expenses\n}"}
{"kt_path": "10330/solution_10330.kt", "CodeLlama-7B-KStack-clean": "fun calculatePower(a: Double, b: Double): Double {\n    return a * b\n}"}
{"kt_path": "11101/solution_11101.kt", "CodeLlama-7B-KStack-clean": "fun checkPositiveInteger(a: Int): Boolean {\n    return if (a <= 0) false else true\n}"}
{"kt_path": "432/solution_432.kt", "CodeLlama-7B-KStack-clean": "fun calculateResistance(resistance: Double, current: Double): Double {\n    val r = resistance / current\n    return r\n}"}
{"kt_path": "n81ur3__kotlin-coding-challenges__fdc5941/src/main/kotlin/adventofcode2018/Day04ReposeRecord.kt", "CodeLlama-7B-KStack-clean": "class Day04ReposeRecord {\n    constructor()\n}"}
{"kt_path": "8671/solution_8671.kt", "CodeLlama-7B-KStack-clean": "fun calculateAverageSpeed(distance: Double, time: Double): Double {\n    val averageSpeed = distance / time\n    return averageSpeed\n}"}
{"kt_path": "5601/solution_5601.kt", "CodeLlama-7B-KStack-clean": "fun calculateCircuitPower(voltage: Double, current: Double): Double {\n    return voltage * current\n}"}
{"kt_path": "10329/solution_10329.kt", "CodeLlama-7B-KStack-clean": "fun calculateResistance(resistance: Double, current: Double): Double {\n    val r = resistance / current\n    return r\n}"}
{"kt_path": "n81ur3__kotlin-coding-challenges__fdc5941/src/main/kotlin/adventofcode2020/Day19MonsterMessage.kt", "CodeLlama-7B-KStack-clean": "class Day19MonsterMessage {\n    fun main() {\n        println(\"Hello World!\")\n    }\n}"}
{"kt_path": "n81ur3__kotlin-coding-challenges__fdc5941/src/main/kotlin/adventofcode2020/Day07HandyHaversacks.kt", "CodeLlama-7B-KStack-clean": "class Day07HandyHaversacks {\n\n}"}
{"kt_path": "7007/solution_7007.kt", "CodeLlama-7B-KStack-clean": "fun isLongFlight(a: Int, b: Int): Boolean {\n    return if (a <= b) true else false\n}"}
{"kt_path": "3696/solution_3696.kt", "CodeLlama-7B-KStack-clean": "fun findCommonArea(a: Float, b: Float, c: Float): Float {\n    return a * b * c\n}"}
{"kt_path": "9314/solution_9314.kt", "CodeLlama-7B-KStack-clean": "fun isEven(n: Int): Boolean {\n    return n % 2 == 0\n}"}
{"kt_path": "10577/solution_10577.kt", "CodeLlama-7B-KStack-clean": "fun isEven(n: Int): Boolean {\n    return n % 2 == 0\n}"}
{"kt_path": "n81ur3__kotlin-coding-challenges__fdc5941/src/main/kotlin/adventofcode2018/Day06ChronalCoordinates.kt", "CodeLlama-7B-KStack-clean": "class Day06ChronalCoordinates {\n\n}"}
{"kt_path": "7819/solution_7819.kt", "CodeLlama-7B-KStack-clean": "fun calculatePowerConsumption(power: Double): Double {\n    val consumption = 5.0 / power\n    return consumption\n}"}
{"kt_path": "8829/solution_8829.kt", "CodeLlama-7B-KStack-clean": "fun calculateDailyCaloricNeeds(weight: Float, height: Float): Float {\n    val bmi = weight / (height * 24)\n    val bmiAdjusted = bmi * height\n    return bmiAdjusted\n}"}
{"kt_path": "6256/solution_6256.kt", "CodeLlama-7B-KStack-clean": "fun notEqualNone(a: Int?, b: Int?): Boolean {\n    if (a != null && b != null) {\n        return true\n    }\n    return false\n}"}
{"kt_path": "4238/solution_4238.kt", "CodeLlama-7B-KStack-clean": "fun checkSpeedLimit(speed: Float, limit: Float): Boolean {\n    return if (speed <= limit) true else false\n}"}
{"kt_path": "3868/solution_3868.kt", "CodeLlama-7B-KStack-clean": "fun sumOfNumbers(a: Int, b: Int): Int {\n    var sum = a + b\n    while (sum < 10) {\n        sum *= 2\n    }\n    return sum\n}"}
{"kt_path": "5766/solution_5766.kt", "CodeLlama-7B-KStack-clean": "fun shiftAndMultiplyAssignment(a: Int, b: Int): Int {\n    var a = a\n    var b = b\n    var c = a shl b\n    var d = a ushr b\n    var e = d * c\n    return e\n}"}
{"kt_path": "4304/solution_4304.kt", "CodeLlama-7B-KStack-clean": "fun architectMath(a: Int, b: Int): Int {\n    val x = a * 2\n    val y = a + b\n    val z = x + y\n    return z\n}"}
{"kt_path": "alebedev__aoc2022__d6ba46b/src/main/kotlin/Map.kt", "CodeLlama-7B-KStack-clean": "class MapKt {\n    companion object {\n        fun main() {\n            AocMap.INSTANCE.solve()\n        }\n    }\n}"}
{"kt_path": "7168/solution_7168.kt", "CodeLlama-7B-KStack-clean": "fun multiplyAndModulo(a: Int, b: Int, modulo: Int, moduloPower: Int): Int {\n    val result = a * b\n    val remainder = result % modulo\n    return remainder\n}"}
{"kt_path": "5304/solution_5304.kt", "CodeLlama-7B-KStack-clean": "fun numberOfCircuits(n: Int, k: Int, m: Int): Int {\n    val r = n / k\n    val q = n % k\n    return if (q == 0) r else r + 1\n}"}
{"kt_path": "7099/solution_7099.kt", "CodeLlama-7B-KStack-clean": "fun calculateDistance(x1: Double, y1: Double, x2: Double): Double {\n    val distance = (x2 - x1) * (x2 - x1) + (y1 - y2) * (y1 - y2)\n    return Math.sqrt(distance)\n}"}
{"kt_path": "8138/solution_8138.kt", "CodeLlama-7B-KStack-clean": "fun athletePoints(time: Int, isDisqualified: Boolean, hasWon: Boolean): Int {\n    return if (time <= 10) {\n        if (isDisqualified) 0 else 3\n    } else if (hasWon) {\n        time + 1\n    } else {\n        time\n    }\n}"}
{"kt_path": "6625/solution_6625.kt", "CodeLlama-7B-KStack-clean": "fun calculateCutLength(length: Float, width: Int, n: Int): Float {\n    val cutLength = (length - width + 1) / 2f\n    val result = (length - cutLength * n) / n\n    return result\n}"}
{"kt_path": "14820/solution_14820.kt", "CodeLlama-7B-KStack-clean": "fun positiveIntegersSum(n: Int): Int {\n    var sum = 0\n    var i = 1\n    while (i <= n) {\n        sum += i\n        i++\n    }\n    return sum\n}"}
{"kt_path": "3808/solution_3808.kt", "CodeLlama-7B-KStack-clean": "fun countNegative(a: Int, b: Int): Int {\n    var count = 0\n    var i = 0\n    var j = a\n    while (j <= b) {\n        if (j < 0) {\n            count++\n        }\n        i++\n        j++\n    }\n    return count\n}"}
{"kt_path": "677/solution_677.kt", "CodeLlama-7B-KStack-clean": "fun modulusComplexNumbers(a: Float, b: Float): Float {\n    val result = (a * a + b * b).sqrt()\n    return result.toFloat()\n}"}
{"kt_path": "1838/solution_1838.kt", "CodeLlama-7B-KStack-clean": "fun calculateSum(n: Int): Int {\n    var sum = 0\n    var i = 1\n    while (i <= n) {\n        sum += i\n        i++\n    }\n    return sum\n}"}
{"kt_path": "3178/solution_3178.kt", "CodeLlama-7B-KStack-clean": "fun graphicDesignerSalary(hours: Int): Int {\n    var result = 0\n    if (hours > 1) {\n        result = 2500\n    } else {\n        result = 0\n    }\n    result += hours * 500\n    return result\n}"}
{"kt_path": "9504/solution_9504.kt", "CodeLlama-7B-KStack-clean": "fun checkPrimeNumbers(n: Int): Boolean {\n    var i = 2\n    while (i * i <= n) {\n        if (n % i == 0) return false\n        i++\n    }\n    return true\n}"}
{"kt_path": "5182/solution_5182.kt", "CodeLlama-7B-KStack-clean": "fun checkDivisible(n: Int): Boolean {\n    var i = 2\n    while (i <= 11) {\n        if (n % i != 0) {\n            i++\n            continue\n        }\n        return false\n    }\n    return true\n}"}
{"kt_path": "7650/solution_7650.kt", "CodeLlama-7B-KStack-clean": "fun sumOfSquares(n: Int): Int {\n    var sum = 0\n    var i = 1\n    while (i <= n) {\n        sum += i * i\n        i++\n    }\n    return sum\n}"}
{"kt_path": "6824/solution_6824.kt", "CodeLlama-7B-KStack-clean": "fun calculateScore(a: Int, b: Int): Int {\n    val score = a * 10 - b * 5\n    return if (score > a * 3) score - b else -1\n}"}
{"kt_path": "1825/solution_1825.kt", "CodeLlama-7B-KStack-clean": "fun calculateCarpenterSalary(hours: Int, wage: Double, overhead: Double): Double {\n    val salary = hours * wage\n    val profit = hours * wage * overhead / 100\n    return salary + profit\n}"}
{"kt_path": "1332/solution_1332.kt", "CodeLlama-7B-KStack-clean": "fun extinguishFire(n: Double): Int {\n    var i = 0\n    var x = n\n    while (x > 0.0) {\n        x /= 2.0\n        i++\n    }\n    return i\n}"}
{"kt_path": "10817/solution_10817.kt", "CodeLlama-7B-KStack-clean": "fun maxOfThree(a: Int, b: Int, c: Int): Int {\n    return if (a > b) {\n        if (a > c) a else c\n    } else {\n        if (b > c) b else c\n    }\n}"}
{"kt_path": "11536/solution_11536.kt", "CodeLlama-7B-KStack-clean": "fun isFloat(value: Any?): Boolean {\n    return value is Float\n}"}
{"kt_path": "13694/solution_13694.kt", "CodeLlama-7B-KStack-clean": "fun calculateCarpenterSalary(hours: Int, wage: Double, overtime: Double): Double {\n    val salary: Double = hours.toDouble() * wage\n    val overtimeSalary: Double = overtime * wage\n    val totalSalary: Double = salary + overtimeSalary\n    val bonus: Double = if (totalSalary > 1000) totalSalary * 0.1 else 0.0\n    return totalSalary + bonus\n}"}
{"kt_path": "7127/solution_7127.kt", "CodeLlama-7B-KStack-clean": "fun checkInteger(obj: Any?): Boolean {\n    return obj is Int\n}"}
{"kt_path": "7144/solution_7144.kt", "CodeLlama-7B-KStack-clean": "fun identityComparisonAndFloatingPointOperations(a: Double, b: Double): Boolean {\n    val diff = Math.abs(a - b)\n    return diff < 0.01\n}"}
{"kt_path": "8240/solution_8240.kt", "CodeLlama-7B-KStack-clean": "fun calculateFactorial(n: Int): Int {\n    var result = 1\n    var i = 1\n    while (i <= n) {\n        result *= i\n        i++\n        if (i == n) break\n    }\n    return result\n}"}
{"kt_path": "2140/solution_2140.kt", "CodeLlama-7B-KStack-clean": "fun commissionCalculator(sale: Double, price: Double, commission: Double): Double {\n    var result = 0.0\n    if (sale < price) {\n        result = sale * commission\n    } else if (sale > price) {\n        result = commission\n    }\n    return result\n}"}
{"kt_path": "14315/solution_14315.kt", "CodeLlama-7B-KStack-clean": "fun sumPositiveIntegers(n: Int): Int {\n    var sum = 1\n    var i = 2\n    while (i <= n) {\n        if (i % 2 == 0) {\n            sum += i\n        }\n        i++\n    }\n    return sum\n}"}
{"kt_path": "2523/solution_2523.kt", "CodeLlama-7B-KStack-clean": "fun sumEvenNumbers(start: Int, end: Int): Int {\n    var sum = 0\n    var i = start\n    while (i <= end) {\n        if (i % 2 == 0) {\n            sum += i\n        }\n        i++\n    }\n    return sum\n}"}
{"kt_path": "918/solution_918.kt", "CodeLlama-7B-KStack-clean": "fun checkBudget(budget: Int): String {\n    val budgetNeeded = 4000\n    if (budget < budgetNeeded) {\n        return \"Insufficient budget, please allocate more funds for the campaign.\"\n    }\n    return \"Budget is sufficient for the marketing campaign.\"\n}"}
{"kt_path": "10520/solution_10520.kt", "CodeLlama-7B-KStack-clean": "fun sumOfEvenNumbers(start: Int, end: Int): Int {\n    var sum = 0\n    var i = start\n    while (i <= end) {\n        if (i % 2 == 0) {\n            sum += i\n        }\n        i++\n    }\n    return sum\n}"}
{"kt_path": "6399/solution_6399.kt", "CodeLlama-7B-KStack-clean": "fun checkPercentage(percentage: Int): String {\n    return when {\n        percentage < 95 -> \"Within acceptable range\"\n        percentage > 98 -> \"Outside acceptable range\"\n        else -> \"Within acceptable range\"\n    }\n}"}
{"kt_path": "10731/solution_10731.kt", "CodeLlama-7B-KStack-clean": "fun checkEligibility(age: Int, salary: Int, bonus: Int): String {\n    return if (age > 18 && salary > 5 && bonus > 2) \"Eligible\" else \"Not Eligible\"\n}"}
{"kt_path": "8756/solution_8756.kt", "CodeLlama-7B-KStack-clean": "fun findMax(a: Int, b: Int, c: Int): Int {\n    var max = a\n    if (b > max) {\n        max = b\n    }\n    if (c > max) {\n        max = c\n    }\n    return max\n}"}
{"kt_path": "10964/solution_10964.kt", "CodeLlama-7B-KStack-clean": "fun calculateInvestmentGrowth(initialInvestment: Double, monthlyInterestRate: Double, numberOfYears: Int): Double {\n    var investment = initialInvestment\n    var numberOfMonths = numberOfYears * 12\n    while (numberOfMonths > 0) {\n        investment += monthlyInterestRate / 12.0 * investment\n        numberOfMonths--\n    }\n    return investment\n}"}
{"kt_path": "9201/solution_9201.kt", "CodeLlama-7B-KStack-clean": "fun isCloseToZero(a: Double, eps: Double): Boolean {\n    return if (a == 0.0) true else if (a < 0) isCloseToZero(-a, eps) else Math.abs(a) < eps\n}"}
{"kt_path": "14784/solution_14784.kt", "CodeLlama-7B-KStack-clean": "fun sumOfMultiples(a: Int, b: Int, c: Int): Int {\n    var sum = 0\n    var i = 0\n    while (i < a) {\n        if (i % b == 0 || i % c == 0) {\n            sum += i\n        }\n        i++\n    }\n    return sum\n}"}
{"kt_path": "12550/solution_12550.kt", "CodeLlama-7B-KStack-clean": "fun checkGameConditions(a: Int, b: Int, c: Int, d: Boolean): Boolean {\n    return if (a <= 1000 && b <= 50 && c >= 10 && !d) true else false\n}"}
{"kt_path": "2717/solution_2717.kt", "CodeLlama-7B-KStack-clean": "fun getFirstElement(lst: List<*>): Any? {\n    return lst[0]\n}"}
{"kt_path": "10259/solution_10259.kt", "CodeLlama-7B-KStack-clean": "fun calculateTotalPrice(price: Float, discount: Float): Float {\n    val totalPrice = if (Math.abs(price) <= 0.0001f) {\n        price\n    } else {\n        price - (price * discount)\n    }\n    return totalPrice\n}"}
{"kt_path": "1510/solution_1510.kt", "CodeLlama-7B-KStack-clean": "fun getLastElement(lst: List<*>): Any? {\n    return lst.last()\n}"}
{"kt_path": "2099/solution_2099.kt", "CodeLlama-7B-KStack-clean": "fun calculateTotalDistance(distance: Float, time: Float): Float {\n    var totalDistance = 0f\n    var currentTime = 1\n    var currentDistance = distance.toInt()\n    while (currentTime < time) {\n        totalDistance += currentDistance\n        currentTime++\n        currentDistance++\n    }\n    return totalDistance\n}"}
{"kt_path": "9202/solution_9202.kt", "CodeLlama-7B-KStack-clean": "fun hasSignificantDecimalPart(a: Double, b: Double): Boolean {\n    val absA = Math.abs(a)\n    val absB = Math.abs(b)\n    val diff = Math.abs(a - b)\n    val diffAsInt = Math.abs(a - b).toInt()\n    return diff > 0.0000000000000001 || diffAsInt > 0\n}"}
{"kt_path": "9289/solution_9289.kt", "CodeLlama-7B-KStack-clean": ""}
{"kt_path": "222/solution_222.kt", "CodeLlama-7B-KStack-clean": "fun calculateProfit(cost: Double, price: Double, quantity: Double): Double {\n    val profit = price - cost\n    val profitIfSold = if (profit > 0) profit else -profit\n    val profitIfSoldInDollars = profitIfSold * quantity\n    return profitIfSoldInDollars\n}"}
{"kt_path": "2704/solution_2704.kt", "CodeLlama-7B-KStack-clean": "fun calculateSum(): Double {\n    var sum = 0.0\n    var step = 0.1\n    while (sum <= 1000.0) {\n        sum += step\n        step += 0.01\n    }\n    return sum\n}"}
{"kt_path": "7036/solution_7036.kt", "CodeLlama-7B-KStack-clean": "fun calculateExpenses(expensesList: List<Double>): Double {\n    return expensesList.sumOf { it }\n}"}
{"kt_path": "7097/solution_7097.kt", "CodeLlama-7B-KStack-clean": ""}
{"kt_path": "6743/solution_6743.kt", "CodeLlama-7B-KStack-clean": "fun toSet(data: List<Int>): Set<Int> {\n    return data.toSet()\n}"}
{"kt_path": "14646/solution_14646.kt", "CodeLlama-7B-KStack-clean": "fun checkPromotionEligibility(age: Int, salary: Double): Boolean {\n    return if (age > 25) {\n        if (age >= 41) true else false\n    } else false\n}"}
{"kt_path": "1671/solution_1671.kt", "CodeLlama-7B-KStack-clean": "fun createTupleFromDictionary(dictionary: Map<String, *>): List<Pair<String, Any>> {\n    return dictionary.toList()\n}"}
{"kt_path": "13442/solution_13442.kt", "CodeLlama-7B-KStack-clean": "fun printEvenNumbers(start: Int, end: Int) {\n    var i = start\n    while (i <= end) {\n        if (i % 2 == 0) {\n            println(i)\n        }\n        i++\n        if (i == end) break\n    }\n}"}
{"kt_path": "13338/solution_13338.kt", "CodeLlama-7B-KStack-clean": "fun convertToSet(photoData: List<String>): Set<String> {\n    return photoData.toSet()\n}"}
{"kt_path": "8409/solution_8409.kt", "CodeLlama-7B-KStack-clean": "fun calculateTotalCost(initialCost: Double, discount: Double): Double {\n    var totalCost = initialCost * discount\n    if (initialCost > 1000.0) {\n        totalCost = if (totalCost < 0.1) 0.0 else totalCost - totalCost\n    }\n    return totalCost\n}"}
{"kt_path": "5263/solution_5263.kt", "CodeLlama-7B-KStack-clean": "fun operationsQuiz(a: Boolean, b: Boolean, c: Boolean, d: Boolean): Boolean {\n    var sum = 0\n    if (!a) sum++\n    if (!b) sum++\n    if (!c) sum++\n    if (!d) sum++\n    return if (sum < 2) true else false\n}"}
{"kt_path": "7005/solution_7005.kt", "CodeLlama-7B-KStack-clean": "fun convertSetToList(s: Set<*>): List<Any?> {\n    return s.toList()\n}"}
{"kt_path": "7004/solution_7004.kt", "CodeLlama-7B-KStack-clean": "fun convertListToSet(lst: List<Any>): Set<Any> = lst.toSet()"}
{"kt_path": "1559/solution_1559.kt", "CodeLlama-7B-KStack-clean": "fun convertToSet(gameData: List<Any>): Set<Any> {\n    return gameData.toSet()\n}"}
{"kt_path": "14689/solution_14689.kt", "CodeLlama-7B-KStack-clean": "fun printOddNumbers(n: Int) {\n    var i = 1\n    while (i <= n) {\n        if (i % 2 != 0) {\n            println(i)\n        }\n        i++\n        if (i == n) break\n    }\n}"}
{"kt_path": "13400/solution_13400.kt", "CodeLlama-7B-KStack-clean": "fun findBiggerNumber(a: Int, b: Int, c: Int, d: Int): Int {\n    val bigger = if (a > b) a else b\n    val bigger2 = if (c > d) c else d\n    val bigger3 = if (bigger > bigger2) bigger else bigger2\n    return bigger3\n}"}
{"kt_path": "9661/solution_9661.kt", "CodeLlama-7B-KStack-clean": "fun calculateSums(n: Int): Int {\n    var sum = 0\n    var i = 1\n    while (i <= n) {\n        if (i % 5 == 0 || i % 7 == 0 || i % 35 == 0) {\n            sum += i\n        }\n        i++\n    }\n    return sum\n}"}
{"kt_path": "8323/solution_8323.kt", "CodeLlama-7B-KStack-clean": "fun calculateRemainingBooks(numberOfBooks: Int, numberOfBorrowedBooks: Int, numberOfReturnedBooks: Int): Int {\n    var remainingBooks = 0\n    remainingBooks = numberOfBooks\n    remainingBooks /= numberOfBorrowedBooks\n    var i = 0\n    while (i < numberOfReturnedBooks) {\n        var j = 0\n        j = remainingBooks * 3\n        i++\n    }\n    return remainingBooks\n}"}
{"kt_path": "236/solution_236.kt", "CodeLlama-7B-KStack-clean": "fun computeFloorArea(length: Float, width: Float): Any {\n    if (length > 0f) {\n        if (width > 0f) {\n            return length * width\n        } else {\n            return \"Invalid width\"\n        }\n    } else {\n        return \"Invalid length\"\n    }\n}"}
{"kt_path": "14771/solution_14771.kt", "CodeLlama-7B-KStack-clean": "fun indexingAndSlicingTuples(input: List<String>, n: Int): List<String> {\n    return input.subList(0, input.size)\n}"}
{"kt_path": "9943/solution_9943.kt", "CodeLlama-7B-KStack-clean": "fun addNegIntegersToSet(numbers: List<Int>): Set<Int> {\n    return numbers.toSet()\n}"}
{"kt_path": "8713/solution_8713.kt", "CodeLlama-7B-KStack-clean": "fun accessImaginaryPart(complexNumber: Pair<Double, Double>): Double {\n    return complexNumber.second.toDouble()\n}"}
{"kt_path": "3773/solution_3773.kt", "CodeLlama-7B-KStack-clean": "fun calculateSocialWorkerSalary(salary: Double, yearsOfExperience: Int): Double {\n    return when {\n        yearsOfExperience > 10 -> salary\n        yearsOfExperience > 5 -> salary * 1.5\n        yearsOfExperience > 2 -> salary * 2\n        else -> salary * 3\n    }\n}"}
{"kt_path": "11/solution_11.kt", "CodeLlama-7B-KStack-clean": "fun checkOddEvenNumbers(a: Int, b: Int, c: Int): Boolean {\n    var count = 0\n    if (a % 2 == 1) count++\n    if (b % 2 == 1) count++\n    if (c % 2 == 1) count++\n    return count == 2\n}"}
{"kt_path": "1118/solution_1118.kt", "CodeLlama-7B-KStack-clean": "fun createEmptyComplementList(nurse: String): List<Any> {\n    val list = ArrayList<Any>()\n    return list\n}"}
{"kt_path": "8385/solution_8385.kt", "CodeLlama-7B-KStack-clean": "fun isPrime(n: Int): Boolean {\n    if (n < 2) return false\n    var i = 2\n    while (i * i <= n) {\n        if (n % i == 0) return false\n        i++\n    }\n    return true\n}"}
{"kt_path": "14396/solution_14396.kt", "CodeLlama-7B-KStack-clean": "fun extractCoordinates(coordinatesList: List<Triple<Int, Int, Int>>): Triple<Int, Int, Int> {\n    return coordinatesList[0]\n}"}
{"kt_path": "5828/solution_5828.kt", "CodeLlama-7B-KStack-clean": "fun calculatePaintCansNeeded(wallAreas: List<Double>, area: Double): Int {\n    val totalArea = wallAreas.sumOfDouble() / area\n    return totalArea.toInt()\n}"}
