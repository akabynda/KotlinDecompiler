{"kt_path": "7824/solution_7824.kt", "Qwen2.5-Coder-0.5B-Instruct": "fun main() {\n    println(\"Hello, World!\")\n}"}
{"kt_path": "remisultan__multiarm-bandit-algorithm-kotlin__ead934d/core-bandit/src/main/kotlin/org/rsultan/bandit/algorithms/BanditAlgorithm.kt", "Qwen2.5-Coder-0.5B-Instruct": "interface BanditAlgorithm {\n    fun selectArm(): Int\n    fun update(arm: Int, reward: Float)\n}"}
{"kt_path": "13864/solution_13864.kt", "Qwen2.5-Coder-0.5B-Instruct": "fun calculateScore(a: Int, b: Int): Int {\n    return a * b\n}"}
{"kt_path": "9763/solution_9763.kt", "Qwen2.5-Coder-0.5B-Instruct": "fun calculateFinalPrice(price1: Double, price2: Double): Double {\n    return price1 - price2\n}"}
{"kt_path": "8545/solution_8545.kt", "Qwen2.5-Coder-0.5B-Instruct": "fun calculateConversionRate(a: Int, b: Int): Double {\n    return (a.toDouble() / b.toDouble()).toDouble()\n}"}
{"kt_path": "13968/solution_13968.kt", "Qwen2.5-Coder-0.5B-Instruct": "fun athletePerformanceDistance(a: Double, b: Double): Double {\n    return (a / b).toDouble()\n}"}
{"kt_path": "14509/solution_14509.kt", "Qwen2.5-Coder-0.5B-Instruct": "fun calculateRoomArea(x: Int, y: Int): Int {\n    return x * y\n}"}
{"kt_path": "7670/solution_7670.kt", "Qwen2.5-Coder-0.5B-Instruct": "fun identityAssignment() = true"}
{"kt_path": "224/solution_224.kt", "Qwen2.5-Coder-0.5B-Instruct": "fun calculateSalary(roundedSalary: Double): Long {\n    return Math.round(roundedSalary)\n}"}
{"kt_path": "11310/solution_11310.kt", "Qwen2.5-Coder-0.5B-Instruct": "fun calculateExpenses(n: Int, f: Float): Float {\n    return n * f\n}"}
{"kt_path": "10330/solution_10330.kt", "Qwen2.5-Coder-0.5B-Instruct": "fun calculatePower(a: Double, b: Double): Double {\n    return a * b\n}"}
{"kt_path": "11101/solution_11101.kt", "Qwen2.5-Coder-0.5B-Instruct": "fun checkPositiveInteger(n: Int): Boolean {\n    return n > 0\n}"}
{"kt_path": "432/solution_432.kt", "Qwen2.5-Coder-0.5B-Instruct": "fun calculateResistance(a: Double, b: Double): Double {\n    return (a / b).toDouble()\n}"}
{"kt_path": "n81ur3__kotlin-coding-challenges__fdc5941/src/main/kotlin/adventofcode2018/Day04ReposeRecord.kt", "Qwen2.5-Coder-0.5B-Instruct": "package adventofcode2018\n\nfun main() {\n    val day04ReposeRecord = Day04ReposeRecord()\n    println(day04ReposeRecord)\n}"}
{"kt_path": "8671/solution_8671.kt", "Qwen2.5-Coder-0.5B-Instruct": "fun calculateAverageSpeed(a: Double, b: Double): Double {\n    return (a + b) / 2.0\n}"}
{"kt_path": "5601/solution_5601.kt", "Qwen2.5-Coder-0.5B-Instruct": "fun calculateCircuitPower(a: Double, b: Double): Double {\n    return a * b\n}"}
{"kt_path": "10329/solution_10329.kt", "Qwen2.5-Coder-0.5B-Instruct": "fun calculateResistance(a: Double, b: Double): Double {\n    return (a / b).toDouble()\n}"}
{"kt_path": "n81ur3__kotlin-coding-challenges__fdc5941/src/main/kotlin/adventofcode2020/Day19MonsterMessage.kt", "Qwen2.5-Coder-0.5B-Instruct": "package adventofcode2020\n\nfun main() {\n    val day19MonsterMessage = Day19MonsterMessage()\n    println(day19MonsterMessage)\n}"}
{"kt_path": "n81ur3__kotlin-coding-challenges__fdc5941/src/main/kotlin/adventofcode2020/Day07HandyHaversacks.kt", "Qwen2.5-Coder-0.5B-Instruct": "package adventofcode2020\n\nfun main() {\n    val day07HandyHaversacks = Day07HandyHaversacks()\n    println(day07HandyHaversacks)\n}"}
{"kt_path": "7007/solution_7007.kt", "Qwen2.5-Coder-0.5B-Instruct": "fun isLongFlight(x: Int, y: Int): Boolean {\n    return x == y\n}"}
{"kt_path": "3696/solution_3696.kt", "Qwen2.5-Coder-0.5B-Instruct": "fun findCommonArea(a: Float, b: Float, c: Float): Float {\n    return (a * b) / (c * c)\n}"}
{"kt_path": "9314/solution_9314.kt", "Qwen2.5-Coder-0.5B-Instruct": "fun isEven(n: Int): Boolean {\n    return n % 2 == 0\n}"}
{"kt_path": "10577/solution_10577.kt", "Qwen2.5-Coder-0.5B-Instruct": "fun isEven(n: Int): Boolean {\n    return n % 2 == 0\n}"}
{"kt_path": "n81ur3__kotlin-coding-challenges__fdc5941/src/main/kotlin/adventofcode2018/Day06ChronalCoordinates.kt", "Qwen2.5-Coder-0.5B-Instruct": "package adventofcode2018\n\nfun main() {\n    val day06ChronalCoordinates = Day06ChronalCoordinates()\n    println(day06ChronalCoordinates)\n}"}
{"kt_path": "7819/solution_7819.kt", "Qwen2.5-Coder-0.5B-Instruct": "fun calculatePowerConsumption(d: Double): Double {\n    return d / 5.0\n}"}
{"kt_path": "8829/solution_8829.kt", "Qwen2.5-Coder-0.5B-Instruct": "fun calculateDailyCaloricNeeds(calories1: Float, calories2: Float): Float {\n    return (calories1 + calories2) / 2.0f\n}"}
{"kt_path": "6256/solution_6256.kt", "Qwen2.5-Coder-0.5B-Instruct": "fun notEqualNone(a: Int, b: Int): Boolean {\n    return a != b\n}"}
{"kt_path": "4238/solution_4238.kt", "Qwen2.5-Coder-0.5B-Instruct": "fun checkSpeedLimit(f1: Float, f2: Float): Boolean {\n    return f1 < f2\n}"}
{"kt_path": "3868/solution_3868.kt", "Qwen2.5-Coder-0.5B-Instruct": "fun sumOfNumbers(a: Int, b: Int): Int {\n    return a + b\n}"}
{"kt_path": "5766/solution_5766.kt", "Qwen2.5-Coder-0.5B-Instruct": "fun Solution_5766Kt.shiftAndMultiplyAssignment(a: Int, b: Int): Int {\n    var result = a\n    result = result shl b\n    result = result ushr b\n    result = result * b\n    return result\n}"}
{"kt_path": "4304/solution_4304.kt", "Qwen2.5-Coder-0.5B-Instruct": "fun architectMath(a: Int, b: Int): Int {\n    return a * b + a + b\n}"}
{"kt_path": "alebedev__aoc2022__d6ba46b/src/main/kotlin/Map.kt", "Qwen2.5-Coder-0.5B-Instruct": "import java.util.HashMap\n\nfun main(args: Array<String>) {\n    val map = HashMap()\n    map.put(\"key\", \"value\")\n    println(map)\n}"}
{"kt_path": "7168/solution_7168.kt", "Qwen2.5-Coder-0.5B-Instruct": "fun multiplyAndModulo(a: Int, b: Int, c: Int, d: Int): Int {\n    return (a * b) % (c + d)\n}"}
{"kt_path": "5304/solution_5304.kt", "Qwen2.5-Coder-0.5B-Instruct": "fun numberOfCircuits(a: Int, b: Int, c: Int): Int {\n    return (a / b) * (b / c)\n}"}
{"kt_path": "7099/solution_7099.kt", "Qwen2.5-Coder-0.5B-Instruct": "fun calculateDistance(x: Double, y: Double, z: Double): Double {\n    return Math.sqrt(x * x + y * y + z * z)\n}"}
{"kt_path": "8138/solution_8138.kt", "Qwen2.5-Coder-0.5B-Instruct": "fun athletePoints(athleteId: Int, isMale: Boolean, isFemale: Boolean): Int {\n    return when {\n        isMale -> athleteId + 3\n        isFemale -> athleteId - 1\n        else -> throw IllegalArgumentException(\"Invalid gender\")\n    }\n}"}
{"kt_path": "6625/solution_6625.kt", "Qwen2.5-Coder-0.5B-Instruct": "fun calculateCutLength(f1: Float, f2: Float, n: Int): Float {\n    val result = f1 * f2 / n\n    return result\n}"}
{"kt_path": "14820/solution_14820.kt", "Qwen2.5-Coder-0.5B-Instruct": "fun positiveIntegersSum(n: Int): Int {\n    var sum = 0\n    for (i in 0 until n) {\n        sum += i\n    }\n    return sum\n}"}
{"kt_path": "3808/solution_3808.kt", "Qwen2.5-Coder-0.5B-Instruct": "fun countNegative(a: Int, b: Int): Int {\n    return if (a < 0) {\n        b - 1\n    } else {\n        a + 1\n    }\n}"}
{"kt_path": "677/solution_677.kt", "Qwen2.5-Coder-0.5B-Instruct": "fun Solution_677Kt.modulusComplexNumbers(a: Float, b: Float): Float {\n    val sqrtA = Math.sqrt(a.toDouble())\n    val sqrtB = Math.sqrt(b.toDouble())\n    val result = sqrtA * sqrtB\n    return result\n}"}
{"kt_path": "1838/solution_1838.kt", "Qwen2.5-Coder-0.5B-Instruct": "fun calculateSum(n: Int): Int {\n    var sum = 0\n    for (i in 0 until n) {\n        sum += i\n    }\n    return sum\n}"}
{"kt_path": "3178/solution_3178.kt", "Qwen2.5-Coder-0.5B-Instruct": "fun graphicDesignerSalary(graphicDesignerSalary: Int): Int {\n    return graphicDesignerSalary * 500\n}"}
{"kt_path": "9504/solution_9504.kt", "Qwen2.5-Coder-0.5B-Instruct": "fun checkPrimeNumbers(n: Int): Boolean {\n    for (i in 2 until n) {\n        if (n % i == 0) {\n            return false\n        }\n    }\n    return true\n}"}
{"kt_path": "5182/solution_5182.kt", "Qwen2.5-Coder-0.5B-Instruct": "fun checkDivisible(n: Int): Boolean {\n    return n % 11 == 0\n}"}
{"kt_path": "7650/solution_7650.kt", "Qwen2.5-Coder-0.5B-Instruct": "fun sumOfSquares(n: Int): Int {\n    var sum = 0\n    for (i in 0 until n) {\n        sum += i * i\n    }\n    return sum\n}"}
{"kt_path": "6824/solution_6824.kt", "Qwen2.5-Coder-0.5B-Instruct": "fun calculateScore(a: Int, b: Int): Int {\n    return a * b - (a + b)\n}"}
{"kt_path": "1825/solution_1825.kt", "Qwen2.5-Coder-0.5B-Instruct": "fun calculateCarpenterSalary(\n  salary: Int,\n  baseSalary: Double,\n  bonus: Double\n): Double {\n  val totalSalary = salary + baseSalary + bonus\n  return totalSalary\n}"}
{"kt_path": "1332/solution_1332.kt", "Qwen2.5-Coder-0.5B-Instruct": "fun extinguishFire(d: Double): Int {\n    return d.toDouble() / 2.0\n}"}
{"kt_path": "10817/solution_10817.kt", "Qwen2.5-Coder-0.5B-Instruct": "fun maxOfThree(a: Int, b: Int, c: Int): Int {\n    return when {\n        a > b -> a\n        b > c -> b\n        else -> c\n    }\n}"}
{"kt_path": "11536/solution_11536.kt", "Qwen2.5-Coder-0.5B-Instruct": "fun isFloat(obj: Any): Boolean {\n    return obj is Float\n}"}
{"kt_path": "13694/solution_13694.kt", "Qwen2.5-Coder-0.5B-Instruct": "fun calculateCarpenterSalary(\n  salary: Int,\n  baseSalary: Double,\n  bonus: Double\n): Double {\n  return salary * (baseSalary + bonus)\n}"}
{"kt_path": "7127/solution_7127.kt", "Qwen2.5-Coder-0.5B-Instruct": "fun checkInteger(obj: Any): Boolean {\n    return obj is Integer\n}"}
{"kt_path": "7144/solution_7144.kt", "Qwen2.5-Coder-0.5B-Instruct": "fun identityComparisonAndFloatingPointOperations(a: Double, b: Double): Boolean {\n    return Math.abs(a - b) < 1e-9\n}"}
{"kt_path": "8240/solution_8240.kt", "Qwen2.5-Coder-0.5B-Instruct": "fun calculateFactorial(n: Int): Int {\n    if (n <= 1) return 1\n    var result = 1\n    for (i in 2..n) {\n        result *= i\n    }\n    return result\n}"}
{"kt_path": "2140/solution_2140.kt", "Qwen2.5-Coder-0.5B-Instruct": "fun commissionCalculator(a: Double, b: Double, c: Double): Double {\n    val d = 0.0\n    d.store(6)\n    d.load(0)\n    d.load(2)\n    d.cmpl()\n    if (d.ge(16)) {\n        d.load(4)\n        d.load(0)\n        d.cmpg()\n        if (d.gt(22)) {\n            d.load(0)\n            d.load(4)\n            d.mul()\n            d.store(6)\n            d.load(6)\n            d.return()\n        }\n    }\n}"}
{"kt_path": "14315/solution_14315.kt", "Qwen2.5-Coder-0.5B-Instruct": "fun sumPositiveIntegers(n: Int): Int {\n    var sum = 0\n    for (i in 0 until n) {\n        if (i > 0 && i % 2 == 0) {\n            sum += i\n        }\n    }\n    return sum\n}"}
{"kt_path": "2523/solution_2523.kt", "Qwen2.5-Coder-0.5B-Instruct": "fun sumEvenNumbers(a: Int, b: Int): Int {\n    return if (a % 2 == 0 && b % 2 == 0) {\n        a + b\n    } else {\n        0\n    }\n}"}
{"kt_path": "918/solution_918.kt", "Qwen2.5-Coder-0.5B-Instruct": "fun checkBudget(budget: Int): String {\n    return when (budget) {\n        in 0..1000 -> \"String Insufficient budget, please allocate more funds for the campaign.\"\n        in 1001..2000 -> \"String Budget is sufficient for the marketing campaign.\"\n        else -> \"Unknown budget type.\"\n    }\n}"}
{"kt_path": "10520/solution_10520.kt", "Qwen2.5-Coder-0.5B-Instruct": "fun sumOfEvenNumbers(a: Int, b: Int): Int {\n    return if (a % 2 == 0 && b % 2 == 0) {\n        a + b\n    } else {\n        0\n    }\n}"}
{"kt_path": "6399/solution_6399.kt", "Qwen2.5-Coder-0.5B-Instruct": "fun checkPercentage(n: Int): String {\n    return when (n) {\n        in 0..99 -> \"Within acceptable range\"\n        else -> \"Outside acceptable range\"\n    }\n}"}
{"kt_path": "10731/solution_10731.kt", "Qwen2.5-Coder-0.5B-Instruct": "fun checkEligibility(a: Int, b: Int, c: Int): String {\n    return when {\n        a == 18 && b == 5 && c == 2 -> \"String Eligible\"\n        else -> \"String Not Eligible\"\n    }\n}"}
{"kt_path": "8756/solution_8756.kt", "Qwen2.5-Coder-0.5B-Instruct": "fun findMax(a: Int, b: Int, c: Int): Int {\n    return when {\n        a > b -> a\n        b > c -> b\n        else -> c\n    }\n}"}
{"kt_path": "10964/solution_10964.kt", "Qwen2.5-Coder-0.5B-Instruct": "fun calculateInvestmentGrowth(\n  investmentAmount: Double,\n  growthRate: Double,\n  years: Int\n): Double {\n  val investment = investmentAmount * Math.pow(1 + growthRate / years, years.toDouble())\n  return investment\n}"}
{"kt_path": "9201/solution_9201.kt", "Qwen2.5-Coder-0.5B-Instruct": "fun isCloseToZero(a: Double, b: Double): Boolean {\n    return Math.abs(a - b) < 1e-9\n}"}
{"kt_path": "14784/solution_14784.kt", "Qwen2.5-Coder-0.5B-Instruct": "fun sumOfMultiples(a: Int, b: Int, c: Int): Int {\n    return (a * b + c) / 2\n}"}
{"kt_path": "12550/solution_12550.kt", "Qwen2.5-Coder-0.5B-Instruct": "fun checkGameConditions(x: Int, y: Int, z: Int, isWinning: Boolean): Boolean {\n    return when {\n        x == 1000 && y == 50 && z == 10 -> true\n        isWinning -> false\n        else -> false\n    }\n}"}
{"kt_path": "2717/solution_2717.kt", "Qwen2.5-Coder-0.5B-Instruct": "fun getFirstElement(list: List<*>): Any {\n    val firstElement = list.firstOrNull()\n    return firstElement ?: throw IllegalArgumentException(\"List is empty\")\n}"}
{"kt_path": "10259/solution_10259.kt", "Qwen2.5-Coder-0.5B-Instruct": "fun calculateTotalPrice(a: Float, b: Float): Float {\n    return Math.abs(a - b)\n}"}
{"kt_path": "1510/solution_1510.kt", "Qwen2.5-Coder-0.5B-Instruct": "fun getLastElement(list: List<*>): Any? {\n    return list.last()\n}"}
{"kt_path": "2099/solution_2099.kt", "Qwen2.5-Coder-0.5B-Instruct": "fun calculateTotalDistance(x: Float, y: Float): Float {\n    return (x + y) / 2f\n}"}
{"kt_path": "9202/solution_9202.kt", "Qwen2.5-Coder-0.5B-Instruct": "fun hasSignificantDecimalPart(a: Double, b: Double): Boolean {\n    val absA = Math.abs(a)\n    val absB = Math.abs(b)\n    return absA - absB > 0.0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"}
{"kt_path": "9289/solution_9289.kt", "Qwen2.5-Coder-0.5B-Instruct": "import java.util.*\n\nfun sliceTuple(list: List<java.lang.Object>, start: Int, end: Int): List<java.lang.Object> {\n    return list.subList(start, end)\n}"}
{"kt_path": "222/solution_222.kt", "Qwen2.5-Coder-0.5B-Instruct": "fun calculateProfit(a: Double, b: Double, c: Double): Double {\n    val profit = (a - b) * (c - a)\n    return profit\n}"}
{"kt_path": "2704/solution_2704.kt", "Qwen2.5-Coder-0.5B-Instruct": "fun calculateSum(): Double {\n    val d0 = 0.1\n    val d2 = 0.01\n    val d1 = 1000.0\n\n    val sum = d0 + d2 + d1\n    return sum\n}"}
{"kt_path": "7036/solution_7036.kt", "Qwen2.5-Coder-0.5B-Instruct": "fun calculateExpenses(expensesList: List<Double>): Double {\n    return Collections.sumOf(expensesList)\n}"}
{"kt_path": "7097/solution_7097.kt", "Qwen2.5-Coder-0.5B-Instruct": "fun findAnimal(animals: List<String>, index: Int): String {\n    val animalTuple = animals[index]\n    return animalTuple\n}"}
{"kt_path": "6743/solution_6743.kt", "Qwen2.5-Coder-0.5B-Instruct": "import java.util.HashSet\n\nfun main() {\n    val list = listOf(1, 2, 3)\n    val set = toSet(list)\n    println(set)\n}"}
{"kt_path": "14646/solution_14646.kt", "Qwen2.5-Coder-0.5B-Instruct": "fun checkPromotionEligibility(\n  age: Int,\n  salary: Double\n): Boolean {\n  return salary > 5000.0\n}"}
{"kt_path": "1671/solution_1671.kt", "Qwen2.5-Coder-0.5B-Instruct": "import java.util.*\n\nfun createTupleFromDictionary(dictionary: Map<String, Any>): List<Pair<String, Any>> {\n    return dictionary.entries.map { Pair(it.key, it.value) }\n}\n\nfun main() {\n    val dictionary = mapOf(\n        \"key1\" to 1,\n        \"key2\" to \"value2\",\n        \"key3\" to true\n    )\n    val result = createTupleFromDictionary(dictionary)\n    println(result)\n}"}
{"kt_path": "13442/solution_13442.kt", "Qwen2.5-Coder-0.5B-Instruct": "fun printEvenNumbers(a: Int, b: Int) {\n    for (i in a..b) {\n        if (i % 2 == 0) {\n            println(i)\n        }\n    }\n}"}
{"kt_path": "13338/solution_13338.kt", "Qwen2.5-Coder-0.5B-Instruct": "import java.util.HashSet\nimport java.util.List\n\nfun convertToSet(photoData: List<String>): HashSet<String> {\n    return HashSet(photoData)\n}"}
{"kt_path": "8409/solution_8409.kt", "Qwen2.5-Coder-0.5B-Instruct": "fun calculateTotalCost(a: Double, b: Double): Double {\n    val total = a * b\n    return total\n}"}
{"kt_path": "5263/solution_5263.kt", "Qwen2.5-Coder-0.5B-Instruct": "fun operationsQuiz(a: Boolean, b: Boolean, c: Boolean, d: Boolean): Boolean {\n    return a && b && c && d\n}"}
{"kt_path": "7005/solution_7005.kt", "Qwen2.5-Coder-0.5B-Instruct": "import java.util.*\n\nfun convertSetToList(set: Set<*>): List<*> {\n    return set.toList()\n}"}
{"kt_path": "7004/solution_7004.kt", "Qwen2.5-Coder-0.5B-Instruct": "import java.util.HashSet\nimport java.util.List\n\nfun convertListToSet(list: List<java.lang.Object>): HashSet<java.lang.Object> {\n    return HashSet(list)\n}"}
{"kt_path": "1559/solution_1559.kt", "Qwen2.5-Coder-0.5B-Instruct": "import java.util.HashSet\nimport java.util.List\n\nfun convertToSet(data: List<java.lang.Object>): HashSet<java.lang.Object> {\n    return HashSet<>(data)\n}"}
{"kt_path": "14689/solution_14689.kt", "Qwen2.5-Coder-0.5B-Instruct": "fun printOddNumbers(n: Int) {\n    for (i in 1 until n) {\n        if (i % 2 != 0) {\n            println(i)\n        }\n    }\n}"}
{"kt_path": "13400/solution_13400.kt", "Qwen2.5-Coder-0.5B-Instruct": "fun Solution_13400Kt.findBiggerNumber(a: Int, b: Int, c: Int, d: Int): Int {\n    return when {\n        a > b -> a\n        b > c -> b\n        c > d -> c\n        else -> d\n    }\n}"}
{"kt_path": "9661/solution_9661.kt", "Qwen2.5-Coder-0.5B-Instruct": "fun calculateSums(n: Int): Int {\n    var sum = 0\n    for (i in 0 until n) {\n        sum += i\n    }\n    return sum\n}"}
{"kt_path": "8323/solution_8323.kt", "Qwen2.5-Coder-0.5B-Instruct": "fun calculateRemainingBooks(\n  numBooks: Int,\n  availableBooks: Int,\n  maxBooks: Int\n): Int {\n  val remainingBooks = Math.min(numBooks, maxBooks - availableBooks)\n  return remainingBooks\n}"}
{"kt_path": "236/solution_236.kt", "Qwen2.5-Coder-0.5B-Instruct": "fun computeFloorArea(f: Float, f2: Float): Float {\n    val width = f * f2\n    val height = f / f2\n    return Math.floor(width)\n}"}
{"kt_path": "14771/solution_14771.kt", "Qwen2.5-Coder-0.5B-Instruct": "fun indexingAndSlicingTuples(list: List<String>, index: Int): List<String> {\n    return list.subList(index, index + list.size)\n}"}
{"kt_path": "9943/solution_9943.kt", "Qwen2.5-Coder-0.5B-Instruct": "import java.util.HashSet\n\nfun addNegIntegersToSet(numbers: List<Int>): HashSet<Int> {\n    return HashSet(numbers)\n}"}
{"kt_path": "8713/solution_8713.kt", "Qwen2.5-Coder-0.5B-Instruct": "fun accessImaginaryPart(complexNumber: Pair<Double, Double>): Double {\n    val realPart = complexNumber.first\n    val imaginaryPart = complexNumber.second\n    return imaginaryPart\n}"}
{"kt_path": "3773/solution_3773.kt", "Qwen2.5-Coder-0.5B-Instruct": "fun calculateSocialWorkerSalary(\n  salary: Double,\n  numberOfEmployees: Int\n): Double {\n  val baseSalary = 1.5 * salary\n  val totalSalary = baseSalary * numberOfEmployees\n  return totalSalary\n}"}
{"kt_path": "11/solution_11.kt", "Qwen2.5-Coder-0.5B-Instruct": "fun checkOddEvenNumbers(a: Int, b: Int, c: Int): Boolean {\n    return (a % 2 != 0) && (b % 2 != 0) && (c % 2 != 0)\n}"}
{"kt_path": "1118/solution_1118.kt", "Qwen2.5-Coder-0.5B-Instruct": "import java.util.ArrayList\n\nfun createEmptyComplementList(nurse: String): List<java.lang.Object> {\n    return ArrayList()\n}"}
{"kt_path": "8385/solution_8385.kt", "Qwen2.5-Coder-0.5B-Instruct": "fun isPrime(n: Int): Boolean {\n    return sqrt(n.toDouble()).toInt() == n\n}\n\nfun main() {\n    println(isPrime(8385))\n}"}
{"kt_path": "14396/solution_14396.kt", "Qwen2.5-Coder-0.5B-Instruct": "import java.util.List\n\nfun extractCoordinates(coordinatesList: List<List<Int>>) = coordinatesList.map { it.map { it.first } }.map { it.map { it.second } }.map { it.map { it.third } }"}
{"kt_path": "5828/solution_5828.kt", "Qwen2.5-Coder-0.5B-Instruct": "fun calculatePaintCansNeeded(wallAreas: List<Double>, paintArea: Double): Int {\n    val wallAreasList = wallAreas.map { it.toDouble() }\n    val paintAreaList = paintArea.toDouble().toDouble()\n    val sum = wallAreasList.sum()\n    val paintCans = sum / paintAreaList\n    return paintCans.toInt()\n}"}
