{"kt_path": "7824/solution_7824.kt", "Qwen2.5-Coder-1.5B-Instruct": "fun main() {\n    testCountOddNumbers()\n}\n\nfun testCountOddNumbers() {\n    // Your implementation here\n}"}
{"kt_path": "remisultan__multiarm-bandit-algorithm-kotlin__ead934d/core-bandit/src/main/kotlin/org/rsultan/bandit/algorithms/BanditAlgorithm.kt", "Qwen2.5-Coder-1.5B-Instruct": "interface BanditAlgorithm {\n    fun selectArm(): Int\n\n    fun update(arm: Int, reward: Float)\n}"}
{"kt_path": "13864/solution_13864.kt", "Qwen2.5-Coder-1.5B-Instruct": "fun calculateScore(a: Int, b: Int): Int = a * b"}
{"kt_path": "9763/solution_9763.kt", "Qwen2.5-Coder-1.5B-Instruct": "fun calculateFinalPrice(price: Double, discount: Double): Double {\n    return price - discount\n}"}
{"kt_path": "8545/solution_8545.kt", "Qwen2.5-Coder-1.5B-Instruct": "fun calculateConversionRate(fromDollars: Int, toDollars: Int): Double {\n    return 0.0\n}"}
{"kt_path": "13968/solution_13968.kt", "Qwen2.5-Coder-1.5B-Instruct": "fun athletePerformanceDistance(distance1: Double, distance2: Double): Double = distance1 / distance2"}
{"kt_path": "14509/solution_14509.kt", "Qwen2.5-Coder-1.5B-Instruct": "fun calculateRoomArea(length: Int, width: Int): Int {\n    return length * width\n}"}
{"kt_path": "7670/solution_7670.kt", "Qwen2.5-Coder-1.5B-Instruct": "fun identityAssignment(): Boolean {\n    val x = 5\n    val y = x\n    return x == y\n}"}
{"kt_path": "224/solution_224.kt", "Qwen2.5-Coder-1.5B-Instruct": "fun calculateSalary(salary: Double): Long = Math.round(salary)"}
{"kt_path": "11310/solution_11310.kt", "Qwen2.5-Coder-1.5B-Instruct": "fun calculateExpenses(amount: Int, pricePerUnit: Float): Float {\n    return (amount.toFloat() * pricePerUnit)\n}"}
{"kt_path": "10330/solution_10330.kt", "Qwen2.5-Coder-1.5B-Instruct": "fun calculatePower(base: Double, exponent: Double): Double {\n    return base * exponent\n}"}
{"kt_path": "11101/solution_11101.kt", "Qwen2.5-Coder-1.5B-Instruct": "fun checkPositiveInteger(n: Int): Boolean {\n    return n > 0\n}"}
{"kt_path": "432/solution_432.kt", "Qwen2.5-Coder-1.5B-Instruct": "fun calculateResistance(resistance: Double, current: Double): Double {\n    return resistance / current\n}"}
{"kt_path": "n81ur3__kotlin-coding-challenges__fdc5941/src/main/kotlin/adventofcode2018/Day04ReposeRecord.kt", "Qwen2.5-Coder-1.5B-Instruct": "class Day04ReposeRecord {\n    constructor()\n}"}
{"kt_path": "8671/solution_8671.kt", "Qwen2.5-Coder-1.5B-Instruct": "fun calculateAverageSpeed(distance: Double, time: Double): Double {\n    return distance / time\n}"}
{"kt_path": "5601/solution_5601.kt", "Qwen2.5-Coder-1.5B-Instruct": "fun calculateCircuitPower(a: Double, b: Double): Double {\n    return a * b\n}"}
{"kt_path": "10329/solution_10329.kt", "Qwen2.5-Coder-1.5B-Instruct": "fun calculateResistance(resistance: Double, current: Double): Double {\n    return resistance / current\n}"}
{"kt_path": "n81ur3__kotlin-coding-challenges__fdc5941/src/main/kotlin/adventofcode2020/Day19MonsterMessage.kt", "Qwen2.5-Coder-1.5B-Instruct": "class Day19MonsterMessage {\n    constructor()\n}"}
{"kt_path": "n81ur3__kotlin-coding-challenges__fdc5941/src/main/kotlin/adventofcode2020/Day07HandyHaversacks.kt", "Qwen2.5-Coder-1.5B-Instruct": "class Day07HandyHaversacks {\n    constructor()\n}"}
{"kt_path": "7007/solution_7007.kt", "Qwen2.5-Coder-1.5B-Instruct": "fun isLongFlight(a: Int, b: Int): Boolean {\n    return a < b\n}"}
{"kt_path": "3696/solution_3696.kt", "Qwen2.5-Coder-1.5B-Instruct": "fun findCommonArea(a: Float, b: Float, c: Float): Float {\n    return (a * b) / c\n}"}
{"kt_path": "9314/solution_9314.kt", "Qwen2.5-Coder-1.5B-Instruct": "fun isEven(n: Int): Boolean {\n    return n % 2 == 0\n}"}
{"kt_path": "10577/solution_10577.kt", "Qwen2.5-Coder-1.5B-Instruct": "fun isEven(n: Int): Boolean {\n    return n % 2 == 0\n}"}
{"kt_path": "n81ur3__kotlin-coding-challenges__fdc5941/src/main/kotlin/adventofcode2018/Day06ChronalCoordinates.kt", "Qwen2.5-Coder-1.5B-Instruct": "class AdventOfCode2018.Day06ChronalCoordinates {\n    constructor()\n}"}
{"kt_path": "7819/solution_7819.kt", "Qwen2.5-Coder-1.5B-Instruct": "fun calculatePowerConsumption(power: Double): Double {\n    val powerMultiplier = 5.0\n    return power / powerMultiplier\n}"}
{"kt_path": "8829/solution_8829.kt", "Qwen2.5-Coder-1.5B-Instruct": "fun calculateDailyCaloricNeeds(weight: Float, height: Float): Float {\n    val dailyCalories = (weight * 2.2) * (height / 100)\n    return dailyCalories\n}"}
{"kt_path": "6256/solution_6256.kt", "Qwen2.5-Coder-1.5B-Instruct": "fun notEqualNone(a: Int?, b: Int?): Boolean = a != b"}
{"kt_path": "4238/solution_4238.kt", "Qwen2.5-Coder-1.5B-Instruct": "fun checkSpeedLimit(speed: Float, limit: Float): Boolean {\n    return speed <= limit\n}"}
{"kt_path": "3868/solution_3868.kt", "Qwen2.5-Coder-1.5B-Instruct": "fun sumOfNumbers(a: Int, b: Int): Int {\n    return when {\n        a < b -> a + b\n        else -> a * b\n    }\n}"}
{"kt_path": "5766/solution_5766.kt", "Qwen2.5-Coder-1.5B-Instruct": "fun shiftAndMultiplyAssignment(a: Int, b: Int): Int {\n    val result = a shl b\n    a shr b\n    a *= result\n    return a\n}"}
{"kt_path": "4304/solution_4304.kt", "Qwen2.5-Coder-1.5B-Instruct": "fun architectMath(a: Int, b: Int): Int {\n    return (a * 2) + (b + 1) + (a + b)\n}"}
{"kt_path": "alebedev__aoc2022__d6ba46b/src/main/kotlin/Map.kt", "Qwen2.5-Coder-1.5B-Instruct": "object AocMap {\n    val INSTANCE = AocMap()\n\n    fun solve(): Unit = println(\"Solving...\")\n}\n\nfun main(args: Array<String>) {\n    AocMap.INSTANCE.main()\n}"}
{"kt_path": "7168/solution_7168.kt", "Qwen2.5-Coder-1.5B-Instruct": "fun multiplyAndModulo(a: Int, b: Int, c: Int, d: Int): Int {\n    val result = a * b % c\n    return result % d\n}"}
{"kt_path": "5304/solution_5304.kt", "Qwen2.5-Coder-1.5B-Instruct": "fun numberOfCircuits(a: Int, b: Int, c: Int): Int {\n    val result = a / b\n    if (result <= 0) {\n        return 0\n    }\n    var count = 0\n    while (result > 0) {\n        result--\n        count++\n    }\n    return count\n}"}
{"kt_path": "7099/solution_7099.kt", "Qwen2.5-Coder-1.5B-Instruct": "fun calculateDistance(x: Double, y: Double, z: Double): Double {\n    val dx = x - y\n    val dy = x - z\n    val dz = x - z\n    return Math.sqrt(dx * dx + dy * dy + dz * dz)\n}"}
{"kt_path": "8138/solution_8138.kt", "Qwen2.5-Coder-1.5B-Instruct": "fun athletePoints(points: Int, isRunning: Boolean, isSwimming: Boolean): Int {\n    return when {\n        points == 0 -> 3\n        isRunning && !isSwimming -> points + 1\n        isSwimming && !isRunning -> points + 2\n        else -> points\n    }\n}"}
{"kt_path": "6625/solution_6625.kt", "Qwen2.5-Coder-1.5B-Instruct": "fun calculateCutLength(length: Float, width: Float, cutCount: Int): Float {\n    val cutLength = (length - width) * 0.5f\n    val totalWidth = cutCount * width\n    return cutLength / totalWidth\n}"}
{"kt_path": "14820/solution_14820.kt", "Qwen2.5-Coder-1.5B-Instruct": "fun positiveIntegersSum(n: Int): Int {\n    var sum = 0\n    for (i in 1..n) {\n        sum += i\n    }\n    return sum\n}"}
{"kt_path": "3808/solution_3808.kt", "Qwen2.5-Coder-1.5B-Instruct": "fun countNegative(a: Int, b: Int): Int {\n    var negativeCount = 0\n    for (i in a..b) {\n        if (i < 0) {\n            negativeCount++\n        }\n    }\n    return negativeCount\n}"}
{"kt_path": "677/solution_677.kt", "Qwen2.5-Coder-1.5B-Instruct": "fun modulusComplexNumbers(a: Float, b: Float): Float {\n    val realPart = a * a\n    val imaginaryPart = b * b\n    val sumOfSquares = realPart + imaginaryPart\n    return Math.sqrt(sumOfSquares).toFloat()\n}"}
{"kt_path": "1838/solution_1838.kt", "Qwen2.5-Coder-1.5B-Instruct": "fun calculateSum(n: Int): Int {\n    var sum = 0\n    var i = 0\n    while (i < n) {\n        sum += i\n        i++\n    }\n    return sum\n}"}
{"kt_path": "3178/solution_3178.kt", "Qwen2.5-Coder-1.5B-Instruct": "fun graphicDesignerSalary(salary: Int): Int {\n    return when (salary) {\n        in 0..1999 -> 2500\n        else -> salary * 5 + 500\n    }\n}"}
{"kt_path": "9504/solution_9504.kt", "Qwen2.5-Coder-1.5B-Instruct": "fun checkPrimeNumbers(n: Int): Boolean {\n    if (n <= 1) return false\n    for (i in 2 until n) {\n        if (n % i == 0) return false\n    }\n    return true\n}"}
{"kt_path": "5182/solution_5182.kt", "Qwen2.5-Coder-1.5B-Instruct": "fun checkDivisible(n: Int): Boolean {\n    var count = 0\n    for (i in 2..n) {\n        if (n % i == 0) {\n            count++\n        }\n    }\n    return count > 1\n}"}
{"kt_path": "7650/solution_7650.kt", "Qwen2.5-Coder-1.5B-Instruct": "fun sumOfSquares(n: Int): Int {\n    var sum = 0\n    for (i in 1..n) {\n        sum += i * i\n    }\n    return sum\n}"}
{"kt_path": "6824/solution_6824.kt", "Qwen2.5-Coder-1.5B-Instruct": "fun calculateScore(a: Int, b: Int): Int {\n    val score = a * 10 - (b * 5)\n    return if (score < 0) -1 else score\n}"}
{"kt_path": "1825/solution_1825.kt", "Qwen2.5-Coder-1.5B-Instruct": "fun calculateCarpenterSalary(hours: Int, hourlyRate: Double, taxRate: Double): Double {\n    val baseSalary = hours.toDouble() * hourlyRate\n    val deductions = (hours.toDouble() * hourlyRate) * taxRate\n    return baseSalary - deductions + 100.0\n}"}
{"kt_path": "1332/solution_1332.kt", "Qwen2.5-Coder-1.5B-Instruct": "fun extinguishFire(fireIntensity: Double): Int {\n    var extinguished = 0\n    val initialFireIntensity = fireIntensity\n\n    while (initialFireIntensity > 0) {\n        initialFireIntensity -= 2\n        extinguished++\n    }\n\n    return extinguished\n}"}
{"kt_path": "10817/solution_10817.kt", "Qwen2.5-Coder-1.5B-Instruct": "fun maxOfThree(a: Int, b: Int, c: Int): Int {\n    return when {\n        a < b && a < c -> c\n        b < a && b < c -> c\n        else -> a\n    }\n}"}
{"kt_path": "11536/solution_11536.kt", "Qwen2.5-Coder-1.5B-Instruct": "fun isFloat(obj: Any?): Boolean {\n    return obj?.let { it as? Float } ?: false\n}"}
{"kt_path": "13694/solution_13694.kt", "Qwen2.5-Coder-1.5B-Instruct": "fun calculateCarpenterSalary(hours: Int, hourlyRate: Double, overtimeRate: Double): Double {\n    val baseSalary = hours.toDouble() * hourlyRate\n    val overtimeHours = hours - 40\n    val overtimePay = overtimeHours * overtimeRate\n    return baseSalary + overtimePay\n}"}
{"kt_path": "7127/solution_7127.kt", "Qwen2.5-Coder-1.5B-Instruct": "fun checkInteger(obj: Any): Boolean {\n    Intrinsics.checkNotNullParameter(obj, \"obj\")\n    return obj is Integer\n}"}
{"kt_path": "7144/solution_7144.kt", "Qwen2.5-Coder-1.5B-Instruct": "fun identityComparisonAndFloatingPointOperations(a: Double, b: Double): Boolean {\n    val difference = a - b\n    val absoluteDifference = Math.abs(difference)\n    return absoluteDifference < 0.01\n}"}
{"kt_path": "8240/solution_8240.kt", "Qwen2.5-Coder-1.5B-Instruct": "fun calculateFactorial(n: Int): Int {\n    var result = 1\n    for (i in 1..n) {\n        result *= i\n    }\n    return result\n}"}
{"kt_path": "2140/solution_2140.kt", "Qwen2.5-Coder-1.5B-Instruct": "fun commissionCalculator(amount: Double, rate: Double, taxRate: Double): Double {\n    val discount = if (amount < 0) 0 else amount * rate\n    val tax = if (discount > 0) discount * taxRate else 0\n    return amount - discount + tax\n}"}
{"kt_path": "14315/solution_14315.kt", "Qwen2.5-Coder-1.5B-Instruct": "fun sumPositiveIntegers(n: Int): Int {\n    var sum = 0\n    for (i in 1..n) {\n        if (i > 0) {\n            sum += i\n        }\n    }\n    return sum\n}"}
{"kt_path": "2523/solution_2523.kt", "Qwen2.5-Coder-1.5B-Instruct": "fun sumEvenNumbers(a: Int, b: Int): Int {\n    var sum = 0\n    for (i in a..b) {\n        if (i % 2 == 0) {\n            sum += i\n        }\n    }\n    return sum\n}"}
{"kt_path": "918/solution_918.kt", "Qwen2.5-Coder-1.5B-Instruct": "fun checkBudget(budget: Int): String {\n    val insufficientBudgetMessage = \"Insufficient budget, please allocate more funds for the campaign.\"\n    val sufficientBudgetMessage = \"Budget is sufficient for the marketing campaign.\"\n\n    return when (budget) {\n        < 4000 -> insufficientBudgetMessage\n        else -> sufficientBudgetMessage\n    }\n}"}
{"kt_path": "10520/solution_10520.kt", "Qwen2.5-Coder-1.5B-Instruct": "fun sumOfEvenNumbers(a: Int, b: Int): Int {\n    var sum = 0\n    for (i in a..b) {\n        if (i % 2 == 0) {\n            sum += i\n        }\n    }\n    return sum\n}"}
{"kt_path": "6399/solution_6399.kt", "Qwen2.5-Coder-1.5B-Instruct": "fun checkPercentage(value: Int): String {\n    return when (value) {\n        in 95..98 -> \"Within acceptable range\"\n        else -> \"Outside acceptable range\"\n    }\n}"}
{"kt_path": "10731/solution_10731.kt", "Qwen2.5-Coder-1.5B-Instruct": "fun checkEligibility(age: Int, height: Int, weight: Int): String {\n    return when {\n        age < 18 -> \"Not Eligible\"\n        height < 5 -> \"Not Eligible\"\n        weight < 2 -> \"Not Eligible\"\n        else -> \"Eligible\"\n    }\n}"}
{"kt_path": "8756/solution_8756.kt", "Qwen2.5-Coder-1.5B-Instruct": "fun findMax(a: Int, b: Int, c: Int): Int {\n    return when {\n        a < b -> b\n        a < c -> c\n        else -> a\n    }\n}"}
{"kt_path": "10964/solution_10964.kt", "Qwen2.5-Coder-1.5B-Instruct": "fun calculateInvestmentGrowth(initialAmount: Double, annualInterestRate: Double, years: Int): Double {\n    var currentAmount = initialAmount\n    for (i in 0 until years) {\n        currentAmount *= (1 + annualInterestRate)\n    }\n    return currentAmount\n}"}
{"kt_path": "9201/solution_9201.kt", "Qwen2.5-Coder-1.5B-Instruct": "fun isCloseToZero(a: Double, b: Double): Boolean {\n    return when {\n        a == 0.0 -> true\n        abs(a) < 1e-6 -> true\n        else -> false\n    }\n}\n\nfun abs(x: Double): Double = kotlin.math.abs(x)"}
{"kt_path": "14784/solution_14784.kt", "Qwen2.5-Coder-1.5B-Instruct": "fun sumOfMultiples(a: Int, b: Int, c: Int): Int {\n    var sum = 0\n    for (i in a..b) {\n        if (i % c == 0) {\n            sum += i\n        }\n    }\n    return sum\n}"}
{"kt_path": "12550/solution_12550.kt", "Qwen2.5-Coder-1.5B-Instruct": "fun checkGameConditions(x: Int, y: Int, z: Int, isWinning: Boolean): Boolean {\n    return when {\n        x < 1000 -> false\n        y < 50 -> false\n        z < 10 -> false\n        !isWinning -> false\n        else -> true\n    }\n}"}
{"kt_path": "2717/solution_2717.kt", "Qwen2.5-Coder-1.5B-Instruct": "fun <T> getFirstElement(list: List<T>): T {\n    Intrinsics.checkParameter(list, \"lst\")\n    return list[0]\n}"}
{"kt_path": "10259/solution_10259.kt", "Qwen2.5-Coder-1.5B-Instruct": "fun calculateTotalPrice(price1: Float, price2: Float): Float {\n    val absPrice1 = Math.abs(price1)\n    val total = if (price1 < 0 && price2 > 0) {\n        price1 + price2\n    } else {\n        price1 - price2\n    }\n    return total\n}"}
{"kt_path": "1510/solution_1510.kt", "Qwen2.5-Coder-1.5B-Instruct": "fun getLastElement(lst: List<*>): Any? {\n    Intrinsics.checkNotNullParameter(lst, \"lst\")\n    return CollectionsKt.last(lst)\n}"}
{"kt_path": "2099/solution_2099.kt", "Qwen2.5-Coder-1.5B-Instruct": "fun calculateTotalDistance(x: Float, y: Float): Float {\n    var totalDistance = 0f\n    var steps = 1\n\n    while (steps <= x.toInt()) {\n        totalDistance += x - y\n        steps++\n    }\n\n    return totalDistance\n}"}
{"kt_path": "9202/solution_9202.kt", "Qwen2.5-Coder-1.5B-Instruct": "fun hasSignificantDecimalPart(a: Double, b: Double): Boolean {\n    val absA = Math.abs(a)\n    val absB = Math.abs(b)\n    val difference = absA - absB\n\n    return difference < 1e-6\n}"}
{"kt_path": "9289/solution_9289.kt", "Qwen2.5-Coder-1.5B-Instruct": "fun sliceTuple<T>(list: List<T>, start: Int, end: Int): List<T> {\n    Intrinsics.checkParameter(list, \"list\")\n    return list.subList(start, end)\n}"}
{"kt_path": "222/solution_222.kt", "Qwen2.5-Coder-1.5B-Instruct": "fun calculateProfit(price: Double, quantity: Double, discount: Double): Double {\n    val profit = price - quantity\n    if (profit <= 0) {\n        return -profit\n    } else {\n        return (price - quantity) * quantity - price\n    }\n}"}
{"kt_path": "2704/solution_2704.kt", "Qwen2.5-Coder-1.5B-Instruct": "fun calculateSum(): Double {\n    var sum = 0.0\n    sum += 0.1\n    sum += 0.01\n    sum += 1000.0\n    return sum\n}"}
{"kt_path": "7036/solution_7036.kt", "Qwen2.5-Coder-1.5B-Instruct": "fun calculateExpenses(expensesList: List<Double>): Double {\n    return expensesList.sumOfDouble()\n}"}
{"kt_path": "7097/solution_7097.kt", "Qwen2.5-Coder-1.5B-Instruct": "fun findAnimal(animalList: List<String>, index: Int): String? {\n    val animal = animalList[index]\n    return if (animal != null) animal else null\n}"}
{"kt_path": "6743/solution_6743.kt", "Qwen2.5-Coder-1.5B-Instruct": "fun toSet(list: List<Int>): Set<Int> = CollectionsKt.toSet(list)"}
{"kt_path": "14646/solution_14646.kt", "Qwen2.5-Coder-1.5B-Instruct": "fun checkPromotionEligibility(age: Int, salary: Double): Boolean {\n    return when {\n        age > 25 -> true\n        age >= 41 -> true\n        else -> false\n    } && salary > 5000.0\n}"}
{"kt_path": "1671/solution_1671.kt", "Qwen2.5-Coder-1.5B-Instruct": "fun createTupleFromDictionary(dictionary: Map<String, Any>): List<Pair<String, Any>> {\n    return listOfNotNull(dictionary.entries.map { Pair(it.key, it.value) })\n}"}
{"kt_path": "13442/solution_13442.kt", "Qwen2.5-Coder-1.5B-Instruct": "fun printEvenNumbers(start: Int, end: Int) {\n    for (i in start..end) {\n        if (i % 2 == 0) {\n            println(i)\n        }\n    }\n}"}
{"kt_path": "13338/solution_13338.kt", "Qwen2.5-Coder-1.5B-Instruct": "fun convertToSet(photoData: List<String>): Set<String> {\n    return photoData.filterNotNull().toSet()\n}"}
{"kt_path": "8409/solution_8409.kt", "Qwen2.5-Coder-1.5B-Instruct": "fun calculateTotalCost(price: Double, discount: Double): Double {\n    val totalCost = price * discount\n    if (price < 1000) {\n        return totalCost + (totalCost * 0.1)\n    } else {\n        return totalCost - totalCost * 0.1\n    }\n}"}
{"kt_path": "5263/solution_5263.kt", "Qwen2.5-Coder-1.5B-Instruct": "fun operationsQuiz(a: Boolean, b: Boolean, c: Boolean, d: Boolean): Boolean {\n    var count = 0\n\n    if (!a) count++\n    if (!b) count++\n    if (!c) count++\n    if (!d) count++\n\n    return count == 2\n}"}
{"kt_path": "7005/solution_7005.kt", "Qwen2.5-Coder-1.5B-Instruct": "fun convertSetToList(set: Set<out Any>): List<Any> {\n    return set.toList()\n}"}
{"kt_path": "7004/solution_7004.kt", "Qwen2.5-Coder-1.5B-Instruct": "fun convertListToSet<T>(lst: Iterable<T>): Set<T> = CollectionsKt.toSet(lst)"}
{"kt_path": "1559/solution_1559.kt", "Qwen2.5-Coder-1.5B-Instruct": "fun convertToSet(gameData: Iterable<Any>): Set<Any> {\n    return CollectionsKt.toSet(gameData)\n}"}
{"kt_path": "14689/solution_14689.kt", "Qwen2.5-Coder-1.5B-Instruct": "fun printOddNumbers(n: Int) {\n    for (i in n downTo 1) {\n        if (i % 2 != 0) {\n            println(i)\n        }\n    }\n}"}
{"kt_path": "13400/solution_13400.kt", "Qwen2.5-Coder-1.5B-Instruct": "fun findBiggerNumber(a: Int, b: Int, c: Int, d: Int): Int {\n    return when {\n        a < b -> b\n        a < c -> c\n        a < d -> d\n        else -> a\n    }\n}"}
{"kt_path": "9661/solution_9661.kt", "Qwen2.5-Coder-1.5B-Instruct": "fun calculateSums(n: Int): Int {\n    var sum = 0\n    for (i in 1..n) {\n        if (i % 5 == 0 || i % 7 == 0 || i % 35 == 0) {\n            sum += i\n        }\n    }\n    return sum\n}"}
{"kt_path": "8323/solution_8323.kt", "Qwen2.5-Coder-1.5B-Instruct": "fun calculateRemainingBooks(totalBooks: Int, borrowedBooks: Int, returnedBooks: Int): Int {\n    var remainingBooks = totalBooks - borrowedBooks + returnedBooks\n    return remainingBooks\n}"}
{"kt_path": "236/solution_236.kt", "Qwen2.5-Coder-1.5B-Instruct": "fun computeFloorArea(length: Float, width: Float): Float {\n    if (length < 0) return \"Invalid length\".toFloat()\n    if (width < 0) return \"Invalid width\".toFloat()\n    return length * width\n}"}
{"kt_path": "14771/solution_14771.kt", "Qwen2.5-Coder-1.5B-Instruct": "fun indexingAndSlicingTuples(strings: List<String>, index: Int): List<String> {\n    val length = strings.size\n    return strings.subList(index, length)\n}"}
{"kt_path": "9943/solution_9943.kt", "Qwen2.5-Coder-1.5B-Instruct": "fun addNegIntegersToSet(numbers: List<Int>): Set<Int> {\n    val set = numbers.filter { it < 0 }.toSet()\n    return set\n}"}
{"kt_path": "8713/solution_8713.kt", "Qwen2.5-Coder-1.5B-Instruct": "fun accessImaginaryPart(complexNumber: Pair<Double, Double>): Double {\n    val realPart = complexNumber.first\n    val imaginaryPart = complexNumber.second.toDouble()\n    return imaginaryPart\n}"}
{"kt_path": "3773/solution_3773.kt", "Qwen2.5-Coder-1.5B-Instruct": "fun calculateSocialWorkerSalary(salary: Double, yearsOfExperience: Int): Double {\n    when (yearsOfExperience) {\n        in 0..5 -> salary * 1.5\n        in 6..10 -> salary * 1.2\n        else -> salary * 1.0\n    }\n}"}
{"kt_path": "11/solution_11.kt", "Qwen2.5-Coder-1.5B-Instruct": "fun checkOddEvenNumbers(a: Int, b: Int, c: Int): Boolean {\n    var count = 0\n\n    if (a % 2 == 0) count++\n    if (b % 2 == 0) count++\n    if (c % 2 == 0) count++\n\n    return count > 0\n}"}
{"kt_path": "1118/solution_1118.kt", "Qwen2.5-Coder-1.5B-Instruct": "fun createEmptyComplementList(nurse: String): List<Any?> {\n    val list = ArrayList<Any>()\n    return list\n}"}
{"kt_path": "8385/solution_8385.kt", "Qwen2.5-Coder-1.5B-Instruct": "fun isPrime(n: Int): Boolean {\n    if (n <= 1) return false\n    if (n == 2) return true\n\n    val sqrt = Math.sqrt(n.toDouble()).toInt()\n    for (i in 2..sqrt) {\n        if (n % i == 0) return false\n    }\n    return true\n}"}
{"kt_path": "14396/solution_14396.kt", "Qwen2.5-Coder-1.5B-Instruct": "fun extractCoordinates(coordinatesList: List<Triple<Int, Int, Int>>): Triple<Int, Int, Int> {\n    val firstElement = coordinatesList[0] as Triple<Int, Int, Int>\n    return Triple(firstElement.first, firstElement.second, firstElement.third)\n}"}
{"kt_path": "5828/solution_5828.kt", "Qwen2.5-Coder-1.5B-Instruct": "fun calculatePaintCansNeeded(wallAreas: List<Double>, paintCoverage: Double): Int {\n    val totalArea = wallAreas.sum()\n    return (totalArea / paintCoverage).toInt()\n}"}
