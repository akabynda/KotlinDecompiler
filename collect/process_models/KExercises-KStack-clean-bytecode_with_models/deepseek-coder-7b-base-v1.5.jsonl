{"kt_path": "7824/solution_7824.kt", "deepseek-coder-7b-base-v1.5": "fun testCountOddNumbers() {\n    // TODO\n}"}
{"kt_path": "remisultan__multiarm-bandit-algorithm-kotlin__ead934d/core-bandit/src/main/kotlin/org/rsultan/bandit/algorithms/BanditAlgorithm.kt", "deepseek-coder-7b-base-v1.5": ""}
{"kt_path": "13864/solution_13864.kt", "deepseek-coder-7b-base-v1.5": "fun calculateScore(a: Int, b: Int): Int = a * b"}
{"kt_path": "9763/solution_9763.kt", "deepseek-coder-7b-base-v1.5": "fun calculateFinalPrice(price: Double, discount: Double): Double = price * discount"}
{"kt_path": "8545/solution_8545.kt", "deepseek-coder-7b-base-v1.5": "fun calculateConversionRate(a: Int, b: Int): Double = 0.0"}
{"kt_path": "13968/solution_13968.kt", "deepseek-coder-7b-base-v1.5": "fun athletePerformanceTime(distance: Double, time: Double): Double = distance / time"}
{"kt_path": "14509/solution_14509.kt", "deepseek-coder-7b-base-v1.5": "fun calculateRoomArea(width: Int, height: Int): Int {\n    return width * height\n}"}
{"kt_path": "7670/solution_7670.kt", "deepseek-coder-7b-base-v1.5": "fun identityAssignment(): Boolean {\n    var x = 5\n    x = x\n    return x == 1\n}"}
{"kt_path": "224/solution_224.kt", "deepseek-coder-7b-base-v1.5": "fun calculateSalary(salary: Double): Double = Math.round(salary).toDouble()"}
{"kt_path": "11310/solution_11310.kt", "deepseek-coder-7b-base-v1.5": "fun calculateExpenses(days: Int, price: Float): Float {\n    return days * price\n}"}
{"kt_path": "10330/solution_10330.kt", "deepseek-coder-7b-base-v1.5": "fun calculatePower(base: Double, power: Double): Double {\n    return base * power\n}"}
{"kt_path": "11101/solution_11101.kt", "deepseek-coder-7b-base-v1.5": "fun checkPositiveInteger(n: Int): Boolean {\n    return n > 0\n}"}
{"kt_path": "432/solution_432.kt", "deepseek-coder-7b-base-v1.5": "fun calculateResistance(r1: Double, r2: Double): Double = r1 * r2"}
{"kt_path": "n81ur3__kotlin-coding-challenges__fdc5941/src/main/kotlin/adventofcode2018/Day04ReposeRecord.kt", "deepseek-coder-7b-base-v1.5": ""}
{"kt_path": "8671/solution_8671.kt", "deepseek-coder-7b-base-v1.5": "fun calculateAverageSpeed(distance: Double, time: Double): Double {\n    return distance / time\n}"}
{"kt_path": "5601/solution_5601.kt", "deepseek-coder-7b-base-v1.5": "fun calculatePower(voltage: Double, resistance: Double): Double = voltage * resistance"}
{"kt_path": "10329/solution_10329.kt", "deepseek-coder-7b-base-v1.5": "fun calculateResistance(r1: Double, r2: Double): Double = r1 * r2"}
{"kt_path": "n81ur3__kotlin-coding-challenges__fdc5941/src/main/kotlin/adventofcode2020/Day19MonsterMessage.kt", "deepseek-coder-7b-base-v1.5": ""}
{"kt_path": "n81ur3__kotlin-coding-challenges__fdc5941/src/main/kotlin/adventofcode2020/Day07HandyHaversacks.kt", "deepseek-coder-7b-base-v1.5": ""}
{"kt_path": "7007/solution_7007.kt", "deepseek-coder-7b-base-v1.5": "fun getMax(a: Int, b: Int): Int {\n    return if (a > b) a else b\n}"}
{"kt_path": "3696/solution_3696.kt", "deepseek-coder-7b-base-v1.5": "fun findCommonArea(a: Int, b: Int, c: Int): Int {\n    return a * b * c\n}"}
{"kt_path": "9314/solution_9314.kt", "deepseek-coder-7b-base-v1.5": "fun sum(a: Int, b: Int): Int {\n    return a + b\n}"}
{"kt_path": "10577/solution_10577.kt", "deepseek-coder-7b-base-v1.5": "fun sum(a: Int, b: Int): Int {\n    return a + b\n}"}
{"kt_path": "n81ur3__kotlin-coding-challenges__fdc5941/src/main/kotlin/adventofcode2018/Day06ChronalCoordinates.kt", "deepseek-coder-7b-base-v1.5": ""}
{"kt_path": "7819/solution_7819.kt", "deepseek-coder-7b-base-v1.5": "fun calculatePowerConsumption(power: Double): Double {\n    return power / 5\n}"}
{"kt_path": "8829/solution_8829.kt", "deepseek-coder-7b-base-v1.5": "fun calculateDailyCaloricNeeds(weight: Float, height: Float): Float {\n    return weight * 24 * height\n}"}
{"kt_path": "6256/solution_6256.kt", "deepseek-coder-7b-base-v1.5": "fun notEqualNone(a: Int?, b: Int?): Boolean {\n    return a != null && b != null\n}"}
{"kt_path": "4238/solution_4238.kt", "deepseek-coder-7b-base-v1.5": "fun checkSpeedLimit(speed: Float, limit: Float): Boolean {\n    return speed <= limit\n}"}
{"kt_path": "3868/solution_3868.kt", "deepseek-coder-7b-base-v1.5": "fun sumOfNumbers(a: Int, b: Int): Int {\n    return a + b\n}"}
{"kt_path": "5766/solution_5766.kt", "deepseek-coder-7b-base-v1.5": "fun shiftAndMultiplyAssignment(a: Int, b: Int): Int {\n    var a = a\n    var b = b\n    a = a shl b\n    b = a ushr b\n    b = b * a\n    return b\n}"}
{"kt_path": "4304/solution_4304.kt", "deepseek-coder-7b-base-v1.5": "fun architectMath(a: Int, b: Int): Int {\n    val c = a * 2\n    val d = b + 1\n    return c + d\n}"}
{"kt_path": "alebedev__aoc2022__d6ba46b/src/main/kotlin/Map.kt", "deepseek-coder-7b-base-v1.5": "fun main() {\n    AocDay1.solve()\n}"}
{"kt_path": "7168/solution_7168.kt", "deepseek-coder-7b-base-v1.5": "fun multiplyAndModulo(a: Int, b: Int, c: Int, d: Int): Int {\n    val result = a * b % c\n    return result % d\n}"}
{"kt_path": "5304/solution_5304.kt", "deepseek-coder-7b-base-v1.5": "fun numberOfCircuits(n: Int, m: Int, k: Int): Int {\n    return n / m + (if (n % m > 0) 1 else 0)\n}"}
{"kt_path": "7099/solution_7099.kt", "deepseek-coder-7b-base-v1.5": "fun getMax(a: Int, b: Int): Int {\n    return if (a > b) a else b\n}"}
{"kt_path": "8138/solution_8138.kt", "deepseek-coder-7b-base-v1.5": "fun athletePoints(age: Int, olympicGames: Boolean, numberOfMedals: Int): Int {\n    return if (olympicGames) {\n        if (numberOfMedals == 0) {\n            age + 5\n        } else if (numberOfMedals == 1) {\n            age + 15\n        } else if (numberOfMedals == 2) {\n            age + 30\n        } else {\n            age + 50\n        }\n    } else {\n        if (numberOf"}
{"kt_path": "6625/solution_6625.kt", "deepseek-coder-7b-base-v1.5": "fun calculateCutLength(length: Int, width: Int, cuts: Int): Int {\n    val cutLength = (width - 1) * cuts\n    return length - cutLength / cuts\n}"}
{"kt_path": "14820/solution_14820.kt", "deepseek-coder-7b-base-v1.5": "fun positiveIntegersSum(n: Int): Int {\n    var sum = 0\n    for (i in 1..n) {\n        sum += i\n    }\n    return sum\n}"}
{"kt_path": "3808/solution_3808.kt", "deepseek-coder-7b-base-v1.5": "fun countNegative(a: Int, b: Int): Int {\n    var count = 0\n    for (i in a..b) {\n        if (i < 0) {\n            count++\n        }\n    }\n    return count\n}"}
{"kt_path": "677/solution_677.kt", "deepseek-coder-7b-base-v1.5": "fun sumOfDigits(n: Int): Int {\n    var n = n\n    var sum = 0\n    while (n != 0) {\n        sum += n and 0xFF\n        n = n and 0xFFFF shr 8\n    }\n    return sum\n}"}
{"kt_path": "1838/solution_1838.kt", "deepseek-coder-7b-base-v1.5": "fun calculateSum(n: Int): Int {\n    var sum = 0\n    var i = 1\n    while (i <= n) {\n        sum += i\n        i++\n    }\n    return sum\n}"}
{"kt_path": "3178/solution_3178.kt", "deepseek-coder-7b-base-v1.5": "fun graphicDesignerSalary(yearsOfExperience: Int): Int {\n    return if (yearsOfExperience < 1) 0 else yearsOfExperience * 500 + 2500\n}"}
{"kt_path": "9504/solution_9504.kt", "deepseek-coder-7b-base-v1.5": "fun getSum(a: Int, b: Int): Int = a + b"}
{"kt_path": "5182/solution_5182.kt", "deepseek-coder-7b-base-v1.5": "fun getSum(a: Int, b: Int): Int = a + b"}
{"kt_path": "7650/solution_7650.kt", "deepseek-coder-7b-base-v1.5": "fun sumOfSquares(n: Int): Int {\n    var sum = 0\n    for (i in 1..n) {\n        sum += i * i\n    }\n    return sum\n}"}
{"kt_path": "6824/solution_6824.kt", "deepseek-coder-7b-base-v1.5": "fun calculateScore(a: Int, b: Int): Int {\n    return (a * 10) - (b * 5)\n}\n\nfun main() {\n    println(calculateScore(10, 5))\n}"}
{"kt_path": "1825/solution_1825.kt", "deepseek-coder-7b-base-v1.5": "fun calculateCarpenterSalary(hours: Int, hourlyRate: Double, bonus: Double): Double {\n    return (hours * hourlyRate + hours * hourlyRate * bonus / 100)\n}"}
{"kt_path": "1332/solution_1332.kt", "deepseek-coder-7b-base-v1.5": "fun extinguishFire(fire: Double): Int {\n    var count = 0\n    var remainingFire = fire\n    while (remainingFire > 0.0) {\n        remainingFire /= 2.0\n        count++\n    }\n    return count\n}"}
{"kt_path": "10817/solution_10817.kt", "deepseek-coder-7b-base-v1.5": "fun countOf(arr: IntArray, value: Int): Int {\n    var count = 0\n    for (i in arr.indices) {\n        if (arr[i] == value) {\n            count++\n        }\n    }\n    return count\n}"}
{"kt_path": "11536/solution_11536.kt", "deepseek-coder-7b-base-v1.5": "fun isDouble(value: Any?): Boolean = value is Double"}
{"kt_path": "13694/solution_13694.kt", "deepseek-coder-7b-base-v1.5": "fun calculateCarpenterSalary(hours: Int, hourlyRate: Double, bonus: Double): Double {\n    val salary = hours * hourlyRate\n    val bonusSalary = bonus * hourlyRate\n    return salary + bonusSalary\n}"}
{"kt_path": "7127/solution_7127.kt", "deepseek-coder-7b-base-v1.5": "fun checkInteger(number: Any): Boolean {\n    return number is Int\n}"}
{"kt_path": "7144/solution_7144.kt", "deepseek-coder-7b-base-v1.5": "fun identityComparisonAndFloatingPointOperations(a: Double, b: Double): Boolean {\n    return Math.abs(a - b) <= 0.01\n}"}
{"kt_path": "8240/solution_8240.kt", "deepseek-coder-7b-base-v1.5": "fun calculateFactorial(n: Int): Int {\n    var result = 1\n    var i = 1\n    while (i <= n) {\n        result *= i\n        i++\n    }\n    return result\n}"}
{"kt_path": "2140/solution_2140.kt", "deepseek-coder-7b-base-v1.5": "fun commissionCalculator(\n    price: Double,\n    commission: Double,\n    tax: Double\n): Double {\n    return if (price > commission) {\n        price * tax\n    } else {\n        0.0\n    }\n}"}
{"kt_path": "14315/solution_14315.kt", "deepseek-coder-7b-base-v1.5": "fun sumPositiveIntegers(n: Int): Int {\n    var sum = 0\n    var i = 1\n    while (i <= n) {\n        sum += i\n        i++\n    }\n    return sum\n}"}
{"kt_path": "2523/solution_2523.kt", "deepseek-coder-7b-base-v1.5": "fun sumOfMultiples(n: Int): Int {\n    var sum = 0\n    for (i in 1..n) {\n        if (i % 2 == 0) {\n            sum += i\n        }\n    }\n    return sum\n}"}
{"kt_path": "918/solution_918.kt", "deepseek-coder-7b-base-v1.5": "fun checkBudget(budget: Int, expenses: Int): String {\n    return if (budget >= expenses) \"Budget is sufficient for the marketing campaign.\" else \"Insufficient budget, please allocate more funds for the campaign.\"\n}"}
{"kt_path": "10520/solution_10520.kt", "deepseek-coder-7b-base-v1.5": "fun sumOfEvenNumbers(a: Int, b: Int): Int {\n    var sum = 0\n    for (i in a..b) {\n        if (i % 2 == 0) {\n            sum += i\n        }\n    }\n    return sum\n}"}
{"kt_path": "6399/solution_6399.kt", "deepseek-coder-7b-base-v1.5": "fun getMax(a: Int, b: Int): Int {\n    return if (a > b) a else b\n}"}
{"kt_path": "10731/solution_10731.kt", "deepseek-coder-7b-base-v1.5": "fun calculateTotalCost(quantity: Int, price: Int, discount: Int): Int {\n    return quantity * price - discount\n}"}
{"kt_path": "8756/solution_8756.kt", "deepseek-coder-7b-base-v1.5": "fun findMax(a: Int, b: Int, c: Int): Int {\n    var max = a\n    if (b > max) max = b\n    if (c > max) max = c\n    return max\n}"}
{"kt_path": "10964/solution_10964.kt", "deepseek-coder-7b-base-v1.5": "fun calculateInvestmentGrowth(initialInvestment: Double, annualInterestRate: Double, years: Int): Double {\n    var investment = initialInvestment\n    for (i in 1..years) {\n        investment *= 1 + annualInterestRate\n    }\n    return investment\n}"}
{"kt_path": "9201/solution_9201.kt", "deepseek-coder-7b-base-v1.5": "fun isCloseToZero(x: Double, epsilon: Double = 1e-10): Boolean {\n    return x.absoluteValue < epsilon\n}"}
{"kt_path": "14784/solution_14784.kt", "deepseek-coder-7b-base-v1.5": "fun sumOfMultiples(n: Int, m1: Int, m2: Int): Int {\n    var sum = 0\n    for (i in 1..n) {\n        if (i % m1 == 0 || i % m2 == 0) {\n            sum += i\n        }\n    }\n    return sum\n}"}
{"kt_path": "12550/solution_12550.kt", "deepseek-coder-7b-base-v1.5": "fun checkGameConditions(\n    player1Score: Int,\n    player2Score: Int,\n    player3Score: Int,\n    player4Score: Boolean\n): Boolean {\n    return player1Score >= 1000 && player2Score >= 50 && player3Score >= 10 && player4Score\n}"}
{"kt_path": "2717/solution_2717.kt", "deepseek-coder-7b-base-v1.5": "fun getLastElement(lst: List<Any?>): Any? {\n    return lst[lst.size - 1]\n}"}
{"kt_path": "10259/solution_10259.kt", "deepseek-coder-7b-base-v1.5": "fun getMax(a: Int, b: Int): Int {\n    return if (a > b) {\n        a\n    } else {\n        b\n    }\n}"}
{"kt_path": "1510/solution_1510.kt", "deepseek-coder-7b-base-v1.5": "fun getFirstElement(lst: List<Any?>): Any? = lst.first()"}
{"kt_path": "2099/solution_2099.kt", "deepseek-coder-7b-base-v1.5": "fun calculateTotalDistance(x: Int, y: Int): Int {\n    var totalDistance = 0\n    for (i in 1..x) {\n        totalDistance += y\n    }\n    return totalDistance\n}"}
{"kt_path": "9202/solution_9202.kt", "deepseek-coder-7b-base-v1.5": "fun isEven(x: Int): Boolean {\n    return x % 2 == 0\n}"}
{"kt_path": "9289/solution_9289.kt", "deepseek-coder-7b-base-v1.5": "fun sliceTuple(t: List<*>, start: Int, end: Int): List<*> = t.subList(start, end)"}
{"kt_path": "222/solution_222.kt", "deepseek-coder-7b-base-v1.5": "fun calculateProfit(price: Double, cost: Double, discount: Double): Double {\n    val profit = price - cost\n    return if (profit > 0) profit - discount else -profit\n}"}
{"kt_path": "2704/solution_2704.kt", "deepseek-coder-7b-base-v1.5": "fun calculateSum(): Int {\n    var sum = 0\n    var term = 1\n    while (sum < 100) {\n        sum += term\n        term += 1\n    }\n    return sum\n}"}
{"kt_path": "7036/solution_7036.kt", "deepseek-coder-7b-base-v1.5": "fun calculateExpenses(expensesList: List<Double>): Double = expensesList.sumOfDouble()"}
{"kt_path": "7097/solution_7097.kt", "deepseek-coder-7b-base-v1.5": "fun findAnimal(animalTuple: List<String>, index: Int): String {\n    return animalTuple[index]\n}"}
{"kt_path": "6743/solution_6743.kt", "deepseek-coder-7b-base-v1.5": "fun toMap(keys: List<String>, values: List<Int>): Map<String, Int> = keys.zip(values).toMap()"}
{"kt_path": "14646/solution_14646.kt", "deepseek-coder-7b-base-v1.5": "fun checkPromotionEligibility(age: Int, salary: Double): Boolean {\n    return age > 25 && salary >= 5000.0\n}"}
{"kt_path": "1671/solution_1671.kt", "deepseek-coder-7b-base-v1.5": "fun createTupleFromDictionary(dictionary: Map<String, Any?>): List<Pair<String, Any?>> = dictionary.toList()"}
{"kt_path": "13442/solution_13442.kt", "deepseek-coder-7b-base-v1.5": "fun printEvenNumbers(from: Int, to: Int) {\n    for (i in from..to) {\n        if (i % 2 == 0) {\n            println(i)\n        }\n    }\n}"}
{"kt_path": "13338/solution_13338.kt", "deepseek-coder-7b-base-v1.5": "fun convertToMap(photoData: List<String>): Map<String, String> = photoData.toMap()"}
{"kt_path": "8409/solution_8409.kt", "deepseek-coder-7b-base-v1.5": "fun getMax(a: Int, b: Int): Int {\n    return if (a > b) a else b\n}"}
{"kt_path": "5263/solution_5263.kt", "deepseek-coder-7b-base-v1.5": "fun operationsQuiz(a: Boolean, b: Boolean, c: Boolean, d: Boolean): Boolean {\n    var result = 0\n    if (a) result++\n    if (b) result++\n    if (c) result++\n    if (d) result++\n    return result == 2\n}"}
{"kt_path": "7005/solution_7005.kt", "deepseek-coder-7b-base-v1.5": "fun convertSetToList(s: Set<*>): List<*> = s.toList()"}
{"kt_path": "7004/solution_7004.kt", "deepseek-coder-7b-base-v1.5": "fun convertSetToList(set: Set<Any?>): List<Any?> = set.toList()"}
{"kt_path": "1559/solution_1559.kt", "deepseek-coder-7b-base-v1.5": "fun convertToMap(gameData: List<String>): Map<String, String> {\n    return gameData.toMap()\n}"}
{"kt_path": "14689/solution_14689.kt", "deepseek-coder-7b-base-v1.5": "fun printEvenNumbers(n: Int) {\n    for (i in 0..n) {\n        if (i % 2 == 0) {\n            println(i)\n        }\n    }\n}"}
{"kt_path": "13400/solution_13400.kt", "deepseek-coder-7b-base-v1.5": "fun findSmallerNumber(a: Int, b: Int, c: Int, d: Int): Int {\n    var min = a\n    if (b < min) min = b\n    if (c < min) min = c\n    if (d < min) min = d\n    return min\n}"}
{"kt_path": "9661/solution_9661.kt", "deepseek-coder-7b-base-v1.5": "fun calculateSums(n: Int): Int {\n    var sum = 0\n    for (i in 1..n) {\n        if (i % 5 == 0 || i % 7 == 0 || i % 35 == 0) {\n            sum += i\n        }\n    }\n    return sum\n}"}
{"kt_path": "8323/solution_8323.kt", "deepseek-coder-7b-base-v1.5": "fun calculateRemainingBooks(books: Int, days: Int, pages: Int): Int {\n    var remainingBooks = books\n    var daysPassed = 0\n    var pagesRead = 0\n    while (daysPassed < days) {\n        pagesRead += remainingBooks * 3\n        remainingBooks = pagesRead / pages\n        daysPassed++\n    }\n    return remainingBooks\n}"}
{"kt_path": "236/solution_236.kt", "deepseek-coder-7b-base-v1.5": "fun computeFloorArea(length: Float, width: Float): Any? {\n    return if (length <= 0.0f) {\n        \"Invalid length\"\n    } else if (width <= 0.0f) {\n        \"Invalid width\"\n    } else {\n        length * width\n    }\n}"}
{"kt_path": "14771/solution_14771.kt", "deepseek-coder-7b-base-v1.5": "fun indexingAndSlicingTuples(list: List<String>, index: Int): List<String> {\n    return list.subList(index, list.size)\n}"}
{"kt_path": "9943/solution_9943.kt", "deepseek-coder-7b-base-v1.5": "fun getNames(names: List<String>): List<String> {\n    return names.toList()\n}"}
{"kt_path": "8713/solution_8713.kt", "deepseek-coder-7b-base-v1.5": "fun accessRealPart(complexNumber: Pair<Double, Double>): Int = complexNumber.first.toInt()"}
{"kt_path": "3773/solution_3773.kt", "deepseek-coder-7b-base-v1.5": "fun calculateSalary(salary: Int, years: Int): Int {\n    return if (years >= 1) {\n        salary + 1\n    } else {\n        salary + 2\n    }\n}"}
{"kt_path": "11/solution_11.kt", "deepseek-coder-7b-base-v1.5": "fun getMax(a: Int, b: Int, c: Int): Int {\n    return if (a >= b && a >= c) a\n    else if (b >= a && b >= c) b\n    else c\n}"}
{"kt_path": "1118/solution_1118.kt", "deepseek-coder-7b-base-v1.5": "fun createEmptyComplementList(s: String): List<Any> {\n    val list = ArrayList<Any>()\n    return list\n}"}
{"kt_path": "8385/solution_8385.kt", "deepseek-coder-7b-base-v1.5": "fun fibonacci(n: Int): Int {\n    if (n <= 1) return n\n    var a = 1\n    var b = 1\n    for (i in 2..n) {\n        val c = a + b\n        a = b\n        b = c\n    }\n    return b\n}"}
{"kt_path": "14396/solution_14396.kt", "deepseek-coder-7b-base-v1.5": "fun extractNames(namesList: List<Pair<String, String>>): Pair<String, String> {\n    return namesList[0]\n}"}
{"kt_path": "5828/solution_5828.kt", "deepseek-coder-7b-base-v1.5": "fun calculatePaintCansNeeded(wallAreas: List<Double>, wallArea: Double): Int {\n    return wallAreas.sumOfDouble().toInt() / wallArea.toInt()\n}"}
