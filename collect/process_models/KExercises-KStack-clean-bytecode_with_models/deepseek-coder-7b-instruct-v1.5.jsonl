{"kt_path": "7824/solution_7824.kt", "deepseek-coder-7b-instruct-v1.5": "fun testCountOddNumbers() {\n    // TODO: Implement the function\n}"}
{"kt_path": "remisultan__multiarm-bandit-algorithm-kotlin__ead934d/core-bandit/src/main/kotlin/org/rsultan/bandit/algorithms/BanditAlgorithm.kt", "deepseek-coder-7b-instruct-v1.5": "interface BanditAlgorithm {\n    fun selectArm(): Int\n    fun update(arm: Int, reward: Float)\n}"}
{"kt_path": "13864/solution_13864.kt", "deepseek-coder-7b-instruct-v1.5": ""}
{"kt_path": "9763/solution_9763.kt", "deepseek-coder-7b-instruct-v1.5": ""}
{"kt_path": "8545/solution_8545.kt", "deepseek-coder-7b-instruct-v1.5": "fun calculateConversionRate(a: Int, b: Int): Double {\n    return 0.0\n}"}
{"kt_path": "13968/solution_13968.kt", "deepseek-coder-7b-instruct-v1.5": ""}
{"kt_path": "14509/solution_14509.kt", "deepseek-coder-7b-instruct-v1.5": "fun calculateRoomArea(length: Int, width: Int): Int {\n    val area = length * width\n    return area\n}"}
{"kt_path": "7670/solution_7670.kt", "deepseek-coder-7b-instruct-v1.5": ""}
{"kt_path": "224/solution_224.kt", "deepseek-coder-7b-instruct-v1.5": "fun calculateSalary(salary: Double): Long {\n    return Math.round(salary)\n}"}
{"kt_path": "11310/solution_11310.kt", "deepseek-coder-7b-instruct-v1.5": "fun calculateExpenses(days: Int, dailyRate: Float): Float {\n    return days * dailyRate\n}"}
{"kt_path": "10330/solution_10330.kt", "deepseek-coder-7b-instruct-v1.5": "fun calculatePower(base: Double, power: Double): Double {\n    return base * power\n}"}
{"kt_path": "11101/solution_11101.kt", "deepseek-coder-7b-instruct-v1.5": ""}
{"kt_path": "432/solution_432.kt", "deepseek-coder-7b-instruct-v1.5": ""}
{"kt_path": "n81ur3__kotlin-coding-challenges__fdc5941/src/main/kotlin/adventofcode2018/Day04ReposeRecord.kt", "deepseek-coder-7b-instruct-v1.5": "class Day04ReposeRecord {\n    constructor() {\n    }\n}"}
{"kt_path": "8671/solution_8671.kt", "deepseek-coder-7b-instruct-v1.5": ""}
{"kt_path": "5601/solution_5601.kt", "deepseek-coder-7b-instruct-v1.5": ""}
{"kt_path": "10329/solution_10329.kt", "deepseek-coder-7b-instruct-v1.5": ""}
{"kt_path": "n81ur3__kotlin-coding-challenges__fdc5941/src/main/kotlin/adventofcode2020/Day19MonsterMessage.kt", "deepseek-coder-7b-instruct-v1.5": "class Day19MonsterMessage"}
{"kt_path": "n81ur3__kotlin-coding-challenges__fdc5941/src/main/kotlin/adventofcode2020/Day07HandyHaversacks.kt", "deepseek-coder-7b-instruct-v1.5": "class Day07HandyHaversacks {\n    constructor() {\n    }\n}"}
{"kt_path": "7007/solution_7007.kt", "deepseek-coder-7b-instruct-v1.5": "fun isLongFlight(hours: Int, minutes: Int): Boolean = hours <= 0"}
{"kt_path": "3696/solution_3696.kt", "deepseek-coder-7b-instruct-v1.5": "fun findCommonArea(a: Float, b: Float, c: Float): Float {\n    return a * b * c\n}"}
{"kt_path": "9314/solution_9314.kt", "deepseek-coder-7b-instruct-v1.5": ""}
{"kt_path": "10577/solution_10577.kt", "deepseek-coder-7b-instruct-v1.5": ""}
{"kt_path": "n81ur3__kotlin-coding-challenges__fdc5941/src/main/kotlin/adventofcode2018/Day06ChronalCoordinates.kt", "deepseek-coder-7b-instruct-v1.5": "class Day06ChronalCoordinates {\n    constructor() {\n    }\n}"}
{"kt_path": "7819/solution_7819.kt", "deepseek-coder-7b-instruct-v1.5": ""}
{"kt_path": "8829/solution_8829.kt", "deepseek-coder-7b-instruct-v1.5": ""}
{"kt_path": "6256/solution_6256.kt", "deepseek-coder-7b-instruct-v1.5": "fun notEqualNone(a: Int, b: Int): Boolean {\n    return a != b"}
{"kt_path": "4238/solution_4238.kt", "deepseek-coder-7b-instruct-v1.5": ""}
{"kt_path": "3868/solution_3868.kt", "deepseek-coder-7b-instruct-v1.5": ""}
{"kt_path": "5766/solution_5766.kt", "deepseek-coder-7b-instruct-v1.5": ""}
{"kt_path": "4304/solution_4304.kt", "deepseek-coder-7b-instruct-v1.5": ""}
{"kt_path": "alebedev__aoc2022__d6ba46b/src/main/kotlin/Map.kt", "deepseek-coder-7b-instruct-v1.5": "object MapKt {\n    fun main() {\n        AocMap.INSTANCE.solve()\n    }\n\n    @JvmStatic\n    fun main(args: Array<String>) {\n        main()\n    }\n}"}
{"kt_path": "7168/solution_7168.kt", "deepseek-coder-7b-instruct-v1.5": ""}
{"kt_path": "5304/solution_5304.kt", "deepseek-coder-7b-instruct-v1.5": ""}
{"kt_path": "7099/solution_7099.kt", "deepseek-coder-7b-instruct-v1.5": ""}
{"kt_path": "8138/solution_8138.kt", "deepseek-coder-7b-instruct-v1.5": ""}
{"kt_path": "6625/solution_6625.kt", "deepseek-coder-7b-instruct-v1.5": "fun calculateCutLength(length: Int, width: Int, numberOfCuts: Int): Int {\n    val cutLength = (width - 1 + length) / numberOfCuts\n    return cutLength\n}"}
{"kt_path": "14820/solution_14820.kt", "deepseek-coder-7b-instruct-v1.5": ""}
{"kt_path": "3808/solution_3808.kt", "deepseek-coder-7b-instruct-v1.5": ""}
{"kt_path": "677/solution_677.kt", "deepseek-coder-7b-instruct-v1.5": "fun modulusComplexNumbers(a: Float, b: Float): Float {\n    val result = Math.sqrt((a * a + b * b).toDouble()).toFloat()\n    return result\n}"}
{"kt_path": "1838/solution_1838.kt", "deepseek-coder-7b-instruct-v1.5": "public static int calculateSum(int n) {\n    int sum = 0;\n    for (int i = 1; i <= n; i++) {\n        sum += i;\n    }\n    return sum;\n}"}
{"kt_path": "3178/solution_3178.kt", "deepseek-coder-7b-instruct-v1.5": ""}
{"kt_path": "9504/solution_9504.kt", "deepseek-coder-7b-instruct-v1.5": ""}
{"kt_path": "5182/solution_5182.kt", "deepseek-coder-7b-instruct-v1.5": ""}
{"kt_path": "7650/solution_7650.kt", "deepseek-coder-7b-instruct-v1.5": ""}
{"kt_path": "6824/solution_6824.kt", "deepseek-coder-7b-instruct-v1.5": "fun calculateScore(a: Int, b: Int): Int {\n    val result = a * 10 - b * 5\n    return if (b * 3 > result) -1 else result\n}"}
{"kt_path": "1825/solution_1825.kt", "deepseek-coder-7b-instruct-v1.5": "fun calculateCarpenterSalary(hoursWorked: Int, hourlyRate: Double, bonus: Double): Double {\n    val baseSalary = hoursWorked.toDouble() * hourlyRate\n    val totalSalary = baseSalary + (baseSalary * 0.10) + bonus\n    return totalSalary\n}"}
{"kt_path": "1332/solution_1332.kt", "deepseek-coder-7b-instruct-v1.5": ""}
{"kt_path": "10817/solution_10817.kt", "deepseek-coder-7b-instruct-v1.5": ""}
{"kt_path": "11536/solution_11536.kt", "deepseek-coder-7b-instruct-v1.5": ""}
{"kt_path": "13694/solution_13694.kt", "deepseek-coder-7b-instruct-v1.5": "fun calculateCarpenterSalary(hoursWorked: Int, hoursOvertime: Int, hourlyRate: Int): Int {\n    return hoursWorked + hoursOvertime + hourlyRate\n}"}
{"kt_path": "7127/solution_7127.kt", "deepseek-coder-7b-instruct-v1.5": ""}
{"kt_path": "7144/solution_7144.kt", "deepseek-coder-7b-instruct-v1.5": ""}
{"kt_path": "8240/solution_8240.kt", "deepseek-coder-7b-instruct-v1.5": ""}
{"kt_path": "2140/solution_2140.kt", "deepseek-coder-7b-instruct-v1.5": "fun commissionCalculator(price: Double, quantity: Double, commissionRate: Double): Double {\n    var totalCommission = 0.0\n    if (price <= 0.0 && commissionRate <= 0.0) {\n        return totalCommission\n    }\n    totalCommission = price * quantity * commissionRate\n    return totalCommission\n}"}
{"kt_path": "14315/solution_14315.kt", "deepseek-coder-7b-instruct-v1.5": ""}
{"kt_path": "2523/solution_2523.kt", "deepseek-coder-7b-instruct-v1.5": ""}
{"kt_path": "918/solution_918.kt", "deepseek-coder-7b-instruct-v1.5": ""}
{"kt_path": "10520/solution_10520.kt", "deepseek-coder-7b-instruct-v1.5": ""}
{"kt_path": "6399/solution_6399.kt", "deepseek-coder-7b-instruct-v1.5": ""}
{"kt_path": "10731/solution_10731.kt", "deepseek-coder-7b-instruct-v1.5": ""}
{"kt_path": "8756/solution_8756.kt", "deepseek-coder-7b-instruct-v1.5": ""}
{"kt_path": "10964/solution_10964.kt", "deepseek-coder-7b-instruct-v1.5": "fun calculateInvestmentGrowth(principal: Double, rate: Double, years: Int): Double {\n    var principal = principal\n    var years = years\n    while (years > 0) {\n        principal = principal * (1 + rate)\n        years--\n    }\n    return principal\n}"}
{"kt_path": "9201/solution_9201.kt", "deepseek-coder-7b-instruct-v1.5": ""}
{"kt_path": "14784/solution_14784.kt", "deepseek-coder-7b-instruct-v1.5": ""}
{"kt_path": "12550/solution_12550.kt", "deepseek-coder-7b-instruct-v1.5": "fun checkGameConditions(a: Int, b: Int, c: Int, d: Boolean): Boolean {\n    return if (a <= 1000 && b <= 50 && c < 10 && d) {\n        true\n    } else {\n        false\n    }\n}"}
{"kt_path": "2717/solution_2717.kt", "deepseek-coder-7b-instruct-v1.5": ""}
{"kt_path": "10259/solution_10259.kt", "deepseek-coder-7b-instruct-v1.5": "fun calculateTotalPrice(price: Float, quantity: Float): Float {\n    val DELTA = 1.0E-4f\n    val absolutePrice = Math.abs(price)\n    return if (absolutePrice <= DELTA) {\n        quantity\n    } else {\n        quantity * price\n    }\n}"}
{"kt_path": "1510/solution_1510.kt", "deepseek-coder-7b-instruct-v1.5": ""}
{"kt_path": "2099/solution_2099.kt", "deepseek-coder-7b-instruct-v1.5": ""}
{"kt_path": "9202/solution_9202.kt", "deepseek-coder-7b-instruct-v1.5": ""}
{"kt_path": "9289/solution_9289.kt", "deepseek-coder-7b-instruct-v1.5": "fun sliceTuple(list: List<Any>, startIndex: Int, endIndex: Int): List<Any> {\n    return list.subList(startIndex, endIndex)\n}"}
{"kt_path": "222/solution_222.kt", "deepseek-coder-7b-instruct-v1.5": "fun calculateProfit(price: Double, cost: Double, commission: Double): Double {\n    val profit = price - cost\n    return if (profit <= 0.0) profit else profit - commission * profit\n}"}
{"kt_path": "2704/solution_2704.kt", "deepseek-coder-7b-instruct-v1.5": "fun calculateSum(): Double {\n    var sum = 0.0\n    var term = 0.1\n    while (sum <= 1000.0) {\n        sum += term\n        term += 0.01\n    }\n    return sum\n}"}
{"kt_path": "7036/solution_7036.kt", "deepseek-coder-7b-instruct-v1.5": ""}
{"kt_path": "7097/solution_7097.kt", "deepseek-coder-7b-instruct-v1.5": ""}
{"kt_path": "6743/solution_6743.kt", "deepseek-coder-7b-instruct-v1.5": ""}
{"kt_path": "14646/solution_14646.kt", "deepseek-coder-7b-instruct-v1.5": "fun checkPromotionEligibility(age: Int, income: Double): Boolean {\n    return if (age > 25) {\n        if (age >= 41) {\n            true\n        } else {\n            false\n        }\n    } else {\n        false\n    }\n}"}
{"kt_path": "1671/solution_1671.kt", "deepseek-coder-7b-instruct-v1.5": "fun createTupleFromDictionary(dictionary: Map<String, Any?>): List<Pair<String, Any?>> {\n    return dictionary.toList()\n}"}
{"kt_path": "13442/solution_13442.kt", "deepseek-coder-7b-instruct-v1.5": ""}
{"kt_path": "13338/solution_13338.kt", "deepseek-coder-7b-instruct-v1.5": ""}
{"kt_path": "8409/solution_8409.kt", "deepseek-coder-7b-instruct-v1.5": "fun calculateTotalCost(price: Double, quantity: Double): Double {\n    val subtotal = price * quantity\n    return if (price <= 1000.0) {\n        subtotal - (subtotal * 0.1)\n    } else {\n        0.0\n    }\n}"}
{"kt_path": "5263/solution_5263.kt", "deepseek-coder-7b-instruct-v1.5": ""}
{"kt_path": "7005/solution_7005.kt", "deepseek-coder-7b-instruct-v1.5": ""}
{"kt_path": "7004/solution_7004.kt", "deepseek-coder-7b-instruct-v1.5": ""}
{"kt_path": "1559/solution_1559.kt", "deepseek-coder-7b-instruct-v1.5": "fun convertToSet(gameData: List<Any>): Set<Any> {\n    return gameData.toSet()\n}"}
{"kt_path": "14689/solution_14689.kt", "deepseek-coder-7b-instruct-v1.5": ""}
{"kt_path": "13400/solution_13400.kt", "deepseek-coder-7b-instruct-v1.5": ""}
{"kt_path": "9661/solution_9661.kt", "deepseek-coder-7b-instruct-v1.5": ""}
{"kt_path": "8323/solution_8323.kt", "deepseek-coder-7b-instruct-v1.5": "fun calculateRemainingBooks(totalBooks: Int, booksPerDay: Int, days: Int): Int {\n    var remainingBooks = 0\n    var readBooks = totalBooks\n    var currentDay = 0\n\n    while (currentDay < days) {\n        readBooks /= booksPerDay\n        currentDay++\n    }\n\n    remainingBooks = readBooks * 3\n    return remainingBooks\n}"}
{"kt_path": "236/solution_236.kt", "deepseek-coder-7b-instruct-v1.5": ""}
{"kt_path": "14771/solution_14771.kt", "deepseek-coder-7b-instruct-v1.5": "fun indexingAndSlicingTuples(list: List<String>, index: Int): List<String> {\n    require(list != null)\n    return list.subList(index, list.size)\n}"}
{"kt_path": "9943/solution_9943.kt", "deepseek-coder-7b-instruct-v1.5": "fun addNegIntegersToSet(numbers: List<Int>): Set<Int> {\n    return numbers.toSet()\n}"}
{"kt_path": "8713/solution_8713.kt", "deepseek-coder-7b-instruct-v1.5": ""}
{"kt_path": "3773/solution_3773.kt", "deepseek-coder-7b-instruct-v1.5": "fun calculateSocialWorkerSalary(salary: Double, yearsOfService: Int): Double {\n    return when {\n        yearsOfService < 10 -> salary\n        yearsOfService < 5 -> salary * 1.5\n        yearsOfService < 2 -> salary * 2.0\n        else -> salary * 3.0\n    }\n}"}
{"kt_path": "11/solution_11.kt", "deepseek-coder-7b-instruct-v1.5": ""}
{"kt_path": "1118/solution_1118.kt", "deepseek-coder-7b-instruct-v1.5": "fun createEmptyComplementList(s: String): List<Any> {\n    val nurse = kotlin.jvm.internal.Intrinsics.checkNotNullParameter(s, \"nurse\")\n    val list = ArrayList<Any>()\n    return list as List<Any>\n}"}
{"kt_path": "8385/solution_8385.kt", "deepseek-coder-7b-instruct-v1.5": ""}
{"kt_path": "14396/solution_14396.kt", "deepseek-coder-7b-instruct-v1.5": "fun extractCoordinates(coordinatesList: List<Triple<Int, Int, Int>>): Triple<Int, Int, Int> {\n    return coordinatesList[0]\n}"}
{"kt_path": "5828/solution_5828.kt", "deepseek-coder-7b-instruct-v1.5": "fun calculatePaintCansNeeded(wallAreas: List<Double>, coverage: Double): Int {\n    val totalArea = wallAreas.sum()\n    return (totalArea / coverage).toInt()\n}"}
