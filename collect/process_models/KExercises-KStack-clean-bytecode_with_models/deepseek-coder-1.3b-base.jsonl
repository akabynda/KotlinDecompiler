{"kt_path": "7824/solution_7824.kt", "deepseek-coder-1.3b-base": "fun main() {\n    println(\"Hello, world\")\n}"}
{"kt_path": "remisultan__multiarm-bandit-algorithm-kotlin__ead934d/core-bandit/src/main/kotlin/org/rsultan/bandit/algorithms/BanditAlgorithm.kt", "deepseek-coder-1.3b-base": "interface BanditAlgorithm {\n    fun selectArm(): Int\n    fun update(arm: Int, reward: Float)\n}"}
{"kt_path": "13864/solution_13864.kt", "deepseek-coder-1.3b-base": "fun main() {\n    println(calculateScore(10, 20))\n}\n\nfun calculateScore(a: Int, b: Int): Int {\n    return a * b\n}"}
{"kt_path": "9763/solution_9763.kt", "deepseek-coder-1.3b-base": "fun main() {\n    println(calculateFinalPrice(100.0, 10.0))\n}\n\nfun calculateFinalPrice(basePrice: Double, discount: Double): Double {\n    return basePrice - discount\n}"}
{"kt_path": "8545/solution_8545.kt", "deepseek-coder-1.3b-base": "fun main() {\n    println(calculateConversionRate(100, 1000))\n}\n\nfun calculateConversionRate(from: Int, to: Int): Double {\n    return to.toDouble() / from.toDouble()\n}"}
{"kt_path": "13968/solution_13968.kt", "deepseek-coder-1.3b-base": "fun athletePerformanceDistance(distance: Double, time: Double): Double {\n    return distance / time\n}"}
{"kt_path": "14509/solution_14509.kt", "deepseek-coder-1.3b-base": "fun calculateRoomArea(width: Int, length: Int): Int {\n    return width * length\n}"}
{"kt_path": "7670/solution_7670.kt", "deepseek-coder-1.3b-base": "fun identityAssignment() = true"}
{"kt_path": "224/solution_224.kt", "deepseek-coder-1.3b-base": "fun main() {\n    println(calculateSalary(100.5))\n}\n\nfun calculateSalary(salary: Double): Long {\n    return Math.round(salary)\n}"}
{"kt_path": "11310/solution_11310.kt", "deepseek-coder-1.3b-base": "fun main() {\n    println(calculateExpenses}
{"kt_path": "10330/solution_10330.kt", "deepseek-coder-1.3b-base": "fun main(args: Array<String>) {\n    println(calculatePower(2.0, 3.0))\n}\n\nfun calculatePower(x: Double, y: Double): Double {\n    return x * y\n}"}
{"kt_path": "11101/solution_11101.kt", "deepseek-coder-1.3b-base": "fun checkPositiveInteger(i: Int): Boolean {\n    return i > 0\n}"}
{"kt_path": "432/solution_432.kt", "deepseek-coder-1.3b-base": "fun main(args: Array<String>) {\n    println(calculateResistance(1000.0, 100.0))\n}\n\nfun calculateResistance(var1: Double, var2: Double): Double {\n    return var1 / var2\n}"}
{"kt_path": "n81ur3__kotlin-coding-challenges__fdc5941/src/main/kotlin/adventofcode2018/Day04ReposeRecord.kt", "deepseek-coder-1.3b-base": "class Day04ReposeRecord"}
{"kt_path": "8671/solution_8671.kt", "deepseek-coder-1.3b-base": "fun main() {\n    println(calculateAverageSpeed(10.0, 20.0))\n}\n\nfun calculateAverageSpeed(x: Double, y: Double): Double {\n    return x / y\n}"}
{"kt_path": "5601/solution_5601.kt", "deepseek-coder-1.3b-base": "fun calculateCircuitPower(voltage: Double, current: Double): Double {\n    return voltage * current\n}"}
{"kt_path": "10329/solution_10329.kt", "deepseek-coder-1.3b-base": "fun main(args: Array<String>) {\n    println(calculateResistance(1000.0, 100.0))\n}\n\nfun calculateResistance(var1: Double, var2: Double): Double {\n    return var1 / var2\n}"}
{"kt_path": "n81ur3__kotlin-coding-challenges__fdc5941/src/main/kotlin/adventofcode2020/Day19MonsterMessage.kt", "deepseek-coder-1.3b-base": "class Day19MonsterMessage {\n}"}
{"kt_path": "n81ur3__kotlin-coding-challenges__fdc5941/src/main/kotlin/adventofcode2020/Day07HandyHaversacks.kt", "deepseek-coder-1.3b-base": "class Day07HandyHaversacks {\n}"}
{"kt_path": "7007/solution_7007.kt", "deepseek-coder-1.3b-base": "fun isLongFlight(a: Int, b: Int): Boolean {\n    return a + b > 1000\n}"}
{"kt_path": "3696/solution_3696.kt", "deepseek-coder-1.3b-base": "fun main() {\n    println(findCommonArea(1.0f, 2.0f, 3.0f))\n}\n\nfun findCommonArea(a: Float, b: Float, c: Float): Float {\n    return a * b * c\n}"}
{"kt_path": "9314/solution_9314.kt", "deepseek-coder-1.3b-base": "fun isEven(n: Int): Boolean {\n    return n % 2 == 0\n}"}
{"kt_path": "10577/solution_10577.kt", "deepseek-coder-1.3b-base": "fun isEven(n: Int): Boolean {\n    return n % 2 == 0\n}"}
{"kt_path": "n81ur3__kotlin-coding-challenges__fdc5941/src/main/kotlin/adventofcode2018/Day06ChronalCoordinates.kt", "deepseek-coder-1.3b-base": "class Day06ChronalCoordinates {\n}"}
{"kt_path": "7819/solution_7819.kt", "deepseek-coder-1.3b-base": "fun main() {\n    println(calculatePowerConsumption(5.0))\n}\n\nfun calculatePowerConsumption(x: Double): Double {\n    return x * x\n}"}
{"kt_path": "8829/solution_8829.kt", "deepseek-coder-1.3b-base": "fun main(args: Array<String>) {\n    println(calculateDailyCaloricNeeds(2.5f, 0.25f))\n}\n\nfun calculateDailyCaloricNeeds(gramsOfFat: Float, gramsOfCarbohydrates: Float): Float {\n    return gramsOfFat * 9 + gramsOfCarbohydrates * 4\n}"}
{"kt_path": "6256/solution_6256.kt", "deepseek-coder-1.3b-base": "fun main() {\n    val a = 1\n    val b = 2\n    if (a != b) {\n        println(\"a is not equal to b\")\n    }\n}"}
{"kt_path": "4238/solution_4238.kt", "deepseek-coder-1.3b-base": "fun main() {\n    val speedLimit = 100f\n    val currentSpeed = 100f\n    if (currentSpeed > speedLimit) {\n        println(\"You are speeding\")\n    }\n}"}
{"kt_path": "3868/solution_3868.kt", "deepseek-coder-1.3b-base": "fun main(args: Array<String>) {\n    println(Solution_3868Kt.sumOfNumbers(1, 2))\n}\n\npublic final class Solution_3868Kt {\n  public static final int sumOfNumbers(int a, int b) {\n    return a + b\n  }\n}"}
{"kt_path": "5766/solution_5766.kt", "deepseek-coder-1.3b-base": "fun main() {\n    var a = 10\n    var b = 20\n    var c = 0\n    c = a.shiftAndMultiplyAssignment(b)\n    println(c)\n}\n\nfun Int.shiftAndMultiplyAssignment(b: Int): Int {\n    this = this shl 1\n    this = this * b\n    return this\n}"}
{"kt_path": "4304/solution_4304.kt", "deepseek-coder-1.3b-base": "fun main() {\n    println(architectMath(2, 3))\n}\n\nfun architectMath(a: Int, b: Int): Int {\n    return a * b + 2\n}"}
{"kt_path": "alebedev__aoc2022__d6ba46b/src/main/kotlin/Map.kt", "deepseek-coder-1.3b-base": "import kotlin.reflect.KClass\nimport kotlin.reflect.full.companionObjectInstance\nimport kotlin.reflect.full.findAnnotation\nimport kotlin.reflect.full.primaryConstructor\nimport kotlin.reflect.jvm.jvmErasure\nimport kotlin.reflect.jvm.jvmStatic\nimport kotlin.reflect.jvm.kotlinFunction\nimport kotlin.reflect.jvm.kotlinProperty\nimport kotlin.reflect.jvm.kotlinType\nimport kotlin.reflect.jvm.kotlinTypeProjection\nimport kotlin.reflect.jvm.kotlinTypeProjectionOrNull\nimport kotlin.reflect.jvm.kotlinTypeProjectionOrNull\nimport kotlin.reflect.jvm.kotlinTypeProjectionOrNull\nimport kotlin.reflect.jvm.kotlinTypeProjectionOrNull\nimport kotlin.reflect.jvm.kotlinTypeProjectionOrNull\nimport kotlin.reflect.jvm.kotlinTypeProjectionOrNull\nimport kotlin.reflect.jvm.kotlinTypeProjectionOrNull\nimport kotlin.reflect.jvm.kotlinTypeProjectionOrNull\nimport kotlin.reflect.jvm.kotlinTypeProjectionOrNull\nimport kotlin.reflect.jvm.kotlinTypeProjectionOrNull\nimport kotlin.reflect.jvm.kotlinTypeProjectionOrNull\nimport kotlin.reflect.jvm.kotlinTypeProjectionOrNull\nimport kotlin.reflect.jvm.kotlinTypeProjectionOrNull\nimport kotlin.reflect.jvm.kotlinTypeProjectionOrNull\nimport kotlin.reflect.jvm.kotlinTypeProjectionOrNull\nimport kotlin.reflect.jvm.kotlinTypeProjectionOrNull\nimport kotlin.reflect.jvm.kotlinTypeProjectionOrNull\nimport kotlin.reflect.jvm.kotlinTypeProjectionOrNull\nimport kotlin.reflect.jvm.kotlinTypeProjectionOrNull\nimport kotlin.reflect.jvm.kotlinTypeProjectionOrNull\nimport kotlin.reflect.jvm.kotlinTypeProjectionOrNull\nimport kotlin.reflect.jvm.kotlinTypeProjectionOrNull\nimport"}
{"kt_path": "7168/solution_7168.kt", "deepseek-coder-1.3b-base": "fun multiplyAndModulo(a: Int, b: Int, c: Int, d: Int): Int {\n    return (a * b % c % d).toInt()\n}"}
{"kt_path": "5304/solution_5304.kt", "deepseek-coder-1.3b-base": "fun numberOfCircuits(a: Int, b: Int, c: Int): Int {\n    var n = 0\n    while (a > 0) {\n        a = a - b + c\n        n++\n    }\n    return n\n}"}
{"kt_path": "7099/solution_7099.kt", "deepseek-coder-1.3b-base": "fun main() {\n    println(calculateDistance(1.0, 2.0, 3.0))\n}\n\nfun calculateDistance(x1: Double, x2: Double, y1: Double, y2: Double): Double {\n    return sqrt(pow(x1 - x2, 2.0) + pow(y1 - y2, 2.0))\n}"}
{"kt_path": "8138/solution_8138.kt", "deepseek-coder-1.3b-base": "fun athletePoints(athlete: Int, isWinner: Boolean, isLoser: Boolean): Int {\n    return if (isWinner) athlete + 3 else if (isLoser) athlete - 1 else athlete\n}"}
{"kt_path": "6625/solution_6625.kt", "deepseek-coder-1.3b-base": "fun main() {\n    println(calculateCutLength(10.0f, 10.0f, 10))\n}\n\nfun calculateCutLength(length: Float, width: Float, height: Int): Float {\n    return length * width * height\n}"}
{"kt_path": "14820/solution_14820.kt", "deepseek-coder-1.3b-base": "fun positiveIntegersSum(n: Int): Int {\n    var sum = 0\n    for (i in 0 until n) {\n        sum += i\n    }\n    return sum\n}"}
{"kt_path": "3808/solution_3808.kt", "deepseek-coder-1.3b-base": "fun countNegative(a: Int, b: Int): Int {\n    var count = 0\n    for (i in a..b) {\n        if (i < 0) {\n            count++\n        }\n    }\n    return count\n}"}
{"kt_path": "677/solution_677.kt", "deepseek-coder-1.3b-base": "fun main() {\n    println(modulusComplexNumbers(1.0f, 2.0f))\n}\n\nfun modulusComplexNumbers(a: Float, b: Float): Float {\n    return Math.sqrt(a * a + b * b)\n}"}
{"kt_path": "1838/solution_1838.kt", "deepseek-coder-1.3b-base": "fun calculateSum(n: Int): Int {\n    var sum = 0\n    for (i in 1..n) {\n        sum += i\n    }\n    return sum\n}"}
{"kt_path": "3178/solution_3178.kt", "deepseek-coder-1.3b-base": "fun graphicDesignerSalary(salary: Int): Int {\n    return if (salary > 1000) 2500 else 0\n}"}
{"kt_path": "9504/solution_9504.kt", "deepseek-coder-1.3b-base": "fun checkPrimeNumbers(n: Int): Boolean {\n    if (n < 2) return false\n    for (i in 2..n - 1) {\n        if (n % i == 0) return false\n    }\n    return true\n}"}
{"kt_path": "5182/solution_5182.kt", "deepseek-coder-1.3b-base": "fun checkDivisible(n: Int): Boolean {\n    return n % 11 == 0\n}"}
{"kt_path": "7650/solution_7650.kt", "deepseek-coder-1.3b-base": "fun sumOfSquares(n: Int): Int {\n    var sum = 0\n    for (i in 1..n) {\n        sum += i * i\n    }\n    return sum\n}"}
{"kt_path": "6824/solution_6824.kt", "deepseek-coder-1.3b-base": "fun calculateScore(a: Int, b: Int): Int {\n    return if (a > b) -1 else a + b\n}"}
{"kt_path": "1825/solution_1825.kt", "deepseek-coder-1.3b-base": "fun calculateCarpenterSalary(years: Int, salary: Double, bonus: Double): Double {\n    return (salary * bonus * years) / 100\n}"}
{"kt_path": "1332/solution_1332.kt", "deepseek-coder-1.3b-base": "fun extinguishFire(distance: Double): Int {\n    if (distance <= 0.0) {\n        return 0\n    }\n    return 1\n}"}
{"kt_path": "10817/solution_10817.kt", "deepseek-coder-1.3b-base": "fun maxOfThree(a: Int, b: Int, c: Int) = if (a > b) {\n    if (a > c) a else c\n} else {\n    if (b > c) b else c\n}"}
{"kt_path": "11536/solution_11536.kt", "deepseek-coder-1.3b-base": "fun isFloat(obj: Any?): Boolean {\n    return obj is Float\n}"}
{"kt_path": "13694/solution_13694.kt", "deepseek-coder-1.3b-base": "fun main() {\n    println(calculateCarpenterSalary(10000, 100000.0, 100000.0))\n}\n\nfun calculateCarpenterSalary(salary: Int, bonus: Double, bonusPercent: Double): Double {\n    return (salary * bonusPercent + bonus)\n}"}
{"kt_path": "7127/solution_7127.kt", "deepseek-coder-1.3b-base": "fun checkInteger(obj: Any?): Boolean {\n    if (obj is String) {\n        return obj.toIntOrNull() != null\n    }\n    return false\n}"}
{"kt_path": "7144/solution_7144.kt", "deepseek-coder-1.3b-base": "fun main() {\n    val a = 0.01\n    val b = 0.01\n    println(a == b)\n}"}
{"kt_path": "8240/solution_8240.kt", "deepseek-coder-1.3b-base": "fun calculateFactorial(n: Int): Int {\n    var result = 1\n    for (i in 1..n) {\n        result *= i\n    }\n    return result\n}"}
{"kt_path": "2140/solution_2140.kt", "deepseek-coder-1.3b-base": "fun commissionCalculator(amount: Double, commission: Double, rate: Double): Double {\n    return if (amount > 0.0 && commission > 0.0 && rate > 0.0) {\n        amount * (commission / 100.0) * (rate / 100.0)\n    } else {\n        0.0\n    }\n}"}
{"kt_path": "14315/solution_14315.kt", "deepseek-coder-1.3b-base": "fun sumPositiveIntegers(n: Int): Int {\n    var sum = 0\n    for (i in 1..n) {\n        if (i > 0) {\n            sum += i\n        }\n    }\n    return sum\n}"}
{"kt_path": "2523/solution_2523.kt", "deepseek-coder-1.3b-base": "fun sumEvenNumbers(a: Int, b: Int): Int {\n    var sum = 0\n    for (i in a..b) {\n        if (i % 2 == 0) {\n            sum += i\n        }\n    }\n    return sum\n}"}
{"kt_path": "918/solution_918.kt", "deepseek-coder-1.3b-base": "fun checkBudget(budget: Int): String {\n    return if (budget >= 4000) \"Budget is sufficient for the marketing campaign.\" else \"Insufficient budget, please allocate more funds for the campaign.\"\n}"}
{"kt_path": "10520/solution_10520.kt", "deepseek-coder-1.3b-base": "fun sumOfEvenNumbers(a: Int, b: Int): Int {\n    var sum = 0\n    for (i in a..b) {\n        if (i % 2 == 0) {\n            sum += i\n        }\n    }\n    return sum\n}"}
{"kt_path": "6399/solution_6399.kt", "deepseek-coder-1.3b-base": "fun checkPercentage(percentage: Int): String {\n    return if (percentage in 95..98) \"Within acceptable range\" else \"Outside acceptable range\"\n}"}
{"kt_path": "10731/solution_10731.kt", "deepseek-coder-1.3b-base": "fun checkEligibility(age: Int, weight: Int, height: Int): String {\n    if (age < 18) return \"Not Eligible\"\n    if (weight < 50) return \"Not Eligible\"\n    if (height < 60) return \"Not Eligible\"\n    return \"Eligible\"\n}"}
{"kt_path": "8756/solution_8756.kt", "deepseek-coder-1.3b-base": "fun findMax(a: Int, b: Int, c: Int): Int {\n    return if (a > b) {\n        if (a > c) a else c\n    } else {\n        if (b > c) b else c\n    }\n}"}
{"kt_path": "10964/solution_10964.kt", "deepseek-coder-1.3b-base": "fun main() {\n    println(calculateInvestmentGrowth(1000.0, 10.0, 10))\n}\n\nfun calculateInvestmentGrowth(initialCapital: Double, interestRate: Double, years: Int): Double {\n    var capital = initialCapital\n    for (i in 0 until years) {\n        capital = capital * (1 + interestRate)\n    }\n    return capital\n}"}
{"kt_path": "9201/solution_9201.kt", "deepseek-coder-1.3b-base": "fun isCloseToZero(x: Double, y: Double): Boolean {\n    return if (x == y) true else (x + y).abs() < 1e-9\n}"}
{"kt_path": "14784/solution_14784.kt", "deepseek-coder-1.3b-base": "fun sumOfMultiples(a: Int, b: Int, n: Int): Int {\n    var sum = 0\n    for (i in 1..n) {\n        if (i % a == 0 || i % b == 0) {\n            sum += i\n        }\n    }\n    return sum\n}"}
{"kt_path": "12550/solution_12550.kt", "deepseek-coder-1.3b-base": "fun checkGameConditions(a: Int, b: Int, c: Int, d: Boolean): Boolean {\n    if (a == 1000 && b == 50 && c == 10) {\n        return true\n    }\n    return false\n}"}
{"kt_path": "2717/solution_2717.kt", "deepseek-coder-1.3b-base": "fun main() {\n    val lst = listOf(\"a\", \"b\", \"c\")\n    println(lst.get(0))\n}"}
{"kt_path": "10259/solution_10259.kt", "deepseek-coder-1.3b-base": "fun calculateTotalPrice(price: Float, discount: Float): Float {\n    return if (discount > 0.0f) {\n        price * (1.0f - discount)\n    } else {\n        price\n    }\n}"}
{"kt_path": "1510/solution_1510.kt", "deepseek-coder-1.3b-base": "fun main() {\n    val list = listOf(\"a\", \"b\", \"c\")\n    println(list.last())\n}"}
{"kt_path": "2099/solution_2099.kt", "deepseek-coder-1.3b-base": "fun calculateTotalDistance(x: Float, y: Float): Float {\n    var totalDistance = 0.0f\n    if (x > y) {\n        totalDistance = x - y\n    }\n    return totalDistance\n}"}
{"kt_path": "9202/solution_9202.kt", "deepseek-coder-1.3b-base": "fun main() {\n    val a = 1.0\n    val b = 2.0\n    val c = a + b\n    println(c)\n}"}
{"kt_path": "9289/solution_9289.kt", "deepseek-coder-1.3b-base": "fun main() {\n    val list = listOf(1, 2, 3, 4, 5)\n    val subList = list.subList(1, 3)\n    println(subList)\n}"}
{"kt_path": "222/solution_222.kt", "deepseek-coder-1.3b-base": "fun calculateProfit(a: Double, b: Double, c: Double): Double {\n    return if (a > b) {\n        a - b\n    } else {\n        a + c\n    }\n}"}
{"kt_path": "2704/solution_2704.kt", "deepseek-coder-1.3b-base": "fun main() {\n    println(calculateSum())\n}\n\nfun calculateSum(): Double {\n    var sum = 0.0\n    for (i in 0..999) {\n        sum += (0.1 * i) + (0.01 * i)\n    }\n    return sum\n}"}
{"kt_path": "7036/solution_7036.kt", "deepseek-coder-1.3b-base": "fun calculateExpenses(expensesList: List<Double>): Double {\n    return expensesList.sum()\n}"}
{"kt_path": "7097/solution_7097.kt", "deepseek-coder-1.3b-base": "fun main(args: Array<String>) {\n    val animals = listOf(\"cat\", \"dog\", \"mouse\")\n    println(findAnimal(animals, 1))\n}\n\nfun findAnimal(animals: List<String>, index: Int): String {\n    return animals[index]\n}"}
{"kt_path": "6743/solution_6743.kt", "deepseek-coder-1.3b-base": "fun main() {\n    val list = listOf(1, 2, 3)\n    val set = list.toSet()\n    println(set)\n}"}
{"kt_path": "14646/solution_14646.kt", "deepseek-coder-1.3b-base": "fun checkPromotionEligibility(age: Int, salary: Double): Boolean {\n    return if (age > 25 && salary > 5000.0) {\n        true\n    } else {\n        false\n    }\n}"}
{"kt_path": "1671/solution_1671.kt", "deepseek-coder-1.3b-base": "fun main() {\n    val dictionary = mapOf(\"a\" to 1, \"b\" to 2)\n    val list = dictionary.toList()\n    println(list)\n}"}
{"kt_path": "13442/solution_13442.kt", "deepseek-coder-1.3b-base": "fun printEvenNumbers(a: Int, b: Int) {\n    for (i in a..b step 2) {\n        println(i)\n    }\n}"}
{"kt_path": "13338/solution_13338.kt", "deepseek-coder-1.3b-base": "fun main() {\n    val photoData = listOf(\"photoData\")\n    val set = convertToSet(photoData)\n    println(set)\n}\n\nfun convertToSet(photoData: List<String>): Set<String> {\n    return photoData.toSet()\n}"}
{"kt_path": "8409/solution_8409.kt", "deepseek-coder-1.3b-base": "fun calculateTotalCost(price: Double, discount: Double): Double {\n    return price * (1 - discount)\n}"}
{"kt_path": "5263/solution_5263.kt", "deepseek-coder-1.3b-base": "fun operationsQuiz(a: Boolean, b: Boolean, c: Boolean, d: Boolean): Boolean {\n    return if (a) {\n        if (b) {\n            if (c) {\n                if (d) {\n                    true\n                } else {\n                    false\n                }\n            } else {\n                false\n            }\n        } else {\n            false\n        }\n    } else {\n        false\n    }\n}"}
{"kt_path": "7005/solution_7005.kt", "deepseek-coder-1.3b-base": "fun main() {\n    val set = setOf(1, 2, 3)\n    val list = set.toList()\n    println(list)\n}"}
{"kt_path": "7004/solution_7004.kt", "deepseek-coder-1.3b-base": "fun main() {\n    val lst = listOf(\"a\", \"b\", \"c\")\n    val set = lst.toSet()\n    println(set)\n}"}
{"kt_path": "1559/solution_1559.kt", "deepseek-coder-1.3b-base": "fun main() {\n    val gameData = \"gameData\"\n    val set = convertToSet(listOf(gameData))\n    println(set)\n}\n\nfun convertToSet(list: List<Any>): Set<Any> {\n    return list.toSet()\n}"}
{"kt_path": "14689/solution_14689.kt", "deepseek-coder-1.3b-base": "fun printOddNumbers(n: Int) {\n    for (i in 1..n step 2) {\n        println(i)\n    }\n}"}
{"kt_path": "13400/solution_13400.kt", "deepseek-coder-1.3b-base": "fun findBiggerNumber(a: Int, b: Int, c: Int, d: Int): Int {\n    return if (a > b) {\n        if (c > d) {\n            c\n        } else {\n            d\n        }\n    } else {\n        if (c > d) {\n            c\n        } else {\n            d\n        }\n    }\n}"}
{"kt_path": "9661/solution_9661.kt", "deepseek-coder-1.3b-base": "fun calculateSums(n: Int): Int {\n    var sum = 0\n    for (i in 1..n) {\n        if (i % 35 == 0) {\n            sum += i\n        } else if (i % 7 == 0) {\n            sum += i\n        } else {\n            sum += i\n        }\n    }\n    return sum\n}"}
{"kt_path": "8323/solution_8323.kt", "deepseek-coder-1.3b-base": "fun calculateRemainingBooks(n: Int, k: Int, t: Int): Int {\n    var books = n\n    var days = 0\n    while (books > 0) {\n        books -= k\n        days++\n        if (books < k) {\n            books += books\n        }\n    }\n    return days\n}"}
{"kt_path": "236/solution_236.kt", "deepseek-coder-1.3b-base": "fun computeFloorArea(width: Float, height: Float): String {\n    if (width < 0.0f || height < 0.0f) {\n        return \"Invalid length\"\n    }\n    if (width < 0.0f || height < 0.0f) {\n        return \"Invalid width\"\n    }\n    return (width * height).toString()\n}"}
{"kt_path": "14771/solution_14771.kt", "deepseek-coder-1.3b-base": "fun indexingAndSlicingTuples(list: List<String>, index: Int): List<String> {\n    return list.subList(index, list.size)\n}"}
{"kt_path": "9943/solution_9943.kt", "deepseek-coder-1.3b-base": "fun main() {\n    val numbers = listOf(1, 2, 3, 4, 5)\n    val set = addNegIntegersToSet(numbers)\n    println(set)\n}\n\nfun addNegIntegersToSet(numbers: List<Int>): Set<Int> {\n    return numbers.map { it * -1 }.toSet()\n}"}
{"kt_path": "8713/solution_8713.kt", "deepseek-coder-1.3b-base": "fun main() {\n    val complexNumber = ComplexNumber(1.0, 2.0)\n    println(complexNumber.accessImaginaryPart())\n}\n\nclass ComplexNumber(val real: Double, val imaginary: Double) {\n    fun accessImaginaryPart(): Double {\n        return imaginary\n    }\n}"}
{"kt_path": "3773/solution_3773.kt", "deepseek-coder-1.3b-base": "fun main() {\n    val salary = calculateSocialWorkerSalary(1000.0, 10)\n    println(salary)\n}\n\nfun calculateSocialWorkerSalary(salary: Double, years: Int): Double {\n    return if (years > 10) {\n        salary * 1.5\n    } else {\n        salary * 2\n    }\n}"}
{"kt_path": "11/solution_11.kt", "deepseek-coder-1.3b-base": "fun checkOddEvenNumbers(a: Int, b: Int, c: Int): Boolean {\n    return a % 2 == 0 && b % 2 == 0 && c % 2 == 0\n}"}
{"kt_path": "1118/solution_1118.kt", "deepseek-coder-1.3b-base": "fun createEmptyComplementList(s: String): List<Any> {\n    return listOf(s)\n}"}
{"kt_path": "8385/solution_8385.kt", "deepseek-coder-1.3b-base": "fun isPrime(n: Int): Boolean {\n    if (n < 2) return false\n    for (i in 2..n - 1) {\n        if (n % i == 0) return false\n    }\n    return true\n}"}
{"kt_path": "14396/solution_14396.kt", "deepseek-coder-1.3b-base": "fun main() {\n    val coordinatesList = listOf(\n        Triple(1, 2, 3),\n        Triple(4, 5, 6)\n    )\n    val (x, y, z) = extractCoordinates(coordinatesList)\n    println(\"x = $x, y = $y, z = $z\")\n}\n\nfun extractCoordinates(coordinatesList: List<Triple<Int, Int, Int>>): Triple<Int, Int, Int> {\n    require(coordinatesList.size == 2)\n    return coordinatesList[0] + coordinatesList[1]\n}"}
{"kt_path": "5828/solution_5828.kt", "deepseek-coder-1.3b-base": "fun calculatePaintCansNeeded(wallAreas: List<Double>, paintCostPerCan: Double): Double {\n    return wallAreas.sumOfDouble { area -> area * paintCostPerCan }\n}"}
