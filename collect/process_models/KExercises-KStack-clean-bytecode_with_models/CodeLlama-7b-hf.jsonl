{"kt_path": "7824/solution_7824.kt", "CodeLlama-7b-hf": "fun testCountOddNumbers() {\n    val numbers = listOf(1, 2, 3, 4, 5, 6, 7, 8, 9, 10)\n    val oddNumbers = numbers.filter { it % 2 != 0 }\n    println(oddNumbers)\n}"}
{"kt_path": "remisultan__multiarm-bandit-algorithm-kotlin__ead934d/core-bandit/src/main/kotlin/org/rsultan/bandit/algorithms/BanditAlgorithm.kt", "CodeLlama-7b-hf": "interface BanditAlgorithm {\n    fun selectArm(): Int\n    fun update(arm: Int, reward: Float)\n}"}
{"kt_path": "13864/solution_13864.kt", "CodeLlama-7b-hf": "fun calculateScore(a: Int, b: Int): Int {\n    return a * b\n}"}
{"kt_path": "9763/solution_9763.kt", "CodeLlama-7b-hf": "fun calculateFinalPrice(price: Double, discount: Double): Double {\n    return price - discount\n}"}
{"kt_path": "8545/solution_8545.kt", "CodeLlama-7b-hf": "fun calculateConversionRate(a: Int, b: Int): Double {\n    return 0.0\n}"}
{"kt_path": "13968/solution_13968.kt", "CodeLlama-7b-hf": "fun athletePerformanceDistance(athleteSpeed: Double, athleteRunDistance: Double): Double {\n    return athleteSpeed / athleteRunDistance\n}"}
{"kt_path": "14509/solution_14509.kt", "CodeLlama-7b-hf": "fun calculateRoomArea(width: Int, height: Int): Int {\n    val area = width * height\n    return area\n}"}
{"kt_path": "7670/solution_7670.kt", "CodeLlama-7b-hf": "fun identityAssignment(): Boolean {\n    var a = 5\n    var b = a\n    return b == 5\n}"}
{"kt_path": "224/solution_224.kt", "CodeLlama-7b-hf": "fun calculateSalary(salary: Double): Long {\n    return Math.round(salary).toLong()\n}"}
{"kt_path": "11310/solution_11310.kt", "CodeLlama-7b-hf": "fun calculateExpenses(n: Int, p: Float): Float {\n    return n.toFloat() * p\n}"}
{"kt_path": "10330/solution_10330.kt", "CodeLlama-7b-hf": "fun calculatePower(x: Double, y: Double): Double {\n    return x * y\n}"}
{"kt_path": "11101/solution_11101.kt", "CodeLlama-7b-hf": "fun checkPositiveInteger(n: Int): Boolean {\n    return if (n <= 0) false else true\n}"}
{"kt_path": "432/solution_432.kt", "CodeLlama-7b-hf": "fun calculateResistance(resistance: Double, voltage: Double): Double {\n    return resistance / voltage\n}"}
{"kt_path": "n81ur3__kotlin-coding-challenges__fdc5941/src/main/kotlin/adventofcode2018/Day04ReposeRecord.kt", "CodeLlama-7b-hf": "class Day04ReposeRecord {\n    constructor()\n}"}
{"kt_path": "8671/solution_8671.kt", "CodeLlama-7b-hf": "fun calculateAverageSpeed(distance: Double, time: Double): Double {\n    val averageSpeed = distance / time\n    return averageSpeed\n}"}
{"kt_path": "5601/solution_5601.kt", "CodeLlama-7b-hf": "fun calculateCircuitPower(voltage: Double, current: Double): Double {\n    return voltage * current\n}"}
{"kt_path": "10329/solution_10329.kt", "CodeLlama-7b-hf": "fun calculateResistance(resistance: Double, voltage: Double): Double {\n    return resistance / voltage\n}"}
{"kt_path": "n81ur3__kotlin-coding-challenges__fdc5941/src/main/kotlin/adventofcode2020/Day19MonsterMessage.kt", "CodeLlama-7b-hf": "class Day19MonsterMessage {\n    constructor()\n}"}
{"kt_path": "n81ur3__kotlin-coding-challenges__fdc5941/src/main/kotlin/adventofcode2020/Day07HandyHaversacks.kt", "CodeLlama-7b-hf": "class Day07HandyHaversacks {\n    constructor()\n}"}
{"kt_path": "7007/solution_7007.kt", "CodeLlama-7b-hf": "fun isLongFlight(distance: Int, speed: Int): Boolean {\n    return distance <= speed\n}"}
{"kt_path": "3696/solution_3696.kt", "CodeLlama-7b-hf": "fun findCommonArea(a: Float, b: Float, c: Float): Float {\n    val area = a * b\n    val area2 = c * c\n    return area * area2\n}"}
{"kt_path": "9314/solution_9314.kt", "CodeLlama-7b-hf": "fun isEven(n: Int): Boolean {\n    return n % 2 == 0\n}"}
{"kt_path": "10577/solution_10577.kt", "CodeLlama-7b-hf": "fun isEven(n: Int): Boolean {\n    return n % 2 == 0\n}"}
{"kt_path": "n81ur3__kotlin-coding-challenges__fdc5941/src/main/kotlin/adventofcode2018/Day06ChronalCoordinates.kt", "CodeLlama-7b-hf": "class Day06ChronalCoordinates {\n    constructor()\n}"}
{"kt_path": "7819/solution_7819.kt", "CodeLlama-7b-hf": "fun calculatePowerConsumption(power: Double): Double {\n    var power = power\n    var consumption = 5.0\n    power /= consumption\n    return power\n}"}
{"kt_path": "8829/solution_8829.kt", "CodeLlama-7b-hf": "fun calculateDailyCaloricNeeds(weight: Float, height: Float): Float {\n    val dailyCaloricIntake = weight * 24\n    val bmi = dailyCaloricIntake / height\n    return bmi\n}"}
{"kt_path": "6256/solution_6256.kt", "CodeLlama-7b-hf": "fun notEqualNone(a: Int?, b: Int?): Boolean {\n    if (a != null && b != null) {\n        return true\n    }\n    return false\n}"}
{"kt_path": "4238/solution_4238.kt", "CodeLlama-7b-hf": "fun checkSpeedLimit(speed: Float, limit: Float): Boolean {\n    return if (speed <= limit) true else false\n}"}
{"kt_path": "3868/solution_3868.kt", "CodeLlama-7b-hf": "fun sumOfNumbers(a: Int, b: Int): Int {\n    var sum = a + b\n    while (sum < 10) {\n        sum *= 2\n    }\n    return sum\n}"}
{"kt_path": "5766/solution_5766.kt", "CodeLlama-7b-hf": "fun shiftAndMultiplyAssignment(a: Int, b: Int): Int {\n    var c = a shl b\n    var d = a ushr b\n    var e = d * c\n    return e\n}"}
{"kt_path": "4304/solution_4304.kt", "CodeLlama-7b-hf": "fun architectMath(a: Int, b: Int): Int {\n    val c = a * 2\n    val d = a + b\n    val e = c + d\n    return e\n}"}
{"kt_path": "alebedev__aoc2022__d6ba46b/src/main/kotlin/Map.kt", "CodeLlama-7b-hf": "class MapKt {\n    companion object {\n        @JvmStatic\n        fun main() {\n            AocMap.INSTANCE.solve()\n        }\n    }\n}"}
{"kt_path": "7168/solution_7168.kt", "CodeLlama-7b-hf": "fun multiplyAndModulo(a: Int, b: Int, c: Int, d: Int): Int {\n    val result = a * b\n    val modulo = result % c\n    return modulo % d\n}"}
{"kt_path": "5304/solution_5304.kt", "CodeLlama-7b-hf": "fun numberOfCircuits(n: Int, k: Int, m: Int): Int {\n    val r = n / k\n    val r1 = n % k\n    return if (r1 > 0) r + 1 else r\n}"}
{"kt_path": "7099/solution_7099.kt", "CodeLlama-7b-hf": "fun calculateDistance(x1: Double, y1: Double, x2: Double): Double {\n    val distance = (x2 - x1) * (x2 - x1) + (y1 - y2) * (y1 - y2)\n    return Math.sqrt(distance)\n}"}
{"kt_path": "8138/solution_8138.kt", "CodeLlama-7b-hf": "fun athletePoints(athletePoints: Int, isGold: Boolean, isSilver: Boolean): Int {\n    return if (isGold) {\n        athletePoints + 3\n    } else if (isSilver) {\n        athletePoints + 1\n    } else {\n        athletePoints\n    }\n}"}
{"kt_path": "6625/solution_6625.kt", "CodeLlama-7b-hf": "fun calculateCutLength(length: Float, width: Float, n: Int): Float {\n    val cutLength = (length - width) / n\n    val cutWidth = length / n\n    return (cutLength - cutWidth) / n\n}"}
{"kt_path": "14820/solution_14820.kt", "CodeLlama-7b-hf": "fun positiveIntegersSum(n: Int): Int {\n    var sum = 0\n    var i = 1\n    while (i <= n) {\n        sum += i\n        i++\n    }\n    return sum\n}"}
{"kt_path": "3808/solution_3808.kt", "CodeLlama-7b-hf": "fun countNegative(a: Int, b: Int): Int {\n    var count = 0\n    var i = a\n    while (i <= b) {\n        if (i < 0) count++\n        i++\n    }\n    return count\n}"}
{"kt_path": "677/solution_677.kt", "CodeLlama-7b-hf": "fun modulusComplexNumbers(a: Float, b: Float): Float {\n    val result = a * a + b * b\n    return sqrt(result).toFloat()\n}"}
{"kt_path": "1838/solution_1838.kt", "CodeLlama-7b-hf": "fun calculateSum(n: Int): Int {\n    var sum = 0\n    var i = 1\n    while (i <= n) {\n        sum += i\n        i++\n    }\n    return sum\n}"}
{"kt_path": "3178/solution_3178.kt", "CodeLlama-7b-hf": "fun graphicDesignerSalary(hours: Int): Int {\n    var salary = 0\n    if (hours > 1) {\n        salary = 2500\n    } else {\n        salary = 0\n    }\n    salary += hours * 500\n    return salary\n}"}
{"kt_path": "9504/solution_9504.kt", "CodeLlama-7b-hf": "fun checkPrimeNumbers(n: Int): Boolean {\n    var i = 2\n    while (i <= n) {\n        if (n % i != 0) {\n            i++\n            continue\n        }\n        return false\n    }\n    return true\n}"}
{"kt_path": "5182/solution_5182.kt", "CodeLlama-7b-hf": "fun checkDivisible(n: Int): Boolean {\n    var i = 2\n    while (i <= 11) {\n        if (n % i != 0) {\n            return false\n        }\n        i++\n    }\n    return true\n}"}
{"kt_path": "7650/solution_7650.kt", "CodeLlama-7b-hf": "fun sumOfSquares(n: Int): Int {\n    var sum = 0\n    var i = 1\n    while (i <= n) {\n        sum += i * i\n        i++\n    }\n    return sum\n}"}
{"kt_path": "6824/solution_6824.kt", "CodeLlama-7b-hf": "fun calculateScore(a: Int, b: Int): Int {\n    val score = a * 10 - b * 5\n    return if (score > 0) score else -1\n}"}
{"kt_path": "1825/solution_1825.kt", "CodeLlama-7b-hf": "fun calculateCarpenterSalary(hours: Int, hourlyRate: Double, bonus: Double): Double {\n    val salary = hours.toDouble() * hourlyRate\n    val bonusSalary = hours.toDouble() * hourlyRate * bonus\n    val totalSalary = salary + bonusSalary\n    val tax = totalSalary * 0.1\n    val total = totalSalary - tax\n    return total\n}"}
{"kt_path": "1332/solution_1332.kt", "CodeLlama-7b-hf": "fun extinguishFire(fuel: Double): Int {\n    var i = 0\n    var fuelLeft = fuel\n    while (fuelLeft > 0.0) {\n        fuelLeft /= 2.0\n        i++\n    }\n    return i\n}"}
{"kt_path": "10817/solution_10817.kt", "CodeLlama-7b-hf": "fun maxOfThree(a: Int, b: Int, c: Int): Int {\n    return if (a > b) {\n        if (a > c) a else c\n    } else {\n        if (b > c) b else c\n    }\n}"}
{"kt_path": "11536/solution_11536.kt", "CodeLlama-7b-hf": "fun isFloat(value: Any?): Boolean {\n    requireNotNull(value) { \"value is null\" }\n    return value is Float\n}"}
{"kt_path": "13694/solution_13694.kt", "CodeLlama-7b-hf": "fun calculateCarpenterSalary(hours: Int, hourlyRate: Double, overtimeRate: Double): Double {\n    val salary = hours.toDouble() * hourlyRate\n    val overtime = hours.toDouble() * overtimeRate\n    val total = salary + overtime\n    return total\n}"}
{"kt_path": "7127/solution_7127.kt", "CodeLlama-7b-hf": "fun checkInteger(obj: Any?): Boolean {\n    requireNotNull(obj) { \"number\" }\n    return obj is Int\n}"}
{"kt_path": "7144/solution_7144.kt", "CodeLlama-7b-hf": "fun identityComparisonAndFloatingPointOperations(a: Double, b: Double): Boolean {\n    val diff = a - b\n    val absDiff = Math.abs(diff)\n    return absDiff < 0.01\n}"}
{"kt_path": "8240/solution_8240.kt", "CodeLlama-7b-hf": "fun calculateFactorial(n: Int): Int {\n    var result = 1\n    var i = 1\n    while (i <= n) {\n        result *= i\n        i++\n        if (i == n) break\n    }\n    return result\n}"}
{"kt_path": "2140/solution_2140.kt", "CodeLlama-7b-hf": "fun commissionCalculator(sales: Double, price: Double, commission: Double): Double {\n    var result = 0.0\n    if (sales < price) {\n        result = sales\n    } else if (sales > price) {\n        result = sales * commission\n    }\n    return result\n}"}
{"kt_path": "14315/solution_14315.kt", "CodeLlama-7b-hf": "fun sumPositiveIntegers(n: Int): Int {\n    var sum = 0\n    var i = 1\n    while (i <= n) {\n        sum += i\n        i++\n    }\n    return sum\n}"}
{"kt_path": "2523/solution_2523.kt", "CodeLlama-7b-hf": "fun sumEvenNumbers(start: Int, end: Int): Int {\n    var sum = 0\n    var i = start\n    while (i <= end) {\n        if (i % 2 == 0) {\n            sum += i\n        }\n        i++\n    }\n    return sum\n}"}
{"kt_path": "918/solution_918.kt", "CodeLlama-7b-hf": "fun checkBudget(budget: Int): String {\n    val maxBudget = 4000\n    if (budget < maxBudget) {\n        return \"Insufficient budget, please allocate more funds for the campaign.\"\n    }\n    return \"Budget is sufficient for the marketing campaign.\"\n}"}
{"kt_path": "10520/solution_10520.kt", "CodeLlama-7b-hf": "fun sumOfEvenNumbers(start: Int, end: Int): Int {\n    var sum = 0\n    var i = start\n    while (i <= end) {\n        if (i % 2 == 0) {\n            sum += i\n        }\n        i++\n    }\n    return sum\n}"}
{"kt_path": "6399/solution_6399.kt", "CodeLlama-7b-hf": "fun checkPercentage(percentage: Int): String {\n    return when {\n        percentage < 95 -> \"Outside acceptable range\"\n        percentage > 98 -> \"Outside acceptable range\"\n        else -> \"Within acceptable range\"\n    }\n}"}
{"kt_path": "10731/solution_10731.kt", "CodeLlama-7b-hf": "fun checkEligibility(age: Int, income: Int, savings: Int): String {\n    if (age < 18) return \"Not Eligible\"\n    if (income < 5) return \"Not Eligible\"\n    if (savings < 2) return \"Not Eligible\"\n    return \"Eligible\"\n}"}
{"kt_path": "8756/solution_8756.kt", "CodeLlama-7b-hf": "fun findMax(a: Int, b: Int, c: Int): Int {\n    var max = a\n    if (b > max) max = b\n    if (c > max) max = c\n    return max\n}"}
{"kt_path": "10964/solution_10964.kt", "CodeLlama-7b-hf": "fun calculateInvestmentGrowth(initialInvestment: Double, monthlyInterestRate: Double, numberOfYears: Int): Double {\n    var investment = initialInvestment\n    for (i in 1..numberOfYears) {\n        investment *= 1 + monthlyInterestRate\n    }\n    return investment\n}"}
{"kt_path": "9201/solution_9201.kt", "CodeLlama-7b-hf": "fun isCloseToZero(x: Double, eps: Double): Boolean {\n    return if (x == 0.0) true else if (Math.abs(x) < eps) true else false\n}"}
{"kt_path": "14784/solution_14784.kt", "CodeLlama-7b-hf": "fun sumOfMultiples(a: Int, b: Int, c: Int): Int {\n    var sum = 0\n    for (i in 0..a) {\n        if (i % b == 0 && i % c == 0) {\n            sum += i\n        }\n    }\n    return sum\n}"}
{"kt_path": "12550/solution_12550.kt", "CodeLlama-7b-hf": "fun checkGameConditions(a: Int, b: Int, c: Int, d: Boolean): Boolean {\n    return if (a <= 1000 && b <= 50 && c < 10 && d) {\n        true\n    } else {\n        false\n    }\n}"}
{"kt_path": "2717/solution_2717.kt", "CodeLlama-7b-hf": "fun getFirstElement(lst: List<Any>): Any {\n    return lst[0]\n}"}
{"kt_path": "10259/solution_10259.kt", "CodeLlama-7b-hf": "fun calculateTotalPrice(price: Float, quantity: Float): Float {\n    val discount = 0.001f\n    val absPrice = Math.abs(price)\n    val totalPrice = if (absPrice <= discount) {\n        quantity * price\n    } else {\n        quantity * (price - discount)\n    }\n    return totalPrice\n}"}
{"kt_path": "1510/solution_1510.kt", "CodeLlama-7b-hf": "fun getLastElement(lst: List<Any>): Any {\n    return lst.last()\n}"}
{"kt_path": "2099/solution_2099.kt", "CodeLlama-7b-hf": "fun calculateTotalDistance(distance: Float, speed: Float): Float {\n    var totalDistance = 0f\n    var i = 1\n    while (i <= distance.toInt()) {\n        totalDistance += speed\n        i++\n    }\n    return totalDistance\n}"}
{"kt_path": "9202/solution_9202.kt", "CodeLlama-7b-hf": "fun hasSignificantDecimalPart(a: Double, b: Double): Boolean {\n    val absA = Math.abs(a)\n    val absB = Math.abs(b)\n    val absDiff = Math.abs(a - b)\n    val diff = absA - absB\n    return if (diff > absDiff) true else false\n}"}
{"kt_path": "9289/solution_9289.kt", "CodeLlama-7b-hf": "fun sliceTuple(tuple: List<Any>, start: Int, end: Int): List<Any> {\n    return tuple.subList(start, end)\n}"}
{"kt_path": "222/solution_222.kt", "CodeLlama-7b-hf": "fun calculateProfit(price: Double, cost: Double, profit: Double): Double {\n    val diff = price - cost\n    val diffAbs = if (diff > 0) diff else -diff\n    val profitPercent = if (diff > 0) profit else -profit\n    val profitAbs = diffAbs * profitPercent\n    return if (diff > 0) profitAbs else -profitAbs\n}"}
{"kt_path": "2704/solution_2704.kt", "CodeLlama-7b-hf": "fun calculateSum(): Double {\n    var sum = 0.0\n    var step = 0.1\n    while (sum <= 1000.0) {\n        sum += step\n        step += 0.01\n    }\n    return sum\n}"}
{"kt_path": "7036/solution_7036.kt", "CodeLlama-7b-hf": "fun calculateExpenses(expensesList: List<Double>): Double {\n    return expensesList.sumOf { it }\n}"}
{"kt_path": "7097/solution_7097.kt", "CodeLlama-7b-hf": "fun findAnimal(animalTuple: List<String>, index: Int): String {\n    return animalTuple.get(index)\n}"}
{"kt_path": "6743/solution_6743.kt", "CodeLlama-7b-hf": "fun toSet(data: List<Int>): Set<Int> {\n    return data.toSet()\n}"}
{"kt_path": "14646/solution_14646.kt", "CodeLlama-7b-hf": "fun checkPromotionEligibility(age: Int, amount: Double): Boolean {\n    if (age < 25) return false\n    if (age >= 41) return false\n    if (amount < 5000.0) return false\n    if (amount > 5000.0) return true\n    return false\n}"}
{"kt_path": "1671/solution_1671.kt", "CodeLlama-7b-hf": "fun createTupleFromDictionary(dictionary: Map<String, Any>): List<Pair<String, Any>> {\n    return dictionary.toList()\n}"}
{"kt_path": "13442/solution_13442.kt", "CodeLlama-7b-hf": "fun printEvenNumbers(start: Int, end: Int) {\n    var i = start\n    while (i <= end) {\n        if (i % 2 == 0) {\n            println(i)\n        }\n        i++\n        if (i == end) {\n            break\n        }\n    }\n}"}
{"kt_path": "13338/solution_13338.kt", "CodeLlama-7b-hf": "fun convertToSet(photoData: List<String>): Set<String> {\n    return photoData.toSet()\n}"}
{"kt_path": "8409/solution_8409.kt", "CodeLlama-7b-hf": "fun calculateTotalCost(cost: Double, discount: Double): Double {\n    var totalCost = cost * discount\n    if (cost > 1000.0) {\n        totalCost = totalCost * 0.1\n    }\n    var totalDiscount = totalCost - cost\n    return totalDiscount\n}"}
{"kt_path": "5263/solution_5263.kt", "CodeLlama-7b-hf": "fun operationsQuiz(a: Boolean, b: Boolean, c: Boolean, d: Boolean): Boolean {\n    var count = 0\n    if (a) count++\n    if (b) count++\n    if (c) count++\n    if (d) count++\n    return count >= 2\n}"}
{"kt_path": "7005/solution_7005.kt", "CodeLlama-7b-hf": "fun convertSetToList(s: Set<Any>): List<Any> {\n    return s.toList()\n}"}
{"kt_path": "7004/solution_7004.kt", "CodeLlama-7b-hf": "fun convertListToSet(lst: List<Any>): Set<Any> {\n    return lst.toSet()\n}"}
{"kt_path": "1559/solution_1559.kt", "CodeLlama-7b-hf": "fun convertToSet(gameData: List<Any>): Set<Any> {\n    return gameData.toSet()\n}"}
{"kt_path": "14689/solution_14689.kt", "CodeLlama-7b-hf": "fun printOddNumbers(n: Int) {\n    var i = 1\n    while (i <= n) {\n        if (i % 2 != 0) {\n            println(i)\n        }\n        i++\n    }\n}"}
{"kt_path": "13400/solution_13400.kt", "CodeLlama-7b-hf": "fun findBiggerNumber(a: Int, b: Int, c: Int, d: Int): Int {\n    return if (a > b) {\n        if (a > c) {\n            if (a > d) {\n                a\n            } else {\n                d\n            }\n        } else {\n            if (c > d) {\n                c\n            } else {\n                d\n            }\n        }\n    } else {\n        if (b > c) {\n            if (b > d) {\n                b\n            } else {\n                d\n            }\n        } else {\n            if (c > d) {\n                c\n            } else {\n                d\n            }\n        }\n    }\n}"}
{"kt_path": "9661/solution_9661.kt", "CodeLlama-7b-hf": "fun calculateSums(n: Int): Int {\n    var sum = 0\n    var i = 1\n    while (i <= n) {\n        if (i % 5 == 0) continue\n        if (i % 7 == 0) continue\n        if (i % 35 == 0) continue\n        sum += i\n        i++\n    }\n    return sum\n}"}
{"kt_path": "8323/solution_8323.kt", "CodeLlama-7b-hf": "fun calculateRemainingBooks(books: Int, days: Int, booksPerDay: Int): Int {\n    var booksLeft = 0\n    var day = 0\n    var booksBorrowed = 0\n    while (day < days) {\n        booksBorrowed = day / booksPerDay\n        booksLeft = books - booksBorrowed\n        day++\n    }\n    return booksLeft\n}"}
{"kt_path": "236/solution_236.kt", "CodeLlama-7b-hf": "fun computeFloorArea(length: Float, width: Float): Any {\n    if (length > 0.0f) {\n        if (width > 0.0f) {\n            return length * width\n        } else {\n            return \"Invalid width\"\n        }\n    } else {\n        return \"Invalid length\"\n    }\n}"}
{"kt_path": "14771/solution_14771.kt", "CodeLlama-7b-hf": "fun indexingAndSlicingTuples(list: List<String>, index: Int): List<String> {\n    requireNotNull(list) { \"nurse\" }\n    return list.subList(index, list.size)\n}"}
{"kt_path": "9943/solution_9943.kt", "CodeLlama-7b-hf": "fun addNegIntegersToSet(numbers: List<Int>): Set<Int> {\n    val set = numbers.toSet()\n    return set\n}"}
{"kt_path": "8713/solution_8713.kt", "CodeLlama-7b-hf": "fun accessImaginaryPart(complexNumber: Pair<Double, Double>): Double {\n    return complexNumber.second.toDouble()\n}"}
{"kt_path": "3773/solution_3773.kt", "CodeLlama-7b-hf": "fun calculateSocialWorkerSalary(salary: Double, yearsOfExperience: Int): Double {\n    if (yearsOfExperience >= 10) return salary\n    if (yearsOfExperience >= 5) return salary * 1.5\n    if (yearsOfExperience >= 2) return salary * 2\n    return salary * 3\n}"}
{"kt_path": "11/solution_11.kt", "CodeLlama-7b-hf": "fun checkOddEvenNumbers(a: Int, b: Int, c: Int): Boolean {\n    var count = 0\n    if (a % 2 == 1) count++\n    if (b % 2 == 1) count++\n    if (c % 2 == 1) count++\n    return count == 2\n}"}
{"kt_path": "1118/solution_1118.kt", "CodeLlama-7b-hf": "fun createEmptyComplementList(nurse: String): List<Any> {\n    val list = ArrayList<Any>()\n    return list\n}"}
{"kt_path": "8385/solution_8385.kt", "CodeLlama-7b-hf": "fun isPrime(n: Int): Boolean {\n    if (n <= 1) return false\n    var i = 2\n    while (i * i <= n) {\n        if (n % i == 0) return false\n        i++\n    }\n    return true\n}"}
{"kt_path": "14396/solution_14396.kt", "CodeLlama-7b-hf": "fun extractCoordinates(coordinatesList: List<Triple<Int, Int, Int>>): Triple<Int, Int, Int> {\n    return coordinatesList[0]\n}"}
{"kt_path": "5828/solution_5828.kt", "CodeLlama-7b-hf": "fun calculatePaintCansNeeded(wallAreas: List<Double>, paintCan: Double): Int {\n    val totalArea = wallAreas.sumOfDouble()\n    val paintCanNeeded = (totalArea / paintCan).toInt()\n    return paintCanNeeded\n}"}
