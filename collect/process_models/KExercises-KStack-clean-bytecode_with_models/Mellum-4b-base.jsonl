{"kt_path": "7824/solution_7824.kt", "Mellum-4b-base": "fun testCountEvenNumbers() {\n    val numbers = listOf(1, 2, 3, 4, 5, 6, 7, 8, 9, 10)\n    val result = numbers.count { it % 2 == 0 }\n    println(result)\n}"}
{"kt_path": "remisultan__multiarm-bandit-algorithm-kotlin__ead934d/core-bandit/src/main/kotlin/org/rsultan/bandit/algorithms/BanditAlgorithm.kt", "Mellum-4b-base": "interface BanditAlgorithm {\n    fun selectArm(): Int\n    fun update(arm: Int, reward: Float)\n}"}
{"kt_path": "13864/solution_13864.kt", "Mellum-4b-base": "fun calculateScore(a: Int, b: Int): Int {\n    return a + b\n}"}
{"kt_path": "9763/solution_9763.kt", "Mellum-4b-base": "fun calculateFinalPrice(price: Double, discount: Double): Double {\n    return price - price * discount\n}"}
{"kt_path": "8545/solution_8545.kt", "Mellum-4b-base": "fun calculateAge(birthYear: Int, currentYear: Int): Int {\n    return currentYear - birthYear\n}"}
{"kt_path": "13968/solution_13968.kt", "Mellum-4b-base": "fun athletePerformanceDistance(distance: Double, speed: Double): Double {\n    return distance / speed\n}"}
{"kt_path": "14509/solution_14509.kt", "Mellum-4b-base": "fun calculateRoomArea(width: Int, length: Int): Int {\n    return width * length\n}"}
{"kt_path": "7670/solution_7670.kt", "Mellum-4b-base": "fun identityAssignment(): Boolean {\n    return 5 == 5\n}"}
{"kt_path": "224/solution_224.kt", "Mellum-4b-base": "fun calculateSalary(salary: Double): Int {\n    return salary.roundToInt()\n}"}
{"kt_path": "11310/solution_11310.kt", "Mellum-4b-base": "fun calculateHours(hours: Int, rate: Float): Int {\n    return hours * rate\n}"}
{"kt_path": "10330/solution_10330.kt", "Mellum-4b-base": "fun calculatePower(base: Double, exponent: Double): Double {\n    return Math.pow(base, exponent)\n}"}
{"kt_path": "11101/solution_11101.kt", "Mellum-4b-base": "fun checkPositiveInteger(i: Int): Boolean {\n    return i > 0\n}"}
{"kt_path": "432/solution_432.kt", "Mellum-4b-base": "fun calculateResistance(resistance: Double, voltage: Double): Double {\n    return voltage / resistance\n}"}
{"kt_path": "n81ur3__kotlin-coding-challenges__fdc5941/src/main/kotlin/adventofcode2018/Day04ReposeRecord.kt", "Mellum-4b-base": "class Day05ReposeRecord {\n    constructor()\n}"}
{"kt_path": "8671/solution_8671.kt", "Mellum-4b-base": "fun calculateAverageSpeed(distance: Double, time: Double): Double {\n    return distance / time\n}"}
{"kt_path": "5601/solution_5601.kt", "Mellum-4b-base": "fun calculateCircuitPower(voltage: Double, current: Double): Double {\n    return voltage * current\n}"}
{"kt_path": "10329/solution_10329.kt", "Mellum-4b-base": "fun calculateResistance(resistance: Double, voltage: Double): Double {\n    return voltage / resistance\n}"}
{"kt_path": "n81ur3__kotlin-coding-challenges__fdc5941/src/main/kotlin/adventofcode2020/Day19MonsterMessage.kt", "Mellum-4b-base": "class Day20JoltageDifferences {\n    fun main() {\n        println(\"Hello, World!\")\n    }\n}"}
{"kt_path": "n81ur3__kotlin-coding-challenges__fdc5941/src/main/kotlin/adventofcode2020/Day07HandyHaversacks.kt", "Mellum-4b-base": ""}
{"kt_path": "7007/solution_7007.kt", "Mellum-4b-base": "fun isLongFlight(a: Int, b: Int): Boolean {\n    return a < b\n}"}
{"kt_path": "3696/solution_3696.kt", "Mellum-4b-base": "fun findCommonDigit(a: Int, b: Int): Int {\n    return a % b\n}"}
{"kt_path": "9314/solution_9314.kt", "Mellum-4b-base": "fun isEven(n: Int): Boolean {\n    return n % 2 == 0\n}"}
{"kt_path": "10577/solution_10577.kt", "Mellum-4b-base": "fun isEven(n: Int): Boolean {\n    return n % 2 == 0\n}"}
{"kt_path": "n81ur3__kotlin-coding-challenges__fdc5941/src/main/kotlin/adventofcode2018/Day06ChronalCoordinates.kt", "Mellum-4b-base": "class Day07TheSumOfItsParts {\n    fun main() {\n        println(\"Hello, World!\")\n    }\n}"}
{"kt_path": "7819/solution_7819.kt", "Mellum-4b-base": "fun calculatePowerConsumption(watts: Double): Double {\n    return watts / 5.0\n}"}
{"kt_path": "8829/solution_8829.kt", "Mellum-4b-base": ""}
{"kt_path": "6256/solution_6256.kt", "Mellum-4b-base": "fun notEqualNone(a: Int?, b: Int?): Boolean {\n    return a!= null && b!= null && a!= b\n}"}
{"kt_path": "4238/solution_4238.kt", "Mellum-4b-base": "fun checkSpeedLimit(speed: Float, limit: Float): Boolean {\n    return speed < limit\n}"}
{"kt_path": "3868/solution_3868.kt", "Mellum-4b-base": "fun sumOfNumbers(a: Int, b: Int): Int {\n    return a + b\n}"}
{"kt_path": "5766/solution_5766.kt", "Mellum-4b-base": "fun shiftAndMultiplyAssignment(a: Int, b: Int): Int {\n    return a shl b shr b\n}"}
{"kt_path": "4304/solution_4304.kt", "Mellum-4b-base": "fun architectMath(a: Int, b: Int): Int {\n    return a * b\n}"}
{"kt_path": "alebedev__aoc2022__d6ba46b/src/main/kotlin/Map.kt", "Mellum-4b-base": "object AocMap {\n    val INSTANCE = Map()\n\n    fun solve() {\n        INSTANCE.solve()\n    }\n}\n\nclass Map {\n    fun solve() {\n        val input = readInput()\n        val map = input.map { it.split(\" -> \") }.map {\n            val (from, to) = it\n            val (fromX, fromY) = from.split(\",\")\n            val (toX, toY) = to.split(\",\")\n            Pair(\n                Point(fromX.toInt(), fromY.toInt()),\n                Point(toX.toInt(), toY.toInt())\n            )\n        }.toMap()\n\n        val points = map.keys.toList()\n        val pointsWithDistance = points.map {\n            val (from, to) = map[it]!!\n            val distance = from.distance(to)\n            Pair(it, distance)\n        }.sortedBy { it.second }\n\n        val closestPoints = pointsWithDistance.take(2)\n        val closestPointsDistance = closestPoints.map { it.second }.sum()\n        println(\"Closest points: $closestPointsDistance\")\n    }\n\n    private fun readInput(): List<String> {\n        return File(\"input.txt\").readLines()\n    }\n}\n\ndata class Point(val x: Int, val y: Int) {\n    fun distance(other: Point): Int {\n        return Math.abs(x - other.x) + Math.abs(y - other.y)\n    }\n}"}
{"kt_path": "7168/solution_7168.kt", "Mellum-4b-base": "fun multiplyAndModulo(a: Int, b: Int, c: Int, d: Int): Int {\n    return a * b % c + d\n}"}
{"kt_path": "5304/solution_5304.kt", "Mellum-4b-base": "fun numberOfCircuits(a: Int, b: Int, c: Int): Int {\n    var count = 0\n    for (i in 0..c) {\n        if (a % b == 0) {\n            count++\n        }\n        a = a % b\n    }\n    return count\n}"}
{"kt_path": "7099/solution_7099.kt", "Mellum-4b-base": "fun calculateDistance(x1: Double, y1: Double, x2: Double, y2: Double): Double {\n    return Math.sqrt((x2 - x1) * (x2 - x1) + (y2 - y1) * (y2 - y1))\n}"}
{"kt_path": "8138/solution_8138.kt", "Mellum-4b-base": "fun athletePoints(athlete: Int, isGold: Boolean, isSilver: Boolean): Int {\n    return if (isGold) athlete + 3 else athlete + 1\n}"}
{"kt_path": "6625/solution_6625.kt", "Mellum-4b-base": "fun calculateArea(width: Int, height: Int, length: Int, width2: Int): Int {\n    return (width * height * length) - (width2 * height * length)\n}"}
{"kt_path": "14820/solution_14820.kt", "Mellum-4b-base": "fun sumOfSquares(n: Int): Int {\n    var sum = 0\n    for (i in 1..n) {\n        sum += i * i\n    }\n    return sum\n}"}
{"kt_path": "3808/solution_3808.kt", "Mellum-4b-base": "fun countNegative(a: Int, b: Int): Int {\n    var count = 0\n    for (i in a downTo b) {\n        if (i < 0) count++\n    }\n    return count\n}"}
{"kt_path": "677/solution_677.kt", "Mellum-4b-base": "fun modulusComplexNumbers(a: Float, b: Float): Float {\n    val c = a * a + b * b\n    return Math.sqrt(c.toDouble()).toFloat()\n}"}
{"kt_path": "1838/solution_1838.kt", "Mellum-4b-base": "fun calculateSum(n: Int): Int {\n    var sum = 0\n    for (i in 1..n) {\n        sum += i\n    }\n    return sum\n}"}
{"kt_path": "3178/solution_3178.kt", "Mellum-4b-base": "fun graphicDesignerSalary(salary: Int): Int {\n    return if (salary > 2500) salary * 0.9 else salary * 0.95\n}"}
{"kt_path": "9504/solution_9504.kt", "Mellum-4b-base": "fun checkPrimeNumbers(number: Int): Boolean {\n    var i = 2\n    while (i < number) {\n        if (number % i == 0) return false\n        i++\n    }\n    return true\n}"}
{"kt_path": "5182/solution_5182.kt", "Mellum-4b-base": "fun checkDivisible(number: Int): Boolean {\n    var i = 2\n    while (i < 11) {\n        if (number % i!= 0) return false\n        i++\n    }\n    return true\n}"}
{"kt_path": "7650/solution_7650.kt", "Mellum-4b-base": "fun sumOfSquares(n: Int): Int {\n    var sum = 0\n    for (i in 1..n) {\n        sum += i * i\n    }\n    return sum\n}"}
{"kt_path": "6824/solution_6824.kt", "Mellum-4b-base": "fun calculateScore(a: Int, b: Int): Int {\n    return a * 10 + b - 5 * (a + b)\n}"}
{"kt_path": "1825/solution_1825.kt", "Mellum-4b-base": "fun calculateCarpenterSalary(\n        hours: Int,\n        salary: Double,\n        commission: Double\n): Double {\n    return hours * salary * commission / 100\n}"}
{"kt_path": "1332/solution_1332.kt", "Mellum-4b-base": "fun getArray(size: Int): IntArray {\n    val array = IntArray(size)\n    var i = 0\n    while (i < size) {\n        array[i] = i\n        i++\n    }\n    return array\n}"}
{"kt_path": "10817/solution_10817.kt", "Mellum-4b-base": "fun maxOfThree(a: Int, b: Int, c: Int): Int {\n    return if (a > b && a > c) a else if (b > a && b > c) b else c\n}"}
{"kt_path": "11536/solution_11536.kt", "Mellum-4b-base": "fun isFloat(value: Any): Boolean {\n    return value is Float\n}"}
{"kt_path": "13694/solution_13694.kt", "Mellum-4b-base": "fun calculateCarpenterSalary(\n        hours: Int,\n        salary: Double,\n        commission: Double\n): Double {\n    return hours * salary * (1.0 - commission)\n}"}
{"kt_path": "7127/solution_7127.kt", "Mellum-4b-base": "fun checkInteger(number: Any?): Boolean {\n    if (number!is Int) {\n        throw IllegalArgumentException(\"number must be an integer\")\n    }\n    return true\n}"}
{"kt_path": "7144/solution_7144.kt", "Mellum-4b-base": "fun identityComparisonAndFloatingPointOperations(a: Double, b: Double): Boolean {\n    return Math.abs(a - b) < 0.01\n}"}
{"kt_path": "8240/solution_8240.kt", "Mellum-4b-base": "fun calculateFactorial(n: Int): Int {\n    var result = 1\n    for (i in 1..n) {\n        result *= i\n    }\n    return result\n}"}
{"kt_path": "2140/solution_2140.kt", "Mellum-4b-base": "fun commissionCalculator(commission: Double, sales: Double, salesWithCommission: Double): Double {\n    return if (salesWithCommission > commission) {\n        salesWithCommission - commission\n    } else {\n        0.0\n    }\n}"}
{"kt_path": "14315/solution_14315.kt", "Mellum-4b-base": "fun sumPositiveIntegers(n: Int): Int {\n    var sum = 0\n    for (i in 1..n) {\n        sum += i\n    }\n    return sum\n}"}
{"kt_path": "2523/solution_2523.kt", "Mellum-4b-base": "fun sumEvenNumbers(a: Int, b: Int): Int {\n    var sum = 0\n    for (i in a..b) {\n        if (i % 2 == 0) {\n            sum += i\n        }\n    }\n    return sum\n}"}
{"kt_path": "918/solution_918.kt", "Mellum-4b-base": "fun checkBudget(budget: Int): String {\n    return if (budget < 4000) \"Insufficient budget, please allocate more funds for the campaign.\" else \"Budget is sufficient for the marketing campaign.\"\n}"}
{"kt_path": "10520/solution_10520.kt", "Mellum-4b-base": "fun sumOfEvenNumbers(a: Int, b: Int): Int {\n    var sum = 0\n    for (i in a..b) {\n        if (i % 2 == 0) {\n            sum += i\n        }\n    }\n    return sum\n}"}
{"kt_path": "6399/solution_6399.kt", "Mellum-4b-base": ""}
{"kt_path": "10731/solution_10731.kt", "Mellum-4b-base": "fun checkEligibility(age: Int, height: Int, weight: Int): String {\n    return if (age >= 18 && height >= 5 && weight >= 2) \"Eligible\" else \"Not Eligible\"\n}"}
{"kt_path": "8756/solution_8756.kt", "Mellum-4b-base": "fun findMax(a: Int, b: Int, c: Int): Int {\n    return if (a > b && a > c) a else if (b > a && b > c) b else c\n}"}
{"kt_path": "10964/solution_10964.kt", "Mellum-4b-base": "fun calculateInvestmentGrowth(initialInvestment: Double, annualGrowthRate: Double, years: Int): Double {\n    var currentInvestment = initialInvestment\n    for (i in 1..years) {\n        currentInvestment *= (1 + annualGrowthRate)\n    }\n    return currentInvestment\n}"}
{"kt_path": "9201/solution_9201.kt", "Mellum-4b-base": "fun isCloseToZero(a: Double, b: Double): Boolean {\n    return Math.abs(a - b) < 0.001\n}"}
{"kt_path": "14784/solution_14784.kt", "Mellum-4b-base": "fun sumOfMultiples(a: Int, b: Int, n: Int): Int {\n    var sum = 0\n    for (i in a..n) {\n        if (i % b == 0) {\n            sum += i\n        }\n    }\n    return sum\n}"}
{"kt_path": "12550/solution_12550.kt", "Mellum-4b-base": "fun checkGameConditions(a: Int, b: Int, c: Int, d: Boolean): Boolean {\n    return a >= 1000 && b >= 50 && c >= 10 && (d || a + b + c >= 1000)\n}"}
{"kt_path": "2717/solution_2717.kt", "Mellum-4b-base": "fun getFirstElement(lst: List<Any?>): Any? {\n    return lst.firstOrNull()\n}"}
{"kt_path": "10259/solution_10259.kt", "Mellum-4b-base": "fun calculateTotalPrice(price: Float, discount: Float): Float {\n    return price * (1 - discount)\n}"}
{"kt_path": "1510/solution_1510.kt", "Mellum-4b-base": ""}
{"kt_path": "2099/solution_2099.kt", "Mellum-4b-base": ""}
{"kt_path": "9202/solution_9202.kt", "Mellum-4b-base": "fun hasSignificantDecimalPart(a: Double, b: Double): Boolean {\n    val absA = Math.abs(a)\n    val absB = Math.abs(b)\n    val diff = absA - absB\n    return diff > 0.0 && diff < 1.0\n}"}
{"kt_path": "9289/solution_9289.kt", "Mellum-4b-base": "fun sliceTuple(t: List<Any>, start: Int, end: Int): List<Any> {\n    return t.subList(start, end)\n}"}
{"kt_path": "222/solution_222.kt", "Mellum-4b-base": "fun calculateProfit(price: Double, quantity: Double, fee: Double): Double {\n    return price * quantity - fee\n}"}
{"kt_path": "2704/solution_2704.kt", "Mellum-4b-base": "fun calculateSum(): Double {\n    var sum = 0.0\n    var i = 0\n    while (i < 1000) {\n        sum += 0.1\n        sum += 0.01\n        i++\n    }\n    return sum\n}"}
{"kt_path": "7036/solution_7036.kt", "Mellum-4b-base": "fun calculateExpenses(expensesList: List<Double>): Double {\n    return expensesList.sum()\n}"}
{"kt_path": "7097/solution_7097.kt", "Mellum-4b-base": "fun findAnimal(animals: List<String>, index: Int): String {\n    return animals[index]\n}"}
{"kt_path": "6743/solution_6743.kt", "Mellum-4b-base": "fun toSet(data: List<Int>): Set<Int> = data.toSet()"}
{"kt_path": "14646/solution_14646.kt", "Mellum-4b-base": "fun checkPromotionEligibility(age: Int, salary: Double): Boolean {\n    return age >= 25 && salary >= 5000.0\n}"}
{"kt_path": "1671/solution_1671.kt", "Mellum-4b-base": "fun getNames(names: List<String>): List<String> {\n    return names\n}"}
{"kt_path": "13442/solution_13442.kt", "Mellum-4b-base": "fun printEvenNumbers(start: Int, end: Int) {\n    for (i in start..end) {\n        if (i % 2 == 0) {\n            println(i)\n        }\n    }\n}"}
{"kt_path": "13338/solution_13338.kt", "Mellum-4b-base": "fun convertToSet(photoData: List<String>): Set<String> {\n    return photoData.toSet()\n}"}
{"kt_path": "8409/solution_8409.kt", "Mellum-4b-base": "fun calculateTotalCost(price: Double, tax: Double): Double {\n    return price * (1.0 + tax)\n}"}
{"kt_path": "5263/solution_5263.kt", "Mellum-4b-base": "fun operationsQuiz(a: Boolean, b: Boolean, c: Boolean, d: Boolean): Boolean {\n    var count = 0\n    if (a) count++\n    if (b) count++\n    if (c) count++\n    if (d) count++\n    return count == 2\n}"}
{"kt_path": "7005/solution_7005.kt", "Mellum-4b-base": "fun convertSetToList(set: Set<Any>): List<Any> {\n    return set.toList()\n}"}
{"kt_path": "7004/solution_7004.kt", "Mellum-4b-base": "fun convertListToSet(lst: List<Any>): Set<Any> {\n    return lst.toSet()\n}"}
{"kt_path": "1559/solution_1559.kt", "Mellum-4b-base": "fun convertToSet(gameData: List<Any>): Set<Any> {\n    return gameData.toSet()\n}"}
{"kt_path": "14689/solution_14689.kt", "Mellum-4b-base": "fun printOddNumbers(n: Int) {\n    for (i in 1..n) {\n        if (i % 2!= 0) {\n            println(i)\n        }\n    }\n}"}
{"kt_path": "13400/solution_13400.kt", "Mellum-4b-base": "fun findBiggerNumber(a: Int, b: Int, c: Int, d: Int): Int {\n    return if (a > b && a > c && a > d) a else if (b > a && b > c && b > d)"}
{"kt_path": "9661/solution_9661.kt", "Mellum-4b-base": "fun calculate"}
{"kt_path": "8323/solution_8323.kt", "Mellum-4b-base": ""}
{"kt_path": "236/solution_236.kt", "Mellum-4b-base": ""}
{"kt_path": "14771/solution_14771.kt", "Mellum-4b-base": "fun indexingAndSlicingTuples(list: List<String>, index: Int): List<String> {\n    return list.subList(index, list.size)\n}"}
{"kt_path": "9943/solution_9943.kt", "Mellum-4b-base": "fun addNegIntegersToSet(numbers: List<Int>): Set<Int> {\n    return numbers.toSet()\n}"}
{"kt_path": "8713/solution_8713.kt", "Mellum-4b-base": "fun accessRealPart(complexNumber: Pair<Double, Double>): Double {\n    return complexNumber.first\n}"}
{"kt_path": "3773/solution_3773.kt", "Mellum-4b-base": "fun calculateSocialWorkerSalary(socialWorker: Double, hoursWorked: Int): Double {\n    return socialWorker * if (hoursWorked > 10) 1.5 else if (hoursWorked > 5) 1.0 else 0.0\n}"}
{"kt_path": "11/solution_11.kt", "Mellum-4b-base": "fun checkOddEvenNumbers(a: Int, b: Int, c: Int): Boolean {\n    var count = 0\n    if (a % 2 == 0) count++\n    if (b % 2 == 0) count++\n    if (c % 2 == 0) count++\n    return count % 2 =="}
{"kt_path": "1118/solution_1118.kt", "Mellum-4b-base": "fun createList(s: String): List<Any> {\n    return ArrayList<Any>()\n}"}
{"kt_path": "8385/solution_8385.kt", "Mellum-4b-base": ""}
{"kt_path": "14396/solution_14396.kt", "Mellum-4b-base": "fun extractCoordinates(coordinatesList: List<Triple<Int, Int, Int>>): Triple<Int, Int, Int> {\n    return coordinatesList.first()\n}"}
{"kt_path": "5828/solution_5828.kt", "Mellum-4b-base": "fun calculatePaintCansNeeded(wallAreas: List<Double>, wallHeight: Double): Int {\n    return wallAreas.sum() / wallHeight.toInt()\n}"}
