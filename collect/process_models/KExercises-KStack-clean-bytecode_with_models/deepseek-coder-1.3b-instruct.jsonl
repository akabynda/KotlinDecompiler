{"kt_path": "7824/solution_7824.kt", "deepseek-coder-1.3b-instruct": "object Solution_7824 {\n    fun testCountOddNumbers() {\n    }\n}"}
{"kt_path": "remisultan__multiarm-bandit-algorithm-kotlin__ead934d/core-bandit/src/main/kotlin/org/rsultan/bandit/algorithms/BanditAlgorithm.kt", "deepseek-coder-1.3b-instruct": "interface BanditAlgorithm {\n    fun selectArm(): Int\n    fun update(arm: Int, reward: Float)\n}"}
{"kt_path": "13864/solution_13864.kt", "deepseek-coder-1.3b-instruct": "fun calculateScore(a: Int, b: Int): Int {\n    return a * b\n}"}
{"kt_path": "9763/solution_9763.kt", "deepseek-coder-1.3b-instruct": "fun calculateFinalPrice(price: Double, discount: Double): Double {\n    return price - (price * discount / 100)\n}"}
{"kt_path": "8545/solution_8545.kt", "deepseek-coder-1.3b-instruct": "fun calculateConversionRate(a: Int, b: Int): Double {\n    return a.toDouble() / b.toDouble()\n}"}
{"kt_path": "13968/solution_13968.kt", "deepseek-coder-1.3b-instruct": "fun athletePerformanceDistance(distance: Double, time: Double): Double {\n    return distance / time\n}"}
{"kt_path": "14509/solution_14509.kt", "deepseek-coder-1.3b-instruct": "fun calculateRoomArea(length: Int, width: Int): Int {\n    val area = length * width\n    return area\n}"}
{"kt_path": "7670/solution_7670.kt", "deepseek-coder-1.3b-instruct": "fun identityAssignment(): Boolean {\n    return 5 == 1\n}"}
{"kt_path": "224/solution_224.kt", "deepseek-coder-1.3b-instruct": "fun calculateSalary(salary: Double): Long {\n    return Math.round(salary)\n}"}
{"kt_path": "11310/solution_11310.kt", "deepseek-coder-1.3b-instruct": "fun calculateExpenses(a: Int, b: Float): Float {\n    val c = a.toFloat()\n    val result = c * b\n    return result\n}"}
{"kt_path": "10330/solution_10330.kt", "deepseek-coder-1.3b-instruct": "fun calculatePower(x: Double, y: Double): Double {\n    return Math.pow(x, y)\n}"}
{"kt_path": "11101/solution_11101.kt", "deepseek-coder-1.3b-instruct": "fun checkPositiveInteger(n: Int): Boolean {\n    if (n > 0) {\n        return true\n    } else {\n        return false\n    }\n}"}
{"kt_path": "432/solution_432.kt", "deepseek-coder-1.3b-instruct": "fun calculateResistance(resistance1: Double, resistance2: Double): Double {\n    return resistance1 / resistance2\n}"}
{"kt_path": "n81ur3__kotlin-coding-challenges__fdc5941/src/main/kotlin/adventofcode2018/Day04ReposeRecord.kt", "deepseek-coder-1.3b-instruct": "class Day04ReposeRecord {\n    init {\n    }\n}"}
{"kt_path": "8671/solution_8671.kt", "deepseek-coder-1.3b-instruct": "fun calculateAverageSpeed(distance: Double, time: Double): Double {\n    return distance / time\n}"}
{"kt_path": "5601/solution_5601.kt", "deepseek-coder-1.3b-instruct": "fun calculateCircuitPower(voltage: Double, resistance: Double): Double {\n    return voltage * resistance\n}"}
{"kt_path": "10329/solution_10329.kt", "deepseek-coder-1.3b-instruct": "fun calculateResistance(resistance1: Double, resistance2: Double): Double {\n    return resistance1 / resistance2\n}"}
{"kt_path": "n81ur3__kotlin-coding-challenges__fdc5941/src/main/kotlin/adventofcode2020/Day19MonsterMessage.kt", "deepseek-coder-1.3b-instruct": "class Day19MonsterMessage {\n}"}
{"kt_path": "n81ur3__kotlin-coding-challenges__fdc5941/src/main/kotlin/adventofcode2020/Day07HandyHaversacks.kt", "deepseek-coder-1.3b-instruct": "object Day07HandyHaversacks {\n}"}
{"kt_path": "7007/solution_7007.kt", "deepseek-coder-1.3b-instruct": "fun isLongFlight(a: Int, b: Int): Boolean {\n    return a == b\n}"}
{"kt_path": "3696/solution_3696.kt", "deepseek-coder-1.3b-instruct": "fun findCommonArea(a: Float, b: Float, c: Float): Float {\n    return a * (b * c)\n}"}
{"kt_path": "9314/solution_9314.kt", "deepseek-coder-1.3b-instruct": "fun isEven(n: Int): Boolean {\n    return n % 2 == 0\n}"}
{"kt_path": "10577/solution_10577.kt", "deepseek-coder-1.3b-instruct": "fun isEven(n: Int): Boolean {\n    return n % 2 == 0\n}"}
{"kt_path": "n81ur3__kotlin-coding-challenges__fdc5941/src/main/kotlin/adventofcode2018/Day06ChronalCoordinates.kt", "deepseek-coder-1.3b-instruct": "class Day06ChronalCoordinates {\n}"}
{"kt_path": "7819/solution_7819.kt", "deepseek-coder-1.3b-instruct": "fun calculatePowerConsumption(input: Double): Double {\n    val result = 5.0 * input\n    return result\n}"}
{"kt_path": "8829/solution_8829.kt", "deepseek-coder-1.3b-instruct": "fun calculateDailyCaloricNeeds(caloricIntake: Float, weight: Float): Float {\n    return caloricIntake / weight\n}"}
{"kt_path": "6256/solution_6256.kt", "deepseek-coder-1.3b-instruct": "fun notEqualNone(a: Int?, b: Int?): Int {\n    if (a != b) {\n        return 1\n    } else {\n        return 0\n    }\n}"}
{"kt_path": "4238/solution_4238.kt", "deepseek-coder-1.3b-instruct": "fun checkSpeedLimit(speed: Float, limit: Float): Boolean {\n    return speed <= limit\n}"}
{"kt_path": "3868/solution_3868.kt", "deepseek-coder-1.3b-instruct": "fun sumOfNumbers(a: Int, b: Int): Int {\n    val result = a + b\n    return result\n}"}
{"kt_path": "5766/solution_5766.kt", "deepseek-coder-1.3b-instruct": "fun shiftAndMultiplyAssignment(x: Int, y: Int): Int {\n    val z = x shr y\n    return z * x\n}"}
{"kt_path": "4304/solution_4304.kt", "deepseek-coder-1.3b-instruct": "fun architectMath(a: Int, b: Int): Int {\n    val result = a * 2 + b + 1\n    return result\n}"}
{"kt_path": "alebedev__aoc2022__d6ba46b/src/main/kotlin/Map.kt", "deepseek-coder-1.3b-instruct": "object Map {\n    val INSTANCE: AoCMap = AoCMap.INSTANCE\n\n    fun solve() {\n        AoCMap.solve()\n    }\n\n    fun main() {\n        solve()\n    }\n}\n\nfun main() {\n    Map.main()\n}"}
{"kt_path": "7168/solution_7168.kt", "deepseek-coder-1.3b-instruct": "fun multiplyAndModulo(a: Int, b: Int, modulo: Int, power: Int): Int {\n    val result = (a * b).also { println(\"Result: $it\") }\n    val resultModulo = (result % modulo).also { println(\"Result modulo: $it\") }\n    return resultModulo\n}"}
{"kt_path": "5304/solution_5304.kt", "deepseek-coder-1.3b-instruct": "fun numberOfCircuits(a: Int, b: Int, c: Int): Int {\n    val d = a / b\n    val e = a % b\n    return if (e != 0) d + 1 else d\n}"}
{"kt_path": "7099/solution_7099.kt", "deepseek-coder-1.3b-instruct": "fun calculateDistance(x1: Double, y1: Double, z1: Double): Double {\n    val x2 = x1\n    val y2 = y1\n    val z2 = z1\n    val x = x2 - x1\n    val y = y2 - y1\n    val z = z2 - z1\n    return (x * x + y * y + z * z).toDouble()\n}"}
{"kt_path": "8138/solution_8138.kt", "deepseek-coder-1.3b-instruct": "fun athletePoints(a: Int, b: Boolean, c: Boolean): Int {\n    if (b) {\n        return a + 3\n    } else if (c) {\n        return a + 1\n    } else {\n        return a\n    }\n}"}
{"kt_path": "6625/solution_6625.kt", "deepseek-coder-1.3b-instruct": "fun calculateCutLength(a: Float, b: Float, c: Int): Float {\n    val result = (a - b) / c.toFloat()\n    return result\n}"}
{"kt_path": "14820/solution_14820.kt", "deepseek-coder-1.3b-instruct": "fun positiveIntegersSum(n: Int): Int {\n    var sum = 0\n    for (i in 0 until n) {\n        sum += i\n    }\n    return sum\n}"}
{"kt_path": "3808/solution_3808.kt", "deepseek-coder-1.3b-instruct": "fun countNegative(a: Int, b: Int): Int {\n    var count = 0\n    for (i in a..b) {\n        if (i < 0) count++\n    }\n    return count\n}"}
{"kt_path": "677/solution_677.kt", "deepseek-coder-1.3b-instruct": "fun modulusComplexNumbers(a: Float, b: Float): Float {\n    val result = Math.sqrt(a * a + b * b)\n    return result\n}"}
{"kt_path": "1838/solution_1838.kt", "deepseek-coder-1.3b-instruct": "fun calculateSum(n: Int): Int {\n    var sum = n\n    for (i in 1 until n) {\n        sum += i\n    }\n    return sum\n}"}
{"kt_path": "3178/solution_3178.kt", "deepseek-coder-1.3b-instruct": "fun graphicDesignerSalary(hoursWorked: Int): Int {\n    val baseSalary = 1 * 2500\n    if (hoursWorked > 10) {\n        return baseSalary\n    } else {\n        return baseSalary + 500\n    }\n}"}
{"kt_path": "9504/solution_9504.kt", "deepseek-coder-1.3b-instruct": "fun checkPrimeNumbers(n: Int): Boolean {\n    if (n < 2) return false\n    for (i in 2..n/2) {\n        if (n % i == 0) return false\n    }\n    return true\n}"}
{"kt_path": "5182/solution_5182.kt", "deepseek-coder-1.3b-instruct": "fun checkDivisible(n: Int): Boolean {\n    var i = 2\n    while (i <= n) {\n        if (n % i == 0) {\n            return false\n        }\n        i++\n    }\n    return true\n}"}
{"kt_path": "7650/solution_7650.kt", "deepseek-coder-1.3b-instruct": "fun sumOfSquares(n: Int): Int {\n    var sum = 0\n    var i = 0\n    while (i <= n) {\n        sum += i*i\n        i += 1\n    }\n    return sum\n}"}
{"kt_path": "6824/solution_6824.kt", "deepseek-coder-1.3b-instruct": "fun calculateScore(a: Int, b: Int): Int {\n    val result = a * 10 + b - 3\n    return result\n}"}
{"kt_path": "1825/solution_1825.kt", "deepseek-coder-1.3b-instruct": "fun calculateCarpenterSalary(hoursWorked: Int, hourlyRate: Double, bonus: Double): Double {\n    val overtime = if (hoursWorked > 8) (hoursWorked - 8) * hourlyRate * 1.5 else 0.0\n    val grossPay = hoursWorked * hourlyRate + overtime + bonus\n    return grossPay\n}"}
{"kt_path": "1332/solution_1332.kt", "deepseek-coder-1.3b-instruct": "fun extinguishFire(fire: Double): Int {\n    var result = 0\n    var fireValue = fire\n\n    while (fireValue > 0.0) {\n        fireValue -= 1.0\n        result += 1\n    }\n\n    return result\n}"}
{"kt_path": "10817/solution_10817.kt", "deepseek-coder-1.3b-instruct": "fun maxOfThree(a: Int, b: Int, c: Int): Int {\n    return if (a > b && a > c) a else if (b > a && b > c) b else c\n}"}
{"kt_path": "11536/solution_11536.kt", "deepseek-coder-1.3b-instruct": "fun isFloat(obj: Any?): Boolean {\n    return obj is Float\n}"}
{"kt_path": "13694/solution_13694.kt", "deepseek-coder-1.3b-instruct": "fun calculateCarpenterSalary(hoursWorked: Int, hourlyRate: Double, bonus: Double): Double {\n    val overtime = hoursWorked - 8\n    val overtimePay = overtime * hourlyRate * 1.5\n    val regularHours = hoursWorked - overtime\n    val regularPay = regularHours * hourlyRate\n    val totalPay = regularPay + overtimePay + bonus\n    return totalPay\n}"}
{"kt_path": "7127/solution_7127.kt", "deepseek-coder-1.3b-instruct": "fun checkInteger(obj: Any?): Boolean {\n    return obj is Int\n}"}
{"kt_path": "7144/solution_7144.kt", "deepseek-coder-1.3b-instruct": "fun identityComparisonAndFloatingPointOperations(a: Double, b: Double): Boolean {\n    val absA = java.lang.Math.abs(a)\n    val absB = java.lang.Math.abs(b)\n    val diff = absA - absB\n    return diff.toInt() == 0\n}"}
{"kt_path": "8240/solution_8240.kt", "deepseek-coder-1.3b-instruct": "fun calculateFactorial(n: Int): Int {\n    var result = 1\n    for (i in 1..n) {\n        result *= i\n    }\n    return result\n}"}
{"kt_path": "2140/solution_2140.kt", "deepseek-coder-1.3b-instruct": "fun commissionCalculator(commission: Double, rate: Double, amount: Double): Double {\n    return commission + (commission * rate / 100)\n}"}
{"kt_path": "14315/solution_14315.kt", "deepseek-coder-1.3b-instruct": "fun sumPositiveIntegers(n: Int): Int {\n    var sum = 0\n    for (i in 1..n) {\n        sum += i\n    }\n    return sum\n}"}
{"kt_path": "2523/solution_2523.kt", "deepseek-coder-1.3b-instruct": "fun sumEvenNumbers(start: Int, end: Int): Int {\n    var sum = 0\n    var i = start\n    while (i <= end) {\n        if (i % 2 == 0) {\n            sum += i\n        }\n        i++\n    }\n    return sum\n}"}
{"kt_path": "918/solution_918.kt", "deepseek-coder-1.3b-instruct": "fun checkBudget(budget: Int): String {\n    if (budget >= 4000) {\n        return \"Budget is sufficient for the marketing campaign.\"\n    } else {\n        return \"Insufficient budget, please allocate more funds for the campaign.\"\n    }\n}"}
{"kt_path": "10520/solution_10520.kt", "deepseek-coder-1.3b-instruct": "fun sumOfEvenNumbers(start: Int, end: Int): Int {\n    var sum = 0\n    var i = start\n    while (i <= end) {\n        if (i % 2 == 0) {\n            sum += i\n        }\n        i++\n    }\n    return sum\n}"}
{"kt_path": "6399/solution_6399.kt", "deepseek-coder-1.3b-instruct": "fun checkPercentage(input: Int): String {\n    if (input in 0..95) {\n        return \"Outside acceptable range\"\n    } else if (input in 98..100) {\n        return \"acceptable range\"\n    } else {\n        return \"String Within acceptable range\"\n    }\n}"}
{"kt_path": "10731/solution_10731.kt", "deepseek-coder-1.3b-instruct": "fun checkEligibility(age: Int, weight: Int, height: Int): String {\n    if (age > 18 && weight > 50 && height > 150) {\n        return \"Eligible\"\n    } else {\n        return \"Not Eligible\"\n    }\n}"}
{"kt_path": "8756/solution_8756.kt", "deepseek-coder-1.3b-instruct": "fun findMax(a: Int, b: Int, c: Int): Int {\n    var max = a\n    if (b > max) max = b\n    if (c > max) max = c\n    return max\n}"}
{"kt_path": "10964/solution_10964.kt", "deepseek-coder-1.3b-instruct": "fun calculateInvestmentGrowth(initialAmount: Double, interestRate: Double, years: Int): Double {\n    var amount = initialAmount\n    for (i in 1..years) {\n        amount = amount + (amount * interestRate)\n    }\n    return amount\n}"}
{"kt_path": "9201/solution_9201.kt", "deepseek-coder-1.3b-instruct": "fun isCloseToZero(x: Double, y: Double): Boolean {\n    return Math.abs(x) < Math.abs(y)\n}"}
{"kt_path": "14784/solution_14784.kt", "deepseek-coder-1.3b-instruct": "fun sumOfMultiples(a: Int, b: Int, c: Int): Int {\n    var sum = a\n    for (i in a until b) {\n        if (i % c == 0) {\n            sum += i\n        }\n    }\n    return sum\n}"}
{"kt_path": "12550/solution_12550.kt", "deepseek-coder-1.3b-instruct": "fun checkGameConditions(a: Int, b: Int, c: Int, d: Boolean): Int {\n    if (a == 1000 && b == 50 && c == 10 && d == true) {\n        return 1\n    } else {\n        return 0\n    }\n}"}
{"kt_path": "2717/solution_2717.kt", "deepseek-coder-1.3b-instruct": "fun getFirstElement(lst: List<Any?>): Any? {\n    return lst.get(0)\n}"}
{"kt_path": "10259/solution_10259.kt", "deepseek-coder-1.3b-instruct": "fun calculateTotalPrice(price: Float, discount: Float): Float {\n    val absDiscount = Math.abs(discount)\n    val totalPrice = price * (1 - absDiscount)\n    return totalPrice\n}"}
{"kt_path": "1510/solution_1510.kt", "deepseek-coder-1.3b-instruct": "fun getLastElement(lst: List<Any?>): Any? {\n    return lst.last()\n}"}
{"kt_path": "2099/solution_2099.kt", "deepseek-coder-1.3b-instruct": "fun calculateTotalDistance(x: Float, y: Float): Float {\n    var result = x\n    result += y\n    return result\n}"}
{"kt_path": "9202/solution_9202.kt", "deepseek-coder-1.3b-instruct": "fun hasSignificantDecimalPart(a: Double, b: Double): Boolean {\n    val absA = Math.abs(a)\n    val absB = Math.abs(b)\n    val diff = absA - absB\n    return diff != 0\n}"}
{"kt_path": "9289/solution_9289.kt", "deepseek-coder-1.3b-instruct": "fun sliceTuple(list: List<Any?>, from: Int, to: Int): List<Any?> {\n    check(from in 0 until to)\n    return list.subList(from, to)\n}"}
{"kt_path": "222/solution_222.kt", "deepseek-coder-1.3b-instruct": "fun calculateProfit(price: Double, quantity: Double, rate: Double): Double {\n    val profit = (price - (price * rate / 100)) * quantity\n    return profit\n}"}
{"kt_path": "2704/solution_2704.kt", "deepseek-coder-1.3b-instruct": "fun calculateSum(): Double {\n    val a = 0.1\n    val b = 0.01\n    val c = 1000.0\n    val d = a + b + c\n    return d\n}"}
{"kt_path": "7036/solution_7036.kt", "deepseek-coder-1.3b-instruct": "fun calculateExpenses(expensesList: Iterable<Double>): Double {\n    return expensesList.sumOf { it }\n}"}
{"kt_path": "7097/solution_7097.kt", "deepseek-coder-1.3b-instruct": "fun findAnimal(list: List<String>, index: Int): String {\n    return list[index]\n}"}
{"kt_path": "6743/solution_6743.kt", "deepseek-coder-1.3b-instruct": "fun toSet(list: List<Int>): Set<Int> {\n    return list.toSet()\n}"}
{"kt_path": "14646/solution_14646.kt", "deepseek-coder-1.3b-instruct": "fun checkPromotionEligibility(age: Int, salary: Double): Boolean {\n    if (age > 25 && salary > 41.0) {\n        return true\n    } else {\n        return false\n    }\n}"}
{"kt_path": "1671/solution_1671.kt", "deepseek-coder-1.3b-instruct": "fun createTupleFromDictionary(dictionary: Map<String, Any?>): List<Pair<String, Any?>> {\n    return dictionary.toList()\n}"}
{"kt_path": "13442/solution_13442.kt", "deepseek-coder-1.3b-instruct": "fun printEvenNumbers(start: Int, end: Int) {\n    for (i in start..end) {\n        if (i % 2 == 0) {\n            println(i)\n        }\n    }\n}"}
{"kt_path": "13338/solution_13338.kt", "deepseek-coder-1.3b-instruct": "fun convertToSet(list: List<String>): Set<String> {\n    checkNotNull(list)\n    return list.toSet()\n}"}
{"kt_path": "8409/solution_8409.kt", "deepseek-coder-1.3b-instruct": "fun calculateTotalCost(price: Double, discount: Double): Double {\n    val totalCost = price * (1 - discount)\n    return totalCost\n}"}
{"kt_path": "5263/solution_5263.kt", "deepseek-coder-1.3b-instruct": "fun operationsQuiz(a: Boolean, b: Boolean, c: Boolean, d: Boolean): Boolean {\n    var result = a\n    if (b) {\n        result = result || c\n    }\n    if (d) {\n        result = result && (c xor b)\n    }\n    return result\n}"}
{"kt_path": "7005/solution_7005.kt", "deepseek-coder-1.3b-instruct": "fun convertSetToList(set: Set<Any?>): List<Any> {\n    return set.toList()\n}"}
{"kt_path": "7004/solution_7004.kt", "deepseek-coder-1.3b-instruct": "fun <T : Any> Iterable<T>.toSet(): Set<T> = CollectionsKt.toSet(this)"}
{"kt_path": "1559/solution_1559.kt", "deepseek-coder-1.3b-instruct": "fun convertToSet(iterable: Iterable<Any?>): Set<Any?> {\n    return iterable.toSet()\n}"}
{"kt_path": "14689/solution_14689.kt", "deepseek-coder-1.3b-instruct": "fun printOddNumbers(n: Int) {\n    var i = 1\n    while (i < n) {\n        if (i % 2 != 0) {\n            println(i)\n        }\n        i++\n    }\n}"}
{"kt_path": "13400/solution_13400.kt", "deepseek-coder-1.3b-instruct": "fun findBiggerNumber(a: Int, b: Int, c: Int, d: Int): Int {\n    val max = maxOf(a, b, c, d)\n    return max\n}"}
{"kt_path": "9661/solution_9661.kt", "deepseek-coder-1.3b-instruct": "fun calculateSums(n: Int): Int {\n    var sum = 0\n    for (i in 0 until n) {\n        sum += i + 1\n    }\n    return sum\n}"}
{"kt_path": "8323/solution_8323.kt", "deepseek-coder-1.3b-instruct": "fun calculateRemainingBooks(totalBooks: Int, borrowedBooks: Int, returnPeriod: Int): Int {\n    var remainingBooks = totalBooks - borrowedBooks\n    if (remainingBooks < 0) {\n        remainingBooks = 0\n    }\n    return remainingBooks\n}"}
{"kt_path": "236/solution_236.kt", "deepseek-coder-1.3b-instruct": "fun computeFloorArea(width: Float, length: Float): Any {\n    if (width <= 0f || length <= 0f) {\n        return \"Invalid length or width\"\n    }\n    return width * length\n}"}
{"kt_path": "14771/solution_14771.kt", "deepseek-coder-1.3b-instruct": "fun indexingAndSlicingTuples(list: List<String>, index: Int): List<String> {\n    return list.subList(index, list.size)\n}"}
{"kt_path": "9943/solution_9943.kt", "deepseek-coder-1.3b-instruct": "fun addNegIntegersToSet(list: Iterable<Int>): Set<Int> {\n    val set = list.toSet()\n    return set\n}"}
{"kt_path": "8713/solution_8713.kt", "deepseek-coder-1.3b-instruct": "fun accessImaginaryPart(pair: Pair<Double, Double>): Double = pair.second"}
{"kt_path": "3773/solution_3773.kt", "deepseek-coder-1.3b-instruct": "fun calculateSocialWorkerSalary(baseSalary: Double, yearsExperience: Int): Double {\n    if (yearsExperience < 5) {\n        return baseSalary\n    } else {\n        return baseSalary * 1.5\n    }\n}"}
{"kt_path": "11/solution_11.kt", "deepseek-coder-1.3b-instruct": "fun checkOddEvenNumbers(a: Int, b: Int, c: Int): Boolean {\n    var result = a % 2 == 0\n    if (result) {\n        result = b % 2 == 0\n    }\n    if (result) {\n        result = c % 2 == 0\n    }\n    return result\n}"}
{"kt_path": "1118/solution_1118.kt", "deepseek-coder-1.3b-instruct": "import java.util.*\n\nfun createEmptyComplementList(s: String): List<Any> {\n    val list = ArrayList<Any>()\n    return list\n}"}
{"kt_path": "8385/solution_8385.kt", "deepseek-coder-1.3b-instruct": "fun isPrime(n: Int): Boolean {\n    if (n == 1) return false\n    if (n == 2) return true\n    if (n > 2 && n % 2 == 0) return false\n\n    var d = 3\n    while (d * d <= n) {\n        if (n % d == 0) return false\n        d += 2\n    }\n\n    return true\n}"}
{"kt_path": "14396/solution_14396.kt", "deepseek-coder-1.3b-instruct": "fun extractCoordinates(coordinatesList: List<Triple<Int, Int, Int>>): Triple<Int, Int, Int> {\n    return coordinatesList.first()\n}"}
{"kt_path": "5828/solution_5828.kt", "deepseek-coder-1.3b-instruct": "fun calculatePaintCansNeeded(wallAreas: Iterable<Double>, paintNeededPerCan: Double): Int {\n    val sum = wallAreas.sumOf { it * paintNeededPerCan }\n    return sum.toInt()\n}"}
