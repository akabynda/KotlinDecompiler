{"kt_path": "7824/solution_7824.kt", "deepseek-coder-1.3B-kexer": "fun testCountOddNumbers() {\n    val numbers = listOf(1, 2, 3, 4, 5, 6, 7, 8, 9, 10)\n    val oddNumbers = numbers.filter { it % 2 != 0 }\n    println(\"Number of odd numbers: ${oddNumbers.size}\")\n}"}
{"kt_path": "remisultan__multiarm-bandit-algorithm-kotlin__ead934d/core-bandit/src/main/kotlin/org/rsultan/bandit/algorithms/BanditAlgorithm.kt", "deepseek-coder-1.3B-kexer": "/**\n * This function takes a list of arm weights and a list of rewards earned on each arm.\n * It updates the weights of each arm based on the rewards earned.\n *\n * @param armWeights A list of arm weights.\n * @param rewards A list of rewards earned on each arm.\n */\nfun updateArmWeights(armWeights: MutableList<Float>, rewards: List<Float>) {\n    for (i in armWeights.indices) {\n        armWeights[i] += rewards[i]\n    }\n}\n\n// Example usage\nval armWeights = mutableListOf(10.0f, 5.0f, 7.0f)\nval rewards = listOf(2.0f, 3.0f, 1.0f)\n\nupdateArmWeights(armWeights, rewards)\nprintln(armWeights)"}
{"kt_path": "13864/solution_13864.kt", "deepseek-coder-1.3B-kexer": "/**\n * This function takes two integers as input and returns the product of the two numbers.\n */\nfun calculateScore(player1: Int, player2: Int): Int {\n    return player1 * player2\n}"}
{"kt_path": "9763/solution_9763.kt", "deepseek-coder-1.3B-kexer": "fun calculateFinalPrice(discount: Double, price: Double): Double {\n    val finalPrice = price - (price * discount)\n    return finalPrice\n}"}
{"kt_path": "8545/solution_8545.kt", "deepseek-coder-1.3B-kexer": "fun calculateConversionRate(initialAmount: Int, finalAmount: Int): Double {\n    val conversionRate = finalAmount.toDouble() / initialAmount.toDouble()\n    return conversionRate\n}"}
{"kt_path": "13968/solution_13968.kt", "deepseek-coder-1.3B-kexer": "/**\n * This function takes two distances as arguments and returns the average performance of an athlete.\n *\n * @param distance1 The distance of the first performance.\n * @param distance2 The distance of the second performance.\n * @return The average performance of the athlete.\n */\nfun athletePerformanceDistance(distance1: Double, distance2: Double): Double {\n    val averagePerformance = (distance1 + distance2) / 2\n    return averagePerformance\n}"}
{"kt_path": "14509/solution_14509.kt", "deepseek-coder-1.3B-kexer": "fun calculateRoomArea(length: Int, width: Int): Int {\n    val area = length * width\n    return area\n}"}
{"kt_path": "7670/solution_7670.kt", "deepseek-coder-1.3B-kexer": "fun identityAssignment(): Boolean {\n    val a = 5\n    val b = a\n    return a === b\n}"}
{"kt_path": "224/solution_224.kt", "deepseek-coder-1.3B-kexer": "fun calculateSalary(salary: Double): Int {\n    val roundedSalary = Math.round(salary)\n    return roundedSalary\n}"}
{"kt_path": "11310/solution_11310.kt", "deepseek-coder-1.3B-kexer": "fun calculateExpenses(numOfHours: Int, hourlyRate: Float): Float {\n    val totalExpenses = numOfHours * hourlyRate\n    return totalExpenses\n}"}
{"kt_path": "10330/solution_10330.kt", "deepseek-coder-1.3B-kexer": "fun calculatePower(base: Double, exponent: Double): Double {\n    return base.pow(exponent)\n}"}
{"kt_path": "11101/solution_11101.kt", "deepseek-coder-1.3B-kexer": "fun checkPositiveInteger(num: Int): Boolean {\n    return num > 0\n}"}
{"kt_path": "432/solution_432.kt", "deepseek-coder-1.3B-kexer": "fun calculateResistance(voltage: Double, current: Double): Double {\n    val resistance = voltage / current\n    return resistance\n}"}
{"kt_path": "n81ur3__kotlin-coding-challenges__fdc5941/src/main/kotlin/adventofcode2018/Day04ReposeRecord.kt", "deepseek-coder-1.3B-kexer": "/**\n * Convert the given bytecode into Kotlin source code.\n *\n * @param bytecode The bytecode to be converted.\n * @return The Kotlin source code.\n */\nfun convertBytecodeToKotlin(bytecode: String): String {\n    // Remove the leading and trailing whitespaces\n    val trimmedCode = bytecode.trim()\n\n    // Split the bytecode into lines\n    val lines = trimmedCode.split(\"\\n\")\n\n    // Remove the leading and trailing whitespaces from each line\n    val trimmedLines = lines.map { it.trim() }\n\n    // Remove the leading and trailing whitespaces from each line\n    val trimmedLinesWithSpaces = trimmedLines.map { it.replace(\" \", \"\") }\n\n    // Remove the leading and trailing whitespaces from each line\n    val trimmedLinesWithSpacesAndComments = trimmedLinesWithSpaces.map { it.replace(\"#.*\", \"\") }\n\n    // Remove the leading and trailing whitespaces from each line\n    val trimmedLinesWithSpacesAndCommentsAndSemicolons = trimmedLinesWithSpacesAndComments.map { it.replace(\";\", \"\") }\n\n    // Remove the leading and trailing whitespaces from each line\n    val trimmedLinesWithSpacesAndCommentsAndSemicolonsAndBrackets = trimmedLinesWithSpacesAndCommentsAndSemicolons.map { it.replace(\"{\", \"\") }\n\n    // Remove the leading and trailing whitespaces from each line\n    val trimmedLinesWithSpacesAndCommentsAndSemicolonsAndBracketsAndParentheses = trimmedLinesWithSpacesAndCommentsAndSemicolonsAndBrackets.map { it.replace(\"(\", \"\") }\n\n    // Remove the leading and trailing whitespaces from each line\n    val trimmedLinesWithSpacesAndCommentsAndSemicolonsAndBracketsAndParenthesesAndCurlyBrackets = trimmedLinesWithSpacesAndCommentsAndSemicolonsAndBracketsAndParentheses.map { it.replace(\"}\", \"\") }\n\n    // Remove the leading and trailing whitespaces from each line\n    val trimmedLinesWithSpacesAndCommentsAndSemicolonsAndBracketsAndParenthesesAndCurlyBracketsAndColon = trimmedLinesWithSpacesAndCommentsAndSemicolonsAndBracketsAndParent"}
{"kt_path": "8671/solution_8671.kt", "deepseek-coder-1.3B-kexer": "fun calculateAverageSpeed(distance: Double, time: Double): Double {\n    val averageSpeed = distance / time\n    return averageSpeed\n}"}
{"kt_path": "5601/solution_5601.kt", "deepseek-coder-1.3B-kexer": "fun calculateCircuitPower(voltage: Double, current: Double): Double {\n    val power = voltage * current\n    return power\n}"}
{"kt_path": "10329/solution_10329.kt", "deepseek-coder-1.3B-kexer": "fun calculateResistance(voltage: Double, current: Double): Double {\n    val resistance = voltage / current\n    return resistance\n}"}
{"kt_path": "n81ur3__kotlin-coding-challenges__fdc5941/src/main/kotlin/adventofcode2020/Day19MonsterMessage.kt", "deepseek-coder-1.3B-kexer": "/**\n * This function takes a bytecode as input and converts it into Kotlin source code.\n *\n * @param bytecode The bytecode to be converted.\n * @return The Kotlin source code equivalent of the bytecode.\n */\nfun convertBytecodeToKotlin(bytecode: String): String {\n    // Replace the bytecode with the equivalent Kotlin source code\n    val kotlinSource = \"// Bytecode converted to Kotlin source code\"\n    return kotlinSource\n}"}
{"kt_path": "n81ur3__kotlin-coding-challenges__fdc5941/src/main/kotlin/adventofcode2020/Day07HandyHaversacks.kt", "deepseek-coder-1.3B-kexer": "/**\n * Convert the given JVM bytecode into Kotlin source code.\n *\n * @param bytecode The JVM bytecode to be converted.\n * @return The Kotlin source code equivalent of the given bytecode.\n */\nfun convertBytecodeToKotlin(bytecode: String): String {\n    // Replace the placeholder with the actual bytecode\n    val kotlinCode = \"Placeholder\"\n\n    // Replace the placeholder with the actual Kotlin code\n    return kotlinCode\n}"}
{"kt_path": "7007/solution_7007.kt", "deepseek-coder-1.3B-kexer": "/**\n * This function takes two integers as input and returns true if the long flight is possible,\n * otherwise it returns false.\n *\n * @param distance The distance to travel.\n * @param altitude The altitude to reach.\n * @return true if the long flight is possible, false otherwise.\n */\nfun isLongFlight(distance: Int, altitude: Int): Boolean {\n    return distance > 1000 && altitude > 5000\n}"}
{"kt_path": "3696/solution_3696.kt", "deepseek-coder-1.3B-kexer": "fun findCommonArea(length1: Float, length2: Float, width: Float): Float {\n    val area = length1 * length2 + width * width\n    return area\n}"}
{"kt_path": "9314/solution_9314.kt", "deepseek-coder-1.3B-kexer": "fun isEven(num: Int): Boolean {\n    return num % 2 == 0\n}"}
{"kt_path": "10577/solution_10577.kt", "deepseek-coder-1.3B-kexer": "fun isEven(num: Int): Boolean {\n    return num % 2 == 0\n}"}
{"kt_path": "n81ur3__kotlin-coding-challenges__fdc5941/src/main/kotlin/adventofcode2018/Day06ChronalCoordinates.kt", "deepseek-coder-1.3B-kexer": "/**\n * This function takes a list of coordinates and returns the intersection of the coordinates\n * with the given range.\n *\n * @param coordinates A list of coordinates.\n * @param rangeStart The start of the range.\n * @param rangeEnd The end of the range.\n * @return A list of coordinates that fall within the specified range.\n */\nfun findIntersection(coordinates: List<Int>, rangeStart: Int, rangeEnd: Int): List<Int> {\n    val intersection = mutableListOf<Int>()\n\n    for (coordinate in coordinates) {\n        if (coordinate in rangeStart..rangeEnd) {\n            intersection.add(coordinate)\n        }\n    }\n\n    return intersection\n}"}
{"kt_path": "7819/solution_7819.kt", "deepseek-coder-1.3B-kexer": "fun calculatePowerConsumption(voltage: Double): Double {\n    val powerConsumption = voltage * voltage\n    return powerConsumption\n}"}
{"kt_path": "8829/solution_8829.kt", "deepseek-coder-1.3B-kexer": "fun calculateDailyCaloricNeeds(weight: Float, height: Float): Float {\n    val dailyCaloricNeeds = weight * height * 24\n    return dailyCaloricNeeds\n}"}
{"kt_path": "6256/solution_6256.kt", "deepseek-coder-1.3B-kexer": "fun notEqualNone(a: Int, b: Int): Boolean {\n    return a != b\n}"}
{"kt_path": "4238/solution_4238.kt", "deepseek-coder-1.3B-kexer": "fun checkSpeedLimit(speed: Float, limit: Float): Boolean {\n    return speed <= limit\n}"}
{"kt_path": "3868/solution_3868.kt", "deepseek-coder-1.3B-kexer": "/**\n * This function takes two integers as input and returns the sum of the numbers between them.\n *\n * @param start The starting number.\n * @param end The ending number.\n * @return The sum of the numbers between the start and end.\n */\nfun sumOfNumbers(start: Int, end: Int): Int {\n    var sum = 0\n    for (num in start..end) {\n        sum += num\n    }\n    return sum\n}"}
{"kt_path": "5766/solution_5766.kt", "deepseek-coder-1.3B-kexer": "/**\n * This function takes two integers as input and performs a left shift operation and multiplication assignment operation.\n * The function returns the result of the multiplication assignment operation.\n */\nfun shiftAndMultiplyAssignment(num1: Int, num2: Int): Int {\n    // Perform left shift operation\n    val result = num1 shl num2\n\n    // Perform multiplication assignment operation\n    val result2 = result * num2\n\n    return result2\n}"}
{"kt_path": "4304/solution_4304.kt", "deepseek-coder-1.3B-kexer": "/**\n * This function takes two integers as input and returns the sum of the first two numbers.\n *\n * @param num1 The first number.\n * @param num2 The second number.\n * @return The sum of the first two numbers.\n */\nfun architectMath(num1: Int, num2: Int): Int {\n    val result = num1 + num2\n    return result\n}"}
{"kt_path": "alebedev__aoc2022__d6ba46b/src/main/kotlin/Map.kt", "deepseek-coder-1.3B-kexer": "/**\n * This function takes a map as input and solves the puzzle.\n */\nfun solvePuzzle(map: Map<String, String>) {\n    // Check if the map contains the required keys\n    if (\"A\" in map && \"B\" in map && \"C\" in map && \"D\" in map) {\n        // Solve the puzzle using the map\n        // ...\n    } else {\n        println(\"Invalid map provided.\")\n    }\n}"}
{"kt_path": "7168/solution_7168.kt", "deepseek-coder-1.3B-kexer": "/**\n * This function takes four integers as input and performs multiplication and modulo operations on them.\n * The multiplication result is stored in the first argument and the modulo result is stored in the second argument.\n *\n * @param a The first integer.\n * @param b The second integer.\n * @param c The third integer.\n * @param d The fourth integer.\n * @return A Pair containing the multiplication result and modulo result.\n */\nfun multiplyAndModulo(a: Int, b: Int, c: Int, d: Int): Pair<Int, Int> {\n    val multiplicationResult = a * b\n    val moduloResult = multiplicationResult % c\n    return Pair(multiplicationResult, moduloResult)\n}"}
{"kt_path": "5304/solution_5304.kt", "deepseek-coder-1.3B-kexer": "/**\n * This function takes three integers as input and returns the number of circuits required to\n * complete the circuit.\n *\n * @param numberOfCables The number of cables available.\n * @param numberOfCircuits The number of circuits available.\n * @param numberOfCablesPerCircuit The number of cables required per circuit.\n * @return The number of circuits required to complete the circuit.\n */\nfun numberOfCircuits(numberOfCables: Int, numberOfCircuits: Int, numberOfCablesPerCircuit: Int): Int {\n    var circuitsRequired = 0\n\n    while (numberOfCables >= numberOfCablesPerCircuit) {\n        circuitsRequired++\n        numberOfCables -= numberOfCablesPerCircuit\n    }\n\n    return circuitsRequired\n}"}
{"kt_path": "7099/solution_7099.kt", "deepseek-coder-1.3B-kexer": "/**\n * This function takes three arguments:\n * - distance: the distance between two points in the plane\n * - angle: the angle between the x-axis and the line connecting the two points\n * - height: the height of the point above the plane\n *\n * It calculates the distance between the point and the origin (0, 0, 0)\n * using the formula: distance = sqrt(distance^2 + height^2)\n *\n * @param distance The distance between two points in the plane.\n * @param angle The angle between the x-axis and the line connecting the two points.\n * @param height The height of the point above the plane.\n * @return The distance between the point and the origin.\n */\nfun calculateDistance(distance: Double, angle: Double, height: Double): Double {\n    val distanceToOrigin = Math.sqrt(distance.pow(2) + height.pow(2))\n    return distanceToOrigin\n}"}
{"kt_path": "8138/solution_8138.kt", "deepseek-coder-1.3B-kexer": "/**\n * This function takes three arguments:\n * - athletePoints: an integer representing the athlete's points\n * - isWinner: a boolean indicating whether the athlete is the winner\n * - isRunnerUp: a boolean indicating whether the athlete is the runner-up\n *\n * The function should return the final points of the athlete based on the following conditions:\n * - If the athlete is the winner and isRunnerUp is true, return the athletePoints + 10\n * - If the athlete is the runner-up and isRunnerUp is true, return the athletePoints + 5\n * - If the athlete is the winner and isRunnerUp is false, return the athletePoints + 5\n * - If the athlete is the runner-up and isRunnerUp is false, return the athletePoints + 10\n * - If the athlete is neither the winner nor runner-up, return the athletePoints\n */\nfun athletePoints(athletePoints: Int, isWinner: Boolean, isRunnerUp: Boolean): Int {\n    return when {\n        isWinner && isRunnerUp -> athletePoints + 10\n        isRunnerUp && isWinner -> athletePoints + 5\n        isWinner && !isRunnerUp -> athletePoints + 5\n        !isWinner && isRunnerUp -> athletePoints + 10\n        else -> athletePoints\n    }\n}"}
{"kt_path": "6625/solution_6625.kt", "deepseek-coder-1.3B-kexer": "fun calculateCutLength(length: Float, cutWidth: Float, cutCount: Int): Float {\n    val cutLength = length - cutWidth * cutCount\n    return cutLength\n}"}
{"kt_path": "14820/solution_14820.kt", "deepseek-coder-1.3B-kexer": "/**\n * Given a list of positive integers, find the sum of all the numbers.\n *\n * @param numbers A list of positive integers.\n * @return The sum of all the positive integers in the list.\n */\nfun positiveIntegersSum(numbers: List<Int>): Int {\n    var totalSum = 0\n    for (number in numbers) {\n        if (number > 0) {\n            totalSum += number\n        }\n    }\n    return totalSum\n}"}
{"kt_path": "3808/solution_3808.kt", "deepseek-coder-1.3B-kexer": "/**\n * This function takes two integers as input and counts the number of negative integers present in the range [0, n].\n *\n * @param n The upper limit of the range.\n * @return The count of negative integers in the range [0, n].\n */\nfun countNegative(n: Int): Int {\n    var count = 0\n    for (i in 0 until n) {\n        if (i < 0) {\n            count++\n        }\n    }\n    return count\n}"}
{"kt_path": "677/solution_677.kt", "deepseek-coder-1.3B-kexer": "/**\n * This function takes two complex numbers and returns their modulus.\n *\n * @param realPart1 The real part of the first complex number.\n * @param imaginaryPart1 The imaginary part of the first complex number.\n * @param realPart2 The real part of the second complex number.\n * @param imaginaryPart2 The imaginary part of the second complex number.\n * @return The modulus of the two complex numbers.\n */\nfun modulusComplexNumbers(realPart1: Float, imaginaryPart1: Float, realPart2: Float, imaginaryPart2: Float): Float {\n    val modulus = Math.sqrt((realPart1 * realPart1 + imaginaryPart1 * imaginaryPart1).toDouble().pow(2) + (realPart2 * realPart2 + imaginaryPart2 * imaginaryPart2).toDouble().pow(2))\n    return modulus\n}"}
{"kt_path": "1838/solution_1838.kt", "deepseek-coder-1.3B-kexer": "/**\n * This function takes a positive integer as input and returns the sum of all numbers from 1 to the input number.\n *\n * @param num The positive integer to calculate the sum.\n * @return The sum of all numbers from 1 to the input number.\n */\nfun calculateSum(num: Int): Int {\n    var sum = 0\n    for (i in 1..num) {\n        sum += i\n    }\n    return sum\n}"}
{"kt_path": "3178/solution_3178.kt", "deepseek-coder-1.3B-kexer": "fun graphicDesignerSalary(salary: Int): Int {\n    return when {\n        salary < 1000 -> {\n            // Code to calculate bonus for graphic designer\n            // with salary less than 1000\n        }\n        else -> {\n            // Code to calculate bonus for graphic designer\n            // with salary greater than or equal to 1000\n        }\n    }\n}"}
{"kt_path": "9504/solution_9504.kt", "deepseek-coder-1.3B-kexer": "fun checkPrimeNumbers(num: Int): Boolean {\n    if (num < 2) {\n        return false\n    }\n\n    for (i in 2..(Math.sqrt(num.toDouble()).toInt())) {\n        if (num % i == 0) {\n            return false\n        }\n    }\n\n    return true\n}"}
{"kt_path": "5182/solution_5182.kt", "deepseek-coder-1.3B-kexer": "/**\n * This function takes a number as input and checks if it is divisible by both 2 and 11.\n * If the number is divisible by both, it returns true, otherwise false.\n */\nfun checkDivisible(number: Int): Boolean {\n    return number % 2 == 0 && number % 11 == 0\n}"}
{"kt_path": "7650/solution_7650.kt", "deepseek-coder-1.3B-kexer": "/**\n * This function takes a positive integer as input and returns the sum of squares of all positive integers less than or equal to the input.\n *\n * @param n A positive integer.\n * @return The sum of squares of all positive integers less than or equal to the input.\n */\nfun sumOfSquares(n: Int): Int {\n    var sumOfSquares = 0\n    var i = 1\n    while (i <= n) {\n        sumOfSquares += i * i\n        i++\n    }\n    return sumOfSquares\n}"}
{"kt_path": "6824/solution_6824.kt", "deepseek-coder-1.3B-kexer": "/**\n * This function takes two integers as input and returns the result of multiplication\n * of the first number with the second number, but only if the multiplication result is\n * less than 10, otherwise it returns -1.\n */\nfun calculateScore(player1: Int, player2: Int): Int {\n    val multiplicationResult = player1 * player2\n    return if (multiplicationResult < 10) multiplicationResult else -1\n}"}
{"kt_path": "1825/solution_1825.kt", "deepseek-coder-1.3B-kexer": "fun calculateCarpenterSalary(hoursWorked: Int, hourlyRate: Double, bonus: Double): Double {\n    val totalSalary = hoursWorked * hourlyRate + bonus\n    return totalSalary\n}"}
{"kt_path": "1332/solution_1332.kt", "deepseek-coder-1.3B-kexer": "/**\n * This function takes a double value as input and extinguishes the fire.\n * If the fire is already extinguished, it returns 0.\n * Otherwise, it returns 1.\n */\nfun extinguishFire(fireLevel: Double): Int {\n    if (fireLevel == 0.0) {\n        return 0\n    }\n    return 1\n}"}
{"kt_path": "10817/solution_10817.kt", "deepseek-coder-1.3B-kexer": "fun maxOfThree(a: Int, b: Int, c: Int): Int {\n    return when {\n        a > b && a > c -> a\n        b > c -> b\n        else -> c\n    }\n}"}
{"kt_path": "11536/solution_11536.kt", "deepseek-coder-1.3B-kexer": "fun isFloat(obj: Any): Boolean {\n    return obj is Float\n}"}
{"kt_path": "13694/solution_13694.kt", "deepseek-coder-1.3B-kexer": "fun calculateCarpenterSalary(hoursWorked: Int, hourlyRate: Double, bonus: Double): Double {\n    val totalSalary = hoursWorked * hourlyRate + bonus\n    return totalSalary\n}"}
{"kt_path": "7127/solution_7127.kt", "deepseek-coder-1.3B-kexer": "fun checkInteger(obj: Any): Boolean {\n    if (obj is String) {\n        try {\n            val number = obj.toInt()\n            return true\n        } catch (e: NumberFormatException) {\n            return false\n        }\n    }\n    return false\n}"}
{"kt_path": "7144/solution_7144.kt", "deepseek-coder-1.3B-kexer": "fun identityComparisonAndFloatingPointOperations(a: Double, b: Double): Int {\n    // Perform identity comparison and floating-point operations\n    return if (a === b) 1 else 0\n}"}
{"kt_path": "8240/solution_8240.kt", "deepseek-coder-1.3B-kexer": "/**\n * This function takes an integer n and calculates the factorial of n.\n *\n * @param n The integer for which factorial needs to be calculated.\n * @return The factorial of n.\n */\nfun calculateFactorial(n: Int): Int {\n    var factorial = 1\n    var i = 1\n    while (i <= n) {\n        factorial *= i\n        i++\n    }\n    return factorial\n}"}
{"kt_path": "2140/solution_2140.kt", "deepseek-coder-1.3B-kexer": "/**\n * This function calculates the commission based on the sales amount, commission rate, and bonus.\n *\n * @param salesAmount The amount of sales made.\n * @param commissionRate The commission rate charged.\n * @param bonus The bonus amount.\n * @return The commission amount.\n */\nfun commissionCalculator(salesAmount: Double, commissionRate: Double, bonus: Double): Double {\n    val commission = salesAmount * commissionRate + bonus\n    return commission\n}"}
{"kt_path": "14315/solution_14315.kt", "deepseek-coder-1.3B-kexer": "/**\n * This function takes a positive integer as input and returns the sum of all positive integers up to the input.\n *\n * @param num The positive integer up to which the sum needs to be calculated.\n * @return The sum of all positive integers up to the input.\n */\nfun sumPositiveIntegers(num: Int): Int {\n    var sum = 0\n    var i = 1\n    while (i <= num) {\n        sum += i\n        i++\n    }\n    return sum\n}"}
{"kt_path": "2523/solution_2523.kt", "deepseek-coder-1.3B-kexer": "/**\n * This function takes two integers as input and returns the sum of all even numbers between them.\n *\n * @param start The starting number of the range.\n * @param end The ending number of the range.\n * @return The sum of all even numbers between the start and end.\n */\nfun sumEvenNumbers(start: Int, end: Int): Int {\n    var sum = 0\n    var current = start\n\n    while (current <= end) {\n        if (current % 2 == 0) {\n            sum += current\n        }\n        current++\n    }\n\n    return sum\n}"}
{"kt_path": "918/solution_918.kt", "deepseek-coder-1.3B-kexer": "fun checkBudget(budget: Int): String {\n    return if (budget >= 4000) {\n        \"Budget is sufficient for the marketing campaign.\"\n    } else {\n        \"Insufficient budget, please allocate more funds for the campaign.\"\n    }\n}"}
{"kt_path": "10520/solution_10520.kt", "deepseek-coder-1.3B-kexer": "/**\n * This function takes two integers as input and returns the sum of all even numbers between them.\n */\nfun sumOfEvenNumbers(start: Int, end: Int): Int {\n    var sumOfEven = 0\n    for (num in start..end) {\n        if (num % 2 == 0) {\n            sumOfEven += num\n        }\n    }\n    return sumOfEven\n}"}
{"kt_path": "6399/solution_6399.kt", "deepseek-coder-1.3B-kexer": "fun checkPercentage(percentage: Int): String {\n    return when {\n        percentage < 95 -> \"String Within acceptable range\"\n        percentage > 98 -> \"String Outside acceptable range\"\n        else -> \"Invalid percentage\"\n    }\n}"}
{"kt_path": "10731/solution_10731.kt", "deepseek-coder-1.3B-kexer": "fun checkEligibility(age: Int, income: Int, creditScore: Int): String {\n    return when {\n        age < 18 -> \"Not Eligible\"\n        income < 10000 -> \"Not Eligible\"\n        creditScore < 600 -> \"Not Eligible\"\n        else -> \"Eligible\"\n    }\n}"}
{"kt_path": "8756/solution_8756.kt", "deepseek-coder-1.3B-kexer": "fun findMax(a: Int, b: Int, c: Int): Int {\n    return if (a > b && a > c) a else if (b > c) b else c\n}"}
{"kt_path": "10964/solution_10964.kt", "deepseek-coder-1.3B-kexer": "/**\n * This function calculates the growth of an investment over a given number of years.\n *\n * @param initialAmount The initial amount of the investment.\n * @param annualInterestRate The annual interest rate as a decimal.\n * @param years The number of years for which the growth needs to be calculated.\n * @return The final amount of the investment after the given number of years.\n */\nfun calculateInvestmentGrowth(initialAmount: Double, annualInterestRate: Double, years: Int): Double {\n    var currentAmount = initialAmount\n    repeat(years) {\n        currentAmount += currentAmount * annualInterestRate\n    }\n    return currentAmount\n}"}
{"kt_path": "9201/solution_9201.kt", "deepseek-coder-1.3B-kexer": "/**\n * This function takes two floating-point numbers as input and returns true if the absolute value of the first number is\n * greater than or equal to the absolute value of the second number, otherwise it returns false.\n */\nfun isCloseToZero(num1: Double, num2: Double): Boolean {\n    return Math.abs(num1) >= Math.abs(num2)\n}"}
{"kt_path": "14784/solution_14784.kt", "deepseek-coder-1.3B-kexer": "/**\n * This function takes three integers as input and returns the sum of all multiples of the first two numbers.\n *\n * @param num1 The first number.\n * @param num2 The second number.\n * @param max The maximum number to consider.\n * @return The sum of all multiples of the first two numbers up to the maximum number.\n */\nfun sumOfMultiples(num1: Int, num2: Int, max: Int): Int {\n    var sum = 0\n    var i = 0\n    while (i <= max) {\n        if (i % num1 == 0 || i % num2 == 0) {\n            sum += i\n        }\n        i++\n    }\n    return sum\n}"}
{"kt_path": "12550/solution_12550.kt", "deepseek-coder-1.3B-kexer": "fun checkGameConditions(player1: Int, player2: Int, player3: Int, player4: Boolean): Int {\n    if (player1 >= 1000 && player2 >= 50 && player3 >= 10 && player4) {\n        return 1\n    } else if (player1 >= 1000 && player2 >= 50 && player3 >= 10 && !player4) {\n        return 2\n    } else if (player1 >= 1000 && player2 >= 50 && player3 < 10 && player4) {\n        return 3\n    } else if (player1 >= 1000 && player2 >= 50 && player3 < 10 && !player4) {\n        return 4\n    } else if (player1 >= 1000 && player2 < 50 && player3 >= 10 && player4) {\n        return 5\n    } else if (player1 >= 1000 && player2 < 50 && player3 >= 10 && !player4) {\n        return 6\n    } else if (player1 >= 1000 && player2 < 50 && player3 < 10 && player4) {\n        return 7\n    } else if (player1 >= 1000 && player2 < 50 && player3 < 10 && !player4) {\n        return 8\n    } else if (player1 < 1000 && player2 >= 50 && player3 >= 10 && player4) {\n        return 9\n    } else if (player1 < 1000 && player2 >= 50 && player3 >= 10 && !player4) {\n        return 10\n    } else if (player1 < 1000 && player2 >= 50 && player3 < 10 && player4) {\n        return 11\n    } else if (player1 < 1000 && player2 >= 50 && player3 < 10 && !player4) {\n        return 12\n    } else if (player1 < 1000 && player2 < 50 && player3 >= 10 && player4) {\n        return 13\n    } else if (player1 < 1000 && player2 < 50 && player3 >= 10 && !player4) {\n        return 14\n    } else if (player1 < 1000 && player2 < 50 && player3 < 10 && player4) {"}
{"kt_path": "2717/solution_2717.kt", "deepseek-coder-1.3B-kexer": "/**\n * Given a list of elements, return the first element.\n *\n * @param lst A list of elements.\n * @return The first element of the list.\n */\nfun getFirstElement(lst: List<Any?>): Any? {\n    // Check if the list is empty\n    if (lst.isEmpty()) {\n        return null\n    }\n\n    // Get the first element\n    val firstElement = lst[0]\n\n    return firstElement\n}"}
{"kt_path": "10259/solution_10259.kt", "deepseek-coder-1.3B-kexer": "/**\n * This function takes two floating-point numbers as input and returns the absolute value of the difference\n * between the two numbers.\n *\n * @param num1 The first floating-point number.\n * @param num2 The second floating-point number.\n * @return The absolute value of the difference between num1 and num2.\n */\nfun calculateTotalPrice(num1: Float, num2: Float): Float {\n    val difference = Math.abs(num1 - num2)\n    return difference\n}"}
{"kt_path": "1510/solution_1510.kt", "deepseek-coder-1.3B-kexer": "fun getLastElement(lst: List<Any?>): Any? {\n    requireNotNull(lst)\n    return lst.last()\n}"}
{"kt_path": "2099/solution_2099.kt", "deepseek-coder-1.3B-kexer": "fun calculateTotalDistance(distance: Float, time: Float): Float {\n    var totalDistance = distance\n    var remainingTime = time\n\n    while (remainingTime > 0) {\n        totalDistance += remainingTime\n        remainingTime--\n    }\n\n    return totalDistance\n}"}
{"kt_path": "9202/solution_9202.kt", "deepseek-coder-1.3B-kexer": "/**\n * This function takes two floating-point numbers as input and returns true if the absolute value of the first number\n * is greater than the absolute value of the second number, otherwise returns false.\n */\nfun hasSignificantDecimalPart(num1: Double, num2: Double): Boolean {\n    val absNum1 = Math.abs(num1)\n    val absNum2 = Math.abs(num2)\n    return absNum1 > absNum2\n}"}
{"kt_path": "9289/solution_9289.kt", "deepseek-coder-1.3B-kexer": "fun sliceTuple(t: List<Any>, start: Int, end: Int): List<Any> {\n    require(start >= 0 && end <= t.size) { \"Invalid range\" }\n    return t.subList(start, end)\n}"}
{"kt_path": "222/solution_222.kt", "deepseek-coder-1.3B-kexer": "fun calculateProfit(cost: Double, revenue: Double, expenses: Double): Double {\n    val profit = revenue - expenses\n    return if (profit > 0) profit else 0.0\n}"}
{"kt_path": "2704/solution_2704.kt", "deepseek-coder-1.3B-kexer": "fun calculateSum(): Double {\n    val sum = (0.1 + 0.01).toDouble()\n    return sum\n}"}
{"kt_path": "7036/solution_7036.kt", "deepseek-coder-1.3B-kexer": "fun calculateExpenses(expensesList: List<Double>): Double {\n    requireNotNull(expensesList)\n    return expensesList.sum()\n}"}
{"kt_path": "7097/solution_7097.kt", "deepseek-coder-1.3B-kexer": "/**\n * This function takes a list of animals and an index, and returns the animal at the given index.\n *\n * @param animals A list of animals.\n * @param index The index of the animal to retrieve.\n * @return The animal at the given index.\n */\nfun findAnimal(animals: List<String>, index: Int): String {\n    // Check if the index is within the range of the list\n    if (index < 0 || index >= animals.size) {\n        return \"Invalid index\"\n    }\n\n    // Retrieve the animal at the given index\n    val animal = animals[index]\n\n    return animal\n}"}
{"kt_path": "6743/solution_6743.kt", "deepseek-coder-1.3B-kexer": "fun toSet(iterable: Iterable<Int>): Set<Int> {\n    requireNotNull(iterable)\n    return iterable.toSet()\n}"}
{"kt_path": "14646/solution_14646.kt", "deepseek-coder-1.3B-kexer": "fun checkPromotionEligibility(age: Int, salary: Double): Int {\n    if (age > 25 && salary >= 5000.0) {\n        return 1\n    } else if (age > 40 && salary >= 7000.0) {\n        return 1\n    } else {\n        return 0\n    }\n}"}
{"kt_path": "1671/solution_1671.kt", "deepseek-coder-1.3B-kexer": "val dictionary = mapOf(\"name\" to \"John\", \"age\" to 30, \"occupation\" to \"Engineer\")\nval result = createTupleFromDictionary(dictionary)\nprintln(result)"}
{"kt_path": "13442/solution_13442.kt", "deepseek-coder-1.3B-kexer": "/**\n * This function takes two integers as input and prints all the even numbers between them.\n */\nfun printEvenNumbers(start: Int, end: Int) {\n    for (num in start..end) {\n        if (num % 2 == 0) {\n            println(num)\n        }\n    }\n}"}
{"kt_path": "13338/solution_13338.kt", "deepseek-coder-1.3B-kexer": "fun convertToSet(photoData: List<String>): Set<String> {\n    requireNotNull(photoData)\n    return photoData.toSet()\n}"}
{"kt_path": "8409/solution_8409.kt", "deepseek-coder-1.3B-kexer": "fun calculateTotalCost(discount: Double, taxRate: Double): Double {\n    val totalCost = (discount * 1000.0 + (1000.0 - discount) * (1000.0 - discount) * taxRate)\n    return totalCost\n}"}
{"kt_path": "5263/solution_5263.kt", "deepseek-coder-1.3B-kexer": "fun operationsQuiz(a: Boolean, b: Boolean, c: Boolean, d: Boolean): Boolean {\n    // Perform operations on the given boolean values\n    val result = a && b || c && d\n\n    return result\n}"}
{"kt_path": "7005/solution_7005.kt", "deepseek-coder-1.3B-kexer": "fun convertSetToList(set: Set<Any>): List<Any> {\n    requireNotNull(set)\n    return set.toList()\n}"}
{"kt_path": "7004/solution_7004.kt", "deepseek-coder-1.3B-kexer": "fun convertListToSet(lst: List<Any>): Set<Any> {\n    requireNotNull(lst)\n    return lst.toSet()\n}"}
{"kt_path": "1559/solution_1559.kt", "deepseek-coder-1.3B-kexer": "fun convertToSet(gameData: List<Any>): Set<Any> {\n    requireNotNull(gameData)\n    return gameData.toSet()\n}"}
{"kt_path": "14689/solution_14689.kt", "deepseek-coder-1.3B-kexer": "fun printOddNumbers(num: Int) {\n    var i = 1\n    while (i <= num) {\n        if (i % 2 != 0) {\n            println(i)\n        }\n        i++\n    }\n}"}
{"kt_path": "13400/solution_13400.kt", "deepseek-coder-1.3B-kexer": "fun findBiggerNumber(a: Int, b: Int, c: Int, d: Int): Int {\n    return if (a > b && a > c && a > d) a else if (b > c && b > d) b else if (c > d) c else d\n}"}
{"kt_path": "9661/solution_9661.kt", "deepseek-coder-1.3B-kexer": "/**\n * This function takes a positive integer as input and returns the sum of all numbers from 1 to n\n * that are divisible by both 5 and 7.\n *\n * @param n A positive integer.\n * @return The sum of numbers from 1 to n that are divisible by both 5 and 7.\n */\nfun calculateSums(n: Int): Int {\n    var sum = 0\n    for (i in 1..n) {\n        if (i % 5 == 0 && i % 7 == 0) {\n            sum += i\n        }\n    }\n    return sum\n}"}
{"kt_path": "8323/solution_8323.kt", "deepseek-coder-1.3B-kexer": "fun calculateRemainingBooks(numBooks: Int, borrowedBooks: Int, availableBooks: Int): Int {\n    var remainingBooks = numBooks - borrowedBooks\n    if (remainingBooks < availableBooks) {\n        remainingBooks = availableBooks - remainingBooks\n    }\n    return remainingBooks\n}"}
{"kt_path": "236/solution_236.kt", "deepseek-coder-1.3B-kexer": "/**\n * This function takes the length and width of a room and calculates its floor area.\n *\n * @param length The length of the room in meters.\n * @param width The width of the room in meters.\n * @return The floor area of the room in square meters.\n */\nfun computeFloorArea(length: Float, width: Float): Float {\n    if (length <= 0 || width <= 0) {\n        return \"Invalid length or width\"\n    }\n\n    val floorArea = length * width\n    return floorArea\n}"}
{"kt_path": "14771/solution_14771.kt", "deepseek-coder-1.3B-kexer": "fun indexingAndSlicingTuples(list: List<String>, index: Int): List<String> {\n    require(index >= 0) { \"Index must be a positive integer.\" }\n    require(index < list.size) { \"Index must be within the range of the list.\" }\n\n    return list.subList(index, list.size)\n}"}
{"kt_path": "9943/solution_9943.kt", "deepseek-coder-1.3B-kexer": "fun addNegIntegersToSet(numbers: List<Int>): Set<Int> {\n    requireNotNull(numbers) { \"Input list cannot be null\" }\n\n    val setOfIntegers = numbers.toSet()\n\n    return setOfIntegers\n}"}
{"kt_path": "8713/solution_8713.kt", "deepseek-coder-1.3B-kexer": "fun accessImaginaryPart(complexNumber: Pair<Double, Double>): Double {\n    requireNotNull(complexNumber) { \"Complex number cannot be null\" }\n    return complexNumber.second\n}"}
{"kt_path": "3773/solution_3773.kt", "deepseek-coder-1.3B-kexer": "fun calculateSocialWorkerSalary(hoursWorked: Double, rate: Int): Double {\n    return if (hoursWorked < 10) {\n        hoursWorked * rate\n    } else {\n        hoursWorked * rate * 1.5\n    }\n}"}
{"kt_path": "11/solution_11.kt", "deepseek-coder-1.3B-kexer": "fun checkOddEvenNumbers(num1: Int, num2: Int, num3: Int): Boolean {\n    return (num1 % 2 == 0 && num2 % 2 != 0 && num3 % 2 != 0) ||\n            (num1 % 2 != 0 && num2 % 2 == 0 && num3 % 2 != 0) ||\n            (num1 % 2 != 0 && num2 % 2 != 0 && num3 % 2 == 0)\n}"}
{"kt_path": "1118/solution_1118.kt", "deepseek-coder-1.3B-kexer": "fun createEmptyComplementList(string: String): List<Any> {\n    requireNotNull(string)\n    return listOf(string)\n}"}
{"kt_path": "8385/solution_8385.kt", "deepseek-coder-1.3B-kexer": "/**\n * This function takes a number as input and returns true if the number is prime, false otherwise.\n */\nfun isPrime(num: Int): Boolean {\n    if (num < 2) {\n        return false\n    }\n    for (i in 2..(Math.sqrt(num.toDouble()).toInt())) {\n        if (num % i == 0) {\n            return false\n        }\n    }\n    return true\n}"}
{"kt_path": "14396/solution_14396.kt", "deepseek-coder-1.3B-kexer": "fun extractCoordinates(coordinatesList: List<Triple<Int, Int, Int>>): Triple<Int, Int, Int> {\n    // Check if the input is a list\n    if (coordinatesList !is List<Triple<Int, Int, Int>>) {\n        throw IllegalArgumentException(\"Invalid input. Please provide a list of coordinates.\")\n    }\n\n    // Extract the coordinates\n    val (x, y, z) = coordinatesList[0]\n\n    return Triple(x, y, z)\n}"}
{"kt_path": "5828/solution_5828.kt", "deepseek-coder-1.3B-kexer": "fun calculatePaintCansNeeded(wallAreas: List<Double>, paintCoverage: Double): Double {\n    require(wallAreas.isNotEmpty()) { \"Wall areas must be provided.\" }\n    require(paintCoverage > 0) { \"Paint coverage must be greater than zero.\" }\n\n    val totalArea = wallAreas.sum()\n    val paintCansNeeded = totalArea / paintCoverage\n\n    return paintCansNeeded\n}"}
