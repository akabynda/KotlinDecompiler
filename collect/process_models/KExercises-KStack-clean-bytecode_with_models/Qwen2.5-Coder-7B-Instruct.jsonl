{"kt_path": "7824/solution_7824.kt", "Qwen2.5-Coder-7B-Instruct": "fun testCountOddNumbers() {\n}"}
{"kt_path": "remisultan__multiarm-bandit-algorithm-kotlin__ead934d/core-bandit/src/main/kotlin/org/rsultan/bandit/algorithms/BanditAlgorithm.kt", "Qwen2.5-Coder-7B-Instruct": "package org.rsultan.bandit.algorithms\n\ninterface BanditAlgorithm {\n    fun selectArm(): Int\n    fun update(index: Int, value: Float)\n}"}
{"kt_path": "13864/solution_13864.kt", "Qwen2.5-Coder-7B-Instruct": "object Solution_13864Kt {\n    fun calculateScore(a: Int, b: Int): Int {\n        return a * b\n    }\n}"}
{"kt_path": "9763/solution_9763.kt", "Qwen2.5-Coder-7B-Instruct": "object Solution_9763 {\n    fun calculateFinalPrice(price: Double, discount: Double): Double {\n        return price - discount\n    }\n}"}
{"kt_path": "8545/solution_8545.kt", "Qwen2.5-Coder-7B-Instruct": "object Solution_8545Kt {\n    fun calculateConversionRate(fromCurrency: Int, toCurrency: Int): Double {\n        return 0.0\n    }\n}"}
{"kt_path": "13968/solution_13968.kt", "Qwen2.5-Coder-7B-Instruct": "object Solution_13968Kt {\n    fun athletePerformanceDistance(a: Double, b: Double): Double {\n        return a / b\n    }\n}"}
{"kt_path": "14509/solution_14509.kt", "Qwen2.5-Coder-7B-Instruct": "object Solution_14509Kt {\n    fun calculateRoomArea(length: Int, width: Int): Int {\n        val area = length * width\n        return area\n    }\n}"}
{"kt_path": "7670/solution_7670.kt", "Qwen2.5-Coder-7B-Instruct": "object Solution_7670Kt {\n    fun identityAssignment(): Boolean {\n        val a = 5\n        val b = a\n        return true\n    }\n}"}
{"kt_path": "224/solution_224.kt", "Qwen2.5-Coder-7B-Instruct": "object Solution_224Kt {\n    fun calculateSalary(salary: Double): Long {\n        return Math.round(salary)\n    }\n}"}
{"kt_path": "11310/solution_11310.kt", "Qwen2.5-Coder-7B-Instruct": "object Solution_11310Kt {\n    fun calculateExpenses(quantity: Int, pricePerUnit: Float): Float {\n        return quantity.toFloat() * pricePerUnit\n    }\n}"}
{"kt_path": "10330/solution_10330.kt", "Qwen2.5-Coder-7B-Instruct": "object Solution_10330Kt {\n    fun calculatePower(base: Double, exponent: Double): Double {\n        return base * exponent\n    }\n}"}
{"kt_path": "11101/solution_11101.kt", "Qwen2.5-Coder-7B-Instruct": "fun checkPositiveInteger(number: Int): Boolean {\n    return number > 0\n}"}
{"kt_path": "432/solution_432.kt", "Qwen2.5-Coder-7B-Instruct": "object Solution_432 {\n    fun calculateResistance(a: Double, b: Double): Double {\n        return a / b\n    }\n}"}
{"kt_path": "n81ur3__kotlin-coding-challenges__fdc5941/src/main/kotlin/adventofcode2018/Day04ReposeRecord.kt", "Qwen2.5-Coder-7B-Instruct": "package adventofcode2018\n\nfinal class Day04ReposeRecord()"}
{"kt_path": "8671/solution_8671.kt", "Qwen2.5-Coder-7B-Instruct": "object Solution_8671Kt {\n    fun calculateAverageSpeed(distance: Double, time: Double): Double {\n        return distance / time\n    }\n}"}
{"kt_path": "5601/solution_5601.kt", "Qwen2.5-Coder-7B-Instruct": "object Solution_5601Kt {\n    fun calculateCircuitPower(voltage: Double, current: Double): Double {\n        val power = voltage * current\n        return power\n    }\n}"}
{"kt_path": "10329/solution_10329.kt", "Qwen2.5-Coder-7B-Instruct": "object Solution_10329Kt {\n    fun calculateResistance(a: Double, b: Double): Double {\n        return a / b\n    }\n}"}
{"kt_path": "n81ur3__kotlin-coding-challenges__fdc5941/src/main/kotlin/adventofcode2020/Day19MonsterMessage.kt", "Qwen2.5-Coder-7B-Instruct": "package adventofcode2020\n\nfinal class Day19MonsterMessage {\n    constructor()\n}"}
{"kt_path": "n81ur3__kotlin-coding-challenges__fdc5941/src/main/kotlin/adventofcode2020/Day07HandyHaversacks.kt", "Qwen2.5-Coder-7B-Instruct": "package adventofcode2020\n\nclass Day07HandyHaversacks()"}
{"kt_path": "7007/solution_7007.kt", "Qwen2.5-Coder-7B-Instruct": "object Solution_7007Kt {\n    fun isLongFlight(distance: Int, maxDistance: Int): Boolean {\n        return distance > maxDistance\n    }\n}"}
{"kt_path": "3696/solution_3696.kt", "Qwen2.5-Coder-7B-Instruct": "fun findCommonArea(a: Float, b: Float, c: Float): Float {\n    val area1 = a * b\n    val area2 = c * c\n    return area1 * area2\n}"}
{"kt_path": "9314/solution_9314.kt", "Qwen2.5-Coder-7B-Instruct": "object Solution_9314Kt {\n    fun isEven(number: Int): Boolean {\n        return number % 2 == 0\n    }\n}"}
{"kt_path": "10577/solution_10577.kt", "Qwen2.5-Coder-7B-Instruct": "object Solution_10577Kt {\n    fun isEven(number: Int): Boolean {\n        return number % 2 == 0\n    }\n}"}
{"kt_path": "n81ur3__kotlin-coding-challenges__fdc5941/src/main/kotlin/adventofcode2018/Day06ChronalCoordinates.kt", "Qwen2.5-Coder-7B-Instruct": "package adventofcode2018\n\nclass Day06ChronalCoordinates()"}
{"kt_path": "7819/solution_7819.kt", "Qwen2.5-Coder-7B-Instruct": "fun calculatePowerConsumption(power: Double): Double {\n    val factor = 5\n    return power / factor\n}"}
{"kt_path": "8829/solution_8829.kt", "Qwen2.5-Coder-7B-Instruct": "fun calculateDailyCaloricNeeds(weight: Float, height: Float): Float {\n    val base = weight * 24f\n    return base * height\n}"}
{"kt_path": "6256/solution_6256.kt", "Qwen2.5-Coder-7B-Instruct": "fun notEqualNone(a: Int?, b: Int?): Boolean {\n    return (a != null) && (b != null)\n}"}
{"kt_path": "4238/solution_4238.kt", "Qwen2.5-Coder-7B-Instruct": "fun checkSpeedLimit(speed: Float, limit: Float): Boolean {\n    return speed > limit\n}"}
{"kt_path": "3868/solution_3868.kt", "Qwen2.5-Coder-7B-Instruct": "fun sumOfNumbers(a: Int, b: Int): Int {\n    val sum = a + b\n    return if (sum <= 10) sum else if (sum % 2 == 0) sum * 2 else sum\n}"}
{"kt_path": "5766/solution_5766.kt", "Qwen2.5-Coder-7B-Instruct": "fun shiftAndMultiplyAssignment(a: Int, b: Int): Int {\n    var result = a shl b\n    result = (result ushr b) * result\n    return result\n}"}
{"kt_path": "4304/solution_4304.kt", "Qwen2.5-Coder-7B-Instruct": "fun architectMath(a: Int, b: Int): Int {\n    val x = a * 2\n    val y = b + 1\n    return x + y\n}"}
{"kt_path": "alebedev__aoc2022__d6ba46b/src/main/kotlin/Map.kt", "Qwen2.5-Coder-7B-Instruct": "object AocMap {\n    fun solve() {\n        // Implementation of solve method\n    }\n}\n\nfun main() {\n    AocMap.solve()\n}\n\nfun main(args: Array<String>) {\n    main()\n}"}
{"kt_path": "7168/solution_7168.kt", "Qwen2.5-Coder-7B-Instruct": "fun multiplyAndModulo(a: Int, b: Int, m: Int): Int {\n    var result = a * b\n    result %= m\n    return result\n}"}
{"kt_path": "5304/solution_5304.kt", "Qwen2.5-Coder-7B-Instruct": "fun numberOfCircuits(a: Int, b: Int, c: Int): Int {\n    val quotient = a / b\n    var remainder = a % b\n    if (remainder > 0) {\n        quotient++\n    }\n    return quotient\n}"}
{"kt_path": "7099/solution_7099.kt", "Qwen2.5-Coder-7B-Instruct": "object Solution_7099Kt {\n    fun calculateDistance(x: Double, y: Double, z: Double): Double {\n        val result = (x * x + y * y + z * z) / 2.0\n        return result\n    }\n}"}
{"kt_path": "8138/solution_8138.kt", "Qwen2.5-Coder-7B-Instruct": "fun athletePoints(points: Int, isGoldMedalist: Boolean, isSilverMedalist: Boolean): Int {\n    return if (points > 0) points + 3 else if (isSilverMedalist) points + 1 else points\n}"}
{"kt_path": "6625/solution_6625.kt", "Qwen2.5-Coder-7B-Instruct": "fun calculateCutLength(length: Float, width: Int): Float {\n    val adjustedWidth = (width - 1).toFloat()\n    val cutLength = length * adjustedWidth\n    return cutLength / width.toFloat()\n}"}
{"kt_path": "14820/solution_14820.kt", "Qwen2.5-Coder-7B-Instruct": "fun positiveIntegersSum(n: Int): Int {\n    var sum = 0\n    var i = 1\n    while (i <= n) {\n        sum += i\n        i++\n    }\n    return sum\n}"}
{"kt_path": "3808/solution_3808.kt", "Qwen2.5-Coder-7B-Instruct": "fun countNegative(a: Int, b: Int): Int {\n    var count = 0\n    var i = a\n    while (i <= b) {\n        if (i < 0) {\n            count++\n        }\n        i++\n    }\n    return count\n}"}
{"kt_path": "677/solution_677.kt", "Qwen2.5-Coder-7B-Instruct": "fun modulusComplexNumbers(a: Float, b: Float): Float {\n    val realPart = a * a + b * b\n    return Math.sqrt(realPart.toDouble()).toFloat()\n}"}
{"kt_path": "1838/solution_1838.kt", "Qwen2.5-Coder-7B-Instruct": "fun calculateSum(n: Int): Int {\n    var sum = 0\n    var i = 1\n    while (i <= n) {\n        sum += i\n        i++\n    }\n    return sum\n}"}
{"kt_path": "3178/solution_3178.kt", "Qwen2.5-Coder-7B-Instruct": "fun graphicDesignerSalary(salary: Int): Int {\n    return if (salary < 1) 0 else 2500 + (salary - 1) * 500\n}"}
{"kt_path": "9504/solution_9504.kt", "Qwen2.5-Coder-7B-Instruct": "fun checkPrimeNumbers(n: Int): Boolean {\n    var i = 2\n    while (i < n) {\n        if (n % i == 0) {\n            return false\n        }\n        i++\n    }\n    return true\n}"}
{"kt_path": "5182/solution_5182.kt", "Qwen2.5-Coder-7B-Instruct": "fun checkDivisible(number: Int): Boolean {\n    var divisor = 2\n    while (divisor <= 11) {\n        if (number % divisor != 0) {\n            return false\n        }\n        divisor++\n    }\n    return true\n}"}
{"kt_path": "7650/solution_7650.kt", "Qwen2.5-Coder-7B-Instruct": "fun sumOfSquares(n: Int): Int {\n    var sum = 0\n    var i = 1\n    while (i <= n) {\n        sum += i * i\n        i++\n    }\n    return sum\n}"}
{"kt_path": "6824/solution_6824.kt", "Qwen2.5-Coder-7B-Instruct": "fun calculateScore(a: Int, b: Int): Int {\n    val result = a * 10 - b * 5\n    return if (b * 3 > a) -1 else result\n}"}
{"kt_path": "1825/solution_1825.kt", "Qwen2.5-Coder-7B-Instruct": "fun calculateCarpenterSalary(hoursWorked: Int, hourlyRate: Double, bonus: Double): Double {\n    val salary = (hoursWorked * hourlyRate + hoursWorked * hourlyRate * bonus / 100)\n    return salary\n}"}
{"kt_path": "1332/solution_1332.kt", "Qwen2.5-Coder-7B-Instruct": "fun extinguishFire(fireSize: Double): Int {\n    var count = 0\n    var size = fireSize\n    while (size > 0) {\n        size /= 2\n        count++\n    }\n    return count\n}"}
{"kt_path": "10817/solution_10817.kt", "Qwen2.5-Coder-7B-Instruct": "fun maxOfThree(a: Int, b: Int, c: Int): Int {\n    return when {\n        a >= b && a >= c -> a\n        b >= a && b >= c -> b\n        else -> c\n    }\n}"}
{"kt_path": "11536/solution_11536.kt", "Qwen2.5-Coder-7B-Instruct": "fun isFloat(value: Any): Boolean {\n    checkNotNull(value) { \"value\" }\n    return value is Float\n}"}
{"kt_path": "13694/solution_13694.kt", "Qwen2.5-Coder-7B-Instruct": "fun calculateCarpenterSalary(hoursWorked: Int, hourlyRate: Double, deductions: Double): Double {\n    val grossPay = hoursWorked.toDouble() * hourlyRate\n    val netPay = grossPay - (grossPay * deductions)\n    return netPay\n}"}
{"kt_path": "7127/solution_7127.kt", "Qwen2.5-Coder-7B-Instruct": "fun checkInteger(obj: Any): Boolean {\n    requireNotNull(obj) { \"number\" }\n    return obj is Int\n}"}
{"kt_path": "7144/solution_7144.kt", "Qwen2.5-Coder-7B-Instruct": "fun identityComparisonAndFloatingPointOperations(a: Double, b: Double): Boolean {\n    val difference = Math.abs(a - b)\n    return difference < 0.01\n}"}
{"kt_path": "8240/solution_8240.kt", "Qwen2.5-Coder-7B-Instruct": "fun calculateFactorial(n: Int): Int {\n    var result = 1\n    var i = 1\n    while (i <= n) {\n        result *= i\n        i++\n    }\n    return result\n}"}
{"kt_path": "2140/solution_2140.kt", "Qwen2.5-Coder-7B-Instruct": "fun commissionCalculator(amount: Double, rate: Double, threshold: Double): Double {\n    var commission = 0.0\n    if (amount < 0) return commission\n    if (rate > 0) {\n        commission = amount * rate\n    }\n    return commission\n}"}
{"kt_path": "14315/solution_14315.kt", "Qwen2.5-Coder-7B-Instruct": "fun sumPositiveIntegers(n: Int): Int {\n    var sum = 0\n    var i = 1\n    while (i <= n) {\n        sum += i\n        i++\n    }\n    return sum\n}"}
{"kt_path": "2523/solution_2523.kt", "Qwen2.5-Coder-7B-Instruct": "fun sumEvenNumbers(start: Int, end: Int): Int {\n    var sum = 0\n    var current = start\n    while (current <= end) {\n        if (current % 2 == 0) {\n            sum += current\n        }\n        current++\n    }\n    return sum\n}"}
{"kt_path": "918/solution_918.kt", "Qwen2.5-Coder-7B-Instruct": "fun checkBudget(budget: Int): String {\n    val requiredBudget = 4000\n    return if (budget >= requiredBudget) {\n        \"Budget is sufficient for the marketing campaign.\"\n    } else {\n        \"Insufficient budget, please allocate more funds for the campaign.\"\n    }\n}"}
{"kt_path": "10520/solution_10520.kt", "Qwen2.5-Coder-7B-Instruct": "fun sumOfEvenNumbers(start: Int, end: Int): Int {\n    var sum = 0\n    var current = start\n    while (current <= end) {\n        if (current % 2 == 0) {\n            sum += current\n        }\n        current++\n    }\n    return sum\n}"}
{"kt_path": "6399/solution_6399.kt", "Qwen2.5-Coder-7B-Instruct": "fun checkPercentage(percentage: Int): String {\n    return when {\n        percentage < 95 -> \"Outside acceptable range\"\n        percentage > 98 -> \"Outside acceptable range\"\n        else -> \"Within acceptable range\"\n    }\n}"}
{"kt_path": "10731/solution_10731.kt", "Qwen2.5-Coder-7B-Instruct": "fun checkEligibility(age: Int, income: Int, yearsOfExperience: Int): String {\n    return when {\n        age < 18 -> \"Not Eligible\"\n        income < 5 -> \"Not Eligible\"\n        yearsOfExperience < 2 -> \"Not Eligible\"\n        else -> \"Eligible\"\n    }\n}"}
{"kt_path": "8756/solution_8756.kt", "Qwen2.5-Coder-7B-Instruct": "fun findMax(a: Int, b: Int, c: Int): Int {\n    var max = a\n    if (b > max) {\n        max = b\n    }\n    if (c > max) {\n        max = c\n    }\n    return max\n}"}
{"kt_path": "10964/solution_10964.kt", "Qwen2.5-Coder-7B-Instruct": "fun calculateInvestmentGrowth(principal: Double, rate: Double, years: Int): Double {\n    var amount = principal\n    var year = years\n    while (year > 0) {\n        amount += amount * rate / 100\n        year--\n    }\n    return amount\n}"}
{"kt_path": "9201/solution_9201.kt", "Qwen2.5-Coder-7B-Instruct": "fun isCloseToZero(a: Double, b: Double): Boolean {\n    return if (a == 0.0) true else if (b == 0.0) Math.abs(a) < b else Math.abs(a - b) < b\n}"}
{"kt_path": "14784/solution_14784.kt", "Qwen2.5-Coder-7B-Instruct": "fun sumOfMultiples(a: Int, b: Int, limit: Int): Int {\n    var sum = 0\n    var i = a\n    while (i < limit) {\n        if (i % b == 0) {\n            sum += i\n        }\n        i++\n    }\n    return sum\n}"}
{"kt_path": "12550/solution_12550.kt", "Qwen2.5-Coder-7B-Instruct": "fun checkGameConditions(a: Int, b: Int, c: Int, d: Boolean): Boolean {\n    return if (a > 1000 && b > 50 && c >= 10 && d) true else false\n}"}
{"kt_path": "2717/solution_2717.kt", "Qwen2.5-Coder-7B-Instruct": "fun getFirstElement(lst: List<*>): Any? {\n    checkNotNull(lst) { \"lst\" }\n    return lst[0]\n}"}
{"kt_path": "10259/solution_10259.kt", "Qwen2.5-Coder-7B-Instruct": "fun calculateTotalPrice(price: Float, discount: Float): Float {\n    val epsilon = 1.0e-4f\n    val absPrice = Math.abs(price)\n    return if (absPrice > epsilon) {\n        price * (1 - discount)\n    } else {\n        price\n    }\n}"}
{"kt_path": "1510/solution_1510.kt", "Qwen2.5-Coder-7B-Instruct": "fun getLastElement(lst: List<*>): Any? {\n    checkNotNull(lst) { \"lst\" }\n    return lst.last()\n}"}
{"kt_path": "2099/solution_2099.kt", "Qwen2.5-Coder-7B-Instruct": "fun calculateTotalDistance(distance: Float, steps: Float): Float {\n    var totalDistance = 0f\n    var stepCount = 1\n    while (stepCount <= steps.toInt()) {\n        totalDistance += distance\n        if (stepCount == steps.toInt()) break\n        stepCount++\n    }\n    return totalDistance\n}"}
{"kt_path": "9202/solution_9202.kt", "Qwen2.5-Coder-7B-Instruct": "fun hasSignificantDecimalPart(a: Double, b: Double): Boolean {\n    val absA = Math.abs(a)\n    val intPartA = Math.abs(a.toInt().toDouble())\n    val decimalPartA = absA - intPartA\n    return decimalPartA > b\n}"}
{"kt_path": "9289/solution_9289.kt", "Qwen2.5-Coder-7B-Instruct": "fun sliceTuple(list: List<*>, start: Int, end: Int): List<Any> {\n    checkNotNull(list) { \"t\" }\n    return list.subList(start, end)\n}"}
{"kt_path": "222/solution_222.kt", "Qwen2.5-Coder-7B-Instruct": "fun calculateProfit(costPrice: Double, sellingPrice: Double, taxRate: Double): Double {\n    val profit = sellingPrice - costPrice\n    return if (profit > 0) profit else -profit * (1 + taxRate)\n}"}
{"kt_path": "2704/solution_2704.kt", "Qwen2.5-Coder-7B-Instruct": "object Solution_2704Kt {\n    @JvmStatic\n    fun calculateSum(): Double {\n        var sum = 0.0\n        var value = 0.1\n\n        while (sum < 1000.0) {\n            sum += value\n            value += 0.01\n        }\n\n        return sum\n    }\n}"}
{"kt_path": "7036/solution_7036.kt", "Qwen2.5-Coder-7B-Instruct": "fun calculateExpenses(expensesList: List<Double>): Double {\n    requireNotNull(expensesList) { \"expensesList\" }\n    return expensesList.sumOf { it }\n}"}
{"kt_path": "7097/solution_7097.kt", "Qwen2.5-Coder-7B-Instruct": "fun findAnimal(animalTuple: List<String>, index: Int): String {\n    requireNotNull(animalTuple) { \"animalTuple\" }\n    return animalTuple[index]\n}"}
{"kt_path": "6743/solution_6743.kt", "Qwen2.5-Coder-7B-Instruct": "fun toSet(list: List<Int>): Set<Int> {\n    requireNotNull(list) { \"data\" }\n    return list.toSet()\n}"}
{"kt_path": "14646/solution_14646.kt", "Qwen2.5-Coder-7B-Instruct": "fun checkPromotionEligibility(age: Int, salary: Double): Boolean {\n    return when {\n        age > 25 && age < 41 -> true\n        else -> false\n    } && (salary >= 5000.0)\n}"}
{"kt_path": "1671/solution_1671.kt", "Qwen2.5-Coder-7B-Instruct": "import kotlin.jvm.internal.Intrinsics\nimport kotlin.collections.MapsKt\n\nfun createTupleFromDictionary(dictionary: Map<String, Any?>): List<Pair<String, Any?>> {\n    Intrinsics.checkNotNullParameter(dictionary, \"dictionary\")\n    return MapsKt.toList(dictionary)\n}"}
{"kt_path": "13442/solution_13442.kt", "Qwen2.5-Coder-7B-Instruct": "fun printEvenNumbers(start: Int, end: Int) {\n    var num = start\n    while (num <= end) {\n        if (num % 2 == 0) {\n            println(num)\n        }\n        num++\n    }\n}"}
{"kt_path": "13338/solution_13338.kt", "Qwen2.5-Coder-7B-Instruct": "fun convertToSet(photoData: List<String>): Set<String> {\n    requireNotNull(photoData) { \"photoData\" }\n    return photoData.toSet()\n}"}
{"kt_path": "8409/solution_8409.kt", "Qwen2.5-Coder-7B-Instruct": "fun calculateTotalCost(price: Double, quantity: Double): Double {\n    val total = price * quantity\n    val discount = if (price > 1000.0) total * 0.1 else 0.0\n    return total - discount\n}"}
{"kt_path": "5263/solution_5263.kt", "Qwen2.5-Coder-7B-Instruct": "fun operationsQuiz(a: Boolean, b: Boolean, c: Boolean, d: Boolean): Boolean {\n    var count = 0\n    if (a) count++\n    if (b) count++\n    if (c) count++\n    if (d) count++\n    return count >= 2\n}"}
{"kt_path": "7005/solution_7005.kt", "Qwen2.5-Coder-7B-Instruct": "fun convertSetToList(set: Set<*>): List<Any> {\n    requireNotNull(set) { \"s\" }\n    return set.toList()\n}"}
{"kt_path": "7004/solution_7004.kt", "Qwen2.5-Coder-7B-Instruct": "fun convertListToSet(lst: List<*>): Set<Any?> {\n    kotlin.jvm.internal.Intrinsics.checkNotNullParameter(lst, \"lst\")\n    return lst.toSet()\n}"}
{"kt_path": "1559/solution_1559.kt", "Qwen2.5-Coder-7B-Instruct": "fun convertToSet(gameData: Iterable<Any>): Set<Any> {\n    requireNotNull(gameData) { \"gameData\" }\n    return gameData.toSet()\n}"}
{"kt_path": "14689/solution_14689.kt", "Qwen2.5-Coder-7B-Instruct": "fun printOddNumbers(n: Int) {\n    var i = 1\n    while (i <= n) {\n        if (i % 2 != 0) {\n            println(i)\n        }\n        i++\n    }\n}"}
{"kt_path": "13400/solution_13400.kt", "Qwen2.5-Coder-7B-Instruct": "fun findBiggerNumber(a: Int, b: Int, c: Int, d: Int): Int {\n    val maxAB = if (a > b) a else b\n    val maxCD = if (c > d) c else d\n    return if (maxAB > maxCD) maxAB else maxCD\n}"}
{"kt_path": "9661/solution_9661.kt", "Qwen2.5-Coder-7B-Instruct": "fun calculateSums(n: Int): Int {\n    var sum = 0\n    var i = 1\n    while (i <= n) {\n        if (i % 5 != 0 && i % 7 != 0 && i % 35 == 0) {\n            sum += i\n        }\n        i++\n    }\n    return sum\n}"}
{"kt_path": "8323/solution_8323.kt", "Qwen2.5-Coder-7B-Instruct": "fun calculateRemainingBooks(a: Int, b: Int, c: Int): Int {\n    var result = 0\n    result = a\n    result /= b\n    var i = 0\n    while (i < c) {\n        val temp = result\n        result *= 3\n        i++\n    }\n    return result\n}"}
{"kt_path": "236/solution_236.kt", "Qwen2.5-Coder-7B-Instruct": "fun computeFloorArea(length: Float, width: Float): Any {\n    return if (length <= 0) {\n        \"Invalid length\"\n    } else if (width <= 0) {\n        \"Invalid width\"\n    } else {\n        Float.valueOf(length * width)\n    }\n}"}
{"kt_path": "14771/solution_14771.kt", "Qwen2.5-Coder-7B-Instruct": "fun indexingAndSlicingTuples(list: List<String>, index: Int): List<String> {\n    checkNotNull(list) { \"list\" }\n    return list.subList(index, list.size)\n}"}
{"kt_path": "9943/solution_9943.kt", "Qwen2.5-Coder-7B-Instruct": "fun addNegIntegersToSet(numbers: List<Int>): Set<Int> {\n    requireNotNull(numbers) { \"numbers\" }\n    return numbers.toSet()\n}"}
{"kt_path": "8713/solution_8713.kt", "Qwen2.5-Coder-7B-Instruct": "fun accessImaginaryPart(complexNumber: Pair<Double, Double>): Double {\n    requireNotNull(complexNumber) { \"complexNumber\" }\n    return complexNumber.second.toDouble()\n}"}
{"kt_path": "3773/solution_3773.kt", "Qwen2.5-Coder-7B-Instruct": "fun calculateSocialWorkerSalary(baseSalary: Double, experienceYears: Int): Double {\n    return when (experienceYears) {\n        in 10..Int.MAX_VALUE -> baseSalary\n        in 5 until 10 -> baseSalary * 1.5\n        in 2 until 5 -> baseSalary * 2.0\n        else -> baseSalary * 3.0\n    }\n}"}
{"kt_path": "11/solution_11.kt", "Qwen2.5-Coder-7B-Instruct": "fun checkOddEvenNumbers(a: Int, b: Int, c: Int): Boolean {\n    var count = 0\n    if (a % 2 == 1) count++\n    if (b % 2 == 1) count++\n    if (c % 2 == 1) count++\n    return count == 2\n}"}
{"kt_path": "1118/solution_1118.kt", "Qwen2.5-Coder-7B-Instruct": "fun createEmptyComplementList(s: String): List<Any> {\n    kotlin.jvm.internal.Intrinsics.checkNotNullParameter(s, \"nurse\")\n    return ArrayList()\n}"}
{"kt_path": "8385/solution_8385.kt", "Qwen2.5-Coder-7B-Instruct": "object Solution_8385Kt {\n    fun isPrime(n: Int): Boolean {\n        if (n <= 1) return false\n        var i = 2\n        val sqrtN = Math.sqrt(n.toDouble()).toInt()\n        while (i <= sqrtN) {\n            if (n % i == 0) return false\n            i++\n        }\n        return true\n    }\n}"}
{"kt_path": "14396/solution_14396.kt", "Qwen2.5-Coder-7B-Instruct": "fun extractCoordinates(coordinatesList: List<Triple<Int, Int, Int>>): Triple<Int, Int, Int> {\n    requireNotNull(coordinatesList) { \"coordinatesList\" }\n    return coordinatesList[0]\n}"}
{"kt_path": "5828/solution_5828.kt", "Qwen2.5-Coder-7B-Instruct": "fun calculatePaintCansNeeded(wallAreas: List<Double>, coveragePerCan: Double): Int {\n    val totalArea = wallAreas.sumOf { it }\n    return (totalArea / coveragePerCan).toInt()\n}"}
