{"kt_path": "7824/solution_7824.kt", "CodeLlama-7b-Instruct-hf": "fun testCountOddNumbers() {\n    // TODO\n}"}
{"kt_path": "remisultan__multiarm-bandit-algorithm-kotlin__ead934d/core-bandit/src/main/kotlin/org/rsultan/bandit/algorithms/BanditAlgorithm.kt", "CodeLlama-7b-Instruct-hf": "interface BanditAlgorithm {\n    fun selectArm(): Int\n    fun update(arm: Int, reward: Float)\n}"}
{"kt_path": "13864/solution_13864.kt", "CodeLlama-7b-Instruct-hf": "fun calculateScore(a: Int, b: Int): Int {\n    return a * b\n}"}
{"kt_path": "9763/solution_9763.kt", "CodeLlama-7b-Instruct-hf": "fun calculateFinalPrice(price: Double, discount: Double): Double {\n    return price - discount\n}"}
{"kt_path": "8545/solution_8545.kt", "CodeLlama-7b-Instruct-hf": "fun calculateConversionRate(a: Int, b: Int): Double {\n    return 0.0\n}"}
{"kt_path": "13968/solution_13968.kt", "CodeLlama-7b-Instruct-hf": "fun athletePerformanceDistance(distance: Double, time: Double): Double {\n    return distance / time\n}"}
{"kt_path": "14509/solution_14509.kt", "CodeLlama-7b-Instruct-hf": "fun calculateRoomArea(length: Int, width: Int): Int {\n    val area = length * width\n    return area\n}"}
{"kt_path": "7670/solution_7670.kt", "CodeLlama-7b-Instruct-hf": "fun identityAssignment(): Boolean {\n    var a = 5\n    var b = a\n    return b == 1\n}"}
{"kt_path": "224/solution_224.kt", "CodeLlama-7b-Instruct-hf": "fun calculateSalary(salary: Double): Long {\n    return Math.round(salary)\n}"}
{"kt_path": "11310/solution_11310.kt", "CodeLlama-7b-Instruct-hf": "fun calculateExpenses(days: Int, expenses: Float): Float {\n    val totalExpenses = days.toFloat() * expenses\n    return totalExpenses\n}"}
{"kt_path": "10330/solution_10330.kt", "CodeLlama-7b-Instruct-hf": "fun calculatePower(base: Double, exponent: Double): Double {\n    var result = base * exponent\n    return result\n}"}
{"kt_path": "11101/solution_11101.kt", "CodeLlama-7b-Instruct-hf": "fun checkPositiveInteger(n: Int): Boolean {\n    return if (n <= 0) false else true\n}"}
{"kt_path": "432/solution_432.kt", "CodeLlama-7b-Instruct-hf": "fun calculateResistance(resistance: Double, current: Double): Double {\n    return resistance / current\n}"}
{"kt_path": "n81ur3__kotlin-coding-challenges__fdc5941/src/main/kotlin/adventofcode2018/Day04ReposeRecord.kt", "CodeLlama-7b-Instruct-hf": "class Day04ReposeRecord {\n    constructor()\n}"}
{"kt_path": "8671/solution_8671.kt", "CodeLlama-7b-Instruct-hf": "fun calculateAverageSpeed(speed: Double, time: Double): Double {\n    val averageSpeed = speed / time\n    return averageSpeed\n}"}
{"kt_path": "5601/solution_5601.kt", "CodeLlama-7b-Instruct-hf": "fun calculateCircuitPower(voltage: Double, current: Double): Double {\n    return voltage * current\n}"}
{"kt_path": "10329/solution_10329.kt", "CodeLlama-7b-Instruct-hf": "fun calculateResistance(resistance: Double, current: Double): Double {\n    return resistance / current\n}"}
{"kt_path": "n81ur3__kotlin-coding-challenges__fdc5941/src/main/kotlin/adventofcode2020/Day19MonsterMessage.kt", "CodeLlama-7b-Instruct-hf": "class Day19MonsterMessage {\n    constructor()\n}"}
{"kt_path": "n81ur3__kotlin-coding-challenges__fdc5941/src/main/kotlin/adventofcode2020/Day07HandyHaversacks.kt", "CodeLlama-7b-Instruct-hf": "class Day07HandyHaversacks {\n    constructor()\n}"}
{"kt_path": "7007/solution_7007.kt", "CodeLlama-7b-Instruct-hf": "fun isLongFlight(a: Int, b: Int): Boolean {\n    return if (a > b) true else false\n}"}
{"kt_path": "3696/solution_3696.kt", "CodeLlama-7b-Instruct-hf": "fun findCommonArea(a: Float, b: Float, c: Float): Float {\n    return a * b * c\n}"}
{"kt_path": "9314/solution_9314.kt", "CodeLlama-7b-Instruct-hf": "fun isEven(n: Int): Boolean {\n    return if (n % 2 == 0) true else false\n}"}
{"kt_path": "10577/solution_10577.kt", "CodeLlama-7b-Instruct-hf": "fun isEven(n: Int): Boolean {\n    return if (n % 2 == 0) true else false\n}"}
{"kt_path": "n81ur3__kotlin-coding-challenges__fdc5941/src/main/kotlin/adventofcode2018/Day06ChronalCoordinates.kt", "CodeLlama-7b-Instruct-hf": "class Day06ChronalCoordinates {\n    constructor()\n}"}
{"kt_path": "7819/solution_7819.kt", "CodeLlama-7b-Instruct-hf": "fun calculatePowerConsumption(power: Double): Double {\n    var i = 5\n    var d = power / i\n    return d\n}"}
{"kt_path": "8829/solution_8829.kt", "CodeLlama-7b-Instruct-hf": "fun calculateDailyCaloricNeeds(weight: Float, height: Float): Float {\n    val dailyCaloricNeeds = (weight * 24).toFloat()\n    return dailyCaloricNeeds * height\n}"}
{"kt_path": "6256/solution_6256.kt", "CodeLlama-7b-Instruct-hf": "fun notEqualNone(a: Int?, b: Int?): Boolean {\n    if (a != null && b != null) return true\n    return false\n}"}
{"kt_path": "4238/solution_4238.kt", "CodeLlama-7b-Instruct-hf": "fun checkSpeedLimit(speed: Float, limit: Float): Boolean {\n    return if (speed <= limit) true else false\n}"}
{"kt_path": "3868/solution_3868.kt", "CodeLlama-7b-Instruct-hf": "fun sumOfNumbers(a: Int, b: Int): Int {\n    var sum = a + b\n    if (sum < 10) {\n        sum *= 2\n    }\n    return sum\n}"}
{"kt_path": "5766/solution_5766.kt", "CodeLlama-7b-Instruct-hf": "fun shiftAndMultiplyAssignment(a: Int, b: Int): Int {\n    var c = a shl b\n    var d = a ushr b\n    d = d * c\n    return d\n}"}
{"kt_path": "4304/solution_4304.kt", "CodeLlama-7b-Instruct-hf": "fun architectMath(a: Int, b: Int): Int {\n    val c = a * 2\n    val d = a + b\n    val e = c + d\n    return e\n}"}
{"kt_path": "alebedev__aoc2022__d6ba46b/src/main/kotlin/Map.kt", "CodeLlama-7b-Instruct-hf": "class Map {\n    companion object {\n        @JvmStatic\n        fun main(args: Array<String>) {\n            AocMap.INSTANCE.solve()\n        }\n    }\n}"}
{"kt_path": "7168/solution_7168.kt", "CodeLlama-7b-Instruct-hf": "fun multiplyAndModulo(a: Int, b: Int, c: Int, d: Int): Int {\n    val result = a * b\n    val remainder = result % c\n    val finalResult = remainder % d\n    return finalResult\n}"}
{"kt_path": "5304/solution_5304.kt", "CodeLlama-7b-Instruct-hf": "fun numberOfCircuits(n: Int, k: Int, m: Int): Int {\n    var count = 0\n    var remainder = n % k\n    if (remainder != 0) {\n        count++\n    }\n    return count\n}"}
{"kt_path": "7099/solution_7099.kt", "CodeLlama-7b-Instruct-hf": "fun calculateDistance(x1: Double, y1: Double, x2: Double, y2: Double): Double {\n    val distance = (x2 - x1) * (x2 - x1) + (y2 - y1) * (y2 - y1)\n    return Math.sqrt(distance)\n}"}
{"kt_path": "8138/solution_8138.kt", "CodeLlama-7b-Instruct-hf": "fun athletePoints(athletePoints: Int, isMarathon: Boolean, isLongJump: Boolean): Int {\n    return if (isMarathon) {\n        if (isLongJump) {\n            athletePoints + 3\n        } else {\n            athletePoints + 1\n        }\n    } else {\n        athletePoints\n    }\n}"}
{"kt_path": "6625/solution_6625.kt", "CodeLlama-7b-Instruct-hf": "fun calculateCutLength(length: Float, width: Float, n: Int): Float {\n    val cutLength = (length - width) / n\n    val totalArea = length * width\n    val cutArea = cutLength * width\n    return (totalArea - cutArea) / n\n}"}
{"kt_path": "14820/solution_14820.kt", "CodeLlama-7b-Instruct-hf": "fun positiveIntegersSum(n: Int): Int {\n    var sum = 0\n    var i = 1\n    while (i <= n) {\n        sum += i\n        i++\n    }\n    return sum\n}"}
{"kt_path": "3808/solution_3808.kt", "CodeLlama-7b-Instruct-hf": "fun countNegative(a: Int, b: Int): Int {\n    var count = 0\n    var i = a\n    while (i <= b) {\n        if (i < 0) count++\n        i++\n    }\n    return count\n}"}
{"kt_path": "677/solution_677.kt", "CodeLlama-7b-Instruct-hf": "fun modulusComplexNumbers(a: Float, b: Float): Float {\n    val result = a * b\n    val sqrt = Math.sqrt(result.toDouble())\n    return sqrt.toFloat()\n}"}
{"kt_path": "1838/solution_1838.kt", "CodeLlama-7b-Instruct-hf": "fun calculateSum(n: Int): Int {\n    var sum = 0\n    var i = 1\n    while (i <= n) {\n        sum += i\n        i++\n    }\n    return sum\n}"}
{"kt_path": "3178/solution_3178.kt", "CodeLlama-7b-Instruct-hf": "fun graphicDesignerSalary(hours: Int): Int {\n    var result = 0\n    if (hours > 1) {\n        result = 2500\n    } else {\n        result = 0\n    }\n    result += hours * 500\n    return result\n}"}
{"kt_path": "9504/solution_9504.kt", "CodeLlama-7b-Instruct-hf": "fun checkPrimeNumbers(n: Int): Boolean {\n    var i = 2\n    while (i <= n) {\n        if (n % i != 0) {\n            return false\n        }\n        i++\n    }\n    return true\n}"}
{"kt_path": "5182/solution_5182.kt", "CodeLlama-7b-Instruct-hf": "fun checkDivisible(n: Int): Boolean {\n    var i = 2\n    while (i <= 11) {\n        if (n % i != 0) {\n            i++\n            continue\n        }\n        return false\n    }\n    return true\n}"}
{"kt_path": "7650/solution_7650.kt", "CodeLlama-7b-Instruct-hf": "fun sumOfSquares(n: Int): Int {\n    var sum = 0\n    var i = 1\n    while (i <= n) {\n        sum += i * i\n        i++\n    }\n    return sum\n}"}
{"kt_path": "6824/solution_6824.kt", "CodeLlama-7b-Instruct-hf": "fun calculateScore(a: Int, b: Int): Int {\n    val score = a * 10 - b * 5\n    return if (b * 3 < a) -1 else score\n}"}
{"kt_path": "1825/solution_1825.kt", "CodeLlama-7b-Instruct-hf": "fun calculateCarpenterSalary(hours: Int, hourlyRate: Double, overtimeRate: Double): Double {\n    val regularPay = hours * hourlyRate\n    val overtimePay = hours * overtimeRate\n    val totalPay = regularPay + overtimePay\n    val tax = totalPay * 0.10\n    val netPay = totalPay - tax\n    return netPay\n}"}
{"kt_path": "1332/solution_1332.kt", "CodeLlama-7b-Instruct-hf": "fun extinguishFire(fire: Double): Int {\n    var water = 0\n    var fireLeft = fire\n    while (fireLeft > 0.0) {\n        fireLeft /= 2.0\n        water++\n    }\n    return water\n}"}
{"kt_path": "10817/solution_10817.kt", "CodeLlama-7b-Instruct-hf": "fun maxOfThree(a: Int, b: Int, c: Int): Int {\n    return if (a > b) {\n        if (a > c) a else c\n    } else {\n        if (b > c) b else c\n    }\n}"}
{"kt_path": "11536/solution_11536.kt", "CodeLlama-7b-Instruct-hf": "fun isFloat(value: Any?): Boolean {\n    value ?: throw IllegalArgumentException(\"value is null\")\n    return value is Float\n}"}
{"kt_path": "13694/solution_13694.kt", "CodeLlama-7b-Instruct-hf": "fun calculateCarpenterSalary(hours: Int, hourlyRate: Double, overtimeRate: Double): Double {\n    var salary = hours.toDouble() * hourlyRate\n    var overtime = salary * overtimeRate\n    var total = salary - overtime\n    return total\n}"}
{"kt_path": "7127/solution_7127.kt", "CodeLlama-7b-Instruct-hf": "fun checkInteger(obj: Any?): Boolean {\n    requireNotNull(obj) { \"number\" }\n    return obj is Integer\n}"}
{"kt_path": "7144/solution_7144.kt", "CodeLlama-7b-Instruct-hf": "fun identityComparisonAndFloatingPointOperations(a: Double, b: Double): Boolean {\n    val abs = Math.abs(a - b)\n    return if (abs < 0.01) true else false\n}"}
{"kt_path": "8240/solution_8240.kt", "CodeLlama-7b-Instruct-hf": "fun calculateFactorial(n: Int): Int {\n    var result = 1\n    var i = 1\n    while (i <= n) {\n        result *= i\n        i++\n    }\n    return result\n}"}
{"kt_path": "2140/solution_2140.kt", "CodeLlama-7b-Instruct-hf": "fun commissionCalculator(sale: Double, rate: Double, threshold: Double): Double {\n    var commission = 0.0\n    if (sale < threshold) {\n        commission = sale * rate\n    } else {\n        commission = sale\n    }\n    return commission\n}"}
{"kt_path": "14315/solution_14315.kt", "CodeLlama-7b-Instruct-hf": "fun sumPositiveIntegers(n: Int): Int {\n    var sum = 0\n    var i = 1\n    while (i <= n) {\n        sum += i\n        i++\n    }\n    return sum\n}"}
{"kt_path": "2523/solution_2523.kt", "CodeLlama-7b-Instruct-hf": "fun sumEvenNumbers(start: Int, end: Int): Int {\n    var sum = 0\n    for (i in start..end) {\n        if (i % 2 == 0) {\n            sum += i\n        }\n    }\n    return sum\n}"}
{"kt_path": "918/solution_918.kt", "CodeLlama-7b-Instruct-hf": "fun checkBudget(budget: Int): String {\n    if (budget < 4000) {\n        return \"Insufficient budget, please allocate more funds for the campaign.\"\n    }\n    return \"Budget is sufficient for the marketing campaign.\"\n}"}
{"kt_path": "10520/solution_10520.kt", "CodeLlama-7b-Instruct-hf": "fun sumOfEvenNumbers(start: Int, end: Int): Int {\n    var sum = 0\n    for (i in start..end) {\n        if (i % 2 == 0) {\n            sum += i\n        }\n    }\n    return sum\n}"}
{"kt_path": "6399/solution_6399.kt", "CodeLlama-7b-Instruct-hf": "fun checkPercentage(percentage: Int): String {\n    if (percentage < 95) {\n        return \"Within acceptable range\"\n    } else if (percentage > 98) {\n        return \"Outside acceptable range\"\n    }\n    return \"Within acceptable range\"\n}"}
{"kt_path": "10731/solution_10731.kt", "CodeLlama-7b-Instruct-hf": "fun checkEligibility(age: Int, income: Int, savings: Int): String {\n    if (age < 18) return \"Not Eligible\"\n    if (income < 5) return \"Not Eligible\"\n    if (savings < 2) return \"Not Eligible\"\n    return \"Eligible\"\n}"}
{"kt_path": "8756/solution_8756.kt", "CodeLlama-7b-Instruct-hf": "fun findMax(a: Int, b: Int, c: Int): Int {\n    var max = a\n    if (b > max) max = b\n    if (c > max) max = c\n    return max\n}"}
{"kt_path": "10964/solution_10964.kt", "CodeLlama-7b-Instruct-hf": "fun calculateInvestmentGrowth(initialInvestment: Double, annualReturnPercentage: Double, years: Int): Double {\n    var investment = initialInvestment\n    for (i in 1..years) {\n        investment = investment * (1 + annualReturnPercentage / 100)\n    }\n    return investment\n}"}
{"kt_path": "9201/solution_9201.kt", "CodeLlama-7b-Instruct-hf": "fun isCloseToZero(a: Double, eps: Double): Boolean {\n    return if (a == 0.0) true else if (Math.abs(a) < eps) true else false\n}"}
{"kt_path": "14784/solution_14784.kt", "CodeLlama-7b-Instruct-hf": "fun sumOfMultiples(a: Int, b: Int, c: Int): Int {\n    var sum = 0\n    for (i in 1..a) {\n        if (i % b != 0 && i % c != 0) continue\n        sum += i\n    }\n    return sum\n}"}
{"kt_path": "12550/solution_12550.kt", "CodeLlama-7b-Instruct-hf": "fun checkGameConditions(a: Int, b: Int, c: Int, d: Boolean): Boolean {\n    return if (a <= 1000 && b <= 50 && c >= 10 && d) {\n        true\n    } else {\n        false\n    }\n}"}
{"kt_path": "2717/solution_2717.kt", "CodeLlama-7b-Instruct-hf": "fun getFirstElement(lst: List<Any>): Any {\n    return lst.get(0)\n}"}
{"kt_path": "10259/solution_10259.kt", "CodeLlama-7b-Instruct-hf": "fun calculateTotalPrice(price: Float, discount: Float): Float {\n    val totalPrice = if (discount > 0) {\n        price - (price * discount)\n    } else {\n        price\n    }\n    return totalPrice\n}"}
{"kt_path": "1510/solution_1510.kt", "CodeLlama-7b-Instruct-hf": "fun getLastElement(lst: List<*>): Any {\n    return lst.last()\n}"}
{"kt_path": "2099/solution_2099.kt", "CodeLlama-7b-Instruct-hf": "fun calculateTotalDistance(distance: Float, speed: Float): Float {\n    var totalDistance = 0f\n    var currentSpeed = 1\n    while (currentSpeed <= distance) {\n        totalDistance += distance\n        currentSpeed++\n    }\n    return totalDistance\n}"}
{"kt_path": "9202/solution_9202.kt", "CodeLlama-7b-Instruct-hf": "fun hasSignificantDecimalPart(a: Double, b: Double): Boolean {\n    val absA = Math.abs(a)\n    val absB = Math.abs(b)\n    val diff = absA - absB\n    val diffAbs = Math.abs(diff)\n    val decimalPart = diffAbs - Math.floor(diffAbs)\n    return decimalPart > 0.0\n}"}
{"kt_path": "9289/solution_9289.kt", "CodeLlama-7b-Instruct-hf": "fun sliceTuple(tuple: List<Any>, start: Int, end: Int): List<Any> {\n    return tuple.subList(start, end)\n}"}
{"kt_path": "222/solution_222.kt", "CodeLlama-7b-Instruct-hf": "fun calculateProfit(initialPrice: Double, finalPrice: Double, quantity: Double): Double {\n    var profit = finalPrice - initialPrice\n    if (profit < 0) {\n        profit = -profit\n    }\n    profit *= quantity\n    return profit\n}"}
{"kt_path": "2704/solution_2704.kt", "CodeLlama-7b-Instruct-hf": "fun calculateSum(): Double {\n    var sum = 0.0\n    var i = 0.1\n    while (i < 1000.0) {\n        sum += i\n        i += 0.01\n    }\n    return sum\n}"}
{"kt_path": "7036/solution_7036.kt", "CodeLlama-7b-Instruct-hf": "fun calculateExpenses(expensesList: List<Double>): Double {\n    return expensesList.sumOfDouble()\n}"}
{"kt_path": "7097/solution_7097.kt", "CodeLlama-7b-Instruct-hf": "fun findAnimal(animalTuple: List<String>, index: Int): String {\n    return animalTuple.get(index)\n}"}
{"kt_path": "6743/solution_6743.kt", "CodeLlama-7b-Instruct-hf": "fun toSet(data: List<Int>): Set<Int> {\n    requireNotNull(data) { \"Parameter 'data' must not be null\" }\n    return data.toSet()\n}"}
{"kt_path": "14646/solution_14646.kt", "CodeLlama-7b-Instruct-hf": "fun checkPromotionEligibility(age: Int, salary: Double): Boolean {\n    if (age < 25) return false\n    if (age >= 41) return false\n    if (salary < 5000.0) return false\n    return true\n}"}
{"kt_path": "1671/solution_1671.kt", "CodeLlama-7b-Instruct-hf": "fun createTupleFromDictionary(dictionary: Map<String, Any>): List<Pair<String, Any>> {\n    return dictionary.toList()\n}"}
{"kt_path": "13442/solution_13442.kt", "CodeLlama-7b-Instruct-hf": "fun printEvenNumbers(start: Int, end: Int) {\n    for (i in start..end) {\n        if (i % 2 == 0) {\n            println(i)\n        }\n    }\n}"}
{"kt_path": "13338/solution_13338.kt", "CodeLlama-7b-Instruct-hf": "fun convertToSet(photoData: List<String>): Set<String> {\n    return photoData.toSet()\n}"}
{"kt_path": "8409/solution_8409.kt", "CodeLlama-7b-Instruct-hf": "fun calculateTotalCost(initialCost: Double, discount: Double): Double {\n    var totalCost = initialCost * discount\n    if (totalCost > 1000.0) {\n        totalCost = 0.1 * totalCost\n    }\n    var finalCost = totalCost - initialCost\n    return finalCost\n}"}
{"kt_path": "5263/solution_5263.kt", "CodeLlama-7b-Instruct-hf": "fun operationsQuiz(a: Boolean, b: Boolean, c: Boolean, d: Boolean): Boolean {\n    var count = 0\n    if (a) count++\n    if (b) count++\n    if (c) count++\n    if (d) count++\n    return count >= 2\n}"}
{"kt_path": "7005/solution_7005.kt", "CodeLlama-7b-Instruct-hf": "fun convertSetToList(s: Set<Any>): List<Any> = s.toList()"}
{"kt_path": "7004/solution_7004.kt", "CodeLlama-7b-Instruct-hf": "fun convertListToSet(lst: List<Any>): Set<Any> = lst.toSet()"}
{"kt_path": "1559/solution_1559.kt", "CodeLlama-7b-Instruct-hf": "fun convertToSet(gameData: List<Any>): Set<Any> {\n    requireNotNull(gameData) { \"Parameter 'gameData' must not be null\" }\n    return gameData.toSet()\n}"}
{"kt_path": "14689/solution_14689.kt", "CodeLlama-7b-Instruct-hf": "fun printOddNumbers(n: Int) {\n    var i = 1\n    while (i <= n) {\n        if (i % 2 != 0) {\n            println(i)\n        }\n        i++\n    }\n}"}
{"kt_path": "13400/solution_13400.kt", "CodeLlama-7b-Instruct-hf": "fun findBiggerNumber(a: Int, b: Int, c: Int, d: Int): Int {\n    var biggerNumber = a\n    if (b > a) {\n        biggerNumber = b\n    }\n    if (c > biggerNumber) {\n        biggerNumber = c\n    }\n    if (d > biggerNumber) {\n        biggerNumber = d\n    }\n    return biggerNumber\n}"}
{"kt_path": "9661/solution_9661.kt", "CodeLlama-7b-Instruct-hf": "fun calculateSums(n: Int): Int {\n    var sum = 0\n    var i = 1\n    while (i <= n) {\n        if (i % 5 == 0) {\n            if (i % 7 == 0) {\n                if (i % 35 == 0) {\n                    sum += i\n                }\n            }\n        }\n        i++\n    }\n    return sum\n}"}
{"kt_path": "8323/solution_8323.kt", "CodeLlama-7b-Instruct-hf": "fun calculateRemainingBooks(books: Int, taken: Int, limit: Int): Int {\n    var remainingBooks = 0\n    remainingBooks = books\n    remainingBooks /= limit\n    var i = 0\n    while (i < taken) {\n        val temp = remainingBooks\n        remainingBooks *= 3\n        i++\n    }\n    return remainingBooks\n}"}
{"kt_path": "236/solution_236.kt", "CodeLlama-7b-Instruct-hf": "fun computeFloorArea(length: Float, width: Float): Float {\n    if (length <= 0) {\n        return \"Invalid length\"\n    }\n    if (width <= 0) {\n        return \"Invalid width\"\n    }\n    return length * width\n}"}
{"kt_path": "14771/solution_14771.kt", "CodeLlama-7b-Instruct-hf": "fun indexingAndSlicingTuples(list: List<String>, index: Int): List<String> {\n    require(list.size > index) { \"Index $index is out of bounds for list of size ${list.size}\" }\n    return list.subList(index, list.size)\n}"}
{"kt_path": "9943/solution_9943.kt", "CodeLlama-7b-Instruct-hf": "fun addNegIntegersToSet(numbers: List<Int>): Set<Int> {\n    val set = numbers.toSet()\n    return set\n}"}
{"kt_path": "8713/solution_8713.kt", "CodeLlama-7b-Instruct-hf": "fun accessImaginaryPart(complexNumber: Pair<Double, Double>): Double {\n    return complexNumber.second.toDouble()\n}"}
{"kt_path": "3773/solution_3773.kt", "CodeLlama-7b-Instruct-hf": "fun calculateSocialWorkerSalary(salary: Double, yearsOfExperience: Int): Double {\n    if (yearsOfExperience >= 10) return salary\n    if (yearsOfExperience >= 5) return salary * 1.5\n    if (yearsOfExperience >= 2) return salary * 2\n    return salary * 3\n}"}
{"kt_path": "11/solution_11.kt", "CodeLlama-7b-Instruct-hf": "fun checkOddEvenNumbers(a: Int, b: Int, c: Int): Boolean {\n    var count = 0\n    if (a % 2 != 0) count++\n    if (b % 2 != 0) count++\n    if (c % 2 != 0) count++\n    return count == 2\n}"}
{"kt_path": "1118/solution_1118.kt", "CodeLlama-7b-Instruct-hf": "fun createEmptyComplementList(nurse: String): List<Any> {\n    val list = ArrayList<Any>()\n    list.add(nurse)\n    return list\n}"}
{"kt_path": "8385/solution_8385.kt", "CodeLlama-7b-Instruct-hf": "fun isPrime(n: Int): Boolean {\n    if (n <= 1) return false\n    var i = 2\n    while (i <= n / i) {\n        if (n % i == 0) return false\n        i++\n    }\n    return true\n}"}
{"kt_path": "14396/solution_14396.kt", "CodeLlama-7b-Instruct-hf": "fun extractCoordinates(coordinatesList: List<Triple<Int, Int, Int>>): Triple<Int, Int, Int> {\n    return coordinatesList[0]\n}"}
{"kt_path": "5828/solution_5828.kt", "CodeLlama-7b-Instruct-hf": "fun calculatePaintCansNeeded(wallAreas: List<Double>, paintArea: Double): Int {\n    val totalArea = wallAreas.sumOfDouble()\n    val totalPaintNeeded = totalArea / paintArea\n    return totalPaintNeeded.toInt()\n}"}
