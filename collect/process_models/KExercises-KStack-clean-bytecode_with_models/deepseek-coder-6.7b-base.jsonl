{"kt_path": "7824/solution_7824.kt", "deepseek-coder-6.7b-base": "fun testCountOddNumbers() {\n    return\n}"}
{"kt_path": "remisultan__multiarm-bandit-algorithm-kotlin__ead934d/core-bandit/src/main/kotlin/org/rsultan/bandit/algorithms/BanditAlgorithm.kt", "deepseek-coder-6.7b-base": "interface BanditAlgorithm {\n    fun selectArm(): Int\n    fun update(arm: Int, reward: Float)\n}"}
{"kt_path": "13864/solution_13864.kt", "deepseek-coder-6.7b-base": "fun calculateScore(a: Int, b: Int): Int {\n    return a * b\n}"}
{"kt_path": "9763/solution_9763.kt", "deepseek-coder-6.7b-base": ""}
{"kt_path": "8545/solution_8545.kt", "deepseek-coder-6.7b-base": ""}
{"kt_path": "13968/solution_13968.kt", "deepseek-coder-6.7b-base": ""}
{"kt_path": "14509/solution_14509.kt", "deepseek-coder-6.7b-base": ""}
{"kt_path": "7670/solution_7670.kt", "deepseek-coder-6.7b-base": "fun identityAssignment(): Boolean {\n    var a = 5\n    var b = a\n    return true\n}"}
{"kt_path": "224/solution_224.kt", "deepseek-coder-6.7b-base": ""}
{"kt_path": "11310/solution_11310.kt", "deepseek-coder-6.7b-base": "fun calculateExpenses(quantity: Int, price: Float): Float {\n    return quantity * price\n}"}
{"kt_path": "10330/solution_10330.kt", "deepseek-coder-6.7b-base": "fun calculatePower(a: Double, b: Double): Double {\n    return a * b\n}"}
{"kt_path": "11101/solution_11101.kt", "deepseek-coder-6.7b-base": ""}
{"kt_path": "432/solution_432.kt", "deepseek-coder-6.7b-base": ""}
{"kt_path": "n81ur3__kotlin-coding-challenges__fdc5941/src/main/kotlin/adventofcode2018/Day04ReposeRecord.kt", "deepseek-coder-6.7b-base": "class Day04ReposeRecord {\n    constructor()\n}"}
{"kt_path": "8671/solution_8671.kt", "deepseek-coder-6.7b-base": ""}
{"kt_path": "5601/solution_5601.kt", "deepseek-coder-6.7b-base": ""}
{"kt_path": "10329/solution_10329.kt", "deepseek-coder-6.7b-base": ""}
{"kt_path": "n81ur3__kotlin-coding-challenges__fdc5941/src/main/kotlin/adventofcode2020/Day19MonsterMessage.kt", "deepseek-coder-6.7b-base": "class Day19MonsterMessage {\n    constructor() {\n        // ...\n    }\n}"}
{"kt_path": "n81ur3__kotlin-coding-challenges__fdc5941/src/main/kotlin/adventofcode2020/Day07HandyHaversacks.kt", "deepseek-coder-6.7b-base": "class Day07HandyHaversacks {\n    constructor()\n}"}
{"kt_path": "7007/solution_7007.kt", "deepseek-coder-6.7b-base": ""}
{"kt_path": "3696/solution_3696.kt", "deepseek-coder-6.7b-base": "fun findCommonArea(a: Float, b: Float, c: Float): Float {\n    return a * b * c\n}"}
{"kt_path": "9314/solution_9314.kt", "deepseek-coder-6.7b-base": ""}
{"kt_path": "10577/solution_10577.kt", "deepseek-coder-6.7b-base": ""}
{"kt_path": "n81ur3__kotlin-coding-challenges__fdc5941/src/main/kotlin/adventofcode2018/Day06ChronalCoordinates.kt", "deepseek-coder-6.7b-base": "class Day06ChronalCoordinates {\n    constructor()\n}"}
{"kt_path": "7819/solution_7819.kt", "deepseek-coder-6.7b-base": "fun calculatePowerConsumption(power: Double): Double {\n    val powerConsumption = 5\n    return power / powerConsumption\n}"}
{"kt_path": "8829/solution_8829.kt", "deepseek-coder-6.7b-base": ""}
{"kt_path": "6256/solution_6256.kt", "deepseek-coder-6.7b-base": ""}
{"kt_path": "4238/solution_4238.kt", "deepseek-coder-6.7b-base": ""}
{"kt_path": "3868/solution_3868.kt", "deepseek-coder-6.7b-base": "fun sumOfNumbers(a: Int, b: Int): Int {\n    var sum = a + b\n    if (sum <= 10) {\n        sum *= 2\n    }\n    return sum\n}"}
{"kt_path": "5766/solution_5766.kt", "deepseek-coder-6.7b-base": "fun shiftAndMultiplyAssignment(a: Int, b: Int): Int {\n    var a = a\n    a = a shl b\n    val c = a\n    a = c ushr b\n    a *= c\n    return a\n}"}
{"kt_path": "4304/solution_4304.kt", "deepseek-coder-6.7b-base": ""}
{"kt_path": "alebedev__aoc2022__d6ba46b/src/main/kotlin/Map.kt", "deepseek-coder-6.7b-base": "fun main() {\n    AocMap.INSTANCE.solve()\n}"}
{"kt_path": "7168/solution_7168.kt", "deepseek-coder-6.7b-base": "fun multiplyAndModulo(a: Int, b: Int, c: Int, d: Int): Int {\n    var result = a * b\n    result %= c\n    return result\n}"}
{"kt_path": "5304/solution_5304.kt", "deepseek-coder-6.7b-base": "fun numberOfCircuits(a: Int, b: Int, c: Int): Int {\n    var count = 0\n    var rem = c % b\n    while (rem != 0) {\n        count++\n        rem = c % b\n    }\n    return count / a\n}"}
{"kt_path": "7099/solution_7099.kt", "deepseek-coder-6.7b-base": "fun calculateDistance(x: Double, y: Double, z: Double): Double {\n    val x2 = x * x\n    val y2 = y * y\n    val z2 = z * z\n    val xyz = x2 + y2 + z2\n    val xyz2 = xyz / 2.0\n    return xyz2 + xyz2\n}"}
{"kt_path": "8138/solution_8138.kt", "deepseek-coder-6.7b-base": "fun athletePoints(points: Int, hasWonMajor: Boolean, hasWonMinor: Boolean): Int {\n    return if (hasWonMajor) points + 3 else if (hasWonMinor) points + 1 else points\n}"}
{"kt_path": "6625/solution_6625.kt", "deepseek-coder-6.7b-base": "fun calculateCutLength(length: Float, width: Int, count: Int): Float {\n    val lengthWithoutBorder = length - 1f\n    val lengthPerCut = lengthWithoutBorder / count\n    return lengthPerCut\n}"}
{"kt_path": "14820/solution_14820.kt", "deepseek-coder-6.7b-base": "fun positiveIntegersSum(n: Int): Int {\n    var sum = 0\n    var i = 1\n    while (i <= n) {\n        sum += i\n        i++\n    }\n    return sum\n}"}
{"kt_path": "3808/solution_3808.kt", "deepseek-coder-6.7b-base": "fun countNegative(a: Int, b: Int): Int {\n    var count = 0\n    var i = a\n    while (i <= b) {\n        if (i < 0) count++\n        i++\n    }\n    return count\n}"}
{"kt_path": "677/solution_677.kt", "deepseek-coder-6.7b-base": "fun modulusComplexNumbers(a: Float, b: Float): Float {\n    val c = a * a + b * b\n    return Math.sqrt(c).toFloat()\n}"}
{"kt_path": "1838/solution_1838.kt", "deepseek-coder-6.7b-base": "fun calculateSum(n: Int): Int {\n    var sum = 0\n    var i = 1\n    while (i <= n) {\n        sum += i\n        i++\n    }\n    return sum\n}"}
{"kt_path": "3178/solution_3178.kt", "deepseek-coder-6.7b-base": "fun graphicDesignerSalary(yearsOfExperience: Int): Int {\n    return if (yearsOfExperience < 1) {\n        2500\n    } else {\n        yearsOfExperience * 500 + 2500"}
{"kt_path": "9504/solution_9504.kt", "deepseek-coder-6.7b-base": ""}
{"kt_path": "5182/solution_5182.kt", "deepseek-coder-6.7b-base": "fun checkDivisible(n: Int): Boolean {\n    var i = 2\n    while (i < 11) {\n        if (n % i != 0) return false\n        i++\n    }\n    return true\n}"}
{"kt_path": "7650/solution_7650.kt", "deepseek-coder-6.7b-base": "fun sumOfSquares(n: Int): Int {\n    var sum = 0\n    var i = 1\n    while (i <= n) {\n        sum += i * i\n        i++\n    }\n    return sum\n}"}
{"kt_path": "6824/solution_6824.kt", "deepseek-coder-6.7b-base": "fun calculateScore(a: Int, b: Int): Int {\n    val c = a * 10\n    val d = b * 5\n    val e = d - c\n    return if (e < 0) -1 else e\n}"}
{"kt_path": "1825/solution_1825.kt", "deepseek-coder-6.7b-base": "fun calculateCarpenterSalary(hours: Int, rate: Double, bonus: Double): Double {\n    var salary = hours * rate + hours * rate * bonus / 100\n    return salary + salary * 100 / 100\n}"}
{"kt_path": "1332/solution_1332.kt", "deepseek-coder-6.7b-base": "fun extinguishFire(fire: Double): Int {\n    var fire = fire\n    var count = 0\n    while (fire > 0.0) {\n        fire /= 2.0\n        count++\n    }\n    return count\n}"}
{"kt_path": "10817/solution_10817.kt", "deepseek-coder-6.7b-base": "fun maxOfThree(a: Int, b: Int, c: Int): Int {\n    return if (a < b) {\n        if (b < c) c else b\n   } else {\n        if (a < c) c else a\n    }"}
{"kt_path": "11536/solution_11536.kt", "deepseek-coder-6.7b-base": ""}
{"kt_path": "13694/solution_13694.kt", "deepseek-coder-6.7b-base": "fun calculateCarpenterSalary(hours: Int, rate: Double, bonus: Double): Double {\n    val salary = hours * rate\n    val bonusSalary = salary * bonus\n    return salary - bonusSalary\n}"}
{"kt_path": "7127/solution_7127.kt", "deepseek-coder-6.7b-base": ""}
{"kt_path": "7144/solution_7144.kt", "deepseek-coder-6.7b-base": "fun identityComparisonAndFloatingPointOperations(a: Double, b: Double): Boolean {\n    return Math.abs(a - b) < 0.01\n}"}
{"kt_path": "8240/solution_8240.kt", "deepseek-coder-6.7b-base": "fun calculateFactorial(n: Int): Int {\n    var result = 1\n    var i = 1\n    while (i <= n) {\n        result *= i\n        if (i == n) break\n        i++\n    }\n    return result\n}"}
{"kt_path": "2140/solution_2140.kt", "deepseek-coder-6.7b-base": "fun commissionCalculator(amount: Double, percent: Double, max: Double): Double {\n    return if (amount * percent > max) {\n        max\n    } else {\n        amount * percent"}
{"kt_path": "14315/solution_14315.kt", "deepseek-coder-6.7b-base": "fun sumPositiveIntegers(n: Int): Int {\n    var sum = 0\n    var i = 1\n    while (i <= n) {\n        sum += i\n        i++\n    }\n    return sum\n}"}
{"kt_path": "2523/solution_2523.kt", "deepseek-coder-6.7b-base": "fun sumEvenNumbers(a: Int, b: Int): Int {\n    var sum = 0\n    var i = a\n    while (i <= b) {\n        if (i % 2 == 0) {\n            sum += i\n        }\n        i++\n    }\n    return sum\n}"}
{"kt_path": "918/solution_918.kt", "deepseek-coder-6.7b-base": ""}
{"kt_path": "10520/solution_10520.kt", "deepseek-coder-6.7b-base": "fun sumOfEvenNumbers(a: Int, b: Int): Int {\n    var sum = 0\n    var i = a\n    while (i <= b) {\n        if (i % 2 == 0) {\n            sum += i\n        }\n        i++\n    }\n    return sum\n}"}
{"kt_path": "6399/solution_6399.kt", "deepseek-coder-6.7b-base": ""}
{"kt_path": "10731/solution_10731.kt", "deepseek-coder-6.7b-base": ""}
{"kt_path": "8756/solution_8756.kt", "deepseek-coder-6.7b-base": ""}
{"kt_path": "10964/solution_10964.kt", "deepseek-coder-6.7b-base": "fun calculateInvestmentGrowth(initialInvestment: Double, interestRate: Double, years: Int): Double {\n    var investment = initialInvestment\n    for (i in 1..years) {\n        investment += investment * interestRate\n    }\n    return investment\n}"}
{"kt_path": "9201/solution_9201.kt", "deepseek-coder-6.7b-base": "fun isCloseToZero(a: Double, b: Double): Boolean {\n    return if (a != 0.0) {\n        Math.abs(a) < b\n    } else {\n        a < b"}
{"kt_path": "14784/solution_14784.kt", "deepseek-coder-6.7b-base": "fun sumOfMultiples(n: Int, vararg multiples: Int): Int {\n    var sum = 0\n    var i = 0\n    while (i < n) {\n        for (multiple in multiples) {\n            if (i % multiple == 0) {\n                sum += i\n                break\n            }\n        }\n        i++\n    }\n    return sum\n}"}
{"kt_path": "12550/solution_12550.kt", "deepseek-coder-6.7b-base": "fun checkGameConditions(\n    playerHealth: Int,\n    playerDamage: Int,\n    playerArmor: Int,\n    isPlayerAlive: Boolean\n): Boolean {\n    return playerHealth <= 1000 && playerDamage <= 50 && playerArmor < 10 && isPlayerAlive\n}"}
{"kt_path": "2717/solution_2717.kt", "deepseek-coder-6.7b-base": "fun getFirstElement(lst: List<Any>): Any? {\n    return lst[0]\n}"}
{"kt_path": "10259/solution_10259.kt", "deepseek-coder-6.7b-base": "fun calculateTotalPrice(price: Float, discount: Float): Float {\n    val discountPercentage = if (discount < 0.0001f) discount else 0.0001f\n    return price * (1 - discountPercentage)\n}"}
{"kt_path": "1510/solution_1510.kt", "deepseek-coder-6.7b-base": "fun getLastElement(lst: List<Any>): Any {\n    return lst.last()\n}"}
{"kt_path": "2099/solution_2099.kt", "deepseek-coder-6.7b-base": "fun calculateTotalDistance(speed: Float, time: Float): Float {\n    var distance = 0f\n    var i = 1\n    while (i <= time.toInt()) {\n        distance += speed\n        if (i == time.toInt()) break\n        i++\n    }\n    return distance\n}"}
{"kt_path": "9202/solution_9202.kt", "deepseek-coder-6.7b-base": ""}
{"kt_path": "9289/solution_9289.kt", "deepseek-coder-6.7b-base": "fun sliceTuple(t: List<Any>, from: Int, to: Int): List<Any> {\n    return t.subList(from, to)\n}"}
{"kt_path": "222/solution_222.kt", "deepseek-coder-6.7b-base": "fun calculateProfit(\n    price: Double,\n    cost: Double,\n    tax: Double\n): Double {\n    val profit = price - cost\n    return if (profit > 0) profit * (1 + tax) else profit * (1 - tax)\n}"}
{"kt_path": "2704/solution_2704.kt", "deepseek-coder-6.7b-base": "fun calculateSum(): Double {\n    var sum = 0.0\n    var current = 0.1\n    while (sum < 1000.0) {\n        sum += current\n        current += 0.01\n    }\n    return sum\n}"}
{"kt_path": "7036/solution_7036.kt", "deepseek-coder-6.7b-base": "fun calculateExpenses(expensesList: List<Double>): Double {\n    return expensesList.sumOfDouble()\n}"}
{"kt_path": "7097/solution_7097.kt", "deepseek-coder-6.7b-base": "fun findAnimal(animals: List<String>, index: Int): String {\n    return animals[index]\n}"}
{"kt_path": "6743/solution_6743.kt", "deepseek-coder-6.7b-base": "fun toSet(data: List<Int>): Set<Int> {\n    return data.toSet()\n}"}
{"kt_path": "14646/solution_14646.kt", "deepseek-coder-6.7b-base": ""}
{"kt_path": "1671/solution_1671.kt", "deepseek-coder-6.7b-base": "fun createTupleFromDictionary(dictionary: Map<String, Any>): List<Pair<String, Any>> {\n    return dictionary.toList()\n}"}
{"kt_path": "13442/solution_13442.kt", "deepseek-coder-6.7b-base": "fun printEvenNumbers(start: Int, end: Int) {\n    var i = start\n    while (i <= end) {\n        if (i % 2 == 0) println(i)\n        i++\n    }\n}"}
{"kt_path": "13338/solution_13338.kt", "deepseek-coder-6.7b-base": "fun convertToSet(photoData: List<String>): Set<String> {\n    return photoData.toSet()\n}"}
{"kt_path": "8409/solution_8409.kt", "deepseek-coder-6.7b-base": "fun calculateTotalCost(price: Double, quantity: Double): Double {\n    val totalCost = price * quantity\n    return if (totalCost > 1000.0) {\n        totalCost * 0.1\n    } else {\n        totalCost - 1000."}
{"kt_path": "5263/solution_5263.kt", "deepseek-coder-6.7b-base": "fun operationsQuiz(a: Boolean, b: Boolean, c: Boolean, d: Boolean): Boolean {\n    var result = 0\n    if (a) result++\n    if (b) result++\n    if (c) result++\n    if (d) result++\n    return if (result >= 2) true else false\n}"}
{"kt_path": "7005/solution_7005.kt", "deepseek-coder-6.7b-base": "fun convertSetToList(s: Set<Any>): List<Any> {\n    return s.toList()\n}"}
{"kt_path": "7004/solution_7004.kt", "deepseek-coder-6.7b-base": "fun convertListToSet(lst: List<Any>): Set<Any> {\n    return lst.toSet()\n}"}
{"kt_path": "1559/solution_1559.kt", "deepseek-coder-6.7b-base": "fun convertToSet(gameData: List<Any>): Set<Any> {\n    return gameData.toSet()\n}"}
{"kt_path": "14689/solution_14689.kt", "deepseek-coder-6.7b-base": "fun printOddNumbers(n: Int) {\n    var i = 1\n    while (i <= n) {\n        if (i % 2 != 0) {\n            println(i)\n        }\n        if (i == n) {\n            break\n        }\n        i++\n    }\n}"}
{"kt_path": "13400/solution_13400.kt", "deepseek-coder-6.7b-base": "fun findBiggerNumber(a: Int, b: Int, c: Int, d: Int): Int {\n    var biggerNumber = a\n    if (b < a) {\n        biggerNumber = b\n    }\n    if (c < biggerNumber) {\n        biggerNumber = c"}
{"kt_path": "9661/solution_9661.kt", "deepseek-coder-6.7b-base": "fun calculateSums(n: Int): Int {\n    var sum = 0\n    var i = 1\n    while (i <= n) {\n        if (i % 5 == 0 || i % 7 == 0 || i % 35 == 0) {\n            sum += i\n        }\n        i++\n   }\n    return sum\n}"}
{"kt_path": "8323/solution_8323.kt", "deepseek-coder-6.7b-base": "fun calculateRemainingBooks(\n    totalBooks: Int,\n    booksPerMonth: Int,\n    monthsToRead: Int\n): Int {\n    var remainingBooks = totalBooks\n    var month = 0\n    while (month < monthsToRead) {\n        remainingBooks -= booksPerMonth * 3\n        month++\n    }\n    return remainingBooks\n}"}
{"kt_path": "236/solution_236.kt", "deepseek-coder-6.7b-base": "fun computeFloorArea(length: Float, width: Float): Float {\n    if (length <= 0f) {\n        throw IllegalArgumentException(\"Invalid length\")\n    }\n    if (width <= 0f) {\n        throw IllegalArgumentException(\"Invalid width\")\n    }\n    return length * width\n}"}
{"kt_path": "14771/solution_14771.kt", "deepseek-coder-6.7b-base": "fun indexingAndSlicingTuples(list: List<String>, index: Int): List<String> {\n    return list.subList(index, list.size)\n}"}
{"kt_path": "9943/solution_9943.kt", "deepseek-coder-6.7b-base": "fun addNegIntegersToSet(numbers: List<Int>): Set<Int> {\n    return numbers.toSet()\n}"}
{"kt_path": "8713/solution_8713.kt", "deepseek-coder-6.7b-base": "fun accessImaginaryPart(complexNumber: Pair<Double, Double>): Double {\n    return complexNumber.second.doubleValue()\n}"}
{"kt_path": "3773/solution_3773.kt", "deepseek-coder-6.7b-base": "fun calculateSocialWorkerSalary(salary: Double, workingHours: Int): Double {\n    return when {\n        workingHours < 10 -> salary\n        workingHours < 15 -> salary * 1.5\n        workingHours < 20 -> salary * 2.0\n        else -> salary * 3.0"}
{"kt_path": "11/solution_11.kt", "deepseek-coder-6.7b-base": "fun checkOddEvenNumbers(a: Int, b: Int, c: Int): Boolean {\n    var count = 0\n    if (a % 2 != 0) count++\n    if (b % 2 != 0) count++\n    if (c % 2 != 0) count++\n    return count % 2 != 0\n}"}
{"kt_path": "1118/solution_1118.kt", "deepseek-coder-6.7b-base": "fun createEmptyComplementList(s: String): List<Any> {\n    val list = ArrayList<Any>()\n    return list\n}"}
{"kt_path": "8385/solution_8385.kt", "deepseek-coder-6.7b-base": "fun isPrime(n: Int): Boolean {\n    if (n <= 1) return false\n    var i = 2\n    val sqrt = Math.sqrt(n.toDouble()).toInt()\n    while (i <= sqrt) {\n        if (n % i == 0) return false\n        i++\n    }\n    return true\n}"}
{"kt_path": "14396/solution_14396.kt", "deepseek-coder-6.7b-base": "fun extractCoordinates(coordinatesList: List<Triple<Int, Int, Int>>): Triple<Int, Int, Int> {\n    return coordinatesList[0]\n}"}
{"kt_path": "5828/solution_5828.kt", "deepseek-coder-6.7b-base": "fun calculatePaintCansNeeded(wallAreas: List<Double>, paintCoveragePerCan: Double): Int {\n    val totalArea = wallAreas.sumOfDouble()\n    return (totalArea / paintCoveragePerCan).toInt()\n}"}
