{"kt_path": "7434/solution_7434.kt", "Qwen2.5-Coder-0.5B-Instruct": "fun main() {\n    println(\"Hello, World!\")\n}"}
{"kt_path": "7824/solution_7824.kt", "Qwen2.5-Coder-0.5B-Instruct": "fun main() {\n    testCountOddNumbers()\n}\n\nfun testCountOddNumbers() {\n    // Your code here\n}"}
{"kt_path": "2614/solution_2614.kt", "Qwen2.5-Coder-0.5B-Instruct": "fun investigateSituation() {\n    // Your Kotlin code here\n}"}
{"kt_path": "4477/solution_4477.kt", "Qwen2.5-Coder-0.5B-Instruct": "fun getLeadII(): Int {\n    return 0\n}"}
{"kt_path": "4476/solution_4476.kt", "Qwen2.5-Coder-0.5B-Instruct": "fun getHeartRate() = 0"}
{"kt_path": "8909/solution_8909.kt", "Qwen2.5-Coder-0.5B-Instruct": "fun parentFunction(parent: Int): Int {\n    return parent\n}"}
{"kt_path": "4699/solution_4699.kt", "Qwen2.5-Coder-0.5B-Instruct": "fun hasLicense(license: Boolean): Boolean {\n    return license\n}"}
{"kt_path": "6126/solution_6126.kt", "Qwen2.5-Coder-0.5B-Instruct": "fun checkBoolean(b: Boolean): Boolean {\n    return b\n}"}
{"kt_path": "5226/solution_5226.kt", "Qwen2.5-Coder-0.5B-Instruct": "fun intersectPrecedenceTuple(): Boolean {\n    return false\n}"}
{"kt_path": "652/solution_652.kt", "Qwen2.5-Coder-0.5B-Instruct": "fun checkFloatDivision(float1: Float, float2: Float): Boolean {\n    return float1 / float2 == 0f\n}"}
{"kt_path": "558/solution_558.kt", "Qwen2.5-Coder-0.5B-Instruct": "fun function1(a: Int, b: Int): Int {\n    return a ^ b\n}"}
{"kt_path": "13973/solution_13973.kt", "Qwen2.5-Coder-0.5B-Instruct": "fun divide(a: Int, b: Int): Int {\n    return a / b\n}"}
{"kt_path": "13972/solution_13972.kt", "Qwen2.5-Coder-0.5B-Instruct": "fun multiply(a: Int, b: Int): Int {\n    return a * b\n}"}
{"kt_path": "13970/solution_13970.kt", "Qwen2.5-Coder-0.5B-Instruct": "fun increaseByOne(n: Int): Int {\n    return n + 1\n}"}
{"kt_path": "1606/solution_1606.kt", "Qwen2.5-Coder-0.5B-Instruct": "fun getRemainder(a: Int, b: Int): Int {\n    return a % b\n}"}
{"kt_path": "3900/solution_3900.kt", "Qwen2.5-Coder-0.5B-Instruct": "fun multiplyNumbers(a: Int, b: Int): Int {\n    return a * b\n}"}
{"kt_path": "13864/solution_13864.kt", "Qwen2.5-Coder-0.5B-Instruct": "fun calculateScore(a: Int, b: Int): Int {\n    return a * b\n}"}
{"kt_path": "7751/solution_7751.kt", "Qwen2.5-Coder-0.5B-Instruct": "fun getComplement(num: Int): Int {\n    return 9 - num\n}"}
{"kt_path": "9566/solution_9566.kt", "Qwen2.5-Coder-0.5B-Instruct": "fun calculateVelocity(x: Int, y: Int): Int {\n    return x / y\n}"}
{"kt_path": "4903/solution_4903.kt", "Qwen2.5-Coder-0.5B-Instruct": "fun calculateDayPublished(day: Int): Int {\n    return day + 1\n}"}
{"kt_path": "11380/solution_11380.kt", "Qwen2.5-Coder-0.5B-Instruct": "fun determineWallArea(x: Int, y: Int): Int {\n    return x * y\n}"}
{"kt_path": "1194/solution_1194.kt", "Qwen2.5-Coder-0.5B-Instruct": "fun whileSubtraction(a: Int, b: Int): Int {\n    var result = a\n    while (result >= b) {\n        result -= b\n    }\n    return result\n}"}
{"kt_path": "7844/solution_7844.kt", "Qwen2.5-Coder-0.5B-Instruct": "fun divideNumbers(a: Double, b: Double): Double {\n    return a / b\n}"}
{"kt_path": "599/solution_599.kt", "Qwen2.5-Coder-0.5B-Instruct": "fun calculateRoomArea(a: Double, b: Double): Double {\n    return a * b\n}"}
{"kt_path": "8402/solution_8402.kt", "Qwen2.5-Coder-0.5B-Instruct": "fun calculateNetIncome(a: Float, b: Float): Float {\n    return a - b\n}"}
{"kt_path": "11629/solution_11629.kt", "Qwen2.5-Coder-0.5B-Instruct": "fun calculateSlope(x1: Double, y1: Double): Double {\n    return (y1 - x1) / (x1 - 0)\n}"}
{"kt_path": "2587/solution_2587.kt", "Qwen2.5-Coder-0.5B-Instruct": "fun calculateRoomArea(a: Double, b: Double): Double {\n    return a * b\n}"}
{"kt_path": "5733/solution_5733.kt", "Qwen2.5-Coder-0.5B-Instruct": "fun calculateBuildingArea(a: Float, b: Float): Float {\n    return a * b\n}"}
{"kt_path": "12144/solution_12144.kt", "Qwen2.5-Coder-0.5B-Instruct": "fun calculateProfits(a: Double, b: Double): Double {\n    return a - b\n}"}
{"kt_path": "9763/solution_9763.kt", "Qwen2.5-Coder-0.5B-Instruct": "fun calculateFinalPrice(price1: Double, price2: Double): Double {\n    return price1 - price2\n}"}
{"kt_path": "11762/solution_11762.kt", "Qwen2.5-Coder-0.5B-Instruct": "fun calculateRoomArea(a: Double, b: Double): Double {\n    return a * b\n}"}
{"kt_path": "9178/solution_9178.kt", "Qwen2.5-Coder-0.5B-Instruct": "fun calculateGravityForce(x: Double, y: Double): Double {\n    return (x * y) / 1000.0\n}"}
{"kt_path": "8545/solution_8545.kt", "Qwen2.5-Coder-0.5B-Instruct": "fun calculateConversionRate(a: Int, b: Int): Double {\n    return (a.toDouble() / b.toDouble()).toDouble()\n}"}
{"kt_path": "13968/solution_13968.kt", "Qwen2.5-Coder-0.5B-Instruct": "fun athletePerformanceDistance(x: Double, y: Double): Double {\n    return x / y\n}"}
{"kt_path": "7841/solution_7841.kt", "Qwen2.5-Coder-0.5B-Instruct": "fun Solution_7841Kt.assignXor(x: Int, y: Int): Int {\n    return x ^ y\n}"}
{"kt_path": "2909/solution_2909.kt", "Qwen2.5-Coder-0.5B-Instruct": "fun addNumbers(a: Int, b: Int): Int {\n    return a + b\n}"}
{"kt_path": "302/solution_302.kt", "Qwen2.5-Coder-0.5B-Instruct": "fun calculateXor(a: Int, b: Int): Int {\n    return a ^ b\n}"}
{"kt_path": "12753/solution_12753.kt", "Qwen2.5-Coder-0.5B-Instruct": "fun trimLumber(a: Int, b: Int): Int {\n    return a - b\n}"}
{"kt_path": "5694/solution_5694.kt", "Qwen2.5-Coder-0.5B-Instruct": "fun calculateAge(age1: Int, age2: Int): Int {\n    return age1 - age2\n}"}
{"kt_path": "7772/solution_7772.kt", "Qwen2.5-Coder-0.5B-Instruct": "fun increaseSpeed(a: Int, b: Int): Int {\n    return a + b\n}"}
{"kt_path": "13321/solution_13321.kt", "Qwen2.5-Coder-0.5B-Instruct": "fun xorOperation(a: Int, b: Int): Int {\n    return a ^ b\n}"}
{"kt_path": "3882/solution_3882.kt", "Qwen2.5-Coder-0.5B-Instruct": "fun calcTotalHours(a: Int, b: Int): Int {\n    return a * b\n}"}
{"kt_path": "7919/solution_7919.kt", "Qwen2.5-Coder-0.5B-Instruct": "fun addOrOperation(a: Int, b: Int): Int {\n    return a + b\n}"}
{"kt_path": "640/solution_640.kt", "Qwen2.5-Coder-0.5B-Instruct": "fun multiplyAndAssign(a: Int, b: Int): Int {\n    return a * b\n}"}
{"kt_path": "797/solution_797.kt", "Qwen2.5-Coder-0.5B-Instruct": "fun calculateTax(f1: Float, f2: Float): Float {\n    return f1 * f2\n}"}
{"kt_path": "3049/solution_3049.kt", "Qwen2.5-Coder-0.5B-Instruct": "fun calculateVolume(a: Int, b: Int, c: Int): Int {\n    return a * b * c\n}"}
{"kt_path": "6128/solution_6128.kt", "Qwen2.5-Coder-0.5B-Instruct": "fun absoluteValue(n: Int): Int {\n    return Math.abs(n)\n}"}
{"kt_path": "5969/solution_5969.kt", "Qwen2.5-Coder-0.5B-Instruct": "fun getNegativeIndex(a: Int, b: Int): Int {\n    return a - b\n}"}
{"kt_path": "1224/solution_1224.kt", "Qwen2.5-Coder-0.5B-Instruct": "fun subtractIntegers(a: Int, b: Int): Int {\n    return a - b\n}"}
{"kt_path": "1810/solution_1810.kt", "Qwen2.5-Coder-0.5B-Instruct": "fun calculateLandArea(x: Int, y: Int): Int {\n    return x * y\n}"}
{"kt_path": "1562/solution_1562.kt", "Qwen2.5-Coder-0.5B-Instruct": "fun calculateTax(f1: Float, f2: Float): Float {\n    return f1 * f2\n}"}
{"kt_path": "2870/solution_2870.kt", "Qwen2.5-Coder-0.5B-Instruct": "fun calculateFine(a: Int, b: Int): Int {\n    return a - b\n}"}
{"kt_path": "6759/solution_6759.kt", "Qwen2.5-Coder-0.5B-Instruct": "fun averageSpeed(a: Float, b: Float): Float {\n    return (a + b) / 2f\n}"}
{"kt_path": "2736/solution_2736.kt", "Qwen2.5-Coder-0.5B-Instruct": "fun calculatePatientAge(age1: Int, age2: Int): Int {\n    return age1 - age2\n}"}
{"kt_path": "4004/solution_4004.kt", "Qwen2.5-Coder-0.5B-Instruct": "fun calculatePatientAge(age1: Int, age2: Int): Int {\n    return age1 - age2\n}"}
{"kt_path": "12220/solution_12220.kt", "Qwen2.5-Coder-0.5B-Instruct": "fun updateAndOperator(a: Int, b: Int): Int {\n    return a and b\n}"}
{"kt_path": "14509/solution_14509.kt", "Qwen2.5-Coder-0.5B-Instruct": "fun calculateRoomArea(x: Int, y: Int): Int {\n    return x * y\n}"}
{"kt_path": "13481/solution_13481.kt", "Qwen2.5-Coder-0.5B-Instruct": "fun calculateShutterSpeed(\n  x: Double,\n  y: Int,\n  z: Double\n): Double {\n  return (x * y) / z\n}"}
{"kt_path": "10181/solution_10181.kt", "Qwen2.5-Coder-0.5B-Instruct": "fun calculateTax(a: Float, b: Float): Float {\n    return (a * b) / 100.0f\n}"}
{"kt_path": "3783/solution_3783.kt", "Qwen2.5-Coder-0.5B-Instruct": "fun calculateVoltageDrop(x: Int, y: Int): Int {\n    return x * y\n}"}
{"kt_path": "7670/solution_7670.kt", "Qwen2.5-Coder-0.5B-Instruct": "fun identityAssignment() = true"}
{"kt_path": "13453/solution_13453.kt", "Qwen2.5-Coder-0.5B-Instruct": "fun calculateTax(f1: Float, f2: Float): Float {\n    return f1 * f2\n}"}
{"kt_path": "6574/solution_6574.kt", "Qwen2.5-Coder-0.5B-Instruct": "fun calculateProfit(a: Float, b: Float): Float {\n    return (a - b) * 0.5f\n}"}
{"kt_path": "985/solution_985.kt", "Qwen2.5-Coder-0.5B-Instruct": "fun multiplyAssignAndRepeat(a: Int, b: Int): Int {\n    var result = a\n    for (i in 0 until b) {\n        result *= a\n    }\n    return result\n}"}
{"kt_path": "3069/solution_3069.kt", "Qwen2.5-Coder-0.5B-Instruct": "fun calculateStress(f1: Float, f2: Float): Float {\n    val result = f1 / f2\n    return result\n}"}
{"kt_path": "9567/solution_9567.kt", "Qwen2.5-Coder-0.5B-Instruct": "fun calculateAcceleration(x: Int, y: Int, z: Int): Int {\n    return (x + y) / z\n}"}
{"kt_path": "9762/solution_9762.kt", "Qwen2.5-Coder-0.5B-Instruct": "fun calculateDiscount(double): Double {\n    return 0.2\n}"}
{"kt_path": "12787/solution_12787.kt", "Qwen2.5-Coder-0.5B-Instruct": "fun calculatePower(a: Float, b: Float): Float {\n    return a / b\n}"}
{"kt_path": "14674/solution_14674.kt", "Qwen2.5-Coder-0.5B-Instruct": "fun calculateTaxes(f1: Float, f2: Float): Float {\n    return (f1 * f2) / 100.0f\n}"}
{"kt_path": "144/solution_144.kt", "Qwen2.5-Coder-0.5B-Instruct": "fun calculateNetIncome(a: Float, b: Float): Float {\n    return (a - b) * 0.8f\n}"}
{"kt_path": "224/solution_224.kt", "Qwen2.5-Coder-0.5B-Instruct": "fun calculateSalary(roundedSalary: Double): Long {\n    return Math.round(roundedSalary)\n}"}
{"kt_path": "12602/solution_12602.kt", "Qwen2.5-Coder-0.5B-Instruct": "fun calculateTotalIncome(a: Int, b: Int): Int {\n    return a + b\n}"}
{"kt_path": "2061/solution_2061.kt", "Qwen2.5-Coder-0.5B-Instruct": "fun calculateFurnitureArea(a: Int, b: Int): Int {\n    return a * b\n}"}
{"kt_path": "1884/solution_1884.kt", "Qwen2.5-Coder-0.5B-Instruct": "fun calculateWallArea(a: Float, b: Float): Float {\n    return (a * b) / 2f\n}"}
{"kt_path": "5140/solution_5140.kt", "Qwen2.5-Coder-0.5B-Instruct": "fun calculateNetIncome(a: Float, b: Float): Float {\n    return (a - b) * 1.0f\n}"}
{"kt_path": "1945/solution_1945.kt", "Qwen2.5-Coder-0.5B-Instruct": "fun subtractTaxidermyAnimals(a: Int, b: Int): Int {\n    return a - b\n}"}
{"kt_path": "2025/solution_2025.kt", "Qwen2.5-Coder-0.5B-Instruct": "fun calculateAnimalPopulation(a: Int, b: Int): Int {\n    return a - b\n}"}
{"kt_path": "14511/solution_14511.kt", "Qwen2.5-Coder-0.5B-Instruct": "fun calculateNumberOfLights(a: Int, b: Int): Int {\n    return (a / b).toInt()\n}"}
{"kt_path": "13493/solution_13493.kt", "Qwen2.5-Coder-0.5B-Instruct": "fun calculateDistance(x: Float, y: Float): Float {\n    return (x - y) / 2f\n}"}
{"kt_path": "4381/solution_4381.kt", "Qwen2.5-Coder-0.5B-Instruct": "fun calculateAverageSpeed(a: Float, b: Float): Float {\n    return (a + b) / 2f\n}"}
{"kt_path": "9587/solution_9587.kt", "Qwen2.5-Coder-0.5B-Instruct": "fun bAnd(b: Boolean, c: Boolean): Boolean {\n    return b && c\n}"}
{"kt_path": "6576/solution_6576.kt", "Qwen2.5-Coder-0.5B-Instruct": "fun calculateDividendRatio(a: Float, b: Float): Float {\n    val result = (a / b).toFloat()\n    return result\n}"}
{"kt_path": "11550/solution_11550.kt", "Qwen2.5-Coder-0.5B-Instruct": "fun calculateAverageSpeed(a: Float, b: Float): Float {\n    return (a + b) / 2f\n}"}
{"kt_path": "7386/solution_7386.kt", "Qwen2.5-Coder-0.5B-Instruct": "fun intersectionAdditionAssignmentOperator() = 12"}
{"kt_path": "12691/solution_12691.kt", "Qwen2.5-Coder-0.5B-Instruct": "fun calculateRemainingBudget(\n  budget1: Float,\n  budget2: Float\n): Float {\n  val remainingBudget = budget1 - budget2\n  return remainingBudget\n}"}
{"kt_path": "8209/solution_8209.kt", "Qwen2.5-Coder-0.5B-Instruct": "fun calculateRequiredMaterials(a: Float, b: Float): Float {\n    val result = a / b\n    return result\n}"}
{"kt_path": "2049/solution_2049.kt", "Qwen2.5-Coder-0.5B-Instruct": "fun calculatePrice(price1: Double, price2: Double, price3: Double): Double {\n    return price1 * price2 * price3\n}"}
{"kt_path": "586/solution_586.kt", "Qwen2.5-Coder-0.5B-Instruct": "fun calculateArea(a: Double, b: Double): Double {\n    return (a * b) / 2.0\n}"}
{"kt_path": "5139/solution_5139.kt", "Qwen2.5-Coder-0.5B-Instruct": "fun calculateTax(a: Double, b: Double): Double {\n    return (a * b) / 100.0\n}"}
{"kt_path": "7904/solution_7904.kt", "Qwen2.5-Coder-0.5B-Instruct": "fun checkCurrent(a: Double, b: Double): Double {\n    val result = a / b\n    return result\n}"}
{"kt_path": "9335/solution_9335.kt", "Qwen2.5-Coder-0.5B-Instruct": "fun calculateTax(a: Double, b: Double): Double {\n    return (a * b) / 100.0\n}"}
{"kt_path": "2329/solution_2329.kt", "Qwen2.5-Coder-0.5B-Instruct": "fun calculateTotalCost(n: Int, price: Float): Float {\n    return n * price\n}"}
{"kt_path": "6572/solution_6572.kt", "Qwen2.5-Coder-0.5B-Instruct": "fun calculateTotalPrice(price: Int, discountRate: Float): Float {\n    return price * (1 - discountRate)\n}"}
{"kt_path": "8071/solution_8071.kt", "Qwen2.5-Coder-0.5B-Instruct": "fun calculateArea(a: Double, b: Double): Double {\n    return a * b\n}"}
{"kt_path": "11310/solution_11310.kt", "Qwen2.5-Coder-0.5B-Instruct": "fun calculateExpenses(\n  input: Int,\n  rate: Float\n): Float {\n  return input * rate\n}"}
{"kt_path": "10435/solution_10435.kt", "Qwen2.5-Coder-0.5B-Instruct": "fun calculateWeight(weight: Double, index: Int): Double {\n    return weight + (index.toDouble() * 0.1)\n}"}
{"kt_path": "5594/solution_5594.kt", "Qwen2.5-Coder-0.5B-Instruct": "fun checkRealPart(a: Int, b: Int): Boolean {\n    return a == b\n}"}
{"kt_path": "1356/solution_1356.kt", "Qwen2.5-Coder-0.5B-Instruct": "fun isNone(obj: Any): Boolean {\n    return obj is java.lang.Object && !obj.isAssignableFrom(java.lang.Object::class.java)\n}"}
{"kt_path": "8902/solution_8902.kt", "Qwen2.5-Coder-0.5B-Instruct": "fun calculatePower(a: Double, b: Double): Double {\n    return a * b\n}"}
{"kt_path": "6573/solution_6573.kt", "Qwen2.5-Coder-0.5B-Instruct": "fun calculateAveragePrice(price: Float, quantity: Int): Float {\n    val total = price * quantity\n    return total / quantity\n}"}
