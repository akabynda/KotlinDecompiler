{"kt_path": "7434/solution_7434.kt", "Qwen2.5-Coder-7B-Instruct": "fun test() {\n}"}
{"kt_path": "7824/solution_7824.kt", "Qwen2.5-Coder-7B-Instruct": "fun testCountOddNumbers() {\n}"}
{"kt_path": "2614/solution_2614.kt", "Qwen2.5-Coder-7B-Instruct": "object Solution_2614 {\n    fun investigateSituation() {\n        // No-op function\n    }\n}"}
{"kt_path": "4477/solution_4477.kt", "Qwen2.5-Coder-7B-Instruct": "object Solution_4477 {\n    fun getLeadII(): Int {\n        return 0\n    }\n}"}
{"kt_path": "4476/solution_4476.kt", "Qwen2.5-Coder-7B-Instruct": "object Solution_4476 {\n    fun getHeartRate(): Int {\n        return 0\n    }\n}"}
{"kt_path": "8909/solution_8909.kt", "Qwen2.5-Coder-7B-Instruct": "fun parentFunction(x: Int): Int = x"}
{"kt_path": "4699/solution_4699.kt", "Qwen2.5-Coder-7B-Instruct": "object Solution_4699 {\n    fun hasLicense(hasLicense: Boolean): Boolean {\n        return hasLicense\n    }\n}"}
{"kt_path": "6126/solution_6126.kt", "Qwen2.5-Coder-7B-Instruct": "fun checkBoolean(value: Boolean): Boolean {\n    return value\n}"}
{"kt_path": "5226/solution_5226.kt", "Qwen2.5-Coder-7B-Instruct": "object Solution_5226 {\n    fun intersectPrecedenceTuple(): Boolean {\n        return false\n    }\n}"}
{"kt_path": "652/solution_652.kt", "Qwen2.5-Coder-7B-Instruct": "object Solution_652 {\n    fun checkFloatDivision(a: Float, b: Float): Boolean {\n        return true\n    }\n}"}
{"kt_path": "558/solution_558.kt", "Qwen2.5-Coder-7B-Instruct": "object Solution_558Kt {\n    fun function1(a: Int, b: Int): Int {\n        return a xor b\n    }\n}"}
{"kt_path": "13973/solution_13973.kt", "Qwen2.5-Coder-7B-Instruct": "object Solution_13973 {\n    fun divide(a: Int, b: Int): Int {\n        return a / b\n    }\n}"}
{"kt_path": "13972/solution_13972.kt", "Qwen2.5-Coder-7B-Instruct": "object Solution_13972 {\n    fun multiply(a: Int, b: Int): Int {\n        return a * b\n    }\n}"}
{"kt_path": "13970/solution_13970.kt", "Qwen2.5-Coder-7B-Instruct": "object Solution_13970Kt {\n    fun increaseByOne(i: Int): Int {\n        return i + 1\n    }\n}"}
{"kt_path": "1606/solution_1606.kt", "Qwen2.5-Coder-7B-Instruct": "object Solution_1606 {\n    fun getRemainder(a: Int, b: Int): Int {\n        return a % b\n    }\n}"}
{"kt_path": "3900/solution_3900.kt", "Qwen2.5-Coder-7B-Instruct": "object Solution_3900 {\n    fun multiplyNumbers(a: Int, b: Int): Int {\n        return a * b\n    }\n}"}
{"kt_path": "13864/solution_13864.kt", "Qwen2.5-Coder-7B-Instruct": "object Solution_13864 {\n    fun calculateScore(a: Int, b: Int): Int {\n        return a * b\n    }\n}"}
{"kt_path": "7751/solution_7751.kt", "Qwen2.5-Coder-7B-Instruct": "object Solution_7751 {\n    fun getComplement(value: Int): Int {\n        return 9 - value\n    }\n}"}
{"kt_path": "9566/solution_9566.kt", "Qwen2.5-Coder-7B-Instruct": "fun calculateVelocity(distance: Int, time: Int): Int {\n    return distance / time\n}"}
{"kt_path": "4903/solution_4903.kt", "Qwen2.5-Coder-7B-Instruct": "object Solution_4903 {\n    fun calculateDayPublished(day: Int): Int {\n        return day + 1\n    }\n}"}
{"kt_path": "11380/solution_11380.kt", "Qwen2.5-Coder-7B-Instruct": "object Solution_11380Kt {\n    fun determineWallArea(width: Int, height: Int): Int {\n        return width * height\n    }\n}"}
{"kt_path": "1194/solution_1194.kt", "Qwen2.5-Coder-7B-Instruct": "fun whileSubtraction(a: Int, b: Int): Int {\n    var result = a\n    while (result > b) {\n        result -= 1\n    }\n    return result\n}"}
{"kt_path": "7844/solution_7844.kt", "Qwen2.5-Coder-7B-Instruct": "object Solution_7844 {\n    fun divideNumbers(a: Double, b: Double): Double {\n        return a / b\n    }\n}"}
{"kt_path": "599/solution_599.kt", "Qwen2.5-Coder-7B-Instruct": "object Solution_599 {\n    fun calculateRoomArea(length: Double, width: Double): Double {\n        return length * width\n    }\n}"}
{"kt_path": "8402/solution_8402.kt", "Qwen2.5-Coder-7B-Instruct": "object Solution_8402 {\n    fun calculateNetIncome(grossIncome: Float, deductions: Float): Float {\n        return grossIncome - deductions\n    }\n}"}
{"kt_path": "11629/solution_11629.kt", "Qwen2.5-Coder-7B-Instruct": "object Solution_11629 {\n    fun calculateSlope(x1: Double, y1: Double): Double {\n        return x1 / y1\n    }\n}"}
{"kt_path": "2587/solution_2587.kt", "Qwen2.5-Coder-7B-Instruct": "object Solution_2587 {\n    fun calculateRoomArea(length: Double, width: Double): Double {\n        return length * width\n    }\n}"}
{"kt_path": "5733/solution_5733.kt", "Qwen2.5-Coder-7B-Instruct": "object Solution_5733 {\n    fun calculateBuildingArea(length: Float, width: Float): Float {\n        return length * width\n    }\n}"}
{"kt_path": "12144/solution_12144.kt", "Qwen2.5-Coder-7B-Instruct": "object Solution_12144 {\n    fun calculateProfits(costPrice: Double, sellingPrice: Double): Double {\n        return sellingPrice - costPrice\n    }\n}"}
{"kt_path": "9763/solution_9763.kt", "Qwen2.5-Coder-7B-Instruct": "object Solution_9763 {\n    fun calculateFinalPrice(price: Double, discount: Double): Double {\n        return price - discount\n    }\n}"}
{"kt_path": "11762/solution_11762.kt", "Qwen2.5-Coder-7B-Instruct": "object Solution_11762 {\n    fun calculateRoomArea(length: Double, width: Double): Double {\n        return length * width\n    }\n}"}
{"kt_path": "9178/solution_9178.kt", "Qwen2.5-Coder-7B-Instruct": "object Solution_9178 {\n    fun calculateGravityForce(mass: Double, distance: Double): Double {\n        return mass * distance\n    }\n}"}
{"kt_path": "8545/solution_8545.kt", "Qwen2.5-Coder-7B-Instruct": "object Solution_8545 {\n    fun calculateConversionRate(from: Int, to: Int): Double {\n        return 0.0\n    }\n}"}
{"kt_path": "13968/solution_13968.kt", "Qwen2.5-Coder-7B-Instruct": "object Solution_13968Kt {\n    fun athletePerformanceDistance(distance: Double, time: Double): Double {\n        return distance / time\n    }\n}"}
{"kt_path": "7841/solution_7841.kt", "Qwen2.5-Coder-7B-Instruct": "fun assignXor(a: Int, b: Int): Int {\n    val result = a xor b\n    return result\n}"}
{"kt_path": "2909/solution_2909.kt", "Qwen2.5-Coder-7B-Instruct": "fun addNumbers(a: Int, b: Int): Int {\n    return a + b\n}"}
{"kt_path": "302/solution_302.kt", "Qwen2.5-Coder-7B-Instruct": "object Solution_302 {\n    fun calculateXor(a: Int, b: Int): Int {\n        return a xor b\n    }\n}"}
{"kt_path": "12753/solution_12753.kt", "Qwen2.5-Coder-7B-Instruct": "fun trimLumber(a: Int, b: Int): Int {\n    return a - b\n}"}
{"kt_path": "5694/solution_5694.kt", "Qwen2.5-Coder-7B-Instruct": "object Solution_5694 {\n    fun calculateAge(yearOfBirth: Int, currentYear: Int): Int {\n        return currentYear - yearOfBirth\n    }\n}"}
{"kt_path": "7772/solution_7772.kt", "Qwen2.5-Coder-7B-Instruct": "fun increaseSpeed(speed: Int, increment: Int): Int {\n    val newSpeed = speed + increment\n    return newSpeed\n}"}
{"kt_path": "13321/solution_13321.kt", "Qwen2.5-Coder-7B-Instruct": "fun xorOperation(a: Int, b: Int): Int {\n    return a xor b\n}"}
{"kt_path": "3882/solution_3882.kt", "Qwen2.5-Coder-7B-Instruct": "fun calcTotalHours(hours: Int, rate: Int): Int {\n    return hours * rate\n}"}
{"kt_path": "7919/solution_7919.kt", "Qwen2.5-Coder-7B-Instruct": "object Solution_7919 {\n    fun addOrOperation(a: Int, b: Int): Int {\n        val result = a + b\n        return result\n    }\n}"}
{"kt_path": "640/solution_640.kt", "Qwen2.5-Coder-7B-Instruct": "fun multiplyAndAssign(a: Int, b: Int): Int {\n    var result = a * b\n    return result\n}"}
{"kt_path": "797/solution_797.kt", "Qwen2.5-Coder-7B-Instruct": "object Solution_797 {\n    fun calculateTax(income: Float, taxRate: Float): Float {\n        return income * taxRate\n    }\n}"}
{"kt_path": "3049/solution_3049.kt", "Qwen2.5-Coder-7B-Instruct": "object Solution_3049 {\n    fun calculateVolume(length: Int, width: Int, height: Int): Int {\n        return length * width * height\n    }\n}"}
{"kt_path": "6128/solution_6128.kt", "Qwen2.5-Coder-7B-Instruct": "object Solution_6128 {\n    fun absoluteValue(value: Int): Int {\n        return Math.abs(value)\n    }\n}"}
{"kt_path": "5969/solution_5969.kt", "Qwen2.5-Coder-7B-Instruct": "object Solution_5969 {\n    fun getNegativeIndex(index: Int, length: Int): Int {\n        return index - length\n    }\n}"}
{"kt_path": "1224/solution_1224.kt", "Qwen2.5-Coder-7B-Instruct": "fun subtractIntegers(a: Int, b: Int): Int {\n    val result = a - b\n    return result\n}"}
{"kt_path": "1810/solution_1810.kt", "Qwen2.5-Coder-7B-Instruct": "object Solution_1810 {\n    fun calculateLandArea(length: Int, width: Int): Int {\n        return length * width\n    }\n}"}
{"kt_path": "1562/solution_1562.kt", "Qwen2.5-Coder-7B-Instruct": "fun calculateTax(income: Float, taxRate: Float): Float {\n    return income * taxRate\n}"}
{"kt_path": "2870/solution_2870.kt", "Qwen2.5-Coder-7B-Instruct": "object Solution_2870 {\n    fun calculateFine(daysOverdue: Int, dailyFine: Int): Int {\n        return (daysOverdue - dailyFine) * 10\n    }\n}"}
{"kt_path": "6759/solution_6759.kt", "Qwen2.5-Coder-7B-Instruct": "fun averageSpeed(speed1: Float, speed2: Float): Float {\n    val average = speed1 / speed2\n    return average\n}"}
{"kt_path": "2736/solution_2736.kt", "Qwen2.5-Coder-7B-Instruct": "object Solution_2736 {\n    fun calculatePatientAge(yearOfBirth: Int, currentYear: Int): Int {\n        return currentYear - yearOfBirth\n    }\n}"}
{"kt_path": "4004/solution_4004.kt", "Qwen2.5-Coder-7B-Instruct": "object Solution_4004 {\n    fun calculatePatientAge(yearOfBirth: Int, currentYear: Int): Int {\n        return currentYear - yearOfBirth\n    }\n}"}
{"kt_path": "12220/solution_12220.kt", "Qwen2.5-Coder-7B-Instruct": "fun updateAndOperator(a: Int, b: Int): Int {\n    val result = a and b\n    return result\n}"}
{"kt_path": "14509/solution_14509.kt", "Qwen2.5-Coder-7B-Instruct": "object Solution_14509Kt {\n    fun calculateRoomArea(length: Int, width: Int): Int {\n        return length * width\n    }\n}"}
{"kt_path": "13481/solution_13481.kt", "Qwen2.5-Coder-7B-Instruct": "object Solution_13481 {\n    fun calculateShutterSpeed(aperture: Double, iso: Int, focalLength: Double): Double {\n        return 0.0\n    }\n}"}
{"kt_path": "10181/solution_10181.kt", "Qwen2.5-Coder-7B-Instruct": "fun calculateTax(income: Float, taxRate: Float): Float {\n    return income * taxRate\n}"}
{"kt_path": "3783/solution_3783.kt", "Qwen2.5-Coder-7B-Instruct": "object Solution_3783 {\n    fun calculateVoltageDrop(resistance: Int, current: Int): Int {\n        return resistance * current\n    }\n}"}
{"kt_path": "7670/solution_7670.kt", "Qwen2.5-Coder-7B-Instruct": "object Solution_7670 {\n    fun identityAssignment(): Boolean {\n        val a = 5\n        val b = a\n        return true\n    }\n}"}
{"kt_path": "13453/solution_13453.kt", "Qwen2.5-Coder-7B-Instruct": "object Solution_13453 {\n    fun calculateTax(income: Float, taxRate: Float): Float {\n        return income * taxRate\n    }\n}"}
{"kt_path": "6574/solution_6574.kt", "Qwen2.5-Coder-7B-Instruct": "object Solution_6574 {\n    fun calculateProfit(costPrice: Float, sellingPrice: Float): Float {\n        val profit = sellingPrice - costPrice\n        return profit\n    }\n}"}
{"kt_path": "985/solution_985.kt", "Qwen2.5-Coder-7B-Instruct": "fun multiplyAssignAndRepeat(a: Int, b: Int): Int {\n    var result = a * b\n    return result\n}"}
{"kt_path": "3069/solution_3069.kt", "Qwen2.5-Coder-7B-Instruct": "fun calculateStress(a: Float, b: Float): Float {\n    val result = a / b\n    return result\n}"}
{"kt_path": "9567/solution_9567.kt", "Qwen2.5-Coder-7B-Instruct": "object Solution_9567 {\n    fun calculateAcceleration(a: Int, b: Int, c: Int): Int {\n        return (a - b) / c\n    }\n}"}
{"kt_path": "9762/solution_9762.kt", "Qwen2.5-Coder-7B-Instruct": "object Solution_9762Kt {\n    fun calculateDiscount(price: Double): Double {\n        return price * 0.2\n    }\n}"}
{"kt_path": "12787/solution_12787.kt", "Qwen2.5-Coder-7B-Instruct": "object Solution_12787 {\n    fun calculatePower(base: Float, exponent: Float): Float {\n        return base / exponent\n    }\n}"}
{"kt_path": "14674/solution_14674.kt", "Qwen2.5-Coder-7B-Instruct": "fun calculateTaxes(income: Float, taxRate: Float): Float {\n    val taxes = income * taxRate\n    return taxes\n}"}
{"kt_path": "144/solution_144.kt", "Qwen2.5-Coder-7B-Instruct": "object Solution_144 {\n    fun calculateNetIncome(grossIncome: Float, deductions: Float): Float {\n        val netIncome = grossIncome - deductions\n        return netIncome\n    }\n}"}
{"kt_path": "224/solution_224.kt", "Qwen2.5-Coder-7B-Instruct": "object Solution_224Kt {\n    fun calculateSalary(salary: Double): Long {\n        return Math.round(salary)\n    }\n}"}
{"kt_path": "12602/solution_12602.kt", "Qwen2.5-Coder-7B-Instruct": "object Solution_12602 {\n    fun calculateTotalIncome(a: Int, b: Int): Int {\n        return a + b\n    }\n}"}
{"kt_path": "2061/solution_2061.kt", "Qwen2.5-Coder-7B-Instruct": "object Solution_2061 {\n    fun calculateFurnitureArea(length: Int, width: Int): Int {\n        return length * width\n    }\n}"}
{"kt_path": "1884/solution_1884.kt", "Qwen2.5-Coder-7B-Instruct": "object Solution_1884 {\n    fun calculateWallArea(width: Float, height: Float): Float {\n        val area = width * height\n        return area\n    }\n}"}
{"kt_path": "5140/solution_5140.kt", "Qwen2.5-Coder-7B-Instruct": "object Solution_5140 {\n    fun calculateNetIncome(grossIncome: Float, deductions: Float): Float {\n        val netIncome = grossIncome - deductions\n        return netIncome\n    }\n}"}
{"kt_path": "1945/solution_1945.kt", "Qwen2.5-Coder-7B-Instruct": "fun subtractTaxidermyAnimals(a: Int, b: Int): Int {\n    return a - b\n}"}
{"kt_path": "2025/solution_2025.kt", "Qwen2.5-Coder-7B-Instruct": "object Solution_2025 {\n    fun calculateAnimalPopulation(initialPopulation: Int, decrease: Int): Int {\n        return initialPopulation - decrease\n    }\n}"}
{"kt_path": "14511/solution_14511.kt", "Qwen2.5-Coder-7B-Instruct": "fun calculateNumberOfLights(a: Int, b: Int): Int {\n    return a / b\n}"}
{"kt_path": "13493/solution_13493.kt", "Qwen2.5-Coder-7B-Instruct": "object Solution_13493Kt {\n    fun calculateDistance(x: Float, y: Float): Float {\n        val product = x * y\n        return product\n    }\n}"}
{"kt_path": "4381/solution_4381.kt", "Qwen2.5-Coder-7B-Instruct": "object Solution_4381 {\n    fun calculateAverageSpeed(distance: Float, time: Float): Float {\n        return distance / time\n    }\n}"}
{"kt_path": "9587/solution_9587.kt", "Qwen2.5-Coder-7B-Instruct": "fun bAnd(a: Boolean, b: Boolean): Boolean {\n    return a && b\n}"}
{"kt_path": "6576/solution_6576.kt", "Qwen2.5-Coder-7B-Instruct": "object Solution_6576Kt {\n    fun calculateDividendRatio(dividend: Float, divisor: Float): Float {\n        return dividend / divisor\n    }\n}"}
{"kt_path": "11550/solution_11550.kt", "Qwen2.5-Coder-7B-Instruct": "object Solution_11550Kt {\n    fun calculateAverageSpeed(distance: Float, time: Float): Float {\n        val averageSpeed = distance / time\n        return averageSpeed\n    }\n}"}
{"kt_path": "7386/solution_7386.kt", "Qwen2.5-Coder-7B-Instruct": "fun intersectionAdditionAssignmentOperator(i: Int): Int {\n    var result = i\n    result += 12\n    return result\n}"}
{"kt_path": "12691/solution_12691.kt", "Qwen2.5-Coder-7B-Instruct": "object Solution_12691 {\n    fun calculateRemainingBudget(initialBudget: Float, expenses: Float): Float {\n        val remainingBudget = initialBudget - expenses\n        return remainingBudget\n    }\n}"}
{"kt_path": "8209/solution_8209.kt", "Qwen2.5-Coder-7B-Instruct": "fun calculateRequiredMaterials(materialsNeeded: Float, materialsAvailable: Float): Float {\n    return materialsNeeded / materialsAvailable\n}"}
{"kt_path": "2049/solution_2049.kt", "Qwen2.5-Coder-7B-Instruct": "object Solution_2049 {\n    fun calculatePrice(pricePerUnit: Double, quantity: Double, discountRate: Double): Double {\n        return pricePerUnit * quantity * (1 - discountRate)\n    }\n}"}
{"kt_path": "586/solution_586.kt", "Qwen2.5-Coder-7B-Instruct": "object Solution_586 {\n    fun calculateArea(length: Double, width: Double): Double {\n        return length * width\n    }\n}"}
{"kt_path": "5139/solution_5139.kt", "Qwen2.5-Coder-7B-Instruct": "object Solution_5139Kt {\n    fun calculateTax(income: Double, taxRate: Double): Double {\n        return income * taxRate\n    }\n}"}
{"kt_path": "7904/solution_7904.kt", "Qwen2.5-Coder-7B-Instruct": "object Solution_7904 {\n    fun checkCurrent(value: Double, divisor: Double): Double {\n        return value / divisor\n    }\n}"}
{"kt_path": "9335/solution_9335.kt", "Qwen2.5-Coder-7B-Instruct": "object Solution_9335Kt {\n    fun calculateTax(income: Double, taxRate: Double): Double {\n        return income * taxRate\n    }\n}"}
{"kt_path": "2329/solution_2329.kt", "Qwen2.5-Coder-7B-Instruct": "object Solution_2329 {\n    fun calculateTotalCost(quantity: Int, pricePerUnit: Float): Float {\n        return quantity.toFloat() * pricePerUnit\n    }\n}"}
{"kt_path": "6572/solution_6572.kt", "Qwen2.5-Coder-7B-Instruct": "object Solution_6572Kt {\n    fun calculateTotalPrice(quantity: Int, pricePerUnit: Float): Float {\n        return quantity.toFloat() * pricePerUnit\n    }\n}"}
{"kt_path": "8071/solution_8071.kt", "Qwen2.5-Coder-7B-Instruct": "object Solution_8071Kt {\n    fun calculateArea(length: Double, width: Double): Double {\n        val area = length * width\n        return area\n    }\n}"}
{"kt_path": "11310/solution_11310.kt", "Qwen2.5-Coder-7B-Instruct": "object Solution_11310Kt {\n    fun calculateExpenses(quantity: Int, pricePerUnit: Float): Float {\n        return quantity.toFloat() * pricePerUnit\n    }\n}"}
{"kt_path": "10435/solution_10435.kt", "Qwen2.5-Coder-7B-Instruct": "fun calculateWeight(weight: Double, count: Int): Double {\n    return weight + count.toDouble()\n}"}
{"kt_path": "5594/solution_5594.kt", "Qwen2.5-Coder-7B-Instruct": "fun checkRealPart(realPart: Int, imaginaryPart: Int): Boolean {\n    return realPart != 0\n}"}
{"kt_path": "1356/solution_1356.kt", "Qwen2.5-Coder-7B-Instruct": "object Solution_1356Kt {\n    fun isNone(obj: Any?): Boolean = obj == null\n}"}
{"kt_path": "8902/solution_8902.kt", "Qwen2.5-Coder-7B-Instruct": "object Solution_8902 {\n    fun calculatePower(base: Double, exponent: Double): Double {\n        return base * exponent\n    }\n}"}
{"kt_path": "6573/solution_6573.kt", "Qwen2.5-Coder-7B-Instruct": "fun calculateAveragePrice(price: Float, quantity: Int): Float {\n    return price / quantity.toFloat()\n}"}
