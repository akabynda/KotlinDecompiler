{"kt_path": "7434/solution_7434.kt", "deepseek-coder-1.3b-instruct": "object Solution_7434 {\n    fun test() {}\n}"}
{"kt_path": "7824/solution_7824.kt", "deepseek-coder-1.3b-instruct": "object Solution_7824 {\n    fun testCountOddNumbers() {\n    }\n}"}
{"kt_path": "2614/solution_2614.kt", "deepseek-coder-1.3b-instruct": "object Solution_2614 {\n    fun investigateSituation() {}\n}"}
{"kt_path": "4477/solution_4477.kt", "deepseek-coder-1.3b-instruct": "object Solution_4477 {\n    fun getLeadII(): Int {\n        return 0\n    }\n}"}
{"kt_path": "4476/solution_4476.kt", "deepseek-coder-1.3b-instruct": "class Solution_4476 {\n    fun getHeartRate(): Int {\n        return 0\n    }\n}"}
{"kt_path": "8909/solution_8909.kt", "deepseek-coder-1.3b-instruct": "object Solution_8909 {\n    fun parentFunction(i: Int): Int = i\n}"}
{"kt_path": "4699/solution_4699.kt", "deepseek-coder-1.3b-instruct": "fun hasLicense(arg0: Boolean): Boolean {\n    return arg0\n}"}
{"kt_path": "6126/solution_6126.kt", "deepseek-coder-1.3b-instruct": "object Solution_6126 {\n    fun checkBoolean(b: Boolean): Boolean = b\n}"}
{"kt_path": "5226/solution_5226.kt", "deepseek-coder-1.3b-instruct": "object Solution_5226 {\n    fun intersectPrecedenceTuple(): Boolean {\n        return false\n    }\n}"}
{"kt_path": "652/solution_652.kt", "deepseek-coder-1.3b-instruct": "fun checkFloatDivision(a: Float, b: Float): Boolean {\n    return a / b == 1.0f\n}"}
{"kt_path": "558/solution_558.kt", "deepseek-coder-1.3b-instruct": "fun function1(a: Int, b: Int): Int {\n    return a.xor(b)\n}"}
{"kt_path": "13973/solution_13973.kt", "deepseek-coder-1.3b-instruct": "fun divide(a: Int, b: Int): Int {\n    return a / b\n}"}
{"kt_path": "13972/solution_13972.kt", "deepseek-coder-1.3b-instruct": "fun multiply(a: Int, b: Int): Int {\n    return a * b\n}"}
{"kt_path": "13970/solution_13970.kt", "deepseek-coder-1.3b-instruct": "fun increaseByOne(n: Int): Int {\n    return n + 1\n}"}
{"kt_path": "1606/solution_1606.kt", "deepseek-coder-1.3b-instruct": "fun getRemainder(a: Int, b: Int): Int {\n    return a % b\n}"}
{"kt_path": "3900/solution_3900.kt", "deepseek-coder-1.3b-instruct": "fun multiplyNumbers(a: Int, b: Int): Int {\n    return a * b\n}"}
{"kt_path": "13864/solution_13864.kt", "deepseek-coder-1.3b-instruct": "fun calculateScore(a: Int, b: Int): Int {\n    return a * b\n}"}
{"kt_path": "7751/solution_7751.kt", "deepseek-coder-1.3b-instruct": "fun getComplement(n: Int): Int {\n    return -(n + 1)\n}"}
{"kt_path": "9566/solution_9566.kt", "deepseek-coder-1.3b-instruct": "fun calculateVelocity(a: Int, b: Int): Int {\n    return a / b\n}"}
{"kt_path": "4903/solution_4903.kt", "deepseek-coder-1.3b-instruct": "fun calculateDayPublished(days: Int): Int {\n    return days + 1\n}"}
{"kt_path": "11380/solution_11380.kt", "deepseek-coder-1.3b-instruct": "fun determineWallArea(x: Int, y: Int): Int {\n    return x * y\n}"}
{"kt_path": "1194/solution_1194.kt", "deepseek-coder-1.3b-instruct": "fun whileSubtraction(a: Int, b: Int): Int {\n    var result = a\n    while (result >= b) {\n        result -= b\n    }\n    return result\n}"}
{"kt_path": "7844/solution_7844.kt", "deepseek-coder-1.3b-instruct": "fun divideNumbers(a: Double, b: Double): Double {\n    return a / b\n}"}
{"kt_path": "599/solution_599.kt", "deepseek-coder-1.3b-instruct": "fun calculateRoomArea(length: Double, width: Double): Double {\n    return length * width\n}"}
{"kt_path": "8402/solution_8402.kt", "deepseek-coder-1.3b-instruct": "fun calculateNetIncome(grossIncome: Float, taxRate: Float): Float {\n    return (grossIncome - (grossIncome * taxRate))\n}"}
{"kt_path": "11629/solution_11629.kt", "deepseek-coder-1.3b-instruct": "fun calculateSlope(x: Double, y: Double): Double = x / y"}
{"kt_path": "2587/solution_2587.kt", "deepseek-coder-1.3b-instruct": "fun calculateRoomArea(length: Double, width: Double): Double {\n    return length * width\n}"}
{"kt_path": "5733/solution_5733.kt", "deepseek-coder-1.3b-instruct": "fun calculateBuildingArea(length: Float, width: Float): Float {\n    return length * width\n}"}
{"kt_path": "12144/solution_12144.kt", "deepseek-coder-1.3b-instruct": "fun calculateProfits(price: Double, quantity: Double): Double {\n    return price - quantity\n}"}
{"kt_path": "9763/solution_9763.kt", "deepseek-coder-1.3b-instruct": "fun calculateFinalPrice(price: Double, discount: Double): Double {\n    return price - (price * discount / 100)\n}"}
{"kt_path": "11762/solution_11762.kt", "deepseek-coder-1.3b-instruct": "fun calculateRoomArea(length: Double, width: Double): Double {\n    return length * width\n}"}
{"kt_path": "9178/solution_9178.kt", "deepseek-coder-1.3b-instruct": "fun calculateGravityForce(mass: Double, gravity: Double): Double {\n    return mass * gravity\n}"}
{"kt_path": "8545/solution_8545.kt", "deepseek-coder-1.3b-instruct": "fun calculateConversionRate(a: Int, b: Int): Double {\n    return a.toDouble() / b.toDouble()\n}"}
{"kt_path": "13968/solution_13968.kt", "deepseek-coder-1.3b-instruct": "fun athletePerformanceDistance(distance: Double, time: Double): Double {\n    return distance / time\n}"}
{"kt_path": "7841/solution_7841.kt", "deepseek-coder-1.3b-instruct": "fun assignXor(a: Int, b: Int): Int {\n    val xor = a.xor(b)\n    return xor\n}"}
{"kt_path": "2909/solution_2909.kt", "deepseek-coder-1.3b-instruct": "fun addNumbers(a: Int, b: Int): Int {\n    val result = a + b\n    return result\n}"}
{"kt_path": "302/solution_302.kt", "deepseek-coder-1.3b-instruct": "fun calculateXor(a: Int, b: Int): Int {\n    val xor = a xor b\n    return xor\n}"}
{"kt_path": "12753/solution_12753.kt", "deepseek-coder-1.3b-instruct": "fun trimLumber(a: Int, b: Int): Int {\n    val c = a - b\n    return c\n}"}
{"kt_path": "5694/solution_5694.kt", "deepseek-coder-1.3b-instruct": "fun calculateAge(years: Int, currentYear: Int): Int {\n    val age = currentYear - years\n    return age\n}"}
{"kt_path": "7772/solution_7772.kt", "deepseek-coder-1.3b-instruct": "fun increaseSpeed(speed: Int, increment: Int): Int {\n    val newSpeed = speed + increment\n    return newSpeed\n}"}
{"kt_path": "13321/solution_13321.kt", "deepseek-coder-1.3b-instruct": "fun xorOperation(n: Int, start: Int): Int {\n    val arr = Array(n) { start + 2L * it }\n    return arr.fold(start) { acc, num -> acc xor num }\n}"}
{"kt_path": "3882/solution_3882.kt", "deepseek-coder-1.3b-instruct": "fun calcTotalHours(hours: Int, minutes: Int): Int {\n    val totalMinutes = hours * 60 + minutes\n    return totalMinutes / 60\n}"}
{"kt_path": "7919/solution_7919.kt", "deepseek-coder-1.3b-instruct": "fun addOrOperation(a: Int, b: Int): Int {\n    val result = a + b\n    return result\n}"}
{"kt_path": "640/solution_640.kt", "deepseek-coder-1.3b-instruct": "fun multiplyAndAssign(a: Int, b: Int): Int {\n    val result = a * b\n    return result\n}"}
{"kt_path": "797/solution_797.kt", "deepseek-coder-1.3b-instruct": "fun calculateTax(baseSalary: Float, taxRate: Float): Float {\n    val tax = baseSalary * taxRate\n    return tax\n}"}
{"kt_path": "3049/solution_3049.kt", "deepseek-coder-1.3b-instruct": "fun calculateVolume(x: Int, y: Int, z: Int): Int {\n    return x * y * z\n}"}
{"kt_path": "6128/solution_6128.kt", "deepseek-coder-1.3b-instruct": "fun absoluteValue(i: Int): Int = java.lang.Math.abs(i)"}
{"kt_path": "5969/solution_5969.kt", "deepseek-coder-1.3b-instruct": "fun getNegativeIndex(a: Int, b: Int): Int {\n    val c = a - b\n    return c\n}"}
{"kt_path": "1224/solution_1224.kt", "deepseek-coder-1.3b-instruct": "fun subtractIntegers(a: Int, b: Int): Int {\n    return a - b\n}"}
{"kt_path": "1810/solution_1810.kt", "deepseek-coder-1.3b-instruct": "fun calculateLandArea(width: Int, height: Int): Int {\n    val area = width * height\n    return area\n}"}
{"kt_path": "1562/solution_1562.kt", "deepseek-coder-1.3b-instruct": "fun calculateTax(baseSalary: Float, taxRate: Float): Float {\n    val tax = baseSalary * taxRate\n    return tax\n}"}
{"kt_path": "2870/solution_2870.kt", "deepseek-coder-1.3b-instruct": "fun calculateFine(a: Int, b: Int): Int {\n    return a - b\n}"}
{"kt_path": "6759/solution_6759.kt", "deepseek-coder-1.3b-instruct": "fun averageSpeed(x: Float, y: Float): Float {\n    return x / y\n}"}
{"kt_path": "2736/solution_2736.kt", "deepseek-coder-1.3b-instruct": "fun calculatePatientAge(years: Int, months: Int): Int {\n    val ageInYears = years\n    val ageInMonths = months\n    return ageInYears * 12 + ageInMonths\n}"}
{"kt_path": "4004/solution_4004.kt", "deepseek-coder-1.3b-instruct": "fun calculatePatientAge(age: Int, yearOfBirth: Int): Int {\n    val age = age - yearOfBirth\n    return age\n}"}
{"kt_path": "12220/solution_12220.kt", "deepseek-coder-1.3b-instruct": "fun updateAndOperator(a: Int, b: Int): Int {\n    val result = a and b\n    return result\n}"}
{"kt_path": "14509/solution_14509.kt", "deepseek-coder-1.3b-instruct": "fun calculateRoomArea(length: Int, width: Int): Int {\n    val area = length * width\n    return area\n}"}
{"kt_path": "13481/solution_13481.kt", "deepseek-coder-1.3b-instruct": "fun calculateShutterSpeed(speed: Double, shutterSpeed: Int, ratio: Double): Double {\n    return speed / shutterSpeed * ratio\n}"}
{"kt_path": "10181/solution_10181.kt", "deepseek-coder-1.3b-instruct": "fun calculateTax(baseTax: Float, taxRate: Float): Float {\n    val tax = baseTax * taxRate\n    return tax\n}"}
{"kt_path": "3783/solution_3783.kt", "deepseek-coder-1.3b-instruct": "fun calculateVoltageDrop(current: Int, voltage: Int): Int {\n    val voltageDrop = current * voltage\n    return voltageDrop\n}"}
{"kt_path": "7670/solution_7670.kt", "deepseek-coder-1.3b-instruct": "fun identityAssignment(): Boolean {\n    return 5 == 1\n}"}
{"kt_path": "13453/solution_13453.kt", "deepseek-coder-1.3b-instruct": "fun calculateTax(baseSalary: Float, taxRate: Float): Float {\n    val tax = baseSalary * taxRate\n    return tax\n}"}
{"kt_path": "6574/solution_6574.kt", "deepseek-coder-1.3b-instruct": "fun calculateProfit(price: Float, cost: Float): Float {\n    return price - cost\n}"}
{"kt_path": "985/solution_985.kt", "deepseek-coder-1.3b-instruct": "fun multiplyAssignAndRepeat(a: Int, b: Int): Int {\n    var result = a * b\n    return result\n}"}
{"kt_path": "3069/solution_3069.kt", "deepseek-coder-1.3b-instruct": "fun calculateStress(a: Float, b: Float): Float {\n    return a / b\n}"}
{"kt_path": "9567/solution_9567.kt", "deepseek-coder-1.3b-instruct": "fun calculateAcceleration(a: Int, b: Int, c: Int): Int {\n    return a - b / c\n}"}
{"kt_path": "9762/solution_9762.kt", "deepseek-coder-1.3b-instruct": "fun calculateDiscount(discount: Double): Double {\n    return discount * 0.2\n}"}
{"kt_path": "12787/solution_12787.kt", "deepseek-coder-1.3b-instruct": "fun calculatePower(x: Float, y: Float): Float {\n    return x * y\n}"}
{"kt_path": "14674/solution_14674.kt", "deepseek-coder-1.3b-instruct": "fun calculateTaxes(baseSalary: Float, taxRate: Float): Float {\n    val taxes = baseSalary * taxRate\n    return taxes\n}"}
{"kt_path": "144/solution_144.kt", "deepseek-coder-1.3b-instruct": "fun calculateNetIncome(grossIncome: Float, taxRate: Float): Float {\n    val netIncome = (grossIncome - (grossIncome * taxRate))\n    return netIncome\n}"}
{"kt_path": "224/solution_224.kt", "deepseek-coder-1.3b-instruct": "fun calculateSalary(salary: Double): Long {\n    return Math.round(salary)\n}"}
{"kt_path": "12602/solution_12602.kt", "deepseek-coder-1.3b-instruct": "fun calculateTotalIncome(a: Int, b: Int): Int {\n    val c = a + b\n    return c\n}"}
{"kt_path": "2061/solution_2061.kt", "deepseek-coder-1.3b-instruct": "fun calculateFurnitureArea(length: Int, width: Int): Int {\n    val area = length * width\n    return area\n}"}
{"kt_path": "1884/solution_1884.kt", "deepseek-coder-1.3b-instruct": "fun calculateWallArea(length: Float, width: Float): Float {\n    val area = length * width\n    return area\n}"}
{"kt_path": "5140/solution_5140.kt", "deepseek-coder-1.3b-instruct": "fun calculateNetIncome(grossIncome: Float, taxRate: Float): Float {\n    val netIncome = (grossIncome - (grossIncome * taxRate))\n    return netIncome\n}"}
{"kt_path": "1945/solution_1945.kt", "deepseek-coder-1.3b-instruct": "fun subtractTaxidermyAnimals(a: Int, b: Int): Int {\n    val c = a - b\n    return c\n}"}
{"kt_path": "2025/solution_2025.kt", "deepseek-coder-1.3b-instruct": "fun calculateAnimalPopulation(a: Int, b: Int): Int {\n    val c = a - b\n    return c\n}"}
{"kt_path": "14511/solution_14511.kt", "deepseek-coder-1.3b-instruct": "fun calculateNumberOfLights(a: Int, b: Int): Int {\n    val result = a / b\n    return result\n}"}
{"kt_path": "13493/solution_13493.kt", "deepseek-coder-1.3b-instruct": "fun calculateDistance(x: Float, y: Float): Float {\n    return kotlin.math.sqrt(x * x + y * y)\n}"}
{"kt_path": "4381/solution_4381.kt", "deepseek-coder-1.3b-instruct": "fun calculateAverageSpeed(speed1: Float, speed2: Float): Float {\n    return speed1 / speed2\n}"}
{"kt_path": "9587/solution_9587.kt", "deepseek-coder-1.3b-instruct": "fun bAnd(a: Boolean, b: Boolean): Boolean {\n    return a && b\n}"}
{"kt_path": "6576/solution_6576.kt", "deepseek-coder-1.3b-instruct": "fun calculateDividendRatio(dividend: Float, divisor: Float): Float {\n    return dividend / divisor\n}"}
{"kt_path": "11550/solution_11550.kt", "deepseek-coder-1.3b-instruct": "fun calculateAverageSpeed(distance: Float, time: Float): Float {\n    return distance / time\n}"}
{"kt_path": "7386/solution_7386.kt", "deepseek-coder-1.3b-instruct": "fun intersectionAdditionAssignmentOperator(i: Int): Int {\n    val i1 = i\n    val i2 = i + 12\n    return i2\n}"}
{"kt_path": "12691/solution_12691.kt", "deepseek-coder-1.3b-instruct": "fun calculateRemainingBudget(totalBudget: Float, spentBudget: Float): Float {\n    val remainingBudget = totalBudget - spentBudget\n    return remainingBudget\n}"}
{"kt_path": "8209/solution_8209.kt", "deepseek-coder-1.3b-instruct": "fun calculateRequiredMaterials(a: Float, b: Float): Float {\n    return a / b\n}"}
{"kt_path": "2049/solution_2049.kt", "deepseek-coder-1.3b-instruct": "fun calculatePrice(price: Double, quantity: Double, taxRate: Double): Double {\n    return price * quantity * (1 + taxRate)\n}"}
{"kt_path": "586/solution_586.kt", "deepseek-coder-1.3b-instruct": "fun calculateArea(width: Double, height: Double): Double {\n    return width * height\n}"}
{"kt_path": "5139/solution_5139.kt", "deepseek-coder-1.3b-instruct": "fun calculateTax(base: Double, rate: Double): Double {\n    return base * rate\n}"}
{"kt_path": "7904/solution_7904.kt", "deepseek-coder-1.3b-instruct": "fun checkCurrent(a: Double, b: Double): Double {\n    return a / b\n}"}
{"kt_path": "9335/solution_9335.kt", "deepseek-coder-1.3b-instruct": "fun calculateTax(baseAmount: Double, taxRate: Double): Double {\n    return baseAmount * taxRate\n}"}
{"kt_path": "2329/solution_2329.kt", "deepseek-coder-1.3b-instruct": "fun calculateTotalCost(quantity: Int, price: Float): Float {\n    val totalCost = quantity * price\n    return totalCost\n}"}
{"kt_path": "6572/solution_6572.kt", "deepseek-coder-1.3b-instruct": "fun calculateTotalPrice(quantity: Int, price: Float): Float {\n    val totalPrice = quantity * price\n    return totalPrice\n}"}
{"kt_path": "8071/solution_8071.kt", "deepseek-coder-1.3b-instruct": "fun calculateArea(width: Double, height: Double): Double {\n    return width * height\n}"}
{"kt_path": "11310/solution_11310.kt", "deepseek-coder-1.3b-instruct": "fun calculateExpenses(a: Int, b: Float): Float {\n    val c = a.toFloat()\n    val result = c * b\n    return result\n}"}
{"kt_path": "10435/solution_10435.kt", "deepseek-coder-1.3b-instruct": "fun calculateWeight(weight: Double, count: Int): Double {\n    val result = weight + count\n    return result\n}"}
{"kt_path": "5594/solution_5594.kt", "deepseek-coder-1.3b-instruct": "fun checkRealPart(a: Int, b: Int): Boolean {\n    if (a == b) {\n        return true\n    } else {\n        return false\n    }\n}"}
{"kt_path": "1356/solution_1356.kt", "deepseek-coder-1.3b-instruct": "fun isNone(obj: Any?): Boolean = obj == null"}
{"kt_path": "8902/solution_8902.kt", "deepseek-coder-1.3b-instruct": "fun calculatePower(a: Double, b: Double): Double {\n    return Math.pow(a, b)\n}"}
{"kt_path": "6573/solution_6573.kt", "deepseek-coder-1.3b-instruct": "fun calculateAveragePrice(price: Float, quantity: Int): Float {\n    return price / quantity\n}"}
