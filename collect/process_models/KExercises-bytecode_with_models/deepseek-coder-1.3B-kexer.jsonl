{"kt_path": "7434/solution_7434.kt", "deepseek-coder-1.3B-kexer": "fun test() {\n    // Convert the byte-code into Kotlin source\n    // Output Kotlin code only\n}"}
{"kt_path": "7824/solution_7824.kt", "deepseek-coder-1.3B-kexer": "fun testCountOddNumbers() {\n    val numbers = listOf(1, 2, 3, 4, 5, 6, 7, 8, 9, 10)\n    val oddNumbers = numbers.filter { it % 2 != 0 }\n    println(\"Number of odd numbers: ${oddNumbers.size}\")\n}"}
{"kt_path": "2614/solution_2614.kt", "deepseek-coder-1.3B-kexer": "fun investigateSituation() {\n    // Convert the byte-code into Kotlin code\n    // Output only the Kotlin code\n}"}
{"kt_path": "4477/solution_4477.kt", "deepseek-coder-1.3B-kexer": "fun getLeadII(): Int {\n    return 0\n}"}
{"kt_path": "4476/solution_4476.kt", "deepseek-coder-1.3B-kexer": "fun getHeartRate(): Int {\n    return 0\n}"}
{"kt_path": "8909/solution_8909.kt", "deepseek-coder-1.3B-kexer": "/**\n * This function takes an integer as input and returns the parent function's value.\n *\n * @param num The integer value.\n * @return The parent function's value.\n */\nfun parentFunction(num: Int): Int {\n    return when (num) {\n        0 -> 0\n        else -> parentFunction(num - 1)\n    }\n}"}
{"kt_path": "4699/solution_4699.kt", "deepseek-coder-1.3B-kexer": "fun hasLicense(hasLicense: Boolean): Boolean {\n    return hasLicense\n}"}
{"kt_path": "6126/solution_6126.kt", "deepseek-coder-1.3B-kexer": "fun checkBoolean(boolean: Boolean): Boolean {\n    // Convert the byte code into Kotlin code\n    // Output only the Kotlin code\n    return boolean\n}"}
{"kt_path": "5226/solution_5226.kt", "deepseek-coder-1.3B-kexer": "fun intersectPrecedenceTuple(): Boolean {\n    // Convert the byte-code into Kotlin code\n    // Output only the Kotlin code\n    return false\n}"}
{"kt_path": "652/solution_652.kt", "deepseek-coder-1.3B-kexer": "/**\n * This function takes two floating-point numbers as input and checks if the division of the first number\n * by the second number results in a floating-point number.\n *\n * @param num1 The first floating-point number.\n * @param num2 The second floating-point number.\n * @return True if the division of num1 by num2 results in a floating-point number, False otherwise.\n */\nfun checkFloatDivision(num1: Float, num2: Float): Boolean {\n    // Check if the division of num1 by num2 results in a floating-point number\n    return num1 / num2 != num1.toDouble()\n}"}
{"kt_path": "558/solution_558.kt", "deepseek-coder-1.3B-kexer": "/**\n * This function takes two integers as input and returns the result of the XOR operation.\n */\nfun function1(a: Int, b: Int): Int {\n    return a xor b\n}"}
{"kt_path": "13973/solution_13973.kt", "deepseek-coder-1.3B-kexer": "fun divide(a: Int, b: Int): Int {\n    return a / b\n}"}
{"kt_path": "13972/solution_13972.kt", "deepseek-coder-1.3B-kexer": "/**\n * This function takes two integers and returns their product.\n */\nfun multiply(num1: Int, num2: Int): Int {\n    return num1 * num2\n}"}
{"kt_path": "13970/solution_13970.kt", "deepseek-coder-1.3B-kexer": "fun increaseByOne(num: Int): Int {\n    return num + 1\n}"}
{"kt_path": "1606/solution_1606.kt", "deepseek-coder-1.3B-kexer": "/**\n * This function takes two integers as input and returns the remainder of dividing the first number by the second number.\n */\nfun getRemainder(num1: Int, num2: Int): Int {\n    return num1 % num2\n}"}
{"kt_path": "3900/solution_3900.kt", "deepseek-coder-1.3B-kexer": "/**\n * This function takes two integers as input and returns their product.\n */\nfun multiplyNumbers(num1: Int, num2: Int): Int {\n    return num1 * num2\n}"}
{"kt_path": "13864/solution_13864.kt", "deepseek-coder-1.3B-kexer": "/**\n * This function takes two integers as input and returns the product of the two numbers.\n */\nfun calculateScore(player1: Int, player2: Int): Int {\n    return player1 * player2\n}"}
{"kt_path": "7751/solution_7751.kt", "deepseek-coder-1.3B-kexer": "/**\n * This function takes an integer as input and returns its complement.\n *\n * @param num The integer for which complement needs to be found.\n * @return The complement of the input integer.\n */\nfun getComplement(num: Int): Int {\n    // Convert the integer to binary representation\n    val binaryRepresentation = Integer.toBinaryString(num)\n\n    // Reverse the binary representation\n    val reversedBinary = binaryRepresentation.reversed()\n\n    // Convert the reversed binary representation back to decimal\n    val decimalRepresentation = reversedBinary.toInt(2)\n\n    // Return the complement of the decimal representation\n    return decimalRepresentation\n}"}
{"kt_path": "9566/solution_9566.kt", "deepseek-coder-1.3B-kexer": "/**\n * This function takes two integers as input and returns the velocity of an object.\n *\n * @param distance The distance covered by the object in meters.\n * @param time The time taken by the object to cover the distance in seconds.\n * @return The velocity of the object in meters per second.\n */\nfun calculateVelocity(distance: Int, time: Int): Int {\n    return distance / time\n}"}
{"kt_path": "4903/solution_4903.kt", "deepseek-coder-1.3B-kexer": "fun calculateDayPublished(numberOfSales: Int): Int {\n    return numberOfSales + 1\n}"}
{"kt_path": "11380/solution_11380.kt", "deepseek-coder-1.3B-kexer": "/**\n * This function takes two integers representing the length and width of a wall,\n * and returns the area of the wall.\n *\n * @param length The length of the wall.\n * @param width The width of the wall.\n * @return The area of the wall.\n */\nfun determineWallArea(length: Int, width: Int): Int {\n    return length * width\n}"}
{"kt_path": "1194/solution_1194.kt", "deepseek-coder-1.3B-kexer": "/**\n * This function takes two integers and performs a subtraction operation using a while loop.\n *\n * @param num1 The first integer.\n * @param num2 The second integer.\n * @return The result of the subtraction operation.\n */\nfun whileSubtraction(num1: Int, num2: Int): Int {\n    var result = num1\n    while (result >= num2) {\n        result -= num2\n    }\n    return result\n}"}
{"kt_path": "7844/solution_7844.kt", "deepseek-coder-1.3B-kexer": "fun divideNumbers(num1: Double, num2: Double): Double {\n    return num1 / num2\n}"}
{"kt_path": "599/solution_599.kt", "deepseek-coder-1.3B-kexer": "/**\n * This function takes the length and width of a room and calculates its area.\n */\nfun calculateRoomArea(length: Double, width: Double): Double {\n    val area = length * width\n    return area\n}"}
{"kt_path": "8402/solution_8402.kt", "deepseek-coder-1.3B-kexer": "fun calculateNetIncome(salary: Float, bonus: Float): Float {\n    val netIncome = salary - bonus\n    return netIncome\n}"}
{"kt_path": "11629/solution_11629.kt", "deepseek-coder-1.3B-kexer": "/**\n * This function takes two floating-point numbers as input and returns the slope of the line formed by the two points.\n */\nfun calculateSlope(x1: Double, y1: Double, x2: Double, y2: Double): Double {\n    val slope = (y2 - y1) / (x2 - x1)\n    return slope\n}"}
{"kt_path": "2587/solution_2587.kt", "deepseek-coder-1.3B-kexer": "/**\n * This function takes the length and width of a room and calculates its area.\n */\nfun calculateRoomArea(length: Double, width: Double): Double {\n    val area = length * width\n    return area\n}"}
{"kt_path": "5733/solution_5733.kt", "deepseek-coder-1.3B-kexer": "fun calculateBuildingArea(length: Float, width: Float): Float {\n    val area = length * width\n    return area\n}"}
{"kt_path": "12144/solution_12144.kt", "deepseek-coder-1.3B-kexer": "fun calculateProfits(costs: Double, sales: Double): Double {\n    return sales - costs\n}"}
{"kt_path": "9763/solution_9763.kt", "deepseek-coder-1.3B-kexer": "/**\n * This function takes the original price and the discount percentage as arguments and calculates the final price after applying the discount.\n *\n * @param originalPrice The original price of the product.\n * @param discountPercentage The discount percentage to be applied.\n * @return The final price after applying the discount.\n */\nfun calculateFinalPrice(originalPrice: Double, discountPercentage: Double): Double {\n    val discountedPrice = originalPrice - (originalPrice * (discountPercentage / 100))\n    return discountedPrice\n}"}
{"kt_path": "11762/solution_11762.kt", "deepseek-coder-1.3B-kexer": "fun calculateRoomArea(length: Double, width: Double): Double {\n    return length * width\n}"}
{"kt_path": "9178/solution_9178.kt", "deepseek-coder-1.3B-kexer": "fun calculateGravityForce(mass: Double, acceleration: Double): Double {\n    return mass * acceleration\n}"}
{"kt_path": "8545/solution_8545.kt", "deepseek-coder-1.3B-kexer": "fun calculateConversionRate(initialAmount: Int, finalAmount: Int): Double {\n    val conversionRate = finalAmount.toDouble() / initialAmount.toDouble()\n    return conversionRate\n}"}
{"kt_path": "13968/solution_13968.kt", "deepseek-coder-1.3B-kexer": "fun athletePerformanceDistance(distance: Double, time: Double): Double {\n    return distance / time\n}"}
{"kt_path": "7841/solution_7841.kt", "deepseek-coder-1.3B-kexer": "/**\n * This function takes two integers as input and returns the result of XOR operation between them.\n */\nfun assignXor(x: Int, y: Int): Int {\n    return x xor y\n}"}
{"kt_path": "2909/solution_2909.kt", "deepseek-coder-1.3B-kexer": "fun addNumbers(num1: Int, num2: Int): Int {\n    return num1 + num2\n}"}
{"kt_path": "302/solution_302.kt", "deepseek-coder-1.3B-kexer": "/**\n * This function takes two integers as input and returns the result of the XOR operation between them.\n */\nfun calculateXor(num1: Int, num2: Int): Int {\n    return num1 xor num2\n}"}
{"kt_path": "12753/solution_12753.kt", "deepseek-coder-1.3B-kexer": "/**\n * This function takes two integers as input and returns the difference between the first number and the second number after trimming any lumber that is present in both numbers.\n */\nfun trimLumber(num1: Int, num2: Int): Int {\n    // Trimming lumber from both numbers\n    val trimmedNum1 = num1.toString().replace(\"lumber\", \"\")\n    val trimmedNum2 = num2.toString().replace(\"lumber\", \"\")\n\n    // Calculate the difference between the trimmed numbers\n    val difference = trimmedNum1.toInt() - trimmedNum2.toInt()\n\n    return difference\n}"}
{"kt_path": "5694/solution_5694.kt", "deepseek-coder-1.3B-kexer": "/**\n * This function takes two integers representing the age of a person and calculates their age.\n *\n * @param age1 The age of the person.\n * @param age2 The age of the person.\n * @return The calculated age.\n */\nfun calculateAge(age1: Int, age2: Int): Int {\n    val ageDifference = age1 - age2\n    return ageDifference\n}"}
{"kt_path": "7772/solution_7772.kt", "deepseek-coder-1.3B-kexer": "fun increaseSpeed(speed: Int, distance: Int): Int {\n    return speed + distance\n}"}
{"kt_path": "13321/solution_13321.kt", "deepseek-coder-1.3B-kexer": "/**\n * This function takes two integers as input and returns the result of the XOR operation between them.\n */\nfun xorOperation(a: Int, b: Int): Int {\n    return a xor b\n}"}
{"kt_path": "3882/solution_3882.kt", "deepseek-coder-1.3B-kexer": "fun calcTotalHours(hoursWorked: Int, hoursPerDay: Int): Int {\n    val totalHours = hoursWorked * hoursPerDay\n    return totalHours\n}"}
{"kt_path": "7919/solution_7919.kt", "deepseek-coder-1.3B-kexer": "/**\n * This function takes two integers and performs an addition operation on them.\n *\n * @param num1 The first integer.\n * @param num2 The second integer.\n * @return The result of the addition operation.\n */\nfun addOrOperation(num1: Int, num2: Int): Int {\n    return num1 + num2\n}"}
{"kt_path": "640/solution_640.kt", "deepseek-coder-1.3B-kexer": "/**\n * This function takes two integers as input and multiplies them, then assigns the result back to the first input.\n *\n * @param a The first integer.\n * @param b The second integer.\n * @return The result of multiplying a and b.\n */\nfun multiplyAndAssign(a: Int, b: Int): Int {\n    val result = a * b\n    return result\n}"}
{"kt_path": "797/solution_797.kt", "deepseek-coder-1.3B-kexer": "/**\n * This function calculates the tax amount based on the income and tax rate.\n *\n * @param income The income amount.\n * @param taxRate The tax rate.\n * @return The tax amount.\n */\nfun calculateTax(income: Float, taxRate: Float): Float {\n    val taxAmount = income * taxRate\n    return taxAmount\n}"}
{"kt_path": "3049/solution_3049.kt", "deepseek-coder-1.3B-kexer": "fun calculateVolume(length: Int, width: Int, height: Int): Int {\n    val volume = length * width * height\n    return volume\n}"}
{"kt_path": "6128/solution_6128.kt", "deepseek-coder-1.3B-kexer": "/**\n * This function takes an integer as input and returns its absolute value.\n */\nfun absoluteValue(number: Int): Int {\n    return Math.abs(number)\n}"}
{"kt_path": "5969/solution_5969.kt", "deepseek-coder-1.3B-kexer": "/**\n * Given two integers, find the negative index of the second integer in the first integer's binary representation.\n *\n * @param num1 The first integer.\n * @param num2 The second integer.\n * @return The negative index of the second integer in the first integer's binary representation.\n */\nfun getNegativeIndex(num1: Int, num2: Int): Int {\n    // Convert the integers to binary representations\n    val binary1 = Integer.toBinaryString(num1)\n    val binary2 = Integer.toBinaryString(num2)\n\n    // Find the negative index of the second integer in the first integer's binary representation\n    val negativeIndex = binary2.indexOf(binary1)\n\n    return negativeIndex\n}"}
{"kt_path": "1224/solution_1224.kt", "deepseek-coder-1.3B-kexer": "fun subtractIntegers(a: Int, b: Int): Int {\n    return a - b\n}"}
{"kt_path": "1810/solution_1810.kt", "deepseek-coder-1.3B-kexer": "/**\n * This function takes two integers representing the length and width of a rectangular land,\n * and calculates the total area of the land.\n */\nfun calculateLandArea(length: Int, width: Int): Int {\n    val area = length * width\n    return area\n}"}
{"kt_path": "1562/solution_1562.kt", "deepseek-coder-1.3B-kexer": "fun calculateTax(income: Float, taxRate: Float): Float {\n    val tax = income * taxRate\n    return tax\n}"}
{"kt_path": "2870/solution_2870.kt", "deepseek-coder-1.3B-kexer": "/**\n * This function takes two integers as input and calculates the fine amount based on the following conditions:\n * - If the number of books returned is less than or equal to 5, no fine is charged.\n * - If the number of books returned is between 6 and 10 (inclusive), a fine of 500 is charged.\n * - If the number of books returned is greater than 10, a fine of 1000 is charged.\n *\n * @param booksReturned The number of books returned.\n * @param fineAmount The current fine amount.\n * @return The updated fine amount.\n */\nfun calculateFine(booksReturned: Int, fineAmount: Int): Int {\n    return when {\n        booksReturned <= 5 -> fineAmount\n        booksReturned in 6..10 -> fineAmount + 500\n        else -> fineAmount + 1000\n    }\n}"}
{"kt_path": "6759/solution_6759.kt", "deepseek-coder-1.3B-kexer": "/**\n * This function takes two floating-point numbers as input and returns the average speed of an athlete.\n *\n * @param distance The distance covered by the athlete.\n * @param time The time taken by the athlete to cover the distance.\n * @return The average speed of the athlete.\n */\nfun averageSpeed(distance: Float, time: Float): Float {\n    val speed = distance / time\n    return speed\n}"}
{"kt_path": "2736/solution_2736.kt", "deepseek-coder-1.3B-kexer": "/**\n * This function takes two integers representing the patient's age and year of birth,\n * and calculates the age of the patient in years.\n *\n * @param age The age of the patient in years.\n * @param yearOfBirth The year of birth of the patient.\n * @return The age of the patient in years.\n */\nfun calculatePatientAge(age: Int, yearOfBirth: Int): Int {\n    val currentYear = 2022\n    val ageInYears = currentYear - yearOfBirth\n    return ageInYears\n}"}
{"kt_path": "4004/solution_4004.kt", "deepseek-coder-1.3B-kexer": "fun calculatePatientAge(age: Int, currentYear: Int): Int {\n    val ageInYears = currentYear - age\n    return ageInYears\n}"}
{"kt_path": "12220/solution_12220.kt", "deepseek-coder-1.3B-kexer": "/**\n * This function takes two integers as input and returns the result of performing an AND operation on them.\n *\n * @param a The first integer.\n * @param b The second integer.\n * @return The result of performing an AND operation on the two integers.\n */\nfun updateAndOperator(a: Int, b: Int): Int {\n    // Perform an AND operation on the two integers\n    val result = a and b\n    return result\n}"}
{"kt_path": "14509/solution_14509.kt", "deepseek-coder-1.3B-kexer": "/**\n * This function takes two integers representing the length and width of a room,\n * and calculates the area of the room.\n *\n * @param length The length of the room.\n * @param width The width of the room.\n * @return The area of the room.\n */\nfun calculateRoomArea(length: Int, width: Int): Int {\n    // Calculate the area of the room\n    val area = length * width\n\n    // Return the area\n    return area\n}"}
{"kt_path": "13481/solution_13481.kt", "deepseek-coder-1.3B-kexer": "/**\n * This function takes three arguments:\n * - shutterSpeed: the shutter speed in seconds\n * - aperture: the aperture value\n * - ISO: the ISO value\n *\n * It calculates the final shutter speed based on the given values.\n *\n * @param shutterSpeed The shutter speed in seconds.\n * @param aperture The aperture value.\n * @param ISO The ISO value.\n * @return The final shutter speed.\n */\nfun calculateShutterSpeed(shutterSpeed: Double, aperture: Int, ISO: Double): Double {\n    // Calculate the final shutter speed\n    val finalShutterSpeed = shutterSpeed * aperture / ISO\n\n    return finalShutterSpeed\n}"}
{"kt_path": "10181/solution_10181.kt", "deepseek-coder-1.3B-kexer": "fun calculateTax(income: Float, deductions: Float): Float {\n    val taxableIncome = income - deductions\n    val taxRate = 0.15f\n    val tax = taxableIncome * taxRate\n    return tax\n}"}
{"kt_path": "3783/solution_3783.kt", "deepseek-coder-1.3B-kexer": "/**\n * This function takes two integers as input and returns the voltage drop\n * between the two points.\n *\n * @param voltage1 The voltage at the first point.\n * @param voltage2 The voltage at the second point.\n * @return The voltage drop between the two points.\n */\nfun calculateVoltageDrop(voltage1: Int, voltage2: Int): Int {\n    val voltageDrop = voltage2 - voltage1\n    return voltageDrop\n}"}
{"kt_path": "7670/solution_7670.kt", "deepseek-coder-1.3B-kexer": "fun identityAssignment(): Boolean {\n    val a = 5\n    val b = a\n    return a === b\n}"}
{"kt_path": "13453/solution_13453.kt", "deepseek-coder-1.3B-kexer": "fun calculateTax(income: Float, taxRate: Float): Float {\n    val tax = income * taxRate\n    return tax\n}"}
{"kt_path": "6574/solution_6574.kt", "deepseek-coder-1.3B-kexer": "fun calculateProfit(cost: Float, revenue: Float): Float {\n    val profit = revenue - cost\n    return profit\n}"}
{"kt_path": "985/solution_985.kt", "deepseek-coder-1.3B-kexer": "/**\n * This function takes two integers and multiplies them, then repeats the result a certain number of times.\n *\n * @param num1 The first integer.\n * @param num2 The second integer.\n * @param repeat The number of times the result should be repeated.\n * @return The final result after multiplying and repeating the two integers.\n */\nfun multiplyAssignAndRepeat(num1: Int, num2: Int, repeat: Int): Int {\n    var result = num1 * num2\n    repeat(repeat) {\n        result = result * num1\n    }\n    return result\n}"}
{"kt_path": "3069/solution_3069.kt", "deepseek-coder-1.3B-kexer": "fun calculateStress(temperature: Float, pressure: Float): Float {\n    val stress = temperature * pressure\n    return stress\n}"}
{"kt_path": "9567/solution_9567.kt", "deepseek-coder-1.3B-kexer": "/**\n * This function takes three integers as arguments and calculates the acceleration\n * based on the formula: acceleration = (distance / time)\n *\n * @param distance The distance travelled in meters.\n * @param time The time taken to cover the distance in seconds.\n * @param gravity The acceleration due to gravity in meters per second squared.\n * @return The acceleration calculated from the given distance, time, and gravity.\n */\nfun calculateAcceleration(distance: Int, time: Int, gravity: Int): Int {\n    val acceleration = distance / time\n    return acceleration\n}"}
{"kt_path": "9762/solution_9762.kt", "deepseek-coder-1.3B-kexer": "fun calculateDiscount(discount: Double): Double {\n    return discount * 0.2\n}"}
{"kt_path": "12787/solution_12787.kt", "deepseek-coder-1.3B-kexer": "fun calculatePower(base: Float, exponent: Float): Float {\n    val result = base.pow(exponent)\n    return result\n}"}
{"kt_path": "14674/solution_14674.kt", "deepseek-coder-1.3B-kexer": "fun calculateTaxes(income: Float, deductions: Float): Float {\n    val taxRate = 0.15f\n    val taxes = income * taxRate - deductions\n    return taxes\n}"}
{"kt_path": "144/solution_144.kt", "deepseek-coder-1.3B-kexer": "/**\n * This function takes two floats as input and calculates the net income by subtracting the expenses from the income.\n *\n * @param income The income earned by the accountant.\n * @param expenses The expenses incurred by the accountant.\n * @return The net income after deducting the expenses.\n */\nfun calculateNetIncome(income: Float, expenses: Float): Float {\n    val netIncome = income - expenses\n    return netIncome\n}"}
{"kt_path": "224/solution_224.kt", "deepseek-coder-1.3B-kexer": "fun calculateSalary(salary: Double): Int {\n    val roundedSalary = Math.round(salary)\n    return roundedSalary\n}"}
{"kt_path": "12602/solution_12602.kt", "deepseek-coder-1.3B-kexer": "/**\n * This function takes two integers as input and returns the sum of the two numbers.\n */\nfun calculateTotalIncome(num1: Int, num2: Int): Int {\n    return num1 + num2\n}"}
{"kt_path": "2061/solution_2061.kt", "deepseek-coder-1.3B-kexer": "fun calculateFurnitureArea(length: Int, width: Int): Int {\n    val area = length * width\n    return area\n}"}
{"kt_path": "1884/solution_1884.kt", "deepseek-coder-1.3B-kexer": "fun calculateWallArea(length: Float, width: Float): Float {\n    val area = length * width\n    return area\n}"}
{"kt_path": "5140/solution_5140.kt", "deepseek-coder-1.3B-kexer": "/**\n * This function takes two floats as input and calculates the net income by subtracting the expenses from the income.\n *\n * @param income The total income earned.\n * @param expenses The total expenses incurred.\n * @return The net income after deducting expenses.\n */\nfun calculateNetIncome(income: Float, expenses: Float): Float {\n    val netIncome = income - expenses\n    return netIncome\n}"}
{"kt_path": "1945/solution_1945.kt", "deepseek-coder-1.3B-kexer": "/**\n * This function subtracts the taxidermy animals from the given number of animals.\n *\n * @param animals Number of animals.\n * @param taxidermy Number of taxidermy animals.\n * @return The number of animals after subtracting the taxidermy animals.\n */\nfun subtractTaxidermyAnimals(animals: Int, taxidermy: Int): Int {\n    return animals - taxidermy\n}"}
{"kt_path": "2025/solution_2025.kt", "deepseek-coder-1.3B-kexer": "fun calculateAnimalPopulation(numAnimals: Int, numCows: Int): Int {\n    val population = numAnimals - numCows\n    return population\n}"}
{"kt_path": "14511/solution_14511.kt", "deepseek-coder-1.3B-kexer": "fun calculateNumberOfLights(numLights: Int, numCars: Int): Int {\n    val lightsPerCar = numLights / numCars\n    return lightsPerCar\n}"}
{"kt_path": "13493/solution_13493.kt", "deepseek-coder-1.3B-kexer": "fun calculateDistance(x: Float, y: Float): Float {\n    // Calculate the distance between two points\n    val distance = Math.sqrt((x - y).pow(2))\n    return distance\n}"}
{"kt_path": "4381/solution_4381.kt", "deepseek-coder-1.3B-kexer": "fun calculateAverageSpeed(distance: Float, time: Float): Float {\n    val averageSpeed = distance / time\n    return averageSpeed\n}"}
{"kt_path": "9587/solution_9587.kt", "deepseek-coder-1.3B-kexer": "/**\n * This function takes two boolean values and returns the result of the logical AND operation.\n *\n * @param a The first boolean value.\n * @param b The second boolean value.\n * @return The result of the logical AND operation.\n */\nfun bAnd(a: Boolean, b: Boolean): Boolean {\n    return a && b\n}"}
{"kt_path": "6576/solution_6576.kt", "deepseek-coder-1.3B-kexer": "fun calculateDividendRatio(dividend: Float, divisor: Float): Float {\n    return dividend / divisor\n}"}
{"kt_path": "11550/solution_11550.kt", "deepseek-coder-1.3B-kexer": "fun calculateAverageSpeed(distance: Float, time: Float): Float {\n    val averageSpeed = distance / time\n    return averageSpeed\n}"}
{"kt_path": "7386/solution_7386.kt", "deepseek-coder-1.3B-kexer": "fun intersectionAdditionAssignmentOperator(num: Int): Int {\n    var result = num\n    result += 12\n    return result\n}"}
{"kt_path": "12691/solution_12691.kt", "deepseek-coder-1.3B-kexer": "fun calculateRemainingBudget(budget: Float, expenses: Float): Float {\n    val remainingBudget = budget - expenses\n    return remainingBudget\n}"}
{"kt_path": "8209/solution_8209.kt", "deepseek-coder-1.3B-kexer": "fun calculateRequiredMaterials(materials: Float, materialsRequired: Float): Float {\n    val totalMaterials = materials / materialsRequired\n    return totalMaterials\n}"}
{"kt_path": "2049/solution_2049.kt", "deepseek-coder-1.3B-kexer": "fun calculatePrice(discount: Double, price: Double, taxRate: Double): Double {\n    val discountedPrice = price - discount\n    val taxAmount = discountedPrice * taxRate\n    val totalPrice = discountedPrice + taxAmount\n    return totalPrice\n}"}
{"kt_path": "586/solution_586.kt", "deepseek-coder-1.3B-kexer": "/**\n * This function takes the length and width of a room and calculates its area.\n */\nfun calculateArea(length: Double, width: Double): Double {\n    val area = length * width\n    return area\n}"}
{"kt_path": "5139/solution_5139.kt", "deepseek-coder-1.3B-kexer": "fun calculateTax(income: Double, taxRate: Double): Double {\n    val tax = income * taxRate\n    return tax\n}"}
{"kt_path": "7904/solution_7904.kt", "deepseek-coder-1.3B-kexer": "fun checkCurrent(current: Double, voltage: Double): Double {\n    val currentSensor = current / voltage\n    return currentSensor\n}"}
{"kt_path": "9335/solution_9335.kt", "deepseek-coder-1.3B-kexer": "fun calculateTax(income: Double, taxRate: Double): Double {\n    val tax = income * taxRate\n    return tax\n}"}
{"kt_path": "2329/solution_2329.kt", "deepseek-coder-1.3B-kexer": "fun calculateTotalCost(numItems: Int, discount: Float): Float {\n    val totalCost = numItems * (1 - discount)\n    return totalCost\n}"}
{"kt_path": "6572/solution_6572.kt", "deepseek-coder-1.3B-kexer": "fun calculateTotalPrice(quantity: Int, pricePerUnit: Float): Float {\n    val totalPrice = quantity * pricePerUnit\n    return totalPrice\n}"}
{"kt_path": "8071/solution_8071.kt", "deepseek-coder-1.3B-kexer": "fun calculateArea(length: Double, width: Double): Double {\n    return length * width\n}"}
{"kt_path": "11310/solution_11310.kt", "deepseek-coder-1.3B-kexer": "fun calculateExpenses(numOfHours: Int, hourlyRate: Float): Float {\n    val totalExpenses = numOfHours * hourlyRate\n    return totalExpenses\n}"}
{"kt_path": "10435/solution_10435.kt", "deepseek-coder-1.3B-kexer": "/**\n * This function takes a weight and a number of repetitions as arguments and returns the sum of the weight\n * repeated for the given number of repetitions.\n */\nfun calculateWeight(weight: Double, numRepetitions: Int): Double {\n    var totalWeight = 0.0\n    repeat(numRepetitions) {\n        totalWeight += weight\n    }\n    return totalWeight\n}"}
{"kt_path": "5594/solution_5594.kt", "deepseek-coder-1.3B-kexer": "/**\n * This function takes two integers as input and checks if the real part of the complex number is zero.\n *\n * @param realPart The real part of the complex number.\n * @param imaginaryPart The imaginary part of the complex number.\n * @return True if the real part is zero, False otherwise.\n */\nfun checkRealPart(realPart: Int, imaginaryPart: Int): Boolean {\n    return realPart == 0\n}"}
{"kt_path": "1356/solution_1356.kt", "deepseek-coder-1.3B-kexer": "fun isNone(obj: Any?): Boolean {\n    return obj == null\n}"}
{"kt_path": "8902/solution_8902.kt", "deepseek-coder-1.3B-kexer": "fun calculatePower(base: Double, exponent: Double): Double {\n    return base.pow(exponent)\n}"}
{"kt_path": "6573/solution_6573.kt", "deepseek-coder-1.3B-kexer": "fun calculateAveragePrice(price: Float, quantity: Int): Float {\n    val averagePrice = price * quantity / 2\n    return averagePrice\n}"}
