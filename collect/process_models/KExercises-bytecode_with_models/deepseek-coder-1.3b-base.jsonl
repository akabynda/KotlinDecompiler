{"kt_path": "7434/solution_7434.kt", "deepseek-coder-1.3b-base": "fun main() {\n    Solution_7434Kt.test()\n}"}
{"kt_path": "7824/solution_7824.kt", "deepseek-coder-1.3b-base": "fun main() {\n    println(\"Hello, world\")\n}"}
{"kt_path": "2614/solution_2614.kt", "deepseek-coder-1.3b-base": "fun investigateSituation() {\n}"}
{"kt_path": "4477/solution_4477.kt", "deepseek-coder-1.3b-base": "fun main() {\n    println(Solution_4477Kt.getLeadII())\n}\n\npublic final class Solution_4477Kt {\n  public static final int getLeadII() = 0\n}"}
{"kt_path": "4476/solution_4476.kt", "deepseek-coder-1.3b-base": "fun getHeartRate() = 0"}
{"kt_path": "8909/solution_8909.kt", "deepseek-coder-1.3b-base": "fun main() {\n    println(Solution_8909Kt.parentFunction(1))\n}\n\npublic final class Solution_8909Kt {\n  public static final int parentFunction(int) {\n    return 0\n  }\n}"}
{"kt_path": "4699/solution_4699.kt", "deepseek-coder-1.3b-base": "fun main() {\n    println(Solution_4699Kt.hasLicense(true))\n}"}
{"kt_path": "6126/solution_6126.kt", "deepseek-coder-1.3b-base": "fun main() {\n    println(checkBoolean(true))\n}\n\nfun checkBoolean(b: Boolean): Boolean {\n    return b\n}"}
{"kt_path": "5226/solution_5226.kt", "deepseek-coder-1.3b-base": "fun intersectPrecedenceTuple() = false"}
{"kt_path": "652/solution_652.kt", "deepseek-coder-1.3b-base": "public final class Solution_652Kt {\n  public fun checkFloatDivision(a: Float, b: Float): Boolean {\n    return a / b == 1.0f\n  }\n}"}
{"kt_path": "558/solution_558.kt", "deepseek-coder-1.3b-base": "fun main() {\n    println(Solution_558Kt.function1(1, 2))\n}\n\npublic final class Solution_558Kt {\n    public static final int function1(int i, int i2) = i xor i2\n}"}
{"kt_path": "13973/solution_13973.kt", "deepseek-coder-1.3b-base": "fun main(args: Array<String>) {\n    println(Solution_13973Kt.divide(10, 3))\n}"}
{"kt_path": "13972/solution_13972.kt", "deepseek-coder-1.3b-base": "fun main() {\n    println(Solution_13972Kt.multiply(2, 3))\n}"}
{"kt_path": "13970/solution_13970.kt", "deepseek-coder-1.3b-base": "fun main() {\n    println(Solution_13970Kt.increaseByOne(1))\n}\n\npublic final class Solution_13970Kt {\n    public static final int increaseByOne(int i) {\n        return i + 1\n    }\n}"}
{"kt_path": "1606/solution_1606.kt", "deepseek-coder-1.3b-base": "fun main() {\n    println(Solution_1606Kt.getRemainder(17, 4))\n}\n\npublic final class Solution_1606Kt {\n  public static final int getRemainder(int x: Int, int y: Int): Int {\n    return x.rem(y)\n  }\n}"}
{"kt_path": "3900/solution_3900.kt", "deepseek-coder-1.3b-base": "fun main(args: Array<String>) {\n    println(Solution_3900Kt.multiplyNumbers(1, 2))\n}\n\npublic final class Solution_3900Kt {\n    public static final int multiplyNumbers(int a: Int, int b: Int): Int {\n        return a * b\n    }\n}"}
{"kt_path": "13864/solution_13864.kt", "deepseek-coder-1.3b-base": "fun main(args: Array<String>) {\n    println(calculateScore(1, 2))\n}\n\nfun calculateScore(x: Int, y: Int): Int {\n    return x * y\n}"}
{"kt_path": "7751/solution_7751.kt", "deepseek-coder-1.3b-base": "fun main(args: Array<String>) {\n    println(Solution_7751Kt.getComplement(9))\n}\n\npublic final class Solution_7751Kt {\n    public fun getComplement(n: Int): Int {\n        return n.toInt()\n    }\n}"}
{"kt_path": "9566/solution_9566.kt", "deepseek-coder-1.3b-base": "fun main() {\n    println(calculateVelocity(10, 20))\n}\n\nfun calculateVelocity(x: Int, y: Int): Int {\n    return x / y\n}"}
{"kt_path": "4903/solution_4903.kt", "deepseek-coder-1.3b-base": "public final class Solution_4903Kt {\n  public static final int calculateDayPublished(int days) {\n    return days + 1\n  }\n}"}
{"kt_path": "11380/solution_11380.kt", "deepseek-coder-1.3b-base": "fun main(args: Array<String>) {\n    println(determineWallArea(10, 10))\n}\n\nfun determineWallArea(width: Int, height: Int): Int {\n    return width * height\n}"}
{"kt_path": "1194/solution_1194.kt", "deepseek-coder-1.3b-base": "fun main(args: Array<String>) {\n    println(whileSubtraction(10, 5))\n}\n\nfun whileSubtraction(a: Int, b: Int): Int {\n    var result = a\n    while (result >= b) {\n        result -= b\n    }\n    return result\n}"}
{"kt_path": "7844/solution_7844.kt", "deepseek-coder-1.3b-base": "fun divideNumbers(a: Double, b: Double): Double {\n    return a / b\n}"}
{"kt_path": "599/solution_599.kt", "deepseek-coder-1.3b-base": "fun main() {\n    println(calculateRoomArea(10.0, 10.0))\n}\n\nfun calculateRoomArea(width: Double, height: Double): Double {\n    return width * height\n}"}
{"kt_path": "8402/solution_8402.kt", "deepseek-coder-1.3b-base": "fun main() {\n    println(Solution_8402Kt.calculateNetIncome(1000f, 100f))\n}\n\nfun calculateNetIncome(salary: Float, bonus: Float): Float {\n    return salary + bonus\n}"}
{"kt_path": "11629/solution_11629.kt", "deepseek-coder-1.3b-base": "fun main() {\n    println(calculateSlope(1.0, 2.0))\n}\n\nfun calculateSlope(x: Double, y: Double): Double {\n    return x / y\n}"}
{"kt_path": "2587/solution_2587.kt", "deepseek-coder-1.3b-base": "fun main(args: Array<String>) {\n    println(calculateRoomArea(2.0, 3.0))\n}\n\nfun calculateRoomArea(length: Double, width: Double): Double {\n    return length * width\n}"}
{"kt_path": "5733/solution_5733.kt", "deepseek-coder-1.3b-base": "fun main() {\n    println(calculateBuildingArea(10.0f, 20.0f))\n}\n\nfun calculateBuildingArea(width: Float, height: Float): Float {\n    return width * height\n}"}
{"kt_path": "12144/solution_12144.kt", "deepseek-coder-1.3b-base": "fun main() {\n    println(calculateProfits(100.0, 100.0))\n}\n\nfun calculateProfits(current: Double, target: Double): Double {\n    return current - target\n}"}
{"kt_path": "9763/solution_9763.kt", "deepseek-coder-1.3b-base": "fun main() {\n    println(calculateFinalPrice(100.0, 0.0))\n}\n\nfun calculateFinalPrice(basePrice: Double, discount: Double): Double {\n    return basePrice - discount\n}"}
{"kt_path": "11762/solution_11762.kt", "deepseek-coder-1.3b-base": "fun main(args: Array<String>) {\n    val roomArea = calculateRoomArea(10.0, 10.0)\n    println(\"Room area: $roomArea\")\n}\n\nfun calculateRoomArea(length: Double, width: Double): Double {\n    return length * width\n}"}
{"kt_path": "9178/solution_9178.kt", "deepseek-coder-1.3b-base": "fun main(args: Array<String>) {\n    println(calculateGravityForce(10.0, 10.0))\n}\n\nfun calculateGravityForce(mass: Double, height: Double): Double {\n    return 9.8 * mass * height\n}"}
{"kt_path": "8545/solution_8545.kt", "deepseek-coder-1.3b-base": "fun main() {\n    println(calculateConversionRate(100, 200))\n}\n\nfun calculateConversionRate(a: Int, b: Int): Double {\n    return a.toDouble() / b.toDouble()\n}"}
{"kt_path": "13968/solution_13968.kt", "deepseek-coder-1.3b-base": "fun athletePerformanceDistance(distance: Double, time: Double): Double {\n    return distance / time\n}"}
{"kt_path": "7841/solution_7841.kt", "deepseek-coder-1.3b-base": "fun main(args: Array<String>) {\n    println(assignXor(1, 2))\n}\n\nfun assignXor(x: Int, y: Int): Int {\n    return x xor y\n}"}
{"kt_path": "2909/solution_2909.kt", "deepseek-coder-1.3b-base": "fun main() {\n    println(Solution_2909Kt.addNumbers(1, 2))\n}\n\npublic final class Solution_2909Kt {\n  public static final int addNumbers(int a: Int, int b: Int): Int {\n    return a + b\n  }\n}"}
{"kt_path": "302/solution_302.kt", "deepseek-coder-1.3b-base": "fun main() {\n    println(calculateXor(1, 2))\n}\n\nfun calculateXor(a: Int, b: Int): Int {\n    return a xor b\n}"}
{"kt_path": "12753/solution_12753.kt", "deepseek-coder-1.3b-base": "fun main() {\n    println(trimLumber(10, 2))\n}\n\nfun trimLumber(a: Int, b: Int): Int {\n    return a - b\n}"}
{"kt_path": "5694/solution_5694.kt", "deepseek-coder-1.3b-base": "fun main(args: Array<String>) {\n    println(calculateAge(10, 20))\n}\n\nfun calculateAge(age: Int, year: Int): Int {\n    return year - age\n}"}
{"kt_path": "7772/solution_7772.kt", "deepseek-coder-1.3b-base": "fun main(args: Array<String>) {\n    println(increaseSpeed(1, 2))\n}\n\nfun increaseSpeed(a: Int, b: Int): Int {\n    return a + b\n}"}
{"kt_path": "13321/solution_13321.kt", "deepseek-coder-1.3b-base": "fun xorOperation(n: Int, start: Int): Int {\n    var result = start\n    for (i in 1..n) {\n        result = result xor i\n    }\n    return result\n}"}
{"kt_path": "3882/solution_3882.kt", "deepseek-coder-1.3b-base": "fun calcTotalHours(a: Int, b: Int): Int {\n    return a * b\n}"}
{"kt_path": "7919/solution_7919.kt", "deepseek-coder-1.3b-base": "fun main() {\n    println(Solution_7919Kt.addOrOperation(1, 2))\n}"}
{"kt_path": "640/solution_640.kt", "deepseek-coder-1.3b-base": "fun main() {\n    var x = 10\n    var y = 20\n    x.multiplyAndAssign(y)\n    println(x)\n}\n\nfun Int.multiplyAndAssign(y: Int) {\n    this *= y\n}"}
{"kt_path": "797/solution_797.kt", "deepseek-coder-1.3b-base": "public final class Solution_797Kt {\n  public fun calculateTax(income: Float, brackets: Float): Float {\n    return 0.0f\n  }\n}"}
{"kt_path": "3049/solution_3049.kt", "deepseek-coder-1.3b-base": "fun main(args: Array<String>) {\n    println(calculateVolume(1, 2, 3))\n}\n\nfun calculateVolume(a: Int, b: Int, c: Int): Int {\n    return a * b * c\n}"}
{"kt_path": "6128/solution_6128.kt", "deepseek-coder-1.3b-base": "public final class Solution_6128Kt {\n  public static final int absoluteValue(int: int) {\n    return Math.abs(int)\n  }\n}"}
{"kt_path": "5969/solution_5969.kt", "deepseek-coder-1.3b-base": "fun main(args: Array<String>) {\n    println(getNegativeIndex(1, 2))\n}\n\nfun getNegativeIndex(a: Int, b: Int): Int {\n    return a - b\n}"}
{"kt_path": "1224/solution_1224.kt", "deepseek-coder-1.3b-base": "fun main(args: Array<String>) {\n    println(Solution_1224Kt.subtractIntegers(10, 5))\n}"}
{"kt_path": "1810/solution_1810.kt", "deepseek-coder-1.3b-base": "fun calculateLandArea(x: Int, y: Int): Int {\n    return x * y\n}"}
{"kt_path": "1562/solution_1562.kt", "deepseek-coder-1.3b-base": "fun main() {\n    println(calculateTax(10000.0f, 1000.0f))\n}\n\nfun calculateTax(income: Float, tax: Float): Float {\n    return income * tax / 100\n}"}
{"kt_path": "2870/solution_2870.kt", "deepseek-coder-1.3b-base": "fun main(args: Array<String>) {\n    println(calculateFine(10, 20))\n}\n\nfun calculateFine(actual: Int, expected: Int): Int {\n    return if (actual > expected) {\n        (actual - expected) * 500\n    } else {\n        0\n    }\n}"}
{"kt_path": "6759/solution_6759.kt", "deepseek-coder-1.3b-base": "fun averageSpeed(a: Float, b: Float): Float {\n    return a / b\n}"}
{"kt_path": "2736/solution_2736.kt", "deepseek-coder-1.3b-base": "fun main() {\n    println(calculatePatientAge(10, 20))\n}\n\nfun calculatePatientAge(age: Int, yearOfBirth: Int): Int {\n    return age - yearOfBirth\n}"}
{"kt_path": "4004/solution_4004.kt", "deepseek-coder-1.3b-base": "fun main() {\n    println(calculatePatientAge(10, 20))\n}\n\nfun calculatePatientAge(age: Int, yearOfBirth: Int): Int {\n    return age - yearOfBirth\n}"}
{"kt_path": "12220/solution_12220.kt", "deepseek-coder-1.3b-base": "fun main() {\n    val a = 10\n    val b = 20\n    val c = a.and(b)\n    println(c)\n}"}
{"kt_path": "14509/solution_14509.kt", "deepseek-coder-1.3b-base": "fun calculateRoomArea(width: Int, height: Int): Int {\n    return width * height\n}"}
{"kt_path": "13481/solution_13481.kt", "deepseek-coder-1.3b-base": "fun main() {\n    val shutterSpeed = calculateShutterSpeed(1.0, 10, 1.0)\n    println(shutterSpeed)\n}\n\nfun calculateShutterSpeed(fNumber: Double, aperture: Int, fStop: Double): Double {\n    return 1.0\n}"}
{"kt_path": "10181/solution_10181.kt", "deepseek-coder-1.3b-base": "fun main() {\n    println(calculateTax(10000f, 0.1f))\n}\n\nfun calculateTax(income: Float, taxRate: Float): Float {\n    return income * taxRate\n}"}
{"kt_path": "3783/solution_3783.kt", "deepseek-coder-1.3b-base": "fun calculateVoltageDrop(current: Int, voltage: Int): Int {\n    return current * voltage\n}"}
{"kt_path": "7670/solution_7670.kt", "deepseek-coder-1.3b-base": "public final class Solution_7670Kt {\n  public static final boolean identityAssignment() = false\n}"}
{"kt_path": "13453/solution_13453.kt", "deepseek-coder-1.3b-base": "fun main(args: Array<String>) {\n    println(calculateTax(10000.0f, 1000.0f))\n}\n\nfun calculateTax(income: Float, tax: Float): Float {\n    return income * tax / 100\n}"}
{"kt_path": "6574/solution_6574.kt", "deepseek-coder-1.3b-base": "fun main() {\n    println(calculateProfit(1000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"}
{"kt_path": "985/solution_985.kt", "deepseek-coder-1.3b-base": "fun main() {\n    var a = 10\n    var b = 20\n    a.multiplyAssignAndRepeat(b)\n    println(a)\n}\n\nfun Int.multiplyAssignAndRepeat(b: Int) {\n    this *= b\n    this.repeat(b)\n}"}
{"kt_path": "3069/solution_3069.kt", "deepseek-coder-1.3b-base": "fun main(args: Array<String>) {\n    println(calculateStress(1.0f, 2.0f))\n}\n\nfun calculateStress(a: Float, b: Float): Float {\n    return a / b\n}"}
{"kt_path": "9567/solution_9567.kt", "deepseek-coder-1.3b-base": "public final class Solution_9567Kt {\n  public fun calculateAcceleration(x: Int, y: Int, z: Int): Int {\n    return (y - x) / z\n  }\n}"}
{"kt_path": "9762/solution_9762.kt", "deepseek-coder-1.3b-base": "public final class Solution_9762Kt {\n  public fun calculateDiscount(discount: Double): Double {\n    return discount * 0.2\n  }\n}"}
{"kt_path": "12787/solution_12787.kt", "deepseek-coder-1.3b-base": "fun main(args: Array<String>) {\n    println(calculatePower(1.0f, 2.0f))\n}\n\nfun calculatePower(a: Float, b: Float): Float {\n    return a.pow(b)\n}"}
{"kt_path": "14674/solution_14674.kt", "deepseek-coder-1.3b-base": "fun calculateTaxes(income: Float, taxRate: Float): Float {\n    return income * taxRate\n}"}
{"kt_path": "144/solution_144.kt", "deepseek-coder-1.3b-base": "fun main(args: Array<String>) {\n    println(calculateNetIncome(10000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"}
{"kt_path": "224/solution_224.kt", "deepseek-coder-1.3b-base": "fun main() {\n    println(calculateSalary(100.5))\n}\n\nfun calculateSalary(salary: Double): Long {\n    return Math.round(salary)\n}"}
{"kt_path": "12602/solution_12602.kt", "deepseek-coder-1.3b-base": "fun main(args: Array<String>) {\n    println(calculateTotalIncome(100, 200))\n}\n\nfun calculateTotalIncome(a: Int, b: Int): Int {\n    return a + b\n}"}
{"kt_path": "2061/solution_2061.kt", "deepseek-coder-1.3b-base": "fun calculateFurnitureArea(width: Int, height: Int): Int {\n    return width * height\n}"}
{"kt_path": "1884/solution_1884.kt", "deepseek-coder-1.3b-base": "fun main() {\n    println(calculateWallArea(10.0f, 20.0f))\n}\n\nfun calculateWallArea(width: Float, height: Float): Float {\n    return width * height\n}"}
{"kt_path": "5140/solution_5140.kt", "deepseek-coder-1.3b-base": "fun main() {\n    println(calculateNetIncome(1000000.0f, 100000.0f))\n}\n\nfun calculateNetIncome(salary: Float, bonus: Float): Float {\n    return salary + bonus\n}"}
{"kt_path": "1945/solution_1945.kt", "deepseek-coder-1.3b-base": "fun subtractTaxidermyAnimals(a: Int, b: Int): Int {\n    return a - b\n}"}
{"kt_path": "2025/solution_2025.kt", "deepseek-coder-1.3b-base": "fun calculateAnimalPopulation(x: Int, y: Int): Int {\n    return x - y\n}"}
{"kt_path": "14511/solution_14511.kt", "deepseek-coder-1.3b-base": "fun calculateNumberOfLights(numberOfLamps: Int, numberOfLampsToTurnOn: Int): Int {\n    return numberOfLamps / numberOfLampsToTurnOn\n}"}
{"kt_path": "13493/solution_13493.kt", "deepseek-coder-1.3b-base": "fun main() {\n    println(calculateDistance(1.0f, 2.0f))\n}\n\nfun calculateDistance(x: Float, y: Float): Float {\n    return sqrt(x * x + y * y)\n}"}
{"kt_path": "4381/solution_4381.kt", "deepseek-coder-1.3b-base": "fun main(args: Array<String>) {\n    println(calculateAverageSpeed(100.0f, 200.0f))\n}\n\nfun calculateAverageSpeed(x: Float, y: Float): Float {\n    return (x + y) / 2\n}"}
{"kt_path": "9587/solution_9587.kt", "deepseek-coder-1.3b-base": "fun bAnd(a: Boolean, b: Boolean): Boolean {\n    return if (a) b else false\n}"}
{"kt_path": "6576/solution_6576.kt", "deepseek-coder-1.3b-base": "fun main(args: Array<String>) {\n    println(calculateDividendRatio(100f, 10f))\n}\n\nfun calculateDividendRatio(dividend: Float, divisor: Float): Float {\n    return dividend / divisor\n}"}
{"kt_path": "11550/solution_11550.kt", "deepseek-coder-1.3b-base": "fun main() {\n    println(calculateAverageSpeed(100.0f, 200.0f))\n}\n\nfun calculateAverageSpeed(distance: Float, time: Float): Float {\n    return distance / time\n}"}
{"kt_path": "7386/solution_7386.kt", "deepseek-coder-1.3b-base": "fun main(args: Array<String>) {\n    var a = 1\n    a += 12\n    println(a)\n}"}
{"kt_path": "12691/solution_12691.kt", "deepseek-coder-1.3b-base": "fun main() {\n    println(calculateRemainingBudget(10000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"}
{"kt_path": "8209/solution_8209.kt", "deepseek-coder-1.3b-base": "fun main() {\n    println(calculateRequiredMaterials(100f, 100f))\n}\n\nfun calculateRequiredMaterials(\n    material1: Float,\n    material2: Float\n): Float {\n    return material1 / material2\n}"}
{"kt_path": "2049/solution_2049.kt", "deepseek-coder-1.3b-base": "fun calculatePrice(basePrice: Double, discount: Double, quantity: Double) =\n    basePrice * (1 - discount) * quantity"}
{"kt_path": "586/solution_586.kt", "deepseek-coder-1.3b-base": "fun main(args: Array<String>) {\n    println(calculateArea(1.0, 2.0))\n}\n\nfun calculateArea(a: Double, b: Double): Double {\n    return a * b\n}"}
{"kt_path": "5139/solution_5139.kt", "deepseek-coder-1.3b-base": "fun calculateTax(income: Double, taxRate: Double): Double {\n    return income * taxRate\n}"}
{"kt_path": "7904/solution_7904.kt", "deepseek-coder-1.3b-base": "fun main() {\n    println(checkCurrent(1.0, 2.0))\n}\n\nfun checkCurrent(a: Double, b: Double): Double {\n    return a / b\n}"}
{"kt_path": "9335/solution_9335.kt", "deepseek-coder-1.3b-base": "fun main() {\n    val tax = calculateTax(10000.0, 0.08)\n    println(tax)\n}\n\nfun calculateTax(income: Double, taxRate: Double): Double {\n    return income * taxRate\n}"}
{"kt_path": "2329/solution_2329.kt", "deepseek-coder-1.3b-base": "fun calculateTotalCost(numberOfItems: Int, pricePerItem: Float): Float {\n    return numberOfItems * pricePerItem\n}"}
{"kt_path": "6572/solution_6572.kt", "deepseek-coder-1.3b-base": "fun main(args: Array<String>) {\n    val totalPrice = calculateTotalPrice(10, 10.0f)\n    println(\"Total price: $totalPrice\")\n}\n\nfun calculateTotalPrice(quantity: Int, price: Float): Float {\n    return quantity * price\n}"}
{"kt_path": "8071/solution_8071.kt", "deepseek-coder-1.3b-base": "fun main(args: Array<String>) {\n    println(calculateArea(1.0, 2.0))\n}\n\nfun calculateArea(a: Double, b: Double): Double {\n    return a * b\n}"}
{"kt_path": "11310/solution_11310.kt", "deepseek-coder-1.3b-base": "fun main() {\n    println(Solution_11310Kt.calculateExpenses(1000, 0.01f))\n}\n\npublic final class Solution_11310Kt {\n    public static final float calculateExpenses(int n, float p) {\n        return n * p\n    }\n}"}
{"kt_path": "10435/solution_10435.kt", "deepseek-coder-1.3b-base": "fun main() {\n    val weight = calculateWeight(1.0, 2)\n    println(weight)\n}\n\nfun calculateWeight(weight: Double, times: Int): Double {\n    return weight * times\n}"}
{"kt_path": "5594/solution_5594.kt", "deepseek-coder-1.3b-base": "public final class Solution_5594Kt {\n  public static final boolean checkRealPart(int x: Int, int y: Int): Boolean {\n    return if (x == y) true else false\n  }\n}"}
{"kt_path": "1356/solution_1356.kt", "deepseek-coder-1.3b-base": "fun main() {\n    println(isNone(null))\n}\n\nfun isNone(obj: Any?): Boolean {\n    return obj == null\n}"}
{"kt_path": "8902/solution_8902.kt", "deepseek-coder-1.3b-base": "fun main() {\n    println(calculatePower(2.0, 3.0))\n}\n\nfun calculatePower(x: Double, y: Double): Double {\n    return x * y\n}"}
{"kt_path": "6573/solution_6573.kt", "deepseek-coder-1.3b-base": "fun main() {\n    val averagePrice = calculateAveragePrice(1000f, 10)\n    println(\"Average price: $averagePrice\")\n}\n\nfun calculateAveragePrice(price: Float, count: Int): Float {\n    return price / count\n}"}
