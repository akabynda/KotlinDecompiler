{"kt_path": "remisultan__multiarm-bandit-algorithm-kotlin__ead934d/core-bandit/src/main/kotlin/org/rsultan/bandit/algorithms/BanditAlgorithm.kt", "deepseek-coder-7b-base-v1.5": ""}
{"kt_path": "n81ur3__kotlin-coding-challenges__fdc5941/src/main/kotlin/adventofcode2018/Day22ModeMaze.kt", "deepseek-coder-7b-base-v1.5": ""}
{"kt_path": "n81ur3__kotlin-coding-challenges__fdc5941/src/main/kotlin/adventofcode2017/Day21FractalArt.kt", "deepseek-coder-7b-base-v1.5": ""}
{"kt_path": "n81ur3__kotlin-coding-challenges__fdc5941/src/main/kotlin/adventofcode2017/Day03SpiralMemory.kt", "deepseek-coder-7b-base-v1.5": ""}
{"kt_path": "n81ur3__kotlin-coding-challenges__fdc5941/src/main/kotlin/adventofcode2019/Day03CrossedWires.kt", "deepseek-coder-7b-base-v1.5": ""}
{"kt_path": "n81ur3__kotlin-coding-challenges__fdc5941/src/main/kotlin/adventofcode2018/Day04ReposeRecord.kt", "deepseek-coder-7b-base-v1.5": ""}
{"kt_path": "n81ur3__kotlin-coding-challenges__fdc5941/src/main/kotlin/adventofcode2017/Day08LikeRegisters.kt", "deepseek-coder-7b-base-v1.5": ""}
{"kt_path": "n81ur3__kotlin-coding-challenges__fdc5941/src/main/kotlin/adventofcode2018/Day11ChronalCharge.kt", "deepseek-coder-7b-base-v1.5": ""}
{"kt_path": "n81ur3__kotlin-coding-challenges__fdc5941/src/main/kotlin/adventofcode2020/Day19MonsterMessage.kt", "deepseek-coder-7b-base-v1.5": ""}
{"kt_path": "n81ur3__kotlin-coding-challenges__fdc5941/src/main/kotlin/adventofcode2017/Day07RecursiveCircus.kt", "deepseek-coder-7b-base-v1.5": ""}
{"kt_path": "n81ur3__kotlin-coding-challenges__fdc5941/src/main/kotlin/adventofcode2019/Day12TheNbodyProblem.kt", "deepseek-coder-7b-base-v1.5": ""}
{"kt_path": "n81ur3__kotlin-coding-challenges__fdc5941/src/main/kotlin/adventofcode2018/Day15BeverageBandits.kt", "deepseek-coder-7b-base-v1.5": ""}
{"kt_path": "n81ur3__kotlin-coding-challenges__fdc5941/src/main/kotlin/adventofcode2020/Day07HandyHaversacks.kt", "deepseek-coder-7b-base-v1.5": ""}
{"kt_path": "n81ur3__kotlin-coding-challenges__fdc5941/src/main/kotlin/adventofcode2018/Day07TheSumOfItsParts.kt", "deepseek-coder-7b-base-v1.5": ""}
{"kt_path": "n81ur3__kotlin-coding-challenges__fdc5941/src/main/kotlin/adventofcode2017/Day25TheHaltingProblem.kt", "deepseek-coder-7b-base-v1.5": ""}
{"kt_path": "n81ur3__kotlin-coding-challenges__fdc5941/src/main/kotlin/adventofcode2019/Day06UniversalOrbitMap.kt", "deepseek-coder-7b-base-v1.5": ""}
{"kt_path": "n81ur3__kotlin-coding-challenges__fdc5941/src/main/kotlin/adventofcode2019/Day10MonitoringStation.kt", "deepseek-coder-7b-base-v1.5": ""}
{"kt_path": "n81ur3__kotlin-coding-challenges__fdc5941/src/main/kotlin/adventofcode2018/Day06ChronalCoordinates.kt", "deepseek-coder-7b-base-v1.5": ""}
{"kt_path": "n81ur3__kotlin-coding-challenges__fdc5941/src/main/kotlin/adventofcode2020/Day21AllergenAssessment.kt", "deepseek-coder-7b-base-v1.5": ""}
{"kt_path": "n81ur3__kotlin-coding-challenges__fdc5941/src/main/kotlin/adventofcode2017/Day24ElectromagneticMoat.kt", "deepseek-coder-7b-base-v1.5": ""}
{"kt_path": "n81ur3__kotlin-coding-challenges__fdc5941/src/main/kotlin/adventofcode2018/Day12SubterraneanSustainability.kt", "deepseek-coder-7b-base-v1.5": ""}
{"kt_path": "n81ur3__kotlin-coding-challenges__fdc5941/src/main/kotlin/adventofcode2018/Day23ExperimentalEmergencyTeleportation.kt", "deepseek-coder-7b-base-v1.5": ""}
{"kt_path": "alebedev__aoc2022__d6ba46b/src/main/kotlin/Map.kt", "deepseek-coder-7b-base-v1.5": "fun main() {\n    AocDay1.solve()\n}"}
{"kt_path": "andrewrlee__adventOfCode2020__a9c21a6/src/main/kotlin/File09.kt", "deepseek-coder-7b-base-v1.5": ""}
{"kt_path": "andrewrlee__adventOfCode2020__a9c21a6/src/main/kotlin/File08.kt", "deepseek-coder-7b-base-v1.5": ""}
{"kt_path": "andrewrlee__adventOfCode2020__a9c21a6/src/main/kotlin/File02.kt", "deepseek-coder-7b-base-v1.5": "class Challenge01 {\n    fun solve() {\n        println(\"Hello World!\")\n    }\n}\n\nfun main() {\n    Challenge01().solve()\n}"}
{"kt_path": "andrewrlee__adventOfCode2020__a9c21a6/src/main/kotlin/File07.kt", "deepseek-coder-7b-base-v1.5": ""}
{"kt_path": "charlesfranciscodev__codingame__3ec8060/puzzles/kotlin/src/war/war.kt", "deepseek-coder-7b-base-v1.5": "fun main(args: Array<String>) {\n    val game = Game()\n    game.play()\n}\n\nclass Game {\n    fun play() {\n        println(\"Hello, World!\")\n    }\n}"}
{"kt_path": "al-volkov__spbu_2020_kotlin_homeworks__5049681/src/main/kotlin/homework_5/Task1.kt", "deepseek-coder-7b-base-v1.5": "fun isNumber(str: String): Boolean {\n    return str.toIntOrNull() != null\n}"}
{"kt_path": "iafsilva__codility-lessons__5d86aef/src/main/kotlin/lesson3/FrogJmp.kt", "deepseek-coder-7b-base-v1.5": ""}
{"kt_path": "mikhalchenko-alexander__advent-of-kotlin-2018-week1__c483ade/src/main/kotlin/com/anahoret/pathfinding/MarkingWayOnMap.kt", "deepseek-coder-7b-base-v1.5": "object Graph {\n    val INSTANCE: Graph = Graph()\n    fun getMapWithPath(map: String): String = getMapWithPath(map)\n    fun getMapWithPath(map: String): String = getMapWithPath(map)\n}"}
{"kt_path": "charlesfranciscodev__codingame__3ec8060/puzzles/kotlin/src/surface/surface.kt", "deepseek-coder-7b-base-v1.5": "class Grid {\n    val grid: Array<CharArray>\n    val height: Int\n    val width: Int\n\n    constructor() {\n        val input = Scanner(System.`in`)\n        height = input.nextInt()\n        width = input.nextInt()\n        grid = Array(height) { CharArray(width) }\n        for (i in 0 until height) {\n            for (j in 0 until width) {\n                grid[i][j] = input.next().single()\n            }\n        }\n    }\n\n    fun readGameInput() {\n        val input = Scanner(System.`in`)\n        for (i in 0 until height) {\n            for (j in 0 until width) {\n                grid[i][j] = input.next().single()\n            }\n        }\n    }\n\n    fun test() {\n        for (i in 0 until height) {\n            for (j in 0 until width) {\n                if (grid[i][j] == WATER) {\n                    if (i == 0 || i == height - 1 || j == 0 || j == width - 1) {\n                        println(\"0 $i $j\")\n                    } else {\n                        if (grid[i - 1][j] == LAND && grid[i + 1][j] == LAND && grid[i][j - 1] == LAND && grid[i][j + 1] == LAND) {\n                            println(\"0 $i $j\")\n                        }\n                    }\n                }\n            }\n        }\n    }\n}\n\nfun main(args: Array<String>) {\n    val grid = Grid()\n    grid.readGameInput()\n    grid.test()\n}"}
{"kt_path": "andrew-suprun__AoC-2023__dd5f53e/src/main/kotlin/day03_oop/day03_oop.kt", "deepseek-coder-7b-base-v1.5": ""}
{"kt_path": "getnahid__programing-problem-solves-kotlin__589c392/CyclicRotation.kt", "deepseek-coder-7b-base-v1.5": ""}
{"kt_path": "linisme__LeetCodeInKotlin__4382afc/LongestPalindrome.kt", "deepseek-coder-7b-base-v1.5": "fun main(args: Array<String>) {\n    val solution = LongestPalindromeSolution()\n    println(solution.longestPalindrome(\"abbccbbdl\"))\n}\n\nclass LongestPalindromeSolution {\n    fun longestPalindrome(s: String): String {\n        var result = \"\"\n        for (i in s.indices) {\n            var left = i\n            var right = i\n            while (left >= 0 && right < s.length && s[left] == s[right]) {\n                left--\n                right++\n            }\n            if (result.length < right - left - 1) {\n                result = s.substring(left + 1, right)\n            }\n            left = i\n            right = i + 1\n            while (left >= 0 && right < s.length && s[left] == s[right]) {\n                left--\n                right++\n            }\n            if (result.length < right - left - 1) {\n                result = s.substring(left + 1, right)\n            }\n        }\n        return result\n    }\n}"}
{"kt_path": "iafsilva__codility-lessons__5d86aef/src/main/kotlin/lesson2/OddOccurrencesInArray.kt", "deepseek-coder-7b-base-v1.5": "fun solution(X: Int, A: IntArray): Int {\n    val leaves = IntArray(X + 1)\n    var sum = 0\n    for (i in A.indices) {\n        if (leaves[A[i]] == 0) {\n            leaves[A[i]] = 1\n            sum++\n        }\n        if (sum == X) return i\n    }\n    return -1\n}"}
{"kt_path": "jjeda__playground__5d1ee6c/src/oop/algorithm/ProgressionNextNumber.kt", "deepseek-coder-7b-base-v1.5": "class ProgressionNextNumber {\n    fun solution(numbers: IntArray): Int {\n        val progression = ProgressionHelper(numbers.toList())\n        return progression.nextInt()\n    }\n}\n\nclass ProgressionHelper(private val numbers: List<Int>) {\n    fun nextInt(): Int {\n        val next = numbers[0] + 1\n        return next\n    }\n}"}
{"kt_path": "linisme__LeetCodeInKotlin__4382afc/LengthOfLongestSubstring.kt", "deepseek-coder-7b-base-v1.5": "fun main(args: Array<String>) {\n    val solution = LengthOfLongestSubstringSolution2()\n    val result = solution.lengthOfLongestSubstring(\"abba\")\n    println(result)\n}"}
{"kt_path": "nschulzke__mancala-puzzle-solver__b130d3b/src/main/kotlin/Main.kt", "deepseek-coder-7b-base-v1.5": "fun main() {\n    println(\"Hello World!\")\n}"}
{"kt_path": "sysion__DataStructureAlgorithmKt__6f9afda/TwoSumLessThanTarget.kt", "deepseek-coder-7b-base-v1.5": "fun main() {\n    val intArray = intArrayOf(10, 20, 30)\n    val target = 15\n    val result = SumTwoNumbersLessThanTarget(intArray, target)\n    println(\"Result: $result\")\n}\n\nfun SumTwoNumbersLessThanTarget(intArray: IntArray, target: Int): Int {\n    var result = 0\n    for (i in 0 until intArray.size) {\n        for (j in i + 1 until intArray.size) {\n            val sum = intArray[i] + intArray[j]\n            if (sum < target) {\n                result = max(result, sum)\n            }\n        }\n    }\n    return result\n}"}
{"kt_path": "linisme__LeetCodeInKotlin__4382afc/FineMedianSortedArrays.kt", "deepseek-coder-7b-base-v1.5": ""}
{"kt_path": "n81ur3__kotlin-coding-challenges__fdc5941/src/main/kotlin/adventofcode2018/Day18SettlersOfTheNorthPole.kt", "deepseek-coder-7b-base-v1.5": "fun react(input: String): Int {\n    var i = 0\n    while (i < input.length - 1) {\n        val c1 = input[i]\n        val c2 = input[i + 1]\n        if (c1.toInt() - c2.toInt() == 32 || c1.toInt() - c2.toInt() == -32) {\n            i += 2\n        } else {\n            i++\n        }\n    }\n    return i\n}\n\nfun main() {\n    val input = readInput(\"Day05AlchemicalReduction\")\n    println(react(input))\n}"}
{"kt_path": "iafsilva__codility-lessons__5d86aef/src/main/kotlin/lesson3/PermMissingElem.kt", "deepseek-coder-7b-base-v1.5": "class FrogRiverOne {\n    fun solution(x: Int, a: IntArray): Int {\n        a.sort()\n        var i = 0\n        while (i < a.size) {\n            if (a[i] != i + 1) {\n                return i + 1\n            }\n            i++\n        }\n        return a.size + 1\n    }\n}"}
{"kt_path": "getnahid__programing-problem-solves-kotlin__589c392/OddOccurrencesInArray.kt", "deepseek-coder-7b-base-v1.5": "fun solution(X: Int, array: IntArray): Int {\n    array.sort()\n    var i = 0\n    var j = array.size - 2\n    while (i < j) {\n        if (array[i] != array[i + 1]) return array[i]\n        i += 2\n    }\n    return array[array.size - 1]\n}"}
{"kt_path": "rupeshsasne__coursera-algorithms-part1__341634c/classroom/src/main/kotlin/com/radix2/algorithms/week3/SortingLinkedList.kt", "deepseek-coder-7b-base-v1.5": "fun main(args: Array<String>) {\n    val list = LinkedList()\n    for (i in 0 until 11) {\n        list.add(i)\n    }\n    list.reverseRecurrsive()\n    println(list)\n}"}
{"kt_path": "boris920308__HoOne__8881468/hoon/HoonAlgorithm/src/main/kotlin/boj/week02/recursive_function/FibonacciSequence5.kt", "deepseek-coder-7b-base-v1.5": "fun main() {\n    val sc = Scanner(System.`in`)\n    val n = sc.nextInt()\n    println(fibonacci(n))\n}\n\nfun fibonacci(n: Int): Int {\n    if (n <= 1) return n\n    return fibonacci(n - 1) + fibonacci(n - 2)\n}### Task\nConvert the following JVM byte‑code into **Kotlin source**.\nOutput **Kotlin code ONLY**"}
{"kt_path": "Codextor__kotlin-codes__68b75a7/src/main/kotlin/PerfectSquares.kt", "deepseek-coder-7b-base-v1.5": "fun numSquares(n: Int): Int {\n    val dp = IntArray(n + 1)\n    dp[0] = 0\n    for (i in 1..n) {\n        dp[i] = i\n        for (j in 1..i) {\n            val square = j * j\n            if (square > i) break\n            dp[i] = min(dp[i], dp[i - square] + 1)\n        }\n    }\n    return dp[n]\n}"}
{"kt_path": "Laomedeia__Java8InAction__0dcd843/src/main/java/leetcode/a167_twoSumInputSortArray_SIMPLE/Solution.kt", "deepseek-coder-7b-base-v1.5": "class Solution {\n    fun twoSum(numbers: IntArray, target: Int): IntArray {\n        var i = 0\n        var j = numbers.size - 1\n        while (i < j) {\n            val sum = numbers[i] + numbers[j]\n            if (sum == target) {\n                return intArrayOf(i + 1, j + 1)\n            } else if (sum < target) {\n                i++\n            } else {\n                j--\n            }\n        }\n        return intArrayOf()\n    }\n}"}
{"kt_path": "ariannysOronoz__tutorialKotlin__a779f54/CombinacionesPalabras/src/main/java/Main.kt", "deepseek-coder-7b-base-v1.5": "fun main(args: Array<String>) {\n    val permutation = Permutation()\n    val str = \"CARACOL\"\n    val len = str.length\n    permutation.findPermutation(str, 0, len)\n    println()\n    val str1 = \"caracol\"\n    val len1 = str1.length\n    permutation.findPermutation(str1, 0, len1)\n}\n\nclass Permutation {\n    fun findPermutation(str: String, start: Int, end: Int) {\n        if (start == end - 1) {\n            println(str)\n        } else {\n            for (i in start until end) {\n                val temp = str.toCharArray()\n                swap(temp, start, i)\n                findPermutation(String(temp), start + 1, end)\n            }\n        }\n    }\n\n    fun swap(arr: CharArray, i: Int, j: Int) {\n        val temp = arr[i]\n        arr[i] = arr[j]\n        arr[j] = temp\n    }\n}"}
{"kt_path": "scientificCommunity__blog-sample__36e291c/algorithms/src/main/kotlin/org/baichuan/sample/algorithms/leetcode/middle/MaxArea.kt", "deepseek-coder-7b-base-v1.5": "fun maxArea(height: IntArray): Int {\n    var max = 0\n    var left = 0\n    var right = height.size - 1\n    while (left < right) {\n        val area = (right - left) * minOf(height[left], height[right])\n        max = maxOf(max, area)\n        if (height[left] < height[right]) {\n            left++\n        } else {\n            right--\n        }\n    }\n    return max\n}"}
{"kt_path": "boris920308__HoOne__8881468/hoon/HoonAlgorithm/src/main/kotlin/programmers/lv01/Lv1_70128.kt", "deepseek-coder-7b-base-v1.5": "fun solution(a: IntArray, b: IntArray): Int {\n    var answer = 0\n    for (i in a.indices) {\n        answer += a[i] * b[i]\n    }\n    return answer\n}\n\nfun main() {\n    val a = intArrayOf(1, 2, 3, 4)\n    val b = intArrayOf(-3, -1, 0, 2)\n    println(solution(a, b))\n}"}
{"kt_path": "kotler-dev__kotlin-leetcode__0659e72/src/main/kotlin/exercise/easy/id121/Solution121.kt", "deepseek-coder-7b-base-v1.5": ""}
{"kt_path": "marc-bouvier-katas__Kotlin_EduTools_Advent_of_Code_2021__12cf74c/Day 5/Part 1/src/Task.kt", "deepseek-coder-7b-base-v1.5": "Input:\n[\"0,9 -> 5,9\", \"8,0 -> 0,8\", \"9,4 -> 3,4\", \"2,2 -> 2,1\", \"7,0 -> 7,4\", \"6,4 -> 2,0\", \"0,9 -> 2,9\", \"3,4 -> 1,4\", \"0,0 -> 8,8\", \"5,5 -> 8,2\"]\n\nOutput:\n5"}
{"kt_path": "Laomedeia__Java8InAction__0dcd843/src/main/java/leetcode/a392_isSubSequence_HARD/Solution.kt", "deepseek-coder-7b-base-v1.5": ""}
{"kt_path": "nickperov__Algorithms__6696f5d/fibonacci/src/main/kotlin/com/nickperov/stud/algorithms/fibonacci/FibonacciLargeGenerator.kt", "deepseek-coder-7b-base-v1.5": "fun main() {\n    println(\"Hello, large Fibonacci numbers\")\n    val fibonacciLargeTailRecursiveOptimisedGenerator = FibonacciLargeTailRecursiveOptimisedGenerator()\n    println(fibonacciLargeTailRecursiveOptimisedGenerator.calculate(1_000_000))\n}\n\nclass FibonacciLargeTailRecursiveOptimisedGenerator : FibonacciLargeGenerator() {\n    override fun calculate(n: Int): BigInteger {\n        return calculate(BigInteger.ZERO, BigInteger.ONE, n)\n    }\n\n    private fun calculate(a: BigInteger, b: BigInteger, n: Int): BigInteger {\n        return if (n == 0) {\n            a\n        } else {\n            calculate(b, a + b, n - 1)\n        }\n    }\n}"}
{"kt_path": "TonnyL__Windary__39f85cd/Kotlin/src/UniqueBinarySearchTrees.kt", "deepseek-coder-7b-base-v1.5": "class RemoveDuplicatesFromSortedArray {\n    fun removeDuplicates(nums: IntArray): Int {\n        var numDuplicates = 0\n        var i = 0\n        while (i < nums.size) {\n            if (nums[i] == nums[i + 1]) {\n                numDuplicates++\n            }\n            i++\n        }\n        return numDuplicates\n    }\n}"}
{"kt_path": "quincy__euler-kotlin__01d96f6/src/main/kotlin/com/quakbo/euler/Euler4.kt", "deepseek-coder-7b-base-v1.5": "fun sumOfMultiples(n: Int, m: Int): Int {\n    var sum = 0\n    for (i in 1..n) {\n        if (i % m == 0) {\n            sum += i\n        }\n    }\n    return sum\n}\n\nfun main(args: Array<String>) {\n    println(sumOfMultiples(1000, 3))\n}"}
{"kt_path": "getupminaaa__Algorithm__01187e2/Algorithm/src/main/kotlin/programmers/level1/personalInfoCollectionValidityPeriod.kt", "deepseek-coder-7b-base-v1.5": "fun main() {\n    val solution = Solution()\n    val result = solution.solution(\n        \"2022.05.19\",\n        arrayOf(\"2021.05.02 A\", \"2021.07.01 B\", \"2022.02.19 C\", \"2022.02.20 C\"),\n        arrayOf(\"A 6\", \"B 12\", \"C 3\")\n    )\n    println(result.contentToString())\n}\n\nclass Solution {\n    fun solution(today: String, terms: Array<String>, privacies: Array<String>): IntArray {\n        val todayDate = today.split(\".\").map { it.toInt() }\n        val termMap = terms.associate { it.split(\" \") }\n        val result = mutableListOf<Int>()\n        privacies.forEachIndexed { index, privacy ->\n            val privacyDate = privacy.split(\" \").map { it.toInt() }\n            val term = termMap[privacy.split(\" \")[1]]!!.toInt()\n            val expireDate = privacyDate[0] + term\n            if (todayDate[0] > expireDate || (todayDate[0] == expireDate && todayDate[1] > privacyDate[1]) || (todayDate[0] == expireDate && todayDate[1] == privacyDate[1] && todayDate[2] >= privacyDate[2])) {\n                result.add(index + 1)\n            }\n        }\n        return result.toIntArray()\n    }\n}"}
{"kt_path": "iafsilva__codility-lessons__5d86aef/src/main/kotlin/lesson1/BinaryGap.kt", "deepseek-coder-7b-base-v1.5": ""}
{"kt_path": "zys0909__CodeLabs__869c7c2/src/com/leecode/array/Code1.kt", "deepseek-coder-7b-base-v1.5": ""}
{"kt_path": "ykrytsyn__leetcode-in-kotlin__0acf2a6/src/main/kotlin/leetcode/ArrangingCoins.kt", "deepseek-coder-7b-base-v1.5": ""}
{"kt_path": "mayabot__mynlp__b980da3/mynlp/src/main/java/com/mayabot/nlp/module/nwd/ValueObjects.kt", "deepseek-coder-7b-base-v1.5": "fun addTo(map: HashMap<Char, IntCount>, c: Char, value: Int) {\n    val count = map.get(c)\n    if (count == null) {\n        val newCount = IntCount()\n        map.put(c, newCount)\n        newCount.value = value\n    } else {\n        count.value = count.value + value\n    }\n}"}
{"kt_path": "jjrodcast__CompetitiveProblems__a91868c/leetcode/UniquePathsTwo.kt", "deepseek-coder-7b-base-v1.5": "class Solution {\n    fun uniquePaths(m: Int, n: Int): Int {\n        val dp = Array(m) { IntArray(n) }\n        dp[0][0] = 1\n        for (i in 1 until m) {\n            dp[i][0] = dp[i - 1][0]\n        }\n        for (j in 1 until n) {\n            dp[0][j] = dp[0][j - 1]\n        }\n        for (i in 1 until m) {\n            for (j in 1 until n) {\n                dp[i][j] = dp[i - 1][j] + dp[i][j - 1]\n            }\n        }\n        return dp[m - 1][n - 1]\n    }\n}\n\nfun main() {\n    val m = 3\n    val n = 3\n    val solution = Solution()\n    val result = solution.uniquePaths(m, n)\n    println(result)\n}"}
{"kt_path": "boris920308__HoOne__8881468/hoon/HoonAlgorithm/src/main/kotlin/programmers/lv01/Lv1_77884.kt", "deepseek-coder-7b-base-v1.5": ""}
{"kt_path": "Codextor__kotlin-codes__68b75a7/src/main/kotlin/PartitionArrayForMaximumSum.kt", "deepseek-coder-7b-base-v1.5": "fun maxSumAfterPartitioning(arr: IntArray, k: Int): Int {\n    val n = arr.size\n    val dp = IntArray(n + 1)\n    for (i in 1..n) {\n        var maxVal = arr[i - 1]\n        var res = dp[i - 1] + arr[i - 1]\n        for (j in 1 until k) {\n            if (i - j - 1 < 0) break\n            maxVal = maxOf(maxVal, arr[i - j - 1])\n            res = maxOf(res, dp[i - j] + maxVal * j)\n        }\n        dp[i] = res\n    }\n    return dp[n]\n}"}
{"kt_path": "scientificCommunity__blog-sample__36e291c/algorithms/src/main/kotlin/org/baichuan/sample/algorithms/leetcode/simple/interview/MajorityElement.kt", "deepseek-coder-7b-base-v1.5": "fun majorityElement(nums: IntArray): Int {\n    var count = 0\n    var candidate = 0\n    for (num in nums) {\n        if (count == 0) {\n            candidate = num\n        }\n        if (num == candidate) {\n            count++\n        } else {\n            count--\n        }\n    }\n    return candidate\n}"}
{"kt_path": "rhavran__ProjectEuler__1115674/src/Utils.kt", "deepseek-coder-7b-base-v1.5": "fun dividers(n: Long): Long {\n    var result = 1L\n    val pf = PrimeFactorization.INSTANCE.primeFactors(n)\n    for (entry in pf.entries) {\n        result *= entry.value.toLong() + 1\n    }\n    return result\n}\n\nfun sequenceSumStartingFrom(start: Long, end: Long): Long {\n    return sumFromTo(start, end)\n}\n\nfun sumFromTo(start: Long, end: Long): Long {\n    val n = end - start + 1\n    return (n / 2.0 * (start + end)).toLong()\n}"}
{"kt_path": "jimmymorales__project-euler__e881cad/src/main/kotlin/Problem4.kt", "deepseek-coder-7b-base-v1.5": ""}
{"kt_path": "Codextor__kotlin-codes__68b75a7/src/main/kotlin/PalindromicSubstrings.kt", "deepseek-coder-7b-base-v1.5": "fun countSubstrings(s: String): Int {\n    var count = 0\n    for (center in 0 until s.length) {\n        count += countSubstringsWithCenter(s, center, center)\n        count += countSubstringsWithCenter(s, center, center + 1)\n    }\n    return count\n}\n\nprivate fun countSubstringsWithCenter(s: String, left: Int, right: Int): Int {\n    var count = 0\n    while (left >= 0 && right < s.length && s[left] == s[right]) {\n        count++\n        left--\n        right++\n    }\n    return count\n}"}
{"kt_path": "antop-dev__algorithm__9a3e762/src/main/kotlin/kr/co/programmers/P12952.kt", "deepseek-coder-7b-base-v1.5": "class P12904 {\n    fun solution(s: String): Int {\n        return if (isPalindrome(s)) 1 else 0\n    }\n\n    private fun isPalindrome(s: String): Boolean {\n        return s.substring(0, 1) == s.substring(s.length - 1, s.length) &&\n                (s.length <= 2 || isPalindrome(s.substring(1, s.length - 1)))\n    }\n}"}
{"kt_path": "ILIYANGERMANOV__algorithms__4abe4b5/Algorithms/src/main/kotlin/MaxSubArray.kt", "deepseek-coder-7b-base-v1.5": ""}
{"kt_path": "AlBovo__Compiti__56a3131/src/main/kotlin/segtree.kt", "deepseek-coder-7b-base-v1.5": ""}
{"kt_path": "3mtee__exercism-kotlin__6e3eb88/complex-numbers/src/main/kotlin/ComplexNumbers.kt", "deepseek-coder-7b-base-v1.5": "fun complex(real: Double, imag: Double): ComplexNumber {\n    return ComplexNumber(real, imag)\n}"}
{"kt_path": "perihanmirkelam__ProjectEuler__a24ac44/src/main/kotlin/P014_LongestCollatzSequence.kt", "deepseek-coder-7b-base-v1.5": ""}
{"kt_path": "iafsilva__codility-lessons__5d86aef/src/main/kotlin/lesson2/CyclicRotation.kt", "deepseek-coder-7b-base-v1.5": "fun solution(a: IntArray): Int {\n    if (a.size == 1) return a[0]\n    if (a.size == 2) return 0\n    var result = 0\n    var i = 0\n    while (i < a.size) {\n        val x = a[i]\n        var j = i + 2\n        while (j < a.size) {\n            if (a[j] == x) {\n                a[j] = 0\n                a[i] = 0\n                break\n            }\n            j += 2\n        }\n        i += 2\n    }\n    for (x in a) {\n        if (x != 0) {\n            result = x\n            break\n        }\n    }\n    return result\n}"}
{"kt_path": "boris920308__HoOne__8881468/hoon/HoonAlgorithm/src/main/kotlin/programmers/lv01/Lv1_12912.kt", "deepseek-coder-7b-base-v1.5": ""}
{"kt_path": "darian-catalin-cucer__divide-and-conquer-algorithms__1cea70d/kt.kt", "deepseek-coder-7b-base-v1.5": "fun quickSort(arr: IntArray, start: Int, end: Int) {\n    if (start < end) {\n        val p = partition(arr, start, end)\n        quickSort(arr, start, p - 1)\n        quickSort(arr, p + 1, end)\n    }\n}\n\nfun partition(arr: IntArray, start: Int, end: Int): Int {\n    val pivot = arr[end]\n    var i = start - 1\n    for (j in start until end) {\n        if (arr[j] < pivot) {\n            i++\n            val temp = arr[i]\n            arr[i] = arr[j]\n            arr[j] = temp\n        }\n    }\n    val temp = arr[i + 1]\n    arr[i + 1] = arr[end]\n    arr[end] = temp\n    return i + 1\n}"}
{"kt_path": "TonnyL__Windary__39f85cd/Kotlin/src/ThreeSumClosest.kt", "deepseek-coder-7b-base-v1.5": ""}
{"kt_path": "Javran__leetcode__f3899fe/bulb-switcher/Solution.kt", "deepseek-coder-7b-base-v1.5": "class Solution {\n    fun findComplement(num: Int): Int {\n        return num.inv() and (Integer.highestOneBit(num) - 1)\n    }\n}\n\nfun main(args: Array<String>) {\n    val solution = Solution()\n    val num = 5\n    val result = solution.findComplement(num)\n    println(result)\n}"}
{"kt_path": "TonnyL__Windary__39f85cd/Kotlin/src/NextPermutation.kt", "deepseek-coder-7b-base-v1.5": ""}
{"kt_path": "boris920308__HoOne__8881468/hoon/HoonAlgorithm/src/main/kotlin/programmers/lv01/Lv1_12940.kt", "deepseek-coder-7b-base-v1.5": "fun main() {\n    val answer = solution(3, 12)\n    println(answer)\n}\n\nfun solution(n: Int, m: Int): IntArray {\n    val answer = IntArray(2)\n    answer[0] = findGCD(n, m)\n    answer[1] = findLCM(n, m)\n    println(answer.toList())\n    return answer\n}\n\nfun findGCD(n: Int, m: Int): Int {\n    return if (m == 0) n else findGCD(m, n % m)\n}\n\nfun findLCM(n: Int, m: Int): Int {\n    return n * m / findGCD(n, m)\n}"}
{"kt_path": "JiangKlijna__leetcode-learning__65a1348/kt/001 Two Sum/TwoSum.kt", "deepseek-coder-7b-base-v1.5": "fun twoSum(numbers: IntArray, target: Int): IntArray {\n    val map = HashMap<Int, Int>()\n    for (i in numbers.indices) {\n        val complement = target - numbers[i]\n        if (map.containsKey(complement)) {\n            return intArrayOf(map[complement]!!, i)\n        }\n        map[numbers[i]] = i\n    }\n    return intArrayOf()\n}"}
{"kt_path": "rupeshsasne__coursera-algorithms-part1__341634c/classroom/src/main/kotlin/com/radix2/algorithms/week1/UnionFind.kt", "deepseek-coder-7b-base-v1.5": "fun main(args: Array<String>) {\n    val uf = WeightedQuickUnionWithPathCompressionUF(10)\n    uf.union(4, 3)\n    uf.union(3, 8)\n    uf.union(6, 5)\n    uf.union(9, 4)\n    uf.union(2, 1)\n    uf.union(5, 0)\n    uf.union(7, 2)\n    uf.union(6, 1)\n    uf.union(7, 3)\n}"}
{"kt_path": "boris920308__HoOne__8881468/hoon/HoonAlgorithm/src/main/kotlin/programmers/lv01/Lv1_68935.kt", "deepseek-coder-7b-base-v1.5": "fun solution(n: Int): Int {\n    return n.toString(3).reversed().toInt(3)\n}\n\nfun main() {\n    println(solution(123))\n}"}
{"kt_path": "korilin__DSA-kt__b96ba1b/src/main/kotlin/sort_algorithm/quickSort.kt", "deepseek-coder-7b-base-v1.5": "fun quickSort(array: IntArray) {\n    quickSort(array, 0, array.size - 1)\n}\n\nprivate fun quickSort(array: IntArray, left: Int, right: Int) {\n    if (left >= right) return\n    val pivot = partition(array, left, right)\n    quickSort(array, left, pivot - 1)\n    quickSort(array, pivot + 1, right)\n}\n\nprivate fun partition(array: IntArray, left: Int, right: Int): Int {\n    var pivot = left\n    var i = left\n    var j = right\n    while (i < j) {\n        while (array[i] <= array[pivot] && i < right) {\n            i++\n        }\n        while (array[j] > array[pivot]) {\n            j--\n        }\n        if (i < j) {\n            swap(array, i, j)\n        }\n    }\n    swap(array, pivot, j)\n    return j\n}\n\nprivate fun swap(array: IntArray, i: Int, j: Int) {\n    val temp = array[i]\n    array[i] = array[j]\n    array[j] = temp\n}"}
{"kt_path": "gardnerdickson__advent-of-code-2015__4a23ab3/src/day_10.kt", "deepseek-coder-7b-base-v1.5": "fun main(args: Array<String>) {\n    val input = \"1113222113\"\n    val day10 = Day10()\n    val part1 = day10.part1(input)\n    println(\"Part 1: $part1\")\n    val part2 = day10.part2(input)\n    println(\"Part 2: $part2\")\n}\n\nclass Day10 {\n    fun part1(input: String): Int {\n        var result = input\n        for (i in 1..40) {\n            result = lookAndSay(result)\n        }\n        return result.length\n    }\n\n    fun part2(input: String): Int {\n        var result = input\n        for (i in 1..50) {\n            result = lookAndSay(result)\n        }\n        return result.length\n    }\n\n    private fun lookAndSay(input: String): String {\n        var result = \"\"\n        var count = 1\n        var currentChar = input[0]\n        for (i in 1 until input.length) {\n            if (input[i] == currentChar) {\n                count++\n            } else {\n                result += count.toString() + currentChar\n                currentChar = input[i]\n                count = 1\n            }\n        }\n        result += count.toString() + currentChar\n        return result\n    }\n}"}
{"kt_path": "gardnerdickson__advent-of-code-2015__4a23ab3/src/day_2.kt", "deepseek-coder-7b-base-v1.5": "fun main(args: Array<String>) {\n    val res = \"res/day_2_input.txt\"\n    val part1 = Day2.INSTANCE.part1(res)\n    println(\"Part 1: $part1\")\n    val part2 = Day2.INSTANCE.part2(res)\n    println(\"Part 2: $part2\")\n}"}
{"kt_path": "gardnerdickson__advent-of-code-2015__4a23ab3/src/day_3.kt", "deepseek-coder-7b-base-v1.5": "import java.io.File\nimport java.io.InputStream\nimport java.util.*\n\nfun main(args: Array<String>) {\n    val input = File(\"res/day_3_input.txt\").readText()\n    val day3 = Day3.INSTANCE\n    val part1 = day3.part1(input)\n    println(\"Part 1: $part1\")\n    val part2 = day3.part2(input)\n    println(\"Part 2: $part2\")\n}\n\nclass Day3 private constructor() {\n    companion object {\n        val INSTANCE = Day3()\n    }\n\n    fun part1(input: String): Int {\n        val lines = input.split(\"\\n\")\n        val map = mutableMapOf<Pair<Int, Int>, Char>()\n        var x = 0\n        var y = 0\n        for (line in lines) {\n            for (c in line) {\n                map[Pair(x, y)] = c\n                x++\n            }\n            x = 0\n            y++\n        }\n        var x1 = 0\n        var y1 = 0\n        var x2 = 0\n        var y2 = 0\n        var x3 = 0\n        var y3 = 0\n        var x4 = 0\n        var y4 = 0\n        var x5 = 0\n        var y5 = 0\n        var x6 = 0\n        var y6 = 0\n        var x7 = 0\n        var y7 = 0\n        var x8 = 0\n        var y8 = 0\n        var x9 = 0\n        var y9 = 0\n        var x10 = 0\n        var y10 = 0\n        var x11 = 0\n        var y11 = 0\n        var x12 = 0\n        var y12 = 0\n        var x13 = 0\n        var y13 = 0\n        var x14 = 0\n        var y14 = 0\n        var x15 = 0\n        var y15 = 0\n        var x16 = 0\n        var y16 = 0\n        var x17 = 0\n        var y17 = 0\n        var x18 = 0\n        var y18 = 0\n        var x19 = 0\n        var y19 = 0\n        var x20 = 0\n        var y20 = 0\n        var x21 = 0\n        var y21 = 0\n        var x22 = 0\n        var y22 = 0\n        var x23 = 0\n        var y23 = 0\n        var x24 = 0\n        var y24 = 0\n        var x25 = 0\n        var y25 = 0\n        var x26 = 0\n        var y26 = 0\n        var x27 = 0\n        var y27 = 0\n        var x28 = 0\n        var y28 = 0\n        var x29 = 0\n        var y29 = 0\n        var x30 = 0\n        var y30 = 0\n        var x31 = 0\n        var y31 = 0\n        var x32 = 0\n        var y32 = 0\n        var x33 = 0\n        var y33 = 0\n        var x34 = 0\n        var y34 = 0\n        var x35 = 0\n        var y35 = 0\n        var x36 = 0\n        var y36 = 0\n        var x37 = 0\n        var y37 = 0\n        var x38 = 0\n        var y38 = 0\n        var x39 = 0\n        var y39 = 0\n        var x40 = 0\n        var y40 = 0\n        var x41 = 0\n        var y41 = 0\n        var x42 = 0\n        var y42 = 0\n        var x43 = 0\n        var y43 = 0\n        var x44 = 0\n        var y44 = 0\n        var x45 = 0\n        var y45 = 0\n        var x46 = 0\n        var y46 = 0\n        var x47 = 0\n        var y47 = 0\n        var x48 = 0\n        var y48 = 0\n        var x49 = 0\n        var y49 = 0\n        var x50 = 0\n        var y50 = 0\n        var x51 = 0\n        var y51 = 0\n        var x52 = 0\n        var y52 = 0\n        var x53 = 0\n        var y53 = 0\n        var x54 = 0\n        var y54 = 0\n        var x55 = 0\n        var y55 = 0\n        var x56 = 0\n        var y56 = 0\n        var x57 = 0\n        var y57 = 0\n        var x58 = 0\n        var y58 = 0\n        var x59 = 0\n        var y59 = 0\n        var x60 = 0\n        var y60 = 0\n        var x61 = 0\n        var y61 = 0\n        var x62 = 0\n        var y62 = 0\n        var x63 = 0\n        var y63 = 0\n        var x64 = 0\n        var y64 = 0\n        var x65 = 0\n        var y65 = 0\n        var x66 = 0\n        var y66 = 0\n        var x67 = 0\n        var y67 = 0\n        var x68 = 0\n        var y68 = 0\n        var x69 = 0\n        var y69 = 0\n        var x70 = 0\n        var y70 = 0\n        var x71 = 0\n        var y71 = 0\n        var x72 = 0\n        var y72 = 0\n        var x73 = 0\n        var y73 = 0\n        var x74 = 0\n        var y74 = 0\n        var x75 = 0\n        var y75 = 0\n        var x76 = 0\n        var y76 = 0\n        var x77 = 0\n        var y77 = 0\n        var x78 = 0\n        var y78 = 0\n        var x79 = 0\n        var y79 = 0\n        var x80 = 0\n        var y80 = 0\n        var x81 = 0\n        var y81 = 0"}
{"kt_path": "antop-dev__algorithm__9a3e762/src/main/kotlin/kr/co/programmers/P161988.kt", "deepseek-coder-7b-base-v1.5": "class P161988 {\n    fun solution(sequence: IntArray): Long {\n        var max = sequence[0]\n        var min = sequence[0]\n        var answer = 0L\n        for (i in 1 until sequence.size) {\n            max = max(max, sequence[i] * i)\n            min = min(min, sequence[i] * (sequence.size - i))\n            answer = max(answer, max - min)\n        }\n        return answer\n    }\n\n    private fun max(a: Int, b: Int): Int = if (a > b) a else b\n    private fun min(a: Int, b: Int): Int = if (a < b) a else b\n}"}
{"kt_path": "alexjlockwood__bees-and-bombs-compose__0d7a86b/app/src/main/java/com/alexjlockwood/beesandbombs/demos/utils/MathUtils.kt", "deepseek-coder-7b-base-v1.5": "const val PI = 3.141592653589793238462643383279502884197169399375105820974944592307816406286208998628034825342117067982148086513282306647093844609550582231725359408128481117450284102701938521105559644622948954930381964428810975665933446128475648233786783165271201909145648566923460348610454326648213393607260249141273724587006606315588174881520920962829254091715364367892590360011330530548820466521384146951941511609433057270365759591953092186117381932611793105118548074462379962749567351885752724891227938183011949129833673362440656643086021394946395224737190702179860943702770539217176293176752384674818467669405132000568127145263560827785771342757789609173637178721468440901224953430146549585371050792279689258923542019956112129021960864034418159813629774771309960518707211349999998372978049951059731732816096318595024459455346908302642522308253344685035261931188171010003137838752886587533208381420617177669147303598253490428755468731159562863882353787593751957781857780532171226806613001927876611195909216420198938095257201065485863278865936153381827968230301952035301852968995773622599413891249721775283479131515574857242454150695950829533116861727855889075098381754637464939319255060400927701671139009848824012858361603563707660104710181942955596198946767837449448255379774726847104047534646208046684259069491293313677028989152104752162056966024058038150193511253382430035587640247486611166396956762016239884892332239174034354976634022554747522733730314735251049999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999"}
{"kt_path": "chengw315__daily-study__501b881/letcode/src/main/java/daily/LeetCodeLCP13.kt", "deepseek-coder-7b-base-v1.5": "class SolutionLCP13 {\n    fun minimalSteps(grid: Array<String>): Int {\n        val n = grid.size\n        val m = grid[0].length\n        val visited = Array(n) { BooleanArray(m) }\n        val queue = ArrayDeque<Pair<Int, Int>>()\n        var steps = 0\n        for (i in 0 until n) {\n            for (j in 0 until m) {\n                if (grid[i][j] == 'S') {\n                    queue.add(Pair(i, j))\n                    visited[i][j] = true\n                }\n            }\n        }\n        while (queue.isNotEmpty()) {\n            val size = queue.size\n            for (i in 0 until size) {\n                val (x, y) = queue.removeFirst()\n                if (grid[x][y] == 'T') {\n                    return steps\n                }\n                if (x > 0 && grid[x - 1][y] != '#' && !visited[x - 1][y]) {\n                    queue.add(Pair(x - 1, y))\n                    visited[x - 1][y] = true\n                }\n                if (x < n - 1 && grid[x + 1][y] != '#' && !visited[x + 1][y]) {\n                    queue.add(Pair(x + 1, y))\n                    visited[x + 1][y] = true\n                }\n                if (y > 0 && grid[x][y - 1] != '#' && !visited[x][y - 1]) {\n                    queue.add(Pair(x, y - 1))\n                    visited[x][y - 1] = true\n                }\n                if (y < m - 1 && grid[x][y + 1] != '#' && !visited[x][y + 1]) {\n                    queue.add(Pair(x, y + 1))\n                    visited[x][y + 1] = true\n                }\n            }\n            steps++\n        }\n        return -1\n    }\n}"}
{"kt_path": "rajatenzyme__Coding-Journey__65a0570/Algo_Ds_Notes-master/Algo_Ds_Notes-master/Floyd_Warshall_Algorithm/Floyd_Warshall_Algorithm.kt", "deepseek-coder-7b-base-v1.5": ""}
{"kt_path": "brunorene__advent_of_code_2018__0cb6814/src/main/kotlin/advent/of/code/day17/Solution.kt", "deepseek-coder-7b-base-v1.5": "import advent.of.code.day17.Underground\nimport java.io.File\nimport kotlin.text.Regex\n\nval input = File(\"day17.txt\")\nval multipleCoord = Regex(\"(x|y)=([.0-9]+)\\\\.\\\\.([.0-9]+)\")\nval oneCoord = Regex(\"(x|y)=([.0-9]+)\")\n\nfun part1(): Int {\n    val underground = Underground(input)\n    println(underground.getClay())\n    return 1\n}\n\nfun part2(): Int = 2\n\nfun main(args: Array<String>) {\n    println(part1())\n    println(part2())\n}"}
{"kt_path": "Simplation__OpenSourceRepository__d45feaa/算法/一维数组的动态和1480.kt", "deepseek-coder-7b-base-v1.5": ""}
{"kt_path": "jimmymorales__project-euler__e881cad/src/main/kotlin/Problem3.kt", "deepseek-coder-7b-base-v1.5": "fun main() {\n    var sum = 0\n    for (i in 1 until 1000) {\n        if (i % 3 == 0 || i % 5 == 0) {\n            sum += i\n        }\n    }\n    println(sum)\n}"}
{"kt_path": "age-series__ElectricalAge2__86d843f/src/main/kotlin/org/eln2/mc/data/SegmentTree.kt", "deepseek-coder-7b-base-v1.5": "class SegmentTree<T>(private val root: SegmentTreeNode<T>) {\n    fun queryOrNull(x: Double): T? = root.contains(x).takeIf { it }?.let { root.query(x) }\n    fun query(x: Double): T = queryOrNull(x) ?: throw IllegalStateException(\"$x not found\")\n}"}
{"kt_path": "ykrytsyn__leetcode-in-kotlin__0acf2a6/src/main/kotlin/leetcode/UniquePaths.kt", "deepseek-coder-7b-base-v1.5": "class ValidParentheses {\n    fun isValid(s: String): Boolean {\n        val stack = Stack<Char>()\n        for (c in s) {\n            if (c == '(' || c == '[' || c == '{') {\n                stack.push(c)\n            } else if (c == ')' && !stack.isEmpty() && stack.peek() == '(') {\n                stack.pop()\n            } else if (c == ']' && !stack.isEmpty() && stack.peek() == '[') {\n                stack.pop()\n            } else if (c == '}' && !stack.isEmpty() && stack.peek() == '{') {\n                stack.pop()\n            } else {\n                return false\n            }\n        }\n        return stack.isEmpty()\n    }\n}"}
{"kt_path": "quincy__euler-kotlin__01d96f6/src/main/kotlin/com/quakbo/euler/Euler6.kt", "deepseek-coder-7b-base-v1.5": "fun main(args: Array<String>) {\n    val sequence = generateSequence(1) { it + 1 }\n    val take = sequence.take(1000)\n    val sumOfMultiples = take.filter { it % 3 == 0 || it % 5 == 0 }.sumOfInt { it }\n    println(sumOfMultiples)\n}"}
{"kt_path": "Kirchberg__BigDataPL__b6a459a/LR7/src/main/kotlin/Task1V3.kt", "deepseek-coder-7b-base-v1.5": "fun task1V3() {\n    val words = \"java android kotlin rust\".split(\" \")\n    val finder = WordChainFinder(words)\n    val longestChain = finder.findLongestWordChain()\n    println(\"Longest word chain: $longestChain\")\n}"}
{"kt_path": "fredyw__leetcode__a59d77c/src/main/kotlin/leetcode/Problem2064.kt", "deepseek-coder-7b-base-v1.5": ""}
