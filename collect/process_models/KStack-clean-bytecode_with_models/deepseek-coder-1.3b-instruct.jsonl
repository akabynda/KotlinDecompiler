{"kt_path": "remisultan__multiarm-bandit-algorithm-kotlin__ead934d/core-bandit/src/main/kotlin/org/rsultan/bandit/algorithms/BanditAlgorithm.kt", "deepseek-coder-1.3b-instruct": "interface BanditAlgorithm {\n    fun selectArm(): Int\n    fun update(arm: Int, reward: Float)\n}"}
{"kt_path": "n81ur3__kotlin-coding-challenges__fdc5941/src/main/kotlin/adventofcode2018/Day22ModeMaze.kt", "deepseek-coder-1.3b-instruct": "class Day22ModeMaze {\n}"}
{"kt_path": "n81ur3__kotlin-coding-challenges__fdc5941/src/main/kotlin/adventofcode2017/Day21FractalArt.kt", "deepseek-coder-1.3b-instruct": "class Day21FractalArt {\n}"}
{"kt_path": "n81ur3__kotlin-coding-challenges__fdc5941/src/main/kotlin/adventofcode2017/Day03SpiralMemory.kt", "deepseek-coder-1.3b-instruct": "object Day03SpiralMemory {\n}"}
{"kt_path": "n81ur3__kotlin-coding-challenges__fdc5941/src/main/kotlin/adventofcode2019/Day03CrossedWires.kt", "deepseek-coder-1.3b-instruct": "class Day03CrossedWires {\n}"}
{"kt_path": "n81ur3__kotlin-coding-challenges__fdc5941/src/main/kotlin/adventofcode2018/Day04ReposeRecord.kt", "deepseek-coder-1.3b-instruct": "class Day04ReposeRecord {\n    init {\n        // No code here\n    }\n}"}
{"kt_path": "n81ur3__kotlin-coding-challenges__fdc5941/src/main/kotlin/adventofcode2017/Day08LikeRegisters.kt", "deepseek-coder-1.3b-instruct": "class Day08LikeRegisters {\n}"}
{"kt_path": "n81ur3__kotlin-coding-challenges__fdc5941/src/main/kotlin/adventofcode2018/Day11ChronalCharge.kt", "deepseek-coder-1.3b-instruct": "object Day11ChronalCharge {\n}"}
{"kt_path": "n81ur3__kotlin-coding-challenges__fdc5941/src/main/kotlin/adventofcode2020/Day19MonsterMessage.kt", "deepseek-coder-1.3b-instruct": "class Day19MonsterMessage {\n}"}
{"kt_path": "n81ur3__kotlin-coding-challenges__fdc5941/src/main/kotlin/adventofcode2017/Day07RecursiveCircus.kt", "deepseek-coder-1.3b-instruct": "class Day07RecursiveCircus {\n}"}
{"kt_path": "n81ur3__kotlin-coding-challenges__fdc5941/src/main/kotlin/adventofcode2019/Day12TheNbodyProblem.kt", "deepseek-coder-1.3b-instruct": "object Day12TheNbodyProblem {\n}"}
{"kt_path": "n81ur3__kotlin-coding-challenges__fdc5941/src/main/kotlin/adventofcode2018/Day15BeverageBandits.kt", "deepseek-coder-1.3b-instruct": "class Day15BeverageBandits {\n}"}
{"kt_path": "n81ur3__kotlin-coding-challenges__fdc5941/src/main/kotlin/adventofcode2020/Day07HandyHaversacks.kt", "deepseek-coder-1.3b-instruct": "object Day07HandyHaversacks {\n}"}
{"kt_path": "n81ur3__kotlin-coding-challenges__fdc5941/src/main/kotlin/adventofcode2018/Day07TheSumOfItsParts.kt", "deepseek-coder-1.3b-instruct": "class Day07TheSumOfItsParts {\n}"}
{"kt_path": "n81ur3__kotlin-coding-challenges__fdc5941/src/main/kotlin/adventofcode2017/Day25TheHaltingProblem.kt", "deepseek-coder-1.3b-instruct": "class Day25TheHaltingProblem {\n}"}
{"kt_path": "n81ur3__kotlin-coding-challenges__fdc5941/src/main/kotlin/adventofcode2019/Day06UniversalOrbitMap.kt", "deepseek-coder-1.3b-instruct": "class Day06UniversalOrbitMap {\n}"}
{"kt_path": "n81ur3__kotlin-coding-challenges__fdc5941/src/main/kotlin/adventofcode2019/Day10MonitoringStation.kt", "deepseek-coder-1.3b-instruct": "object Day10MonitoringStation {\n}"}
{"kt_path": "n81ur3__kotlin-coding-challenges__fdc5941/src/main/kotlin/adventofcode2018/Day06ChronalCoordinates.kt", "deepseek-coder-1.3b-instruct": "class Day06ChronalCoordinates {\n}"}
{"kt_path": "n81ur3__kotlin-coding-challenges__fdc5941/src/main/kotlin/adventofcode2020/Day21AllergenAssessment.kt", "deepseek-coder-1.3b-instruct": "class Day21AllergenAssessment {\n}"}
{"kt_path": "n81ur3__kotlin-coding-challenges__fdc5941/src/main/kotlin/adventofcode2017/Day24ElectromagneticMoat.kt", "deepseek-coder-1.3b-instruct": "class Day24ElectromagneticMoat {\n}"}
{"kt_path": "n81ur3__kotlin-coding-challenges__fdc5941/src/main/kotlin/adventofcode2018/Day12SubterraneanSustainability.kt", "deepseek-coder-1.3b-instruct": "class Day12SubterraneanSustainability {\n}"}
{"kt_path": "n81ur3__kotlin-coding-challenges__fdc5941/src/main/kotlin/adventofcode2018/Day23ExperimentalEmergencyTeleportation.kt", "deepseek-coder-1.3b-instruct": "class Day23ExperimentalEmergencyTeleportation {\n}"}
{"kt_path": "alebedev__aoc2022__d6ba46b/src/main/kotlin/Map.kt", "deepseek-coder-1.3b-instruct": "object Map {\n    object Instance {\n        val solve: () -> Unit = {\n            println(\"solve\")\n        }\n    }\n}\n\nfun main() {\n    Map.Instance.solve()\n}"}
{"kt_path": "andrewrlee__adventOfCode2020__a9c21a6/src/main/kotlin/File09.kt", "deepseek-coder-1.3b-instruct": "class Challenge09 {\n    init {\n        solve()\n    }\n\n    fun solve() {\n    }\n}\n\nfun main() {\n    Challenge09().solve()\n}"}
{"kt_path": "andrewrlee__adventOfCode2020__a9c21a6/src/main/kotlin/File08.kt", "deepseek-coder-1.3b-instruct": "class Challenge08 {\n    init {\n        solve()\n    }\n\n    fun solve() {\n    }\n\n    companion object {\n        @JvmStatic\n        fun main(args: Array<String>) {\n            main(args)\n        }\n    }\n}"}
{"kt_path": "andrewrlee__adventOfCode2020__a9c21a6/src/main/kotlin/File02.kt", "deepseek-coder-1.3b-instruct": "class Challenge02 {\n    init {\n        solve()\n    }\n\n    fun solve() {\n    }\n}\n\nfun main() {\n    Challenge02().solve()\n}"}
{"kt_path": "andrewrlee__adventOfCode2020__a9c21a6/src/main/kotlin/File07.kt", "deepseek-coder-1.3b-instruct": "class Challenge07 {\n    init {\n        solve()\n    }\n\n    fun solve() {\n        // TODO: implement\n    }\n}\n\nfun main() {\n    Challenge07().solve()\n}"}
{"kt_path": "charlesfranciscodev__codingame__3ec8060/puzzles/kotlin/src/war/war.kt", "deepseek-coder-1.3b-instruct": "import kotlin.reflect.jvm.internal.Intrinsics\n\nclass WarKt {\n    companion object {\n        @JvmStatic\n        fun main(args: Array<String>) {\n            val game = Game()\n            game.play()\n        }\n    }\n}\n\nclass Game {\n    init {\n        Intrinsics.checkNotNullParameter(this, \"args\")\n    }\n\n    fun play() {\n        // Implementation here\n    }\n}"}
{"kt_path": "al-volkov__spbu_2020_kotlin_homeworks__5049681/src/main/kotlin/homework_5/Task1.kt", "deepseek-coder-1.3b-instruct": "fun isNumber(str: String): Boolean {\n    return str.toIntOrNull() != null\n}"}
{"kt_path": "iafsilva__codility-lessons__5d86aef/src/main/kotlin/lesson3/FrogJmp.kt", "deepseek-coder-1.3b-instruct": "class FrogJmp {\n    fun solution(x: Int, y: Int, d: Int): Int {\n        val z = x - y\n        return if (z <= d) z else (z / d + 1)\n    }\n}"}
{"kt_path": "mikhalchenko-alexander__advent-of-kotlin-2018-week1__c483ade/src/main/kotlin/com/anahoret/pathfinding/MarkingWayOnMap.kt", "deepseek-coder-1.3b-instruct": "object MarkingWayOnMap {\n    fun addPath(map: String): String {\n        return map\n    }\n}"}
{"kt_path": "charlesfranciscodev__codingame__3ec8060/puzzles/kotlin/src/surface/surface.kt", "deepseek-coder-1.3b-instruct": "import kotlin.reflect.jvm.internal.Intrinsics\n\npublic class SurfaceKt {\n    public companion object {\n        public const val LAND: Char = 'L'\n        public const val WATER: Char = 'W'\n        public const val DEFAULT_INDEX: Int = 0\n    }\n\n    public fun main(args: Array<String>) {\n        val grid = Grid()\n        grid.readGameInput()\n        grid.test()\n    }\n}\n\nprivate class Grid {\n    // implementation\n}"}
{"kt_path": "andrew-suprun__AoC-2023__dd5f53e/src/main/kotlin/day03_oop/day03_oop.kt", "deepseek-coder-1.3b-instruct": "// Day03_oop.kt\n\nclass Part1(private val input: String) {\n    fun run() {\n        // implementation\n    }\n}\n\nclass Part2(private val input: String) {\n    fun run() {\n        // implementation\n    }\n}\n\nfun main(args: Array<String>) {\n    Part1(args[0]).run()\n    Part2(args[0]).run()\n}"}
{"kt_path": "getnahid__programing-problem-solves-kotlin__589c392/CyclicRotation.kt", "deepseek-coder-1.3b-instruct": "fun solution(arr: IntArray, shift: Int): IntArray {\n    val n = arr.size\n    val result = IntArray(n)\n    for (i in 0 until n) {\n        result[(i + shift) % n] = arr[i]\n    }\n    return result\n}"}
{"kt_path": "linisme__LeetCodeInKotlin__4382afc/LongestPalindrome.kt", "deepseek-coder-1.3b-instruct": "class LongestPalindromeSolution {\n    init {\n        println(\"LongestPalindromeSolution\")\n    }\n\n    fun longestPalindrome(s: String): String {\n        println(\"longestPalindrome\")\n        return s\n    }\n}\n\nfun main() {\n    val solution = LongestPalindromeSolution()\n    val result = solution.longestPalindrome(\"abbccbbd\")\n    println(result)\n}"}
{"kt_path": "iafsilva__codility-lessons__5d86aef/src/main/kotlin/lesson2/OddOccurrencesInArray.kt", "deepseek-coder-1.3b-instruct": "class OddOccurrencesInArray {\n    fun solution(arr: IntArray): Int {\n        val map = mutableMapOf<Int, Int>()\n        arr.forEach {\n            map[it] = map.getOrDefault(it, 0) + 1\n        }\n        return map.entries.firstOrNull { (_, value) -> value % 2 != 0 }?.key ?: 0\n    }\n}"}
{"kt_path": "jjeda__playground__5d1ee6c/src/oop/algorithm/ProgressionNextNumber.kt", "deepseek-coder-1.3b-instruct": "// ProgressionNextNumber.kt\n\nimport kotlin.collections.List\n\npublic class ProgressionNextNumber {\n    constructor()\n\n    public fun solution(input: IntArray): Int {\n        val list = input.toList()\n        val progressionHelper = ProgressionHelper(list)\n        return progressionHelper.nextInt()\n    }\n}\n\nprivate class ProgressionHelper(private val list: List<Int>) {\n    constructor(list: List<Int>) {\n        // Implementation\n    }\n\n    public fun nextInt(): Int {\n        // Implementation\n        return 0\n    }\n}"}
{"kt_path": "linisme__LeetCodeInKotlin__4382afc/LengthOfLongestSubstring.kt", "deepseek-coder-1.3b-instruct": "class LengthOfLongestSubstringSolution2(input: String) {\n    init {\n        println(input)\n    }\n}\n\nfun main(args: Array<String>) {\n    val solution = LengthOfLongestSubstringSolution2(args[0])\n}"}
{"kt_path": "nschulzke__mancala-puzzle-solver__b130d3b/src/main/kotlin/Main.kt", "deepseek-coder-1.3b-instruct": "import kotlin.collections.Set\n\nval mancalaIndices: Set<Int> = setOf(0, 13)"}
{"kt_path": "sysion__DataStructureAlgorithmKt__6f9afda/TwoSumLessThanTarget.kt", "deepseek-coder-1.3b-instruct": "fun main() {\n    val intArray = intArrayOf(10, 20, 30)\n    val result = SumTwoNumbersLessThanTarget(intArray, 15)\n    println(result)\n}\n\nfun SumTwoNumbersLessThanTarget(array: IntArray, target: Int): Int {\n    val result = array.sum() < target\n    return result\n}"}
{"kt_path": "linisme__LeetCodeInKotlin__4382afc/FineMedianSortedArrays.kt", "deepseek-coder-1.3b-instruct": "import kotlin.IntArray\nimport kotlin.math.max\nimport kotlin.math.min\n\nclass FindMedianSortedArraysSolution {\n    constructor() {\n        // TODO: Initialize your data structure here.\n    }\n\n    fun findMedianSortedArrays(nums1: IntArray, nums2: IntArray): Double {\n        val merged = IntArray(nums1.size + nums2.size)\n        var i = 0\n        var j = 0\n        var k = 0\n        while (i < nums1.size && j < nums2.size) {\n            if (nums1[i] < nums2[j]) {\n                merged[k++] = nums1[i++]\n            } else {\n                merged[k++] = nums2[j++]\n            }\n        }\n        while (i < nums1.size) {\n            merged[k++] = nums1[i++]\n        }\n        while (j < nums2.size) {\n            merged[k++] = nums2[j++]\n        }\n\n        if (merged.size % 2 == 0) {\n            return (merged[merged.size / 2] + merged[(merged.size / 2) - 1].toDouble()).div(2)\n        } else {\n            return merged[merged.size / 2].toDouble()\n        }\n    }\n}\n\nfun main() {\n    val solution = FindMedianSortedArraysSolution()\n    val nums1 = intArrayOf(1, 3)\n    val nums2 = intArrayOf(2)\n    val median = solution.findMedianSortedArrays(nums1, nums2)\n    println(median)\n}"}
{"kt_path": "n81ur3__kotlin-coding-challenges__fdc5941/src/main/kotlin/adventofcode2018/Day18SettlersOfTheNorthPole.kt", "deepseek-coder-1.3b-instruct": "import adventofcode2018.AreaElement\nimport java.util.Collection\n\nclass Day18SettlersOfTheNorthPole {\n    constructor() {\n        // TODO: Initialize your class here\n    }\n}\n\nfun hash(list: Collection<out List<out AreaElement>>): Int {\n    // TODO: Implement your hash function here\n    return 0\n}"}
{"kt_path": "iafsilva__codility-lessons__5d86aef/src/main/kotlin/lesson3/PermMissingElem.kt", "deepseek-coder-1.3b-instruct": "class PermMissingElem {\n    fun solution(arr: IntArray): Int {\n        arr.sort()\n        for (i in 1..arr.size) {\n            if (i != arr[i - 1]) {\n                return i\n            }\n        }\n        return 0\n    }\n}"}
{"kt_path": "getnahid__programing-problem-solves-kotlin__589c392/OddOccurrencesInArray.kt", "deepseek-coder-1.3b-instruct": "fun solution(arr: IntArray): Int {\n    val sortedArr = arr.sortedArray()\n    sortedArr.forEachIndexed { index, _ ->\n        if (index % 2 == 0 && index < sortedArr.lastIndex) {\n            if (sortedArr[index + 1] != sortedArr[index]) {\n                return sortedArr[index]\n            }\n        }\n    }\n    return -1\n}"}
{"kt_path": "rupeshsasne__coursera-algorithms-part1__341634c/classroom/src/main/kotlin/com/radix2/algorithms/week3/SortingLinkedList.kt", "deepseek-coder-1.3b-instruct": "import com.radix2.algorithms.week3.LinkedList\n\nfun main(args: Array<String>) {\n    val list = LinkedList()\n    args.forEach {\n        list.add(Integer.valueOf(it))\n    }\n    list.reverseRecursive()\n    println(list)\n}"}
{"kt_path": "boris920308__HoOne__8881468/hoon/HoonAlgorithm/src/main/kotlin/boj/week02/recursive_function/FibonacciSequence5.kt", "deepseek-coder-1.3b-instruct": "fun fibonacci(n: Int): Int {\n    if (n <= 1) return n\n    return fibonacci(n - 1) + fibonacci(n - 2)\n}\n\nfun main() {\n    val n = readLine()!!.toInt()\n    println(fibonacci(n))\n}"}
{"kt_path": "Codextor__kotlin-codes__68b75a7/src/main/kotlin/PerfectSquares.kt", "deepseek-coder-1.3b-instruct": "fun numSquares(n: Int): Int {\n    var count = 0\n    var i = 1\n    while (i * i <= n) {\n        count++\n        i++\n    }\n    return count\n}"}
{"kt_path": "Laomedeia__Java8InAction__0dcd843/src/main/java/leetcode/a167_twoSumInputSortArray_SIMPLE/Solution.kt", "deepseek-coder-1.3b-instruct": "// Compiled from \"Solution.kt\"\nobject leetcode_a167_twoSumInputSortArray_SIMPLE_Solution {\n    fun twoSum(nums: IntArray, target: Int): IntArray {\n        val map = mutableMapOf<Int, Int>()\n        for ((index, num) in nums.withIndex()) {\n            val complement = target - num\n            if (map.containsKey(complement)) {\n                return intArrayOf(map[complement]!!, index)\n            } else {\n                map[num] = index\n            }\n        }\n        return intArrayOf()\n    }\n}"}
{"kt_path": "ariannysOronoz__tutorialKotlin__a779f54/CombinacionesPalabras/src/main/java/Main.kt", "deepseek-coder-1.3b-instruct": "import com.includehelp.basic.Permutation\n\nfun main(args: Array<String>) {\n    val permutation = Permutation()\n    val length = permutation.findPermutation(args[0], 0, args[0].length)\n    println(length)\n    val length2 = permutation.findPermutation(args[1], 0, args[1].length)\n    println(length2)\n}"}
{"kt_path": "scientificCommunity__blog-sample__36e291c/algorithms/src/main/kotlin/org/baichuan/sample/algorithms/leetcode/middle/MaxArea.kt", "deepseek-coder-1.3b-instruct": "// MaxArea.kt\n\nclass MaxArea {\n    fun maxArea(height: IntArray): Int {\n        val height = height.first()\n        val notNullHeight = kotlin.jvm.internal.Intrinsics.checkNotNullParameter(height, \"height\")\n        var maxArea = 0\n        var i = 0\n        var j = height.lastIndex\n        while (i < j) {\n            maxArea = kotlin.math.max(maxArea, kotlin.math.min(height[i], height[j]) * (j - i))\n            if (height[i] < height[j]) {\n                i++\n            } else {\n                j--\n            }\n        }\n        return maxArea\n    }\n}"}
{"kt_path": "boris920308__HoOne__8881468/hoon/HoonAlgorithm/src/main/kotlin/programmers/lv01/Lv1_70128.kt", "deepseek-coder-1.3b-instruct": "import kotlin.IntArray\n\nclass Lv1_70128Kt {\n    companion object {\n        @JvmStatic\n        fun main() {\n            val arr1 = IntArray(4)\n            val arr2 = IntArray(4)\n            arr1[0] = 0\n            arr1[1] = 1\n            arr1[2] = 2\n            arr1[3] = 3\n            arr2[0] = 0\n            arr2[1] = 1\n            arr2[2] = 2\n            arr2[3] = 3\n            main(arr1, arr2)\n        }\n\n        private fun solution(arr1: IntArray, arr2: IntArray): Int {\n            val arr3 = IntArray(arr1.size)\n            for (i in arr1.indices) {\n                arr3[i] = arr1[i] + arr2[i]\n            }\n            return arr3.sum()\n        }\n    }\n}\n\nfun main(arr1: IntArray, arr2: IntArray) {\n    println(Lv1_70128Kt.solution(arr1, arr2))\n}"}
{"kt_path": "kotler-dev__kotlin-leetcode__0659e72/src/main/kotlin/exercise/easy/id121/Solution121.kt", "deepseek-coder-1.3b-instruct": "// Compiled from \"Solution121.kt\"\n\npublic final class ExerciseEasyId121Solution121 {\n  public ExerciseEasyId121Solution121()\n  {\n    // constructor\n  }\n\n  public fun maxProfit(prices: IntArray): Int {\n    val n = prices.size\n    if (n < 2) return 0\n\n    var maxProfit = 0\n    var minPrice = prices[0]\n\n    for (i in 1 until n) {\n      if (prices[i] < minPrice) minPrice = prices[i]\n      val profit = prices[i] - minPrice\n      if (profit > maxProfit) maxProfit = profit\n    }\n\n    return maxProfit\n  }\n}"}
{"kt_path": "marc-bouvier-katas__Kotlin_EduTools_Advent_of_Code_2021__12cf74c/Day 5/Part 1/src/Task.kt", "deepseek-coder-1.3b-instruct": "class Task {\n    companion object {\n        fun overlaps(lines: Array<String>): Int {\n            val linesMap = mutableMapOf<String, Lines>()\n            Lines(linesMap).mergeWith(Lines())\n            return lines.overlaps(linesMap)\n        }\n    }\n}\n\ndata class Lines(val map: MutableMap<String, Lines> = mutableMap()) {\n    fun mergeWith(other: Lines): Lines {\n        map.putAll(other.map)\n        return this\n    }\n}\n\nfun Array<String>.overlaps(linesMap: MutableMap<String, Lines>): Int {\n    return this.fold(0) { acc, line ->\n        val lineOfVent = Lines(linesMap).mergeWith(Lines()).fromString(line)\n        val lineOfVentOfVent = lineOfVent.fromLineOfVent(lineOfVent)\n        val lineOfVentOfVent = lineOfVentOfVent.fromLineOfVent(lineOfVent)\n        lineOfVentOfVent.mergeWith(lineOfVent)\n        acc + lineOfVentOfVent.size\n    }\n}"}
{"kt_path": "Laomedeia__Java8InAction__0dcd843/src/main/java/leetcode/a392_isSubSequence_HARD/Solution.kt", "deepseek-coder-1.3b-instruct": "object Solution {\n    fun isSubsequence(s: String, t: String): Boolean {\n        if (s.length() == 0) return true\n        if (t.length() == 0) return false\n\n        var i = 0\n        var j = 0\n\n        while (i < s.length() && j < t.length()) {\n            if (s[i] == t[j]) {\n                i++\n            }\n            j++\n        }\n\n        return i == s.length()\n    }\n}"}
{"kt_path": "nickperov__Algorithms__6696f5d/fibonacci/src/main/kotlin/com/nickperov/stud/algorithms/fibonacci/FibonacciLargeGenerator.kt", "deepseek-coder-1.3b-instruct": "import java.math.BigInteger\n\nclass FibonacciLargeGenerator {\n    constructor() {\n        // TODO: Initialize your class here\n    }\n\n    fun calculate(n: Int): BigInteger {\n        // TODO: Implement your logic here\n        return BigInteger.ZERO\n    }\n}\n\nfun main() {\n    val generator = FibonacciLargeGenerator()\n    val result = generator.calculate(1000000)\n    println(result)\n}"}
{"kt_path": "TonnyL__Windary__39f85cd/Kotlin/src/UniqueBinarySearchTrees.kt", "deepseek-coder-1.3b-instruct": "class UniqueBinarySearchTrees {\n    fun numTrees(n: Int): Int {\n        val dp = Array(n + 1) { Array(n + 1)({ Array(n + 1)({0}) }) }\n        dp[0][0] = 1\n        for (m in 1..n) {\n            for (i in 0..m) {\n                val j = m - i\n                for (k in 0..i) {\n                    dp[m][m] += dp[k][0] * dp[i][m - k - 1]\n                }\n                for (k in 0..j) {\n                    dp[m][m] += dp[k][j] * dp[i][m - k - 1]\n                }\n            }\n        }\n        return dp[n][0]\n    }\n}"}
{"kt_path": "quincy__euler-kotlin__01d96f6/src/main/kotlin/com/quakbo/euler/Euler4.kt", "deepseek-coder-1.3b-instruct": "fun isPalindrome(n: Int): Boolean {\n    val str = n.toString()\n    return str == StringBuilder(str).reversed().toString()\n}\n\nfun main(args: Array<String>) {\n    val n = 999\n    if (isPalindrome(n)) {\n        println(n)\n    }\n}"}
{"kt_path": "getupminaaa__Algorithm__01187e2/Algorithm/src/main/kotlin/programmers/level1/personalInfoCollectionValidityPeriod.kt", "deepseek-coder-1.3b-instruct": "class Solution {\n    fun solution(a: String, b: String, c: String): Int {\n        return a.hashCode() + b.hashCode() + c.hashCode()\n    }\n}\n\nfun main() {\n    val solution = Solution()\n    val result = solution.solution(\"2021.05.02\", \"2021.07.01\", \"2022.02.19\")\n    println(result)\n}"}
{"kt_path": "iafsilva__codility-lessons__5d86aef/src/main/kotlin/lesson1/BinaryGap.kt", "deepseek-coder-1.3b-instruct": "object lesson1 {\n    class BinaryGap {\n        init {\n            println(0)\n        }\n\n        fun solution(n: Int): Int {\n            val binaryString = Integer.toBinaryString(n)\n            val firstOneIndex = binaryString.indexOf('1')\n            return if (firstOneIndex == -1) 0 else binaryString.lastIndexOf('0', firstOneIndex) - firstOneIndex\n        }\n    }\n}"}
{"kt_path": "zys0909__CodeLabs__869c7c2/src/com/leecode/array/Code1.kt", "deepseek-coder-1.3b-instruct": "fun missingNumber1(nums: IntArray): Int {\n    checkNotNull(nums)\n    var result = 0\n    for (i in nums.indices) {\n        result += nums[i]\n    }\n    return result\n}\n\nfun missingNumber2(nums: IntArray): Int {\n    checkNotNull(nums)\n    var result = 0\n    for (i in nums.indices) {\n        result += nums[i]\n    }\n    return result / nums.size\n}"}
{"kt_path": "ykrytsyn__leetcode-in-kotlin__0acf2a6/src/main/kotlin/leetcode/ArrangingCoins.kt", "deepseek-coder-1.3b-instruct": "// Compiled from \"ArrangingCoins.kt\"\n\nclass LeetcodeArrangingCoins {\n    fun bruteForce(n: Int): Int {\n        var result = 0\n        var i = 1\n        while (i <= n) {\n            result += i\n            i++\n        }\n        return result\n    }\n\n    fun binarySearch(n: Int): Int {\n        var left = 0\n        var right = n\n        while (left < right) {\n            val mid = (left + right + 1) shr 1\n            if (mid <= n - mid) {\n                left = mid\n            } else {\n                right = mid - 1\n            }\n        }\n        return left\n    }\n}"}
{"kt_path": "mayabot__mynlp__b980da3/mynlp/src/main/java/com/mayabot/nlp/module/nwd/ValueObjects.kt", "deepseek-coder-1.3b-instruct": "import java.util.HashMap\n\npublic class ValueObjects {\n    companion object {\n        fun addTo(map: HashMap<Char, IntCount>, key: Char, value: Int) {\n            val intCount = IntCount()\n            map[key] = intCount\n            intCount.value = value\n        }\n    }\n}\n\nclass IntCount {\n    var value: Int = 0\n}"}
{"kt_path": "jjrodcast__CompetitiveProblems__a91868c/leetcode/UniquePathsTwo.kt", "deepseek-coder-1.3b-instruct": "class Solution {\n    fun uniquePathsWithObstacles(obstacleGrid: Array<IntArray>): Int {\n        val dp = Array(obstacleGrid.size) { Array(obstacleGrid[0].size) { 0 } }\n        dp[0][0] = if (obstacleGrid[0][0] == 0) 1 else 0\n        for (i in 0 until obstacleGrid.size) {\n            for (j in 0 until obstacleGrid[0].size) {\n                if (obstacleGrid[i][j] == 0) {\n                    if (i > 0) dp[i][j] += dp[i - 1][j]\n                    if (j > 0) dp[i][j] += dp[i][j - 1]\n                }\n            }\n        }\n        return dp[obstacleGrid.size - 1][obstacleGrid[0].size - 1]\n    }\n}\n\nfun main() {\n    val solution = Solution()\n    val obstacleGrid = arrayOf(intArrayOf(0, 0, 0), intArrayOf(0, 1, 0), intArrayOf(0, 0, 0))\n    println(solution.uniquePathsWithObstacles(obstacleGrid))\n}"}
{"kt_path": "boris920308__HoOne__8881468/hoon/HoonAlgorithm/src/main/kotlin/programmers/lv01/Lv1_77884.kt", "deepseek-coder-1.3b-instruct": "fun main() {\n    println(solution(13, 17))\n}\n\nprivate fun solution(a: Int, b: Int): Int {\n    return a + b\n}\n\nprivate fun countDivisors(n: Int): Int {\n    var count = 0\n    for (i in 1..n) {\n        if (n % i == 0) {\n            count++\n        }\n    }\n    return count\n}\n\nfun main(args: Array<String>) {\n    main()\n}"}
{"kt_path": "Codextor__kotlin-codes__68b75a7/src/main/kotlin/PartitionArrayForMaximumSum.kt", "deepseek-coder-1.3b-instruct": "fun maxSumAfterPartitioning(arr: IntArray): Int {\n    check(arr.isNotEmpty())\n    val n = arr.size\n    val dp = IntArray(n + 1) { 0 }\n    val prefix = IntArray(n + 1) { 0 }\n    for (i in 1 until n + 1) {\n        prefix[i] = prefix[i - 1] + arr[i - 1]\n        dp[i] = maxOf(dp[i - 1], prefix[i] - (n - i + 1).takeIf { it > 0 }?.let { prefix[it] - (n - i + 1) } ?: 0)\n    }\n    return dp[n]\n}"}
{"kt_path": "scientificCommunity__blog-sample__36e291c/algorithms/src/main/kotlin/org/baichuan/sample/algorithms/leetcode/simple/interview/MajorityElement.kt", "deepseek-coder-1.3b-instruct": "class MajorityElement {\n    fun majorityElement(nums: IntArray): Int {\n        val n = nums.size\n        val map = nums.groupBy { it }.mapValues { it.value.size }\n        return map.entries.firstOrNull { (_, count) -> count > n / 2 }?.key ?: 0\n    }\n}"}
{"kt_path": "rhavran__ProjectEuler__1115674/src/Utils.kt", "deepseek-coder-1.3b-instruct": "object Utils {\n    fun dividers(n: Long): Map<Long, Long> {\n        val instance = PrimeFactorization.INSTANCE\n        return instance.primeFactors(n)\n    }\n\n    fun sequenceSumStartingFrom(n: Long, m: Long): Long {\n        return sumFromTo(n, m)\n    }\n\n    fun sumFromTo(n: Long, m: Long): Double {\n        val sum = n + (m - n + 1).toDouble() / 2.0\n        return sum\n    }\n}\n\nclass PrimeFactorization {\n    companion object {\n        val INSTANCE = PrimeFactorization()\n    }\n\n    fun primeFactors(n: Long): Map<Long, Long> {\n        val map = mutableMapOf<Long, Long>()\n        var number = n\n        var i = 2L\n        while (i * i <= number) {\n            if (number % i == 0) {\n                var count = 0\n                while (number % i == 0) {\n                    number /= i\n                    count++\n                }\n                map[i] = count\n            }\n            i++\n        }\n        if (number > 1) {\n            map[number] = 1\n        }\n        return map\n    }\n}"}
{"kt_path": "jimmymorales__project-euler__e881cad/src/main/kotlin/Problem4.kt", "deepseek-coder-1.3b-instruct": "fun main() {\n    val largestPalindrome = largestPalindrome()\n    println(largestPalindrome)\n}\n\nfun largestPalindrome(): Int {\n    var largest = 0\n    for (i in 999 downTo 100) {\n        for (j in 99 downTo 10) {\n            val num = i * j\n            if (isPalindrome(num)) {\n                largest = maxOf(largest, num)\n            }\n        }\n    }\n    return largest\n}\n\nfun isPalindrome(num: Int): Boolean {\n    val reversed = reverse(num)\n    return num == reversed\n}\n\nfun reverse(num: Int): Int {\n    var reversed = 0\n    while (num != 0) {\n        reversed = reversed * 10 + num % 10\n        num /= 10\n    }\n    return reversed\n}"}
{"kt_path": "Codextor__kotlin-codes__68b75a7/src/main/kotlin/PalindromicSubstrings.kt", "deepseek-coder-1.3b-instruct": "fun countSubstrings(s: String): Int {\n    return countSubstringsWithCenter(s, 0, s.length - 1)\n}\n\nprivate fun countSubstringsWithCenter(s: String, left: Int, right: Int): Int {\n    if (left > right) return 0\n    var count = 0\n    for (i in left..right) {\n        count += countSubstringsWithCenter(s, left + 1, right - 1)\n    }\n    return count + 1\n}"}
{"kt_path": "antop-dev__algorithm__9a3e762/src/main/kotlin/kr/co/programmers/P12952.kt", "deepseek-coder-1.3b-instruct": "class P12952 {\n    init {\n        // no-op\n    }\n\n    fun solution(input: Int): Int {\n        return dfs(inputArrayOf(input), 0)\n    }\n\n    private fun dfs(input: IntArray, index: Int): Int {\n        if (index == input.size) {\n            return 0\n        }\n        val result = input[index] + dfs(input, index + 1)\n        return result\n    }\n\n    private fun valid(input: IntArray, index: Int): Boolean {\n        if (index == input.size) {\n            return true\n        }\n        val result = input[index] - input[index + 1].abs()\n        return result != 0\n    }\n}"}
{"kt_path": "ILIYANGERMANOV__algorithms__4abe4b5/Algorithms/src/main/kotlin/MaxSubArray.kt", "deepseek-coder-1.3b-instruct": "public class MaxSubArray {\n    fun maxSubArray(nums: IntArray): Int {\n        val n = nums.size\n        if (n == 0) return 0\n        val dp = Array(n) { Array(n) { 0 } }\n        dp[0][0] = nums[0]\n        for (i in 1 until n) {\n            dp[i][0] = nums[i]\n            dp[i][i] = nums[i]\n            for (j in 1 until i) {\n                dp[i][j] = dp[i - 1][j - 1] + nums[i]\n            }\n        }\n        var max = dp[0][0]\n        for (i in 0 until n) {\n            for (j in 0 until i + 1) {\n                max = maxOf(max, dp[i][j])\n            }\n        }\n        return max\n    }\n}"}
{"kt_path": "AlBovo__Compiti__56a3131/src/main/kotlin/segtree.kt", "deepseek-coder-1.3b-instruct": "class Segtree {\n    val arr = arrayOfNulls<Int>(5)\n\n    init {\n        arr[0] = Integer.valueOf(2)\n        arr[1] = Integer.valueOf(4)\n        arr[2] = Integer.valueOf(2)\n        arr[3] = Integer.valueOf(1)\n        arr[4] = Integer.valueOf(3)\n    }\n\n    fun getSum(l: Int, r: Int): Int {\n        return getSum(0, 0, arr.size, l, r)\n    }\n\n    private fun getSum(treeIndex: Int, start: Int, end: Int, l: Int, r: Int): Int {\n        if (l <= start && end <= r) {\n            return arr[treeIndex]!!\n        }\n        val mid = (start + end) / 2\n        return getSum(2 * treeIndex + 1, start, mid, l, r) + getSum(2 * treeIndex + 2, mid + 1, end, l, r)\n    }\n}\n\nfun main() {\n    val segmentTree = Segtree()\n    println(segmentTree.getSum(0, 4))\n}"}
{"kt_path": "3mtee__exercism-kotlin__6e3eb88/complex-numbers/src/main/kotlin/ComplexNumbers.kt", "deepseek-coder-1.3b-instruct": "import kotlin.math.*\n\nclass ComplexNumbersKt {\n    fun exponential(c: ComplexNumber): ComplexNumber {\n        val real = c.getReal()\n        val imag = c.getImag()\n        return if (real == 0.0) ComplexNumber(0.0, imag * sin(imag))\n        else ComplexNumber(cos(real) * cosh(imag) - sin(real) * sinh(imag), cos(real) * sinh(imag) + sin(real) * cosh(imag))\n    }\n}"}
{"kt_path": "perihanmirkelam__ProjectEuler__a24ac44/src/main/kotlin/P014_LongestCollatzSequence.kt", "deepseek-coder-1.3b-instruct": "fun p14() {\n    val sb = StringBuilder()\n    var n = 0L\n    var a = 0\n    var b = 0\n    sb.append(\"A00: \")\n    while (n < 1000000) {\n        n = if (n % 2 == 0) {\n            n / 2\n        } else {\n            3 * n + 1\n        }\n        a += 1\n        if (n == 1) break\n    }\n    sb.append(n.toString())\n    println(sb.toString())\n}"}
{"kt_path": "iafsilva__codility-lessons__5d86aef/src/main/kotlin/lesson2/CyclicRotation.kt", "deepseek-coder-1.3b-instruct": "class CyclicRotation {\n    fun solution(arr: IntArray, shift: Int): IntArray {\n        val n = arr.size\n        val result = IntArray(n)\n        for ((i, e) in arr.withIndex()) {\n            result[(i + shift) % n] = e\n        }\n        return result\n    }\n}"}
{"kt_path": "boris920308__HoOne__8881468/hoon/HoonAlgorithm/src/main/kotlin/programmers/lv01/Lv1_12912.kt", "deepseek-coder-1.3b-instruct": "// This is a Kotlin translation of the Java bytecode.\n// Please note that this code is not a complete translation and may not work as expected.\n\nimport kotlin.ranges.LongRange\nimport kotlin.collections.CollectionsKt\n\npublic class Lv1_12912Kt {\n    public companion object {\n        @JvmStatic\n        public fun main(args: Array<String>) {\n            main()\n        }\n\n        private fun solution(a: Int, b: Int): Long {\n            return a + b\n        }\n\n        private fun secondSolution(a: Int, b: Int): Long {\n            return a.toLong() + b.toLong()\n        }\n    }\n}"}
{"kt_path": "darian-catalin-cucer__divide-and-conquer-algorithms__1cea70d/kt.kt", "deepseek-coder-1.3b-instruct": "fun quickSort(arr: IntArray, low: Int, high: Int) {\n    if (low < high) {\n        val pi = partition(arr, low, high)\n        quickSort(arr, low, pi - 1)\n        quickSort(arr, pi + 1, high)\n    }\n}\n\nfun partition(arr: IntArray, low: Int, high: Int): Int {\n    val pivot = arr[high]\n    var i = (low - 1)\n    for (j in low until high) {\n        if (arr[j] <= pivot) {\n            i++\n            arr.swap(i, j)\n        }\n    }\n    arr.swap(i + 1, high)\n    return (i + 1)\n}"}
{"kt_path": "TonnyL__Windary__39f85cd/Kotlin/src/ThreeSumClosest.kt", "deepseek-coder-1.3b-instruct": "class ThreeSumClosest {\n    fun threeSumClosest(nums: IntArray, target: Int): Int {\n        nums.sort()\n        var result = Int.MAX_VALUE\n        for (i in 0 until nums.size - 2) {\n            val left = i + 1\n            val right = nums.size - 1\n            while (left < right) {\n                val sum = nums[i] + nums[left] + nums[right]\n                if (sum.abs() < result.abs()) {\n                    result = sum\n                }\n                if (sum < target) {\n                    left++\n                } else if (sum > target) {\n                    right--\n                } else {\n                    return sum\n                }\n            }\n        }\n        return result\n    }\n}"}
{"kt_path": "Javran__leetcode__f3899fe/bulb-switcher/Solution.kt", "deepseek-coder-1.3b-instruct": "class Solution {\n    companion object {\n        fun bulbSwitch(n: Int): Int {\n            return (Math.sqrt(n.toDouble())).floor()\n        }\n\n        fun main(args: Array<String>) {\n            val n = 10\n            val result = bulbSwitch(n)\n            println(result)\n        }\n    }\n}"}
{"kt_path": "TonnyL__Windary__39f85cd/Kotlin/src/NextPermutation.kt", "deepseek-coder-1.3b-instruct": "class NextPermutation {\n    fun nextPermutation(nums: IntArray) {\n        if (nums.size < 2) return\n\n        var i = nums.size - 2\n        while (i >= 0 && nums[i] >= nums[i + 1]) {\n            i--\n        }\n\n        if (i >= 0) {\n            var j = nums.size - 1\n            while (j > i && nums[j] <= nums[i]) {\n                j--\n            }\n            nums[i]?.let { nums[j] = nums[i]?.plus(nums[j]?.minus(nums[i]!!)!!) }\n            nums.sortArray()\n        }\n        nums.reverse()\n    }\n}"}
{"kt_path": "boris920308__HoOne__8881468/hoon/HoonAlgorithm/src/main/kotlin/programmers/lv01/Lv1_12940.kt", "deepseek-coder-1.3b-instruct": "fun main() {\n    val result = solution(2, 3)\n    println(result)\n}\n\nprivate fun solution(a: Int, b: Int): Int {\n    return a * b\n}\n\nprivate fun findGCD(a: Int, b: Int): Int {\n    return if (b == 0) a else findGCD(b, a % b)\n}\n\nprivate fun findLCM(a: Int, b: Int): Int {\n    return a * (b / findGCD(a, b))\n}"}
{"kt_path": "JiangKlijna__leetcode-learning__65a1348/kt/001 Two Sum/TwoSum.kt", "deepseek-coder-1.3b-instruct": "class TwoSum {\n    fun twoSum(nums: IntArray, target: Int): IntArray {\n        val map = mutableMapOf<Int, Int>()\n        for ((index, num) in nums.withIndex()) {\n            val complement = target - num\n            if (map.containsKey(complement)) {\n                return intArrayOf(map[complement]!!, index)\n            }\n            map[num] = index\n        }\n        return intArrayOf()\n    }\n}"}
{"kt_path": "rupeshsasne__coursera-algorithms-part1__341634c/classroom/src/main/kotlin/com/radix2/algorithms/week1/UnionFind.kt", "deepseek-coder-1.3b-instruct": "class WeightedQuickUnionWithPathCompressionUF(private val count: Int) {\n    private val id: IntArray = IntArray(count) { it }\n    private val sz: IntArray = IntArray(count) { 1 }\n\n    init {\n        for (i in id.indices) {\n            sz[i] = count\n        }\n    }\n\n    fun union(p: Int, q: Int): Boolean {\n        val pID = find(p)\n        val qID = find(q)\n        if (pID == qID) return false\n        if (sz[pID] < sz[qID]) {\n            id[pID] = qID\n            sz[qID] += sz[pID]\n        } else {\n            id[qID] = pID\n            sz[pID] += sz[qID]\n        }\n        return true\n    }\n\n    fun find(p: Int): Int {\n        var i = p\n        while (i != id[i]) {\n            i = id[i]\n        }\n        return i\n    }\n}"}
{"kt_path": "boris920308__HoOne__8881468/hoon/HoonAlgorithm/src/main/kotlin/programmers/lv01/Lv1_68935.kt", "deepseek-coder-1.3b-instruct": "fun main() {\n    val result = solution(3)\n    println(result)\n}\n\nprivate fun solution(n: Int): Int {\n    return n + 3\n}\n\nprivate fun solution_1(n: Int): Int {\n    return n + 10\n}"}
{"kt_path": "korilin__DSA-kt__b96ba1b/src/main/kotlin/sort_algorithm/quickSort.kt", "deepseek-coder-1.3b-instruct": "import kotlin.random.Random\n\nfun quickSort(arr: IntArray) {\n    quickSort(arr, 0, arr.lastIndex)\n}\n\nprivate fun quickSort(arr: IntArray, low: Int, high: Int) {\n    if (low < high) {\n        val pi = partition(arr, low, high)\n        quickSort(arr, low, pi - 1)\n        quickSort(arr, pi + 1, high)\n    }\n}\n\nprivate fun partition(arr: IntArray, low: Int, high: Int): Int {\n    val pivot = arr[high]\n    var i = (low - 1)\n    for (j in low until high) {\n        if (arr[j] <= pivot) {\n            i++\n            arr.swap(i, j)\n        }\n    }\n    arr.swap(i + 1, high)\n    return (i + 1)\n}"}
{"kt_path": "gardnerdickson__advent-of-code-2015__4a23ab3/src/day_10.kt", "deepseek-coder-1.3b-instruct": "object Day10 {\n    val INSTANCE: Day10 = Day10()\n\n    fun part1(input: String): Int {\n        return input.length\n    }\n\n    fun part2(input: String): Int {\n        return input.reversed().length\n    }\n}\n\nfun main() {\n    val input = \"1113222113\"\n    val part1Result = Day10.part1(input)\n    val part2Result = Day10.part2(input)\n\n    println(\"Part 1: $part1Result\")\n    println(\"Part 2: $part2Result\")\n}"}
{"kt_path": "gardnerdickson__advent-of-code-2015__4a23ab3/src/day_2.kt", "deepseek-coder-1.3b-instruct": "object Day2 {\n    fun part1(input: String): Int {\n        return input.length\n    }\n\n    fun part2(input: String): Int {\n        return input.length\n    }\n\n    fun main() {\n        val input = \"res/day_2_input.txt\"\n        val part1Result = part1(input)\n        val part2Result = part2(input)\n        println(\"Part 1: $part1Result\")\n        println(\"Part 2: $part2Result\")\n    }\n}"}
{"kt_path": "gardnerdickson__advent-of-code-2015__4a23ab3/src/day_3.kt", "deepseek-coder-1.3b-instruct": "object Day3 {\n    val INSTANCE: Day3 = Day3()\n\n    fun part1(input: String): Int {\n        return input.length\n    }\n\n    fun part2(input: String): Int {\n        return input.length\n    }\n}\n\nfun main() {\n    val input = \"res/day_3_input.txt\"\n    val part1Result = Day3.part1(input)\n    val part2Result = Day3.part2(input)\n\n    println(\"Part 1: $part1Result\")\n    println(\"Part 2: $part2Result\")\n}"}
{"kt_path": "antop-dev__algorithm__9a3e762/src/main/kotlin/kr/co/programmers/P161988.kt", "deepseek-coder-1.3b-instruct": "class P161988 {\n    init {\n        // No initializer\n    }\n\n    fun solution(arr: IntArray): Long {\n        val sequence = \"sequence\"\n        val max = checkNotNull(sequence).max()\n        return max\n    }\n\n    private fun IntArray.max(): Long {\n        val arr = Array(this.size) { 0L }\n        arr.contentEquals(this)\n        return arr.max()\n    }\n}"}
{"kt_path": "alexjlockwood__bees-and-bombs-compose__0d7a86b/app/src/main/java/com/alexjlockwood/beesandbombs/demos/utils/MathUtils.kt", "deepseek-coder-1.3b-instruct": "import kotlin.math.PI\nimport kotlin.math.sqrt\nimport kotlin.math.pow\nimport kotlin.math.toDegrees\n\nobject MathUtils {\n    fun dist(x1: Float, y1: Float, x2: Float, y2: Float) = sqrt(((x2 - x1) * (x2 - x1) + (y2 - y1) * (y2 - y1)).toDouble().sqrt())\n\n    fun lerp(x: Float, y: Float, a: Float) = x * (1 - a) + y * a\n\n    fun map(value: Float, inMin: Float, inMax: Float, outMin: Float, outMax: Float) = outMin + (value - inMin) * (outMax - outMin)\n\n    fun toDegrees(radians: Float) = radians * (180 / PI.toDouble()).toFloat()\n\n    fun ease(x: Float) = 3f * (1 - x) * (1 - x) * x\n\n    fun ease(x: Float, a: Float) = 3f * (1 - x) * (1 - x) * x * a\n}"}
{"kt_path": "chengw315__daily-study__501b881/letcode/src/main/java/daily/LeetCodeLCP13.kt", "deepseek-coder-1.3b-instruct": "object SolutionLCP13 {\n    fun minimalSteps(arr: Array<String>): Int {\n        return arr.size\n    }\n}\n\nfun main() {\n    val solution = SolutionLCP13()\n    val arr = arrayOf(\"S\", \"M\", \"M..\")\n    val steps = solution.minimalSteps(arr)\n    println(steps)\n}"}
{"kt_path": "rajatenzyme__Coding-Journey__65a0570/Algo_Ds_Notes-master/Algo_Ds_Notes-master/Floyd_Warshall_Algorithm/Floyd_Warshall_Algorithm.kt", "deepseek-coder-1.3b-instruct": "class FloydWarshallKt {\n    companion object {\n        fun main(args: Array<String>) {\n            checkNotNull(args)\n            val instance = FloydWarshall()\n            instance.doCalcs(args)\n        }\n    }\n}"}
{"kt_path": "brunorene__advent_of_code_2018__0cb6814/src/main/kotlin/advent/of/code/day17/Solution.kt", "deepseek-coder-1.3b-instruct": "import java.io.File\nimport kotlin.text.Regex\n\nval input: File by lazy { File(\"day17.txt\") }\n\nval multipleCoord: Regex by lazy { Regex(\"x=([.0-9]+)\\\\.\\\\.([.0-9]+)\") }\n\nval oneCoord: Regex by lazy { Regex(\"y=([.0-9]+)\") }\n\nfun part1(): Int {\n    val underground = Underground(input)\n    val clay = underground.getClay()\n    println(clay.size)\n    return 1\n}\n\nfun part2(): Int {\n    return 2\n}\n\nclass Underground(val input: File) {\n    fun getClay(): Set<String> {\n        TODO()\n    }\n}"}
{"kt_path": "Simplation__OpenSourceRepository__d45feaa/算法/一维数组的动态和1480.kt", "deepseek-coder-1.3b-instruct": "fun main() {\n    val arr1 = intArrayOf(5, 1480)\n    val arr2 = intArrayOf(0, 1)\n    val arr3 = intArrayOf(0, 1, 1)\n    val arr4 = intArrayOf(0, 1, 1, 1)\n    val arr5 = intArrayOf(0, 4)\n    val arr6 = intArrayOf(0, 3, 1)\n    val arr7 = intArrayOf(0, 2, 2, 1)\n    val arr8 = intArrayOf(0, 1, 2, 3, 1)\n    val arr9 = intArrayOf(0, 0, 0, 0, 0)\n    val arr10 = intArrayOf(0, 1, 2, 3)\n    val arr11 = intArrayOf(0, 4, 5)\n    val arr12 = intArrayOf(0, 5, 6, 5)\n    val arr13 = intArrayOf(0, 6, 7, 6, 5)\n    val arr14 = intArrayOf(0, 7, 8, 7, 6, 5)\n    val arr15 = intArrayOf(0, 8, 9, 8, 7, 6, 5)\n    val arr16 = intArrayOf(0, 9, 10, 9, 8, 7, 6, 5)\n    val arr17 = intArrayOf(0, 10, 11, 10, 9, 8, 7, 6, 5)\n    val arr18 = intArrayOf(0, 11, 12, 11, 10, 9, 8, 7, 6, 5)\n    val arr19 = intArrayOf(0, 12, 13, 12, 11, 10, 9, 8, 7, 6, 5)\n    val arr20 = intArrayOf(0, 13, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5)\n    val arr21 = intArrayOf(0, 14, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5)\n    val arr22 = intArrayOf(0, 15, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5)\n    val arr23 = intArrayOf(0, 16, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5)\n    val arr24 = intArrayOf(0, 17, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5)\n    val arr25 = intArrayOf(0, 18, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5)\n    val arr26 = intArrayOf(0, 19, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5)\n    val arr27 = intArrayOf(0, 20, 21, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5)\n    val arr28 = intArrayOf(0, 21, 22, 21, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5)\n    val arr29 = intArrayOf(0, 22, 23, 22, 21, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5)\n    val arr30 = intArrayOf(0, 23, 24, 23, 22, 21, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5)\n    val arr31 = intArrayOf(0, 24, 25, 24, 23, 22, 21, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5)\n    val arr32 = intArrayOf(0, 25, 26, 25, 24, 23, 22, 21, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5)\n    val arr33 = intArrayOf(0, 26, 27, 26, 25, 24, 23, 22, 21, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5)\n    val arr34 = intArrayOf(0, 27, 28, 27, 26, 25, 24, 23, 22, 21, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5)\n    val arr35 = intArrayOf(0, 28, 29, 28, 27, 26, 25, 24, 23, 22, 21, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6,"}
{"kt_path": "jimmymorales__project-euler__e881cad/src/main/kotlin/Problem3.kt", "deepseek-coder-1.3b-instruct": "fun main() {\n    val result = solution3(600851475143L)\n    println(result)\n}\n\nprivate fun solution3(n: Long): Long {\n    var i = 2L\n    while (i * i <= n) {\n        if (n % i == 0L) {\n            n /= i\n        } else {\n            i += 1\n        }\n    }\n    return if (n > 1) n else i\n}"}
{"kt_path": "age-series__ElectricalAge2__86d843f/src/main/kotlin/org/eln2/mc/data/SegmentTree.kt", "deepseek-coder-1.3b-instruct": "class SegmentTree<T>(root: SegmentTreeNode<T>) {\n    private val root: SegmentTreeNode<T> = root\n\n    fun queryOrNull(key: Double): T? {\n        val node = root.queryOrNull(key)\n        return node\n    }\n\n    fun query(key: Double): T {\n        val node = root.query(key)\n        return node\n    }\n}\n\nopen class SegmentTreeNode<T>(val key: Double, var value: T) {\n    open fun queryOrNull(key: Double): T? {\n        if (this.key == key) return value\n        return null\n    }\n\n    open fun query(key: Double): T {\n        if (this.key == key) return value\n        throw IllegalStateException(\"Key not found\")\n    }\n}"}
{"kt_path": "ykrytsyn__leetcode-in-kotlin__0acf2a6/src/main/kotlin/leetcode/UniquePaths.kt", "deepseek-coder-1.3b-instruct": "class UniquePaths {\n}\n\nfun dynamicProgramming(m: Int, n: Int): Int {\n    val dp = Array(m + 1) { Array(n + 1) { 0 } }\n    dp[0][0] = 1\n    for (i in 0 until m) {\n        for (j in 0 until n) {\n            if (i > 0) {\n                dp[i][j] += dp[i - 1][j]\n            }\n            if (j > 0) {\n                dp[i][j] += dp[i][j - 1]\n            }\n        }\n    }\n    return dp[m - 1][n - 1]\n}\n\nfun recursive(m: Int, n: Int): Int {\n    if (m == 1 && n == 1) return 1\n    if (m == 0 || n == 0) return 0\n    return recursive(m - 1, n) + recursive(m, n - 1)\n}"}
{"kt_path": "quincy__euler-kotlin__01d96f6/src/main/kotlin/com/quakbo/euler/Euler6.kt", "deepseek-coder-1.3b-instruct": "fun main() {\n    val sumOfSquares = sumOfSquares(1..100)\n    val squareOfSums = squareOfSums(1..100)\n    val result = squareOfSums - sumOfSquares\n    println(result)\n}\n\nprivate fun sumOfSquares(sequence: IntRange): Int {\n    return sequence.sum()\n}\n\nprivate fun squareOfSums(sequence: IntRange): Int {\n    return sequence.sum() * sequence.sum()\n}"}
{"kt_path": "Kirchberg__BigDataPL__b6a459a/LR7/src/main/kotlin/Task1V3.kt", "deepseek-coder-1.3b-instruct": "import java.util.*\n\nclass WordChainFinder {\n    fun findLongestWordChain(list: List<String>): List<String> {\n        // Implementation here\n    }\n}\n\nfun main() {\n    val list = listOf(\"java\", \"android\", \"kotlin\", \"rust\")\n    val wordChainFinder = WordChainFinder()\n    val result = wordChainFinder.findLongestWordChain(list)\n    val sb = StringBuilder()\n    for (word in result) {\n        sb.append(word)\n        sb.append(\", \")\n    }\n    sb.delete(sb.length - 2, sb.length)\n    println(\"Longest word chain: $sb\")\n}"}
{"kt_path": "fredyw__leetcode__a59d77c/src/main/kotlin/leetcode/Problem2064.kt", "deepseek-coder-1.3b-instruct": "import kotlin.math.max\nimport kotlin.math.min\n\nclass Problem2064 {\n    constructor() {}\n\n    fun minimizedMaximum(n: Int, quantities: IntArray): Int {\n        return min(n, quantities.maxOrNull() ?: 0)\n    }\n\n    private fun canDistribute(n: Int, quantities: IntArray, k: Int): Boolean {\n        val gcd = quantities.gcd()\n        return gcd != 1 && n % gcd == 0\n    }\n}"}
