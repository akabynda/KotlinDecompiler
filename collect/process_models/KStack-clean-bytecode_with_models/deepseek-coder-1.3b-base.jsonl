{"kt_path": "remisultan__multiarm-bandit-algorithm-kotlin__ead934d/core-bandit/src/main/kotlin/org/rsultan/bandit/algorithms/BanditAlgorithm.kt", "deepseek-coder-1.3b-base": "interface BanditAlgorithm {\n    fun selectArm(): Int\n    fun update(arm: Int, reward: Float)\n}"}
{"kt_path": "n81ur3__kotlin-coding-challenges__fdc5941/src/main/kotlin/adventofcode2018/Day22ModeMaze.kt", "deepseek-coder-1.3b-base": "class Day22ModeMaze"}
{"kt_path": "n81ur3__kotlin-coding-challenges__fdc5941/src/main/kotlin/adventofcode2017/Day21FractalArt.kt", "deepseek-coder-1.3b-base": "class Day21FractalArt"}
{"kt_path": "n81ur3__kotlin-coding-challenges__fdc5941/src/main/kotlin/adventofcode2017/Day03SpiralMemory.kt", "deepseek-coder-1.3b-base": "class Day03SpiralMemory {\n}"}
{"kt_path": "n81ur3__kotlin-coding-challenges__fdc5941/src/main/kotlin/adventofcode2019/Day03CrossedWires.kt", "deepseek-coder-1.3b-base": "fun main() {\n    val input = readInput(\"Day03CrossedWires.kt\")\n    val wire1 = input.first.split(\",\").map { it.toInt() }\n    val wire2 = input.last.split(\",\").map { it.toInt() }\n\n    val wire1Instructions = wire1.map { it.toInstruction() }\n    val wire2Instructions = wire2.map { it.toInstruction() }\n\n    val intersections = wire1Instructions.intersect(wire2Instructions)\n\n    println(intersections.map { it.distance() }.minOrNull()!!)\n}\n\nfun Int.toInstruction() = when (this) {\n    in 0..9 -> Instruction.Move(this)\n    in 10..19 -> Instruction.Turn(this - 10)\n    in 20..29 -> Instruction.Turn(this - 20)\n    in 30..39 -> Instruction.Turn(this - 30)\n    in 40..49 -> Instruction.Turn(this - 40)\n    in 50..59 -> Instruction.Turn(this - 50)\n    in 60..69 -> Instruction.Turn(this - 60)\n    in 70..79 -> Instruction.Turn(this - 70)\n    in 80..89 -> Instruction.Turn(this - 80)\n    in 90..99 -> Instruction.Turn(this - 90)\n    else -> throw IllegalArgumentException(\"Invalid instruction: $this\")\n}\n\nfun List<Instruction>.intersect(other: List<Instruction>) =\n    this.intersect(other) { it1, it2 -> it1.distance() == it2.distance() }\n\nenum class Instruction(val value: Int) {\n    Move(0),\n    Turn(1),\n}\n\nfun Instruction.distance() = when (this) {\n    Instruction.Move -> value\n    Instruction.Turn -> value\n}\n\nfun readInput(fileName: String) = readInput(fileName, ::Instruction)\n\nfun readInput(fileName: String, instructionParser: (String) -> Instruction) =\n    readInput(fileName, instructionParser, ::List)\n\nfun <T> readInput(fileName: String, instructionParser: (String) -> T, listParser: (List<T>) -> List<T>) =\n    readInput(fileName, instructionParser, listParser) { it.map { instructionParser(it) } }\n\nfun <T> readInput(fileName: String, instructionParser: (String) -> T, listParser: (List<T>) -> List<T>, parser: (String) -> List<T>) =\n    readInput(fileName, instructionParser, listParser, parser) { it.map { instructionParser(it) } }\n\nfun <T> readInput(fileName: String, instructionParser: (String) -> T, listParser: (List<T>) -> List<T>, parser: (String) -> List<T>, listParser2: (List<T>) -> List<T>) =\n    readInput(fileName, instructionParser, listParser, parser, listParser2) { it.map { instructionParser(it) } }\n\nfun <T> readInput(fileName: String, instructionParser: (String) -> T, listParser: (List<T>) -> List<T>, parser: (String) -> List<T>, listParser2: (List<T>) -> List<T>, parser2: (String) -> List<T>) =\n    readInput(fileName, instructionParser, listParser, parser, listParser2) { it.map { instructionParser(it) } }\n\nfun <T> readInput(fileName: String, instructionParser: (String) -> T, listParser: (List<T>) -> List<T>, parser: (String) -> List<T>, listParser2: (List<T>) -> List<T>, parser2: (String) -> List<T>, parser3: (String) -> List<T>) =\n    readInput(fileName, instructionParser, listParser, parser, listParser2, parser3) { it.map { instructionParser(it) } }\n\nfun <T> readInput(fileName: String, instructionParser: (String) -> T, listParser: (List<T>) -> List<T>, parser: (String) -> List<T>, listParser2: (List<T>) -> List<T>, parser2: (String) -> List<T>, parser3: (String) -> List<T>, parser4: (String) -> List<T>) =\n    readInput(fileName, instructionParser, listParser, parser, listParser2, parser3) { it.map { instructionParser(it) } }\n\nfun <T> readInput(fileName: String, instructionParser: (String) -> T, listParser: (List<T>) -> List<T>, parser: (String) -> List<T>, listParser2: (List<T>) -> List<T>, parser2: (String) -> List<T>, parser3: (String) -> List<T>, parser4: (String) -> List<T>, parser5: (String) -> List<T>) =\n    readInput(fileName, instructionParser, listParser, parser, listParser2, parser3, parser4) { it.map { instructionParser(it) } }\n\nfun <T> readInput(fileName: String, instructionParser: (String) -> T, listParser: (List<T>) -> List<T>, parser: (String) -> List<T>, listParser2: (List<T>) -> List<T>, parser2: (String) -> List<T>, parser3: (String) -> List<T>, parser4: (String) -> List<T>, parser5: (String) -> List<T>, parser6: (String) -> List<T>) =\n    readInput(fileName, instructionParser, listParser, parser, listParser2, parser3, parser4, parser5) { it.map { instructionParser(it) } }\n\nfun <T> readInput(fileName: String, instructionParser: (String) -> T, listParser: (List<T>) -> List<T>, parser: (String) -> List<T>, listParser2: (List<T>) -> List<T>, parser2: (String) -> List<T>, parser3: (String) -> List<T>, parser4: (String) -> List<T>, parser5: (String) -> List<T>, parser6: (String) -> List<T>, parser7: (String) -> List<T>) =\n    readInput(fileName, instructionParser, listParser, parser, listParser2, parser3, parser4, parser5, parser6) { it.map { instructionParser(it) } }\n\nfun <T> readInput(fileName: String, instructionParser: (String) -> T, listParser: (List<T>) -> List<T>, parser: (String) -> List<T>, listParser2: (List<T>) ->"}
{"kt_path": "n81ur3__kotlin-coding-challenges__fdc5941/src/main/kotlin/adventofcode2018/Day04ReposeRecord.kt", "deepseek-coder-1.3b-base": "public final class Day04ReposeRecord {\n    constructor()\n}"}
{"kt_path": "n81ur3__kotlin-coding-challenges__fdc5941/src/main/kotlin/adventofcode2017/Day08LikeRegisters.kt", "deepseek-coder-1.3b-base": "public final class Day08LikeRegisters {\n    public Day08LikeRegisters() {\n    }\n}"}
{"kt_path": "n81ur3__kotlin-coding-challenges__fdc5941/src/main/kotlin/adventofcode2018/Day11ChronalCharge.kt", "deepseek-coder-1.3b-base": "class Day11ChronalCharge {\n}"}
{"kt_path": "n81ur3__kotlin-coding-challenges__fdc5941/src/main/kotlin/adventofcode2020/Day19MonsterMessage.kt", "deepseek-coder-1.3b-base": "class Day19MonsterMessage {\n}"}
{"kt_path": "n81ur3__kotlin-coding-challenges__fdc5941/src/main/kotlin/adventofcode2017/Day07RecursiveCircus.kt", "deepseek-coder-1.3b-base": "class Day07RecursiveCircus {\n}"}
{"kt_path": "n81ur3__kotlin-coding-challenges__fdc5941/src/main/kotlin/adventofcode2019/Day12TheNbodyProblem.kt", "deepseek-coder-1.3b-base": "package adventofcode2019\n\nclass Day12TheNbodyProblem {\n    constructor() {\n        println(\"Hello, world\")\n    }\n}"}
{"kt_path": "n81ur3__kotlin-coding-challenges__fdc5941/src/main/kotlin/adventofcode2018/Day15BeverageBandits.kt", "deepseek-coder-1.3b-base": "public final class adventofcode2018.Day15BeverageBandits {\n  public adventofcode2018.Day15BeverageBandits() {\n  }\n}"}
{"kt_path": "n81ur3__kotlin-coding-challenges__fdc5941/src/main/kotlin/adventofcode2020/Day07HandyHaversacks.kt", "deepseek-coder-1.3b-base": "public final class Day07HandyHaversacks {\n    public Day07HandyHaversacks() {\n    }\n}"}
{"kt_path": "n81ur3__kotlin-coding-challenges__fdc5941/src/main/kotlin/adventofcode2018/Day07TheSumOfItsParts.kt", "deepseek-coder-1.3b-base": "class Day07TheSumOfItsParts {\n}"}
{"kt_path": "n81ur3__kotlin-coding-challenges__fdc5941/src/main/kotlin/adventofcode2017/Day25TheHaltingProblem.kt", "deepseek-coder-1.3b-base": "class Day25TheHaltingProblem {\n}"}
{"kt_path": "n81ur3__kotlin-coding-challenges__fdc5941/src/main/kotlin/adventofcode2019/Day06UniversalOrbitMap.kt", "deepseek-coder-1.3b-base": "package adventofcode2019\n\nclass Day06UniversalOrbitMap {\n}"}
{"kt_path": "n81ur3__kotlin-coding-challenges__fdc5941/src/main/kotlin/adventofcode2019/Day10MonitoringStation.kt", "deepseek-coder-1.3b-base": "class Day10MonitoringStation"}
{"kt_path": "n81ur3__kotlin-coding-challenges__fdc5941/src/main/kotlin/adventofcode2018/Day06ChronalCoordinates.kt", "deepseek-coder-1.3b-base": "import adventofcode2018.Day06ChronalCoordinates\n\nfun main(args: Array<String>) {\n    val input = Day06ChronalCoordinates()\n}"}
{"kt_path": "n81ur3__kotlin-coding-challenges__fdc5941/src/main/kotlin/adventofcode2020/Day21AllergenAssessment.kt", "deepseek-coder-1.3b-base": "class Day21AllergenAssessment {\n}"}
{"kt_path": "n81ur3__kotlin-coding-challenges__fdc5941/src/main/kotlin/adventofcode2017/Day24ElectromagneticMoat.kt", "deepseek-coder-1.3b-base": "class Day24ElectromagneticMoat {\n}"}
{"kt_path": "n81ur3__kotlin-coding-challenges__fdc5941/src/main/kotlin/adventofcode2018/Day12SubterraneanSustainability.kt", "deepseek-coder-1.3b-base": "class Day12SubterraneanSustainability {\n}"}
{"kt_path": "n81ur3__kotlin-coding-challenges__fdc5941/src/main/kotlin/adventofcode2018/Day23ExperimentalEmergencyTeleportation.kt", "deepseek-coder-1.3b-base": "class Day23ExperimentalEmergencyTeleportation {\n}"}
{"kt_path": "alebedev__aoc2022__d6ba46b/src/main/kotlin/Map.kt", "deepseek-coder-1.3b-base": "import kotlin.reflect.KClass\nimport kotlin.reflect.full.companionObjectInstance\nimport kotlin.reflect.full.findAnnotation\nimport kotlin.reflect.jvm.jvmErasure\nimport kotlin.reflect.jvm.runtime.Callable\nimport kotlin.reflect.jvm.runtime.toCallable\nimport kotlin.reflect.jvm.runtime.toType\n\nfun main() {\n    val map = MapKt::class.companionObjectInstance\n    map.solve()\n}\n\nfun solve() {\n    println(\"Hello, world\")\n}"}
{"kt_path": "andrewrlee__adventOfCode2020__a9c21a6/src/main/kotlin/File09.kt", "deepseek-coder-1.3b-base": "class Challenge09 {\n    fun solve() {\n        println(\"Hello, world\")\n    }\n}\n\nfun main() {\n    Challenge09().solve()\n}"}
{"kt_path": "andrewrlee__adventOfCode2020__a9c21a6/src/main/kotlin/File08.kt", "deepseek-coder-1.3b-base": "class Challenge08 {\n    fun solve() {\n        println(\"Hello World\")\n    }\n}\n\nfun main() {\n    Challenge08().solve()\n}"}
{"kt_path": "andrewrlee__adventOfCode2020__a9c21a6/src/main/kotlin/File02.kt", "deepseek-coder-1.3b-base": "class Challenge02 {\n    fun solve() {\n        println(\"Hello World\")\n    }\n}\n\nfun main() {\n    Challenge02().solve()\n}"}
{"kt_path": "andrewrlee__adventOfCode2020__a9c21a6/src/main/kotlin/File07.kt", "deepseek-coder-1.3b-base": "class Challenge07 {\n    fun solve() {\n        println(\"Hello, world\")\n    }\n}\n\nfun main() {\n    Challenge07().solve()\n}"}
{"kt_path": "charlesfranciscodev__codingame__3ec8060/puzzles/kotlin/src/war/war.kt", "deepseek-coder-1.3b-base": "import kotlin.jvm.internal.Intrinsics\n\npublic final class WarKt {\n    public static final void main(String[] args) {\n        Intrinsics.checkNotNullParameter(args, \"args\")\n        Game().play()\n    }\n}\n\npublic final class Game {\n    public Game() {\n    }\n\n    public final void play() {\n    }\n}"}
{"kt_path": "al-volkov__spbu_2020_kotlin_homeworks__5049681/src/main/kotlin/homework_5/Task1.kt", "deepseek-coder-1.3b-base": "fun isNumber(str: String): Boolean {\n    return str.toIntOrNull() != null\n}"}
{"kt_path": "iafsilva__codility-lessons__5d86aef/src/main/kotlin/lesson3/FrogJmp.kt", "deepseek-coder-1.3b-base": "fun main() {\n    val frogJmp = FrogJmp()\n    println(frogJmp.solution(10, 85, 30))\n}\n\nclass FrogJmp {\n    fun solution(X: Int, Y: Int, D: Int): Int {\n        return (Y - X) / D + if (Y - X % D > 0) 1 else 0\n    }\n}"}
{"kt_path": "mikhalchenko-alexander__advent-of-kotlin-2018-week1__c483ade/src/main/kotlin/com/anahoret/pathfinding/MarkingWayOnMap.kt", "deepseek-coder-1.3b-base": "fun main(args: Array<String>) {\n    val map = \"map\"\n    val path = \"path\"\n    val graph = Graph.INSTANCE\n    val mapWithPath = graph.getMapWithPath(path)\n    val pathWithMap = graph.addPath(mapWithPath)\n    println(pathWithMap)\n}"}
{"kt_path": "charlesfranciscodev__codingame__3ec8060/puzzles/kotlin/src/surface/surface.kt", "deepseek-coder-1.3b-base": "import kotlin.jvm.internal.Intrinsics\n\npublic final class SurfaceKt {\n    public static final char LAND = 'L';\n\n    public static final char WATER = 'W';\n\n    public static final int DEFAULT_INDEX = 0;\n\n    public static final void main(String[] args) {\n        Intrinsics.checkNotNullParameter(args, \"args\");\n        Grid grid = Grid()\n        grid.readGameInput()\n        grid.test()\n    }\n}\n\npublic final class Grid {\n    public Grid() {\n    }\n\n    public void readGameInput() {\n    }\n\n    public void test() {\n    }\n}"}
{"kt_path": "andrew-suprun__AoC-2023__dd5f53e/src/main/kotlin/day03_oop/day03_oop.kt", "deepseek-coder-1.3b-base": "package day03_oop\n\nclass Part1(val input: String) {\n    fun run() {\n        println(\"Hello, $input\")\n    }\n}\n\nfun main() {\n    Part1(\"world\").run()\n}"}
{"kt_path": "getnahid__programing-problem-solves-kotlin__589c392/CyclicRotation.kt", "deepseek-coder-1.3b-base": "fun solution(A: IntArray, K: Int): IntArray {\n    val N = A.size\n    val B = IntArray(N)\n    for (i in 0 until N) {\n        B[(i + K) % N] = A[i]\n    }\n    return B\n}"}
{"kt_path": "linisme__LeetCodeInKotlin__4382afc/LongestPalindrome.kt", "deepseek-coder-1.3b-base": "fun main(args: Array<String>) {\n    val solution = LongestPalindromeSolution()\n    println(solution.longestPalindrome(args[0]))\n}\n\nclass LongestPalindromeSolution {\n    fun longestPalindrome(s: String): String {\n        TODO(\"not implemented\")\n    }\n}"}
{"kt_path": "iafsilva__codility-lessons__5d86aef/src/main/kotlin/lesson2/OddOccurrencesInArray.kt", "deepseek-coder-1.3b-base": "fun main(args: Array<String>) {\n    val array = intArrayOf(1, 2, 3, 4, 5, 6, 7, 8, 9, 10)\n    val odd = array.solution(array)\n    println(odd)\n}\n\nfun IntArray.solution(array: IntArray): Int {\n    var odd = 0\n    for (i in 0 until array.size) {\n        if (array[i] % 2 == 1) {\n            odd = array[i]\n        }\n    }\n    return odd\n}"}
{"kt_path": "jjeda__playground__5d1ee6c/src/oop/algorithm/ProgressionNextNumber.kt", "deepseek-coder-1.3b-base": "import kotlin.collections.ArraysKt\n\nfun main(args: Array<String>) {\n    val input = intArrayOf(1, 2, 3, 4, 5)\n    val result = ArraysKt.toList(input).progressionNextNumber()\n    println(result)\n}\n\nfun IntArray.progressionNextNumber(): Int {\n    val helper = ProgressionHelper(this)\n    return helper.nextInt()\n}\n\nclass ProgressionHelper(private val input: IntArray) {\n    fun nextInt(): Int {\n        return input[0]\n    }\n}"}
{"kt_path": "linisme__LeetCodeInKotlin__4382afc/LengthOfLongestSubstring.kt", "deepseek-coder-1.3b-base": "class LengthOfLongestSubstringSolution2 {\n    fun lengthOfLongestSubstring(s: String): Int {\n        return s.length\n    }\n}\n\nfun main(args: Array<String>) {\n    val solution = LengthOfLongestSubstringSolution2()\n    println(solution.lengthOfLongestSubstring(\"abba\"))\n}"}
{"kt_path": "nschulzke__mancala-puzzle-solver__b130d3b/src/main/kotlin/Main.kt", "deepseek-coder-1.3b-base": "val mancalaIndices = setOf(0, 1)"}
{"kt_path": "sysion__DataStructureAlgorithmKt__6f9afda/TwoSumLessThanTarget.kt", "deepseek-coder-1.3b-base": "fun main() {\n    val intArray = intArrayOf(1, 2, 3, 4, 5)\n    println(SumTwoNumbersLessThanTarget(intArray, 10))\n}\n\nfun SumTwoNumbersLessThanTarget(intArray: IntArray, target: Int): Int {\n    var sum = 0\n    for (i in intArray.indices) {\n        for (j in intArray.indices) {\n            if (intArray[i] + intArray[j] < target) {\n                sum += intArray[i] + intArray[j]\n            }\n        }\n    }\n    return sum\n}"}
{"kt_path": "linisme__LeetCodeInKotlin__4382afc/FineMedianSortedArrays.kt", "deepseek-coder-1.3b-base": "import java.lang.StringBuilder\n\nfun main(args: Array<String>) {\n    val sb = StringBuilder()\n    sb.append(\"Hello, \")\n    sb.append(args[0])\n    sb.append(\"!\\n\")\n    println(sb.toString())\n}"}
{"kt_path": "n81ur3__kotlin-coding-challenges__fdc5941/src/main/kotlin/adventofcode2018/Day18SettlersOfTheNorthPole.kt", "deepseek-coder-1.3b-base": "import adventofcode2018.AreaElement\nimport java.util.ArrayList\nimport java.util.HashSet\n\nfun main() {\n    val input = readInput()\n    val area = input.map { line ->\n        line.map { char ->\n            when (char) {\n                '.' -> AreaElement.Empty\n                '|' -> AreaElement.Wall\n                '#' -> AreaElement.Wall\n                else -> throw IllegalArgumentException(\"Unknown character $char\")\n            }\n        }\n    }\n\n    val areaSet = HashSet<AreaElement>()\n    val areaSet2 = HashSet<AreaElement>()\n    var areaSet3 = HashSet<AreaElement>()\n    var areaSet4 = HashSet<AreaElement>()\n    var areaSet5 = HashSet<AreaElement>()\n    var areaSet6 = HashSet<AreaElement>()\n    var areaSet7 = HashSet<AreaElement>()\n    var areaSet8 = HashSet<AreaElement>()\n    var areaSet9 = HashSet<AreaElement>()\n    var areaSet10 = HashSet<AreaElement>()\n    var areaSet11 = HashSet<AreaElement>()\n    var areaSet12 = HashSet<AreaElement>()\n    var areaSet13 = HashSet<AreaElement>()\n    var areaSet14 = HashSet<AreaElement>()\n    var areaSet15 = HashSet<AreaElement>()\n    var areaSet16 = HashSet<AreaElement>()\n    var areaSet17 = HashSet<AreaElement>()\n    var areaSet18 = HashSet<AreaElement>()\n    var areaSet19 = HashSet<AreaElement>()\n    var areaSet20 = HashSet<AreaElement>()\n    var areaSet21 = HashSet<AreaElement>()\n    var areaSet22 = HashSet<AreaElement>()\n    var areaSet23 = HashSet<AreaElement>()\n    var areaSet24 = HashSet<AreaElement>()\n    var areaSet25 = HashSet<AreaElement>()\n    var areaSet26 = HashSet<AreaElement>()\n    var areaSet27 = HashSet<AreaElement>()\n    var areaSet28 = HashSet<AreaElement>()\n    var areaSet29 = HashSet<AreaElement>()\n    var areaSet30 = HashSet<AreaElement>()\n    var areaSet31 = HashSet<AreaElement>()\n    var areaSet32 = HashSet<AreaElement>()\n    var areaSet33 = HashSet<AreaElement>()\n    var areaSet34 = HashSet<AreaElement>()\n    var areaSet35 = HashSet<AreaElement>()\n    var areaSet36 = HashSet<AreaElement>()\n    var areaSet37 = HashSet<AreaElement>()\n    var areaSet38 = HashSet<AreaElement>()\n    var areaSet39 = HashSet<AreaElement>()\n    var areaSet40 = HashSet<AreaElement>()\n    var areaSet41 = HashSet<AreaElement>()\n    var areaSet42 = HashSet<AreaElement>()\n    var areaSet43 = HashSet<AreaElement>()\n    var areaSet44 = HashSet<AreaElement>()\n    var areaSet45 = HashSet<AreaElement>()\n    var areaSet46 = HashSet<AreaElement>()\n    var areaSet47 = HashSet<AreaElement>()\n    var areaSet48 = HashSet<AreaElement>()\n    var areaSet49 = HashSet<AreaElement>()\n    var areaSet50 = HashSet<AreaElement>()\n    var areaSet51 = HashSet<AreaElement>()\n    var areaSet52 = HashSet<AreaElement>()\n    var areaSet53 = HashSet<AreaElement>()\n    var areaSet54 = HashSet<AreaElement>()\n    var areaSet55 = HashSet<AreaElement>()\n    var areaSet56 = HashSet<AreaElement>()\n    var areaSet57 = HashSet<AreaElement>()\n    var areaSet58 = HashSet<AreaElement>()\n    var areaSet59 = HashSet<AreaElement>()\n    var areaSet60 = HashSet<AreaElement>()\n    var areaSet61 = HashSet<AreaElement>()\n    var areaSet62 = HashSet<AreaElement>()\n    var areaSet63 = HashSet<AreaElement>()\n    var areaSet64 = HashSet<AreaElement>()\n    var areaSet65 = HashSet<AreaElement>()\n    var areaSet66 = HashSet<AreaElement>()\n    var areaSet67 = HashSet<AreaElement>()\n    var areaSet68 = HashSet<AreaElement>()\n    var areaSet69 = HashSet<AreaElement>()\n    var areaSet70 = HashSet<AreaElement>()\n    var areaSet71 = HashSet<AreaElement>()\n    var areaSet72 = HashSet<AreaElement>()\n    var areaSet73 = HashSet<AreaElement>()\n    var areaSet74 = HashSet<AreaElement>()\n    var areaSet75 = HashSet<AreaElement>()\n    var areaSet76 = HashSet<AreaElement>()\n    var areaSet77 = HashSet<AreaElement>()\n    var areaSet78 = HashSet<AreaElement>()\n    var areaSet79 = HashSet<AreaElement>()\n    var areaSet80 = HashSet<AreaElement>()\n    var areaSet81 = HashSet<AreaElement>()\n    var areaSet82 = HashSet<AreaElement>()\n    var areaSet83 = HashSet<AreaElement>()\n    var areaSet84 = HashSet<AreaElement>()\n    var areaSet85 = HashSet<AreaElement>()\n    var areaSet86 = HashSet<AreaElement>()\n    var areaSet87 = HashSet<AreaElement>()\n    var areaSet88 = HashSet<AreaElement>()\n    var areaSet89 = HashSet<AreaElement>()\n    var areaSet90 = HashSet<AreaElement>()\n    var areaSet91 = HashSet<AreaElement>()\n    var areaSet92 = HashSet<AreaElement>()\n    var areaSet93 = HashSet<AreaElement>()\n    var areaSet94 = HashSet<AreaElement>()\n    var areaSet95 = HashSet<AreaElement>()\n    var areaSet96 = HashSet<AreaElement>()\n    var areaSet97 = HashSet<AreaElement>()\n    var areaSet98 = HashSet<AreaElement>()\n    var areaSet99 = HashSet<AreaElement>()\n    var areaSet100 = HashSet<AreaElement>()\n    var areaSet101 = HashSet<AreaElement>()\n    var areaSet102 = HashSet<AreaElement>()\n    var areaSet103 = HashSet<AreaElement>()\n    var areaSet104 = HashSet<AreaElement>()\n    var areaSet105 = HashSet<AreaElement>()\n    var areaSet106 = HashSet<AreaElement>()\n    var areaSet107 = HashSet<AreaElement>()\n    var areaSet108 = HashSet<AreaElement>()\n    var areaSet109 = HashSet<AreaElement>()\n    var areaSet110 = HashSet<AreaElement>()\n    var areaSet111 = HashSet<AreaElement>()\n    var areaSet112 ="}
{"kt_path": "iafsilva__codility-lessons__5d86aef/src/main/kotlin/lesson3/PermMissingElem.kt", "deepseek-coder-1.3b-base": "fun main() {\n    val a = intArrayOf(1, 2, 3, 4, 5)\n    println(solution(a))\n}\n\nfun solution(a: IntArray): Int {\n    a.sort()\n    for (i in a.indices) {\n        if (a[i] != i + 1) {\n            return i + 1\n        }\n    }\n    return a.size + 1\n}"}
{"kt_path": "getnahid__programing-problem-solves-kotlin__589c392/OddOccurrencesInArray.kt", "deepseek-coder-1.3b-base": "fun solution(nums: IntArray): Int {\n    return nums.sorted().let {\n        if (it.size % 2 == 0) {\n            it[it.size / 2 - 1]\n        } else {\n            it[it.size / 2]\n        }\n    }\n}"}
{"kt_path": "rupeshsasne__coursera-algorithms-part1__341634c/classroom/src/main/kotlin/com/radix2/algorithms/week3/SortingLinkedList.kt", "deepseek-coder-1.3b-base": "package com.radix2.algorithms.week3\n\nimport java.lang.Comparable\nimport java.lang.Integer\nimport java.lang.System\n\nclass SortingLinkedList<T : Comparable<T>> {\n\n    private val list = LinkedList<T>()\n\n    fun add(element: T) {\n        list.add(element)\n    }\n\n    fun reverseRecursive() {\n        list.reverseRecursive()\n    }\n\n    override fun toString(): String {\n        return list.toString()\n    }\n}\n\nfun main(args: Array<String>) {\n    val list = SortingLinkedList<Integer>()\n    list.add(Integer.valueOf(11))\n    list.add(Integer.valueOf(22))\n    list.add(Integer.valueOf(33))\n    list.add(Integer.valueOf(44))\n    list.add(Integer.valueOf(55))\n    list.add(Integer.valueOf(66))\n    list.add(Integer.valueOf(77))\n    list.add(Integer.valueOf(88))\n    list.add(Integer.valueOf(99))\n    list.add(Integer.valueOf(100))\n    list.add(Integer.valueOf(111))\n    list.add(Integer.valueOf(122))\n    list.add(Integer.valueOf(133))\n    list.add(Integer.valueOf(144))\n    list.add(Integer.valueOf(155))\n    list.add(Integer.valueOf(166))\n    list.add(Integer.valueOf(177))\n    list.add(Integer.valueOf(188))\n    list.add(Integer.valueOf(199))\n    list.add(Integer.valueOf(200))\n    list.add(Integer.valueOf(211))\n    list.add(Integer.valueOf(222))\n    list.add(Integer.valueOf(233))\n    list.add(Integer.valueOf(244))\n    list.add(Integer.valueOf(255))\n    list.add(Integer.valueOf(266))\n    list.add(Integer.valueOf(277))\n    list.add(Integer.valueOf(288))\n    list.add(Integer.valueOf(299))\n    list.add(Integer.valueOf(300))\n    list.add(Integer.valueOf(311))\n    list.add(Integer.valueOf(322))\n    list.add(Integer.valueOf(333))\n    list.add(Integer.valueOf(344))\n    list.add(Integer.valueOf(355))\n    list.add(Integer.valueOf(366))\n    list.add(Integer.valueOf(377))\n    list.add(Integer.valueOf(388))\n    list.add(Integer.valueOf(399))\n    list.add(Integer.valueOf(400))\n    list.add(Integer.valueOf(411))\n    list.add(Integer.valueOf(422))\n    list.add(Integer.valueOf(433))\n    list.add(Integer.valueOf(444))\n    list.add(Integer.valueOf(455))\n    list.add(Integer.valueOf(466))\n    list.add(Integer.valueOf(477))\n    list.add(Integer.valueOf(488))\n    list.add(Integer.valueOf(499))\n    list.add(Integer.valueOf(500))\n    list.add(Integer.valueOf(511))\n    list.add(Integer.valueOf(522))\n    list.add(Integer.valueOf(533))\n    list.add(Integer.valueOf(544))\n    list.add(Integer.valueOf(555))\n    list.add(Integer.valueOf(566))\n    list.add(Integer.valueOf(577))\n    list.add(Integer.valueOf(588))\n    list.add(Integer.valueOf(599))\n    list.add(Integer.valueOf(600))\n    list.add(Integer.valueOf(611))\n    list.add(Integer.valueOf(622))\n    list.add(Integer.valueOf(633))\n    list.add(Integer.valueOf(644))\n    list.add(Integer.valueOf(655))\n    list.add(Integer.valueOf(666))\n    list.add(Integer.valueOf(677))\n    list.add(Integer.valueOf(688))\n    list.add(Integer.valueOf(699))\n    list.add(Integer.valueOf(700))\n    list.add(Integer.valueOf(711))\n    list.add(Integer.valueOf(722))\n    list.add(Integer.valueOf(733))\n    list.add(Integer.valueOf(744))\n    list.add(Integer.valueOf(755))\n    list.add(Integer.valueOf(766))\n    list.add(Integer.valueOf(777))\n    list.add(Integer.valueOf(788))\n    list.add(Integer.valueOf(799))\n    list.add(Integer.valueOf(800))\n    list.add(Integer.valueOf(811))\n    list.add(Integer.valueOf(822))\n    list.add(Integer.valueOf(833))\n    list.add(Integer.valueOf(844))\n    list.add(Integer.valueOf(855))\n    list.add(Integer.valueOf(866))\n    list.add(Integer.valueOf(877))\n    list.add(Integer.valueOf(888))\n    list.add(Integer.valueOf(899))\n    list.add(Integer.valueOf(900))\n    list.add(Integer.valueOf(911))\n    list.add(Integer.valueOf(922))\n    list.add(Integer.valueOf(933))\n    list.add(Integer.valueOf(944))\n    list.add(Integer.valueOf(955))\n    list.add(Integer.valueOf(966))\n    list.add(Integer.valueOf(977))\n    list.add(Integer.valueOf(988))\n    list.add(Integer.valueOf(999))\n    list.add(Integer.valueOf(1000))\n    list.add(Integer.valueOf(1011))\n    list.add(Integer.valueOf(1022))\n    list.add(Integer.valueOf(1033))\n    list.add(Integer.valueOf(1044))\n    list.add(Integer.valueOf(1055))\n    list.add(Integer.valueOf(1066))\n    list.add(Integer.valueOf(1077))\n    list.add(Integer.valueOf(1088))\n    list.add(Integer.valueOf(1099))\n    list"}
{"kt_path": "boris920308__HoOne__8881468/hoon/HoonAlgorithm/src/main/kotlin/boj/week02/recursive_function/FibonacciSequence5.kt", "deepseek-coder-1.3b-base": "fun main() {\n    val scanner = Scanner(System.`in`)\n    val n = scanner.nextInt()\n    println(fibonacci(n))\n}\n\nfun fibonacci(n: Int): Int {\n    if (n == 0) return 0\n    if (n == 1) return 1\n    return fibonacci(n - 1) + fibonacci(n - 2)\n}"}
{"kt_path": "Codextor__kotlin-codes__68b75a7/src/main/kotlin/PerfectSquares.kt", "deepseek-coder-1.3b-base": "fun numSquares(n: Int): Int {\n    var i = 0\n    var j = 0\n    while (i * i <= n) {\n        j++\n        i++\n    }\n    return j\n}"}
{"kt_path": "Laomedeia__Java8InAction__0dcd843/src/main/java/leetcode/a167_twoSumInputSortArray_SIMPLE/Solution.kt", "deepseek-coder-1.3b-base": "public final class Solution {\n    public Solution() {\n    }\n\n    public int[] twoSum(int[] numbers, int target) {\n        for (int i = 0; i < numbers.length; i++) {\n            for (int j = i + 1; j < numbers.length; j++) {\n                if (numbers[i] + numbers[j] == target) {\n                    return int[] {i, j}\n                }\n            }\n        }\n        return int[] {}\n    }\n}"}
{"kt_path": "ariannysOronoz__tutorialKotlin__a779f54/CombinacionesPalabras/src/main/java/Main.kt", "deepseek-coder-1.3b-base": "import com.includehelp.basic.Permutation\n\nfun main(args: Array<String>) {\n    Permutation.findPermutation(\"CARACOL\", 0, 0)\n}"}
{"kt_path": "scientificCommunity__blog-sample__36e291c/algorithms/src/main/kotlin/org/baichuan/sample/algorithms/leetcode/middle/MaxArea.kt", "deepseek-coder-1.3b-base": "fun maxArea(height: IntArray): Int {\n    var maxArea = 0\n    for (i in 0 until height.size - 1) {\n        for (j in i + 1 until height.size) {\n            val area = (j - i) * height[i].coerceAtLeast(height[j])\n            if (area > maxArea) {\n                maxArea = area\n            }\n        }\n    }\n    return maxArea\n}"}
{"kt_path": "boris920308__HoOne__8881468/hoon/HoonAlgorithm/src/main/kotlin/programmers/lv01/Lv1_70128.kt", "deepseek-coder-1.3b-base": "fun main() {\n    val array = intArrayOf(1, 2, 3, 4)\n    println(solution(array, array))\n}\n\nfun solution(array: IntArray, commands: IntArray): IntArray {\n    val answer = IntArray(commands.size)\n    for (i in commands.indices) {\n        val (start, end, target) = commands[i]\n        val subArray = array.copyOfRange(start - 1, end)\n        subArray.sort()\n        answer[i] = subArray[target - 1]\n    }\n    return answer\n}"}
{"kt_path": "kotler-dev__kotlin-leetcode__0659e72/src/main/kotlin/exercise/easy/id121/Solution121.kt", "deepseek-coder-1.3b-base": "import java.lang.String\n\npublic class Solution121 {\n    public Solution121() {\n    }\n\n    public fun maxProfit(prices: IntArray): Int {\n        var maxProfit = 0\n        var minPrice = Int.MAX_VALUE\n        for (price in prices) {\n            minPrice = Math.min(minPrice, price)\n            maxProfit = Math.max(maxProfit, price - minPrice)\n        }\n        return maxProfit\n    }\n}"}
{"kt_path": "marc-bouvier-katas__Kotlin_EduTools_Advent_of_Code_2021__12cf74c/Day 5/Part 1/src/Task.kt", "deepseek-coder-1.3b-base": "fun overlaps(lines: List<String>): Boolean {\n    val linesOfVent = lines.map { LineOfVent.fromString(it) }\n    val line = Line.fromLineOfVent(linesOfVent.first())\n    linesOfVent.drop(1).forEach { line.mergeWith(Line.fromLineOfVent(it)) }\n    return line.overlaps()\n}"}
{"kt_path": "Laomedeia__Java8InAction__0dcd843/src/main/java/leetcode/a392_isSubSequence_HARD/Solution.kt", "deepseek-coder-1.3b-base": "class Solution {\n    fun isSubsequence(s: String, t: String): Boolean {\n        var i = 0\n        for (c in t) {\n            if (i < s.length && c == s[i]) {\n                i++\n            }\n        }\n        return i == s.length\n    }\n}"}
{"kt_path": "nickperov__Algorithms__6696f5d/fibonacci/src/main/kotlin/com/nickperov/stud/algorithms/fibonacci/FibonacciLargeGenerator.kt", "deepseek-coder-1.3b-base": "import java.math.BigInteger\n\nclass FibonacciLargeGeneratorKt : FibonacciLargeGenerator {\n    override fun calculate(n: Int): BigInteger {\n        return BigInteger.valueOf(n.toLong())\n    }\n}\n\nfun main() {\n    val generator = FibonacciLargeGeneratorKt()\n    println(generator.calculate(1000000))\n}"}
{"kt_path": "TonnyL__Windary__39f85cd/Kotlin/src/UniqueBinarySearchTrees.kt", "deepseek-coder-1.3b-base": "import java.util.*\n\nclass UniqueBinarySearchTrees {\n    fun numTrees(n: Int): Int {\n        return if (n == 0) 1 else {\n            var result = 0\n            for (i in 0 until n) {\n                result += numTrees(i) * numTrees(n - i - 1)\n            }\n            result\n        }\n    }\n}\n\nfun main(args: Array<String>) {\n    val tree = UniqueBinarySearchTrees()\n    println(tree.numTrees(3))\n}"}
{"kt_path": "quincy__euler-kotlin__01d96f6/src/main/kotlin/com/quakbo/euler/Euler4.kt", "deepseek-coder-1.3b-base": "fun main(args: Array<String>) {\n    for (i in 1..999 step 2) {\n        for (j in 1..999 step 2) {\n            if (isPalindrome(i * j)) {\n                println(\"$i * $j = ${i * j}\")\n            }\n        }\n    }\n}\n\nfun isPalindrome(number: Int): Boolean {\n    return number.toString() == number.toString().reversed()\n}"}
{"kt_path": "getupminaaa__Algorithm__01187e2/Algorithm/src/main/kotlin/programmers/level1/personalInfoCollectionValidityPeriod.kt", "deepseek-coder-1.3b-base": "import kotlin.String\n\nclass Solution {\n    fun solution(A: String, B: String, C: String): Int {\n        return 0\n    }\n}\n\nfun main() {\n    val solution = Solution()\n    val result = solution.solution(\"2021.05.02\", \"2021.07.01\", \"2022.02.19\")\n    println(result)\n}"}
{"kt_path": "iafsilva__codility-lessons__5d86aef/src/main/kotlin/lesson1/BinaryGap.kt", "deepseek-coder-1.3b-base": "package lesson1\n\nfun main(args: Array<String>) {\n    val binaryGap = BinaryGap()\n    println(binaryGap.solution(1041))\n}\n\nclass BinaryGap {\n    fun solution(n: Int): Int {\n        var binaryString = n.toBinaryString()\n        var maxGap = 0\n        var currentGap = 0\n        var lastZeroIndex = -1\n        for (i in binaryString.indices) {\n            if (binaryString[i] == '1') {\n                if (lastZeroIndex != -1) {\n                    currentGap = i - lastZeroIndex - 1\n                    if (currentGap > maxGap) {\n                        maxGap = currentGap\n                    }\n                }\n                lastZeroIndex = i\n            }\n        }\n        return maxGap\n    }\n}"}
{"kt_path": "zys0909__CodeLabs__869c7c2/src/com/leecode/array/Code1.kt", "deepseek-coder-1.3b-base": "fun main(args: Array<String>) {\n    val nums = arrayOf(1, 2, 3, 4, 5, 6, 7, 8, 9, 10)\n    println(missingNumber1(nums))\n    println(missingNumber2(nums))\n}\n\nfun missingNumber1(nums: IntArray): Int {\n    var sum = 0\n    for (i in nums) {\n        sum += i\n    }\n    return 555 - sum\n}\n\nfun missingNumber2(nums: IntArray): Int {\n    var sum = 0\n    for (i in nums) {\n        sum += i\n    }\n    return 555 - sum\n}"}
{"kt_path": "ykrytsyn__leetcode-in-kotlin__0acf2a6/src/main/kotlin/leetcode/ArrangingCoins.kt", "deepseek-coder-1.3b-base": "class ArrangingCoins {\n    fun bruteForce(n: Int): Int {\n        var i = 1\n        while (i <= n) {\n            if (i * (i + 1) / 2 > n) {\n                return i - 1\n            }\n            i++\n        }\n        return n\n    }\n\n    fun binarySearch(n: Int): Int {\n        var lo = 0\n        var hi = n\n        while (lo < hi) {\n            val mid = lo + (hi - lo) / 2\n            if (mid * (mid + 1) / 2 > n) {\n                hi = mid\n            } else {\n                lo = mid + 1\n            }\n        }\n        return lo - 1\n    }\n}"}
{"kt_path": "mayabot__mynlp__b980da3/mynlp/src/main/java/com/mayabot/nlp/module/nwd/ValueObjects.kt", "deepseek-coder-1.3b-base": "import com.mayabot.nlp.module.nwd.IntCount\nimport java.util.HashMap\n\nfun main(args: Array<String>) {\n    val map = HashMap<Char, IntCount>()\n    map.put('a', IntCount(0))\n    map.put('b', IntCount(1))\n    map.put('c', IntCount(2))\n    map.put('d', IntCount(3))\n    map.put('e', IntCount(4))\n    map.put('f', IntCount(5))\n    map.put('g', IntCount(6))\n    map.put('h', IntCount(7))\n    map.put('i', IntCount(8))\n    map.put('j', IntCount(9))\n    map.put('k', IntCount(10))\n    map.put('l', IntCount(11))\n    map.put('m', IntCount(12))\n    map.put('n', IntCount(13))\n    map.put('o', IntCount(14))\n    map.put('p', IntCount(15))\n    map.put('q', IntCount(16))\n    map.put('r', IntCount(17))\n    map.put('s', IntCount(18))\n    map.put('t', IntCount(19))\n    map.put('u', IntCount(20))\n    map.put('v', IntCount(21))\n    map.put('w', IntCount(22))\n    map.put('x', IntCount(23))\n    map.put('y', IntCount(24))\n    map.put('z', IntCount(25))\n    map.put(' ', IntCount(26))\n    map.put('-', IntCount(27))\n    map.put('_', IntCount(28))\n    map.put('=', IntCount(29))\n    map.put('+', IntCount(30))\n    map.put('*', IntCount(31))\n    map.put('?', IntCount(32))\n    map.put('[', IntCount(33))\n    map.put(']', IntCount(34))\n    map.put('{', IntCount(35))\n    map.put('}', IntCount(36))\n    map.put('(', IntCount(37))\n    map.put(')', IntCount(38))\n    map.put(';', IntCount(39))\n    map.put(':', IntCount(40))\n    map.put('\"', IntCount(41))\n    map.put('\\'', IntCount(42))\n    map.put('<', IntCount(43))\n    map.put('>', IntCount(44))\n    map.put('@', IntCount(45))\n    map.put('~', IntCount(46))\n    map.put('\\u0000', IntCount(47))\n    map.put('\\u0001', IntCount(48))\n    map.put('\\u0002', IntCount(49))\n    map.put('\\u0003', IntCount(50))\n    map.put('\\u0004', IntCount(51))\n    map.put('\\u0005', IntCount(52))\n    map.put('\\u0006', IntCount(53))\n    map.put('\\u0007', IntCount(54))\n    map.put('\\u0008', IntCount(55))\n    map.put('\\u0009', IntCount(56))\n    map.put('\\u000A', IntCount(57))\n    map.put('\\u000B', IntCount(58))\n    map.put('\\u000C', IntCount(59))\n    map.put('\\u000D', IntCount(60))\n    map.put('\\u000E', IntCount(61))\n    map.put('\\u000F', IntCount(62))\n    map.put('\\u0010', IntCount(63))\n    map.put('\\u0011', IntCount(64))\n    map.put('\\u0012', IntCount(65))\n    map.put('\\u0013', IntCount(66))\n    map.put('\\u0014', IntCount(67))\n    map.put('\\u0015', IntCount(68))\n    map.put('\\u0016', IntCount(69))\n    map.put('\\u0017', IntCount(70))\n    map.put('\\u0018', IntCount(71))\n    map.put('\\u0019', IntCount(72))\n    map.put('\\u001A', IntCount(73))\n    map.put('\\u001B', IntCount(74))\n    map.put('\\u001C', IntCount(75))\n    map.put('\\u001D', IntCount(76))\n    map.put('\\u001E', IntCount(77))\n    map.put('\\u001F', IntCount(78))\n    map.put('\\u007F', IntCount(79))\n    map.put('\\u0080', IntCount(80))\n    map.put('\\u0081', IntCount(81))\n    map.put('\\u0082', IntCount(82))\n    map.put('\\u0083', IntCount(83))\n    map.put('\\u0084', IntCount(84))\n    map.put('\\u0085', IntCount(85))\n    map.put('\\u0086', IntCount(86))\n    map.put('\\u0087', IntCount(87))\n    map.put('\\u0088', IntCount(88))\n    map.put('\\u0089', IntCount(89))\n    map.put('\\u008A', IntCount(90))\n    map.put('\\u008B', IntCount(91))\n    map.put('\\u008C', IntCount(92))\n    map.put('\\u008D', IntCount(93))\n    map.put('\\u008E', IntCount(94))\n    map.put('\\u008F', IntCount(95))\n    map.put('\\u0090', IntCount(96))\n    map.put('\\u0091', IntCount(97))\n    map.put('\\u0092', IntCount(98))\n    map.put('\\u0093', IntCount(99))\n    map.put('\\u0094', IntCount(100))\n    map.put('\\u0095', IntCount(101))\n    map.put('\\u0096', IntCount(102))\n    map.put('\\u0097', IntCount(103))\n    map.put('\\u0098', Int"}
{"kt_path": "jjrodcast__CompetitiveProblems__a91868c/leetcode/UniquePathsTwo.kt", "deepseek-coder-1.3b-base": "class Solution {\n    fun uniquePathsWithObstacles(obstacleGrid: Array<IntArray>): Int {\n        val m = obstacleGrid.size\n        val n = obstacleGrid[0].size\n        val dp = Array(m) { IntArray(n) }\n        for (i in 0 until m) {\n            for (j in 0 until n) {\n                if (obstacleGrid[i][j] == 1) {\n                    dp[i][j] = 0\n                } else if (i == 0 && j == 0) {\n                    dp[i][j] = 1\n                } else if (i == 0) {\n                    dp[i][j] = dp[i][j - 1]\n                } else if (j == 0) {\n                    dp[i][j] = dp[i - 1][j]\n                } else {\n                    dp[i][j] = dp[i - 1][j] + dp[i][j - 1]\n                }\n            }\n        }\n        return dp[m - 1][n - 1]\n    }\n}"}
{"kt_path": "boris920308__HoOne__8881468/hoon/HoonAlgorithm/src/main/kotlin/programmers/lv01/Lv1_77884.kt", "deepseek-coder-1.3b-base": "fun main() {\n    println(solution(13, 17))\n}\n\nfun solution(n: Int, m: Int): Int {\n    return countDivisors(n) + countDivisors(m)\n}\n\nfun countDivisors(n: Int): Int {\n    var count = 0\n    for (i in 1..n) {\n        if (n % i == 0) {\n            count++\n        }\n    }\n    return count\n}"}
{"kt_path": "Codextor__kotlin-codes__68b75a7/src/main/kotlin/PartitionArrayForMaximumSum.kt", "deepseek-coder-1.3b-base": "fun maxSumAfterPartitioning(arr: IntArray, k: Int): Int {\n    val n = arr.size\n    val dp = IntArray(n)\n    for (i in 0 until n) {\n        var max = arr[i]\n        for (j in i until minOf(i + k, n)) {\n            max = maxOf(max, arr[j])\n            dp[j] = maxOf(dp[j], dp[i] + max * (j - i + 1))\n        }\n    }\n    return dp[n - 1]\n}"}
{"kt_path": "scientificCommunity__blog-sample__36e291c/algorithms/src/main/kotlin/org/baichuan/sample/algorithms/leetcode/simple/interview/MajorityElement.kt", "deepseek-coder-1.3b-base": "package org.baichuan.sample.algorithms.leetcode.simple.interview.kotlin\n\nimport kotlin.math.max\n\nclass MajorityElement {\n    fun majorityElement(nums: IntArray): Int {\n        var candidate = 0\n        var count = 0\n        for (num in nums) {\n            if (count == 0) {\n                candidate = num\n            }\n            if (num == candidate) {\n                count++\n            } else {\n                count--\n            }\n        }\n        return candidate\n    }\n}"}
{"kt_path": "rhavran__ProjectEuler__1115674/src/Utils.kt", "deepseek-coder-1.3b-base": "import java.util.*\n\nclass Utils {\n    companion object {\n        fun dividers(n: Long): Map<Long, Long> {\n            val map = HashMap<Long, Long>()\n            for (i in 1..n) {\n                if (n % i == 0) {\n                    map[i] = n / i\n                }\n            }\n            return map\n        }\n\n        fun sequenceSumStartingFrom(from: Long, to: Long): Long {\n            return from.rangeTo(to).sum()\n        }\n\n        fun sumFromTo(from: Long, to: Long): Long {\n            return from.rangeTo(to).sumOf { it.toLong() }\n        }\n    }\n}"}
{"kt_path": "jimmymorales__project-euler__e881cad/src/main/kotlin/Problem4.kt", "deepseek-coder-1.3b-base": "fun main() {\n    println(largestPalindrome())\n}\n\nfun largestPalindrome(): Int {\n    var max = 0\n    for (i in 1..999) {\n        for (j in 1..99) {\n            if (isPalindrome(i * j)) {\n                max = max.coerceAtLeast(i * j)\n            }\n        }\n    }\n    return max\n}\n\nfun isPalindrome(i: Int): Boolean {\n    return i.toString().reversed() == i.toString()\n}\n\nfun Int.reversed(): String {\n    return buildString {\n        for (i in this@reversed.indices) {\n            append(this@reversed[length - i - 1])\n        }\n    }\n}"}
{"kt_path": "Codextor__kotlin-codes__68b75a7/src/main/kotlin/PalindromicSubstrings.kt", "deepseek-coder-1.3b-base": "fun countSubstrings(s: String): Int {\n    var count = 0\n    for (i in 0 until s.length) {\n        for (j in i until s.length) {\n            if (isPalindromic(s.substring(i, j + 1))) {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfun isPalindromic(s: String): Boolean {\n    return s == s.reversed()\n}"}
{"kt_path": "antop-dev__algorithm__9a3e762/src/main/kotlin/kr/co/programmers/P12952.kt", "deepseek-coder-1.3b-base": "class P12952 {\n    fun solution(n: Int): Int {\n        return dfs(intArrayOf(), n)\n    }\n\n    private fun dfs(arr: IntArray, n: Int): Int {\n        if (arr.size == n) {\n            return 1\n        }\n        arr.add(0)\n        for (i in 1..n) {\n            if (valid(arr, i)) {\n                arr[arr.size - 1] = i\n                if (dfs(arr, n) == 0) {\n                    arr.removeAt(arr.size - 1)\n                }\n            }\n        }\n        return 0\n    }\n\n    private fun valid(arr: IntArray, n: Int): Boolean {\n        if (arr.size == 0) {\n            return true\n        }\n        for (i in arr) {\n            if (i == n) {\n                return false\n            }\n        }\n        return true\n    }\n}"}
{"kt_path": "ILIYANGERMANOV__algorithms__4abe4b5/Algorithms/src/main/kotlin/MaxSubArray.kt", "deepseek-coder-1.3b-base": "class MaxSubArray {\n    fun maxSubArray(nums: IntArray): Int {\n        var max = nums[0]\n        var sum = 0\n        for (num in nums) {\n            sum += num\n            max = max.coerceAtLeast(sum)\n            if (sum < 0) sum = 0\n        }\n        return max\n    }\n}"}
{"kt_path": "AlBovo__Compiti__56a3131/src/main/kotlin/segtree.kt", "deepseek-coder-1.3b-base": "import java.lang.Integer\n\nclass SegtreeKt {\n    companion object {\n        @JvmStatic\n        fun main() {\n            val tree = SegmentTree(intArrayOf(7, 2, 4, 1, 5, 3))\n            println(tree.getSum(1, 3))\n        }\n    }\n}\n\nclass SegmentTree(private val arr: IntArray) {\n    fun getSum(left: Int, right: Int): Int {\n        return arr.slice(left..right).sum()\n    }\n}"}
{"kt_path": "3mtee__exercism-kotlin__6e3eb88/complex-numbers/src/main/kotlin/ComplexNumbers.kt", "deepseek-coder-1.3b-base": "import kotlin.math.*\n\nclass ComplexNumber(val real: Double, val imag: Double) {\n    operator fun times(other: ComplexNumber): ComplexNumber {\n        return ComplexNumber(real * other.real - imag * other.imag, real * other.imag + imag * other.real)\n    }\n\n    operator fun plus(other: ComplexNumber): ComplexNumber {\n        return ComplexNumber(real + other.real, imag + other.imag)\n    }\n\n    operator fun minus(other: ComplexNumber): ComplexNumber {\n        return ComplexNumber(real - other.real, imag - other.imag)\n    }\n\n    operator fun unaryMinus(): ComplexNumber {\n        return ComplexNumber(-real, -imag)\n    }\n\n    operator fun div(other: ComplexNumber): ComplexNumber {\n        return ComplexNumber(\n            (real * other.real + imag * other.imag) / (other.real * other.real + other.imag * other.imag),\n            (imag * other.real - real * other.imag) / (other.real * other.real + other.imag * other.imag)\n        )\n    }\n\n    operator fun times(other: Double): ComplexNumber {\n        return ComplexNumber(real * other, imag * other)\n    }\n\n    operator fun plus(other: Double): ComplexNumber {\n        return ComplexNumber(real + other, imag)\n    }\n\n    operator fun minus(other: Double): ComplexNumber {\n        return ComplexNumber(real - other, imag)\n    }\n\n    operator fun unaryMinus(): ComplexNumber {\n        return ComplexNumber(-real, -imag)\n    }\n\n    operator fun div(other: Double): ComplexNumber {\n        return ComplexNumber(real / other, imag / other)\n    }\n\n    fun exp(): ComplexNumber {\n        return ComplexNumber(\n            exp(real) * cos(imag),\n            exp(real) * sin(imag)\n        )\n    }\n\n    fun log(): ComplexNumber {\n        return ComplexNumber(\n            log(real),\n            imag\n        )\n    }\n\n    fun sinh(): ComplexNumber {\n        return ComplexNumber(\n            sinh(real),\n            cos(imag)\n        )\n    }\n\n    fun cosh(): ComplexNumber {\n        return ComplexNumber(\n            cosh(real),\n            sin(imag)\n        )\n    }\n\n    fun tanh(): ComplexNumber {\n        return ComplexNumber(\n            tanh(real),\n            tan(imag)\n        )\n    }\n\n    fun asinh(): ComplexNumber {\n        return ComplexNumber(\n            asinh(real),\n            asin(imag)\n        )\n    }\n\n    fun acosh(): ComplexNumber {\n        return ComplexNumber(\n            acosh(real),\n            asin(imag)\n        )\n    }\n\n    fun atanh(): ComplexNumber {\n        return ComplexNumber(\n            atanh(real),\n            atan(imag)\n        )\n    }\n\n    fun exp2(): ComplexNumber {\n        return ComplexNumber(\n            exp2(real),\n            imag\n        )\n    }\n\n    fun log2(): ComplexNumber {\n        return ComplexNumber(\n            log2(real),\n            imag\n        )\n    }\n\n    fun sin2(): ComplexNumber {\n        return ComplexNumber(\n            sin2(real),\n            cos(imag)\n        )\n    }\n\n    fun cos2(): ComplexNumber {\n        return ComplexNumber(\n            cos2(real),\n            sin(imag)\n        )\n    }\n\n    fun tan2(): ComplexNumber {\n        return ComplexNumber(\n            tan2(real),\n            tan(imag)\n        )\n    }\n\n    fun asin2(): ComplexNumber {\n        return ComplexNumber(\n            asin2(real),\n            asin(imag)\n        )\n    }\n\n    fun acos2(): ComplexNumber {\n        return ComplexNumber(\n            acos2(real),\n            asin(imag)\n        )\n    }\n\n    fun atan2(): ComplexNumber {\n        return ComplexNumber(\n            atan2(real),\n            atan(imag)\n        )\n    }\n\n    fun exp10(): ComplexNumber {\n        return ComplexNumber(\n            exp10(real),\n            imag\n        )\n    }\n\n    fun log10(): ComplexNumber {\n        return ComplexNumber(\n            log10(real),\n            imag\n        )\n    }\n\n    fun sin10(): ComplexNumber {\n        return ComplexNumber(\n            sin10(real),\n            cos(imag)\n        )\n    }\n\n    fun cos10(): ComplexNumber {\n        return ComplexNumber(\n            cos10(real),\n            sin(imag)\n        )\n    }\n\n    fun tan10(): ComplexNumber {\n        return ComplexNumber(\n            tan10(real),\n            tan(imag)\n        )\n    }\n\n    fun asin10(): ComplexNumber {\n        return ComplexNumber(\n            asin10(real),\n            asin(imag)\n        )\n    }\n\n    fun acos10(): ComplexNumber {\n        return ComplexNumber(\n            acos10(real),\n            asin(imag)\n        )\n    }\n\n    fun atan10(): ComplexNumber {\n        return ComplexNumber(\n            atan10(real),\n            atan(imag)\n        )\n    }\n\n    fun expE(): ComplexNumber {\n        return ComplexNumber(\n            expE(real),\n            imag\n        )\n    }\n\n    fun logE(): ComplexNumber {\n        return ComplexNumber(\n            logE(real),\n            imag\n        )\n    }\n\n    fun sinE(): ComplexNumber {\n        return ComplexNumber(\n            sinE(real),\n            cos(imag)\n        )\n    }\n\n    fun cosE(): ComplexNumber {\n        return ComplexNumber(\n            cosE(real),\n            sin(imag)\n        )\n    }\n\n    fun tanE(): ComplexNumber {\n        return ComplexNumber(\n            tanE(real),\n            tan(imag)\n        )\n    }\n\n    fun asinE(): ComplexNumber {\n        return ComplexNumber(\n            asinE(real),\n            asin(imag)\n        )\n    }\n\n    fun acosE(): ComplexNumber {\n        return ComplexNumber(\n            acosE(real),\n            asin(imag)\n        )\n    }\n\n    fun atanE(): ComplexNumber {\n        return ComplexNumber(\n            atanE(real),\n            atan(imag)\n        )\n    }\n\n    fun exp1p(): ComplexNumber {\n        return ComplexNumber(\n            exp1p(real),\n            imag\n        )\n    }\n\n    fun log1p(): ComplexNumber {\n        return ComplexNumber(\n            log1p(real),\n            imag\n        )\n    }\n\n    fun sin1p(): ComplexNumber {\n        return ComplexNumber(\n            sin1p(real),\n            cos(imag)\n        )\n    }\n\n    fun cos1p(): ComplexNumber {\n        return ComplexNumber(\n            cos1p(real),\n            sin(imag)"}
{"kt_path": "perihanmirkelam__ProjectEuler__a24ac44/src/main/kotlin/P014_LongestCollatzSequence.kt", "deepseek-coder-1.3b-base": "fun p14() {\n    var a = 0\n    var b = 0\n    var c = 0\n    var s = \"\"\n    while (a < 1000000) {\n        b = a\n        c = 0\n        while (b > 0) {\n            if (b % 2 == 0) {\n                b /= 2\n            } else {\n                b = 3 * b + 1\n            }\n            c++\n        }\n        if (c > a) {\n            a = c\n            s = \"$a: $b\"\n        }\n    }\n    println(s)\n}"}
{"kt_path": "iafsilva__codility-lessons__5d86aef/src/main/kotlin/lesson2/CyclicRotation.kt", "deepseek-coder-1.3b-base": "fun main() {\n    val cyclicRotation = lesson2.CyclicRotation()\n    val array = intArrayOf(1, 2, 3, 4, 5)\n    val result = cyclicRotation.solution(array, 4)\n    println(result)\n}"}
{"kt_path": "boris920308__HoOne__8881468/hoon/HoonAlgorithm/src/main/kotlin/programmers/lv01/Lv1_12912.kt", "deepseek-coder-1.3b-base": "import kotlin.math.max\n\nfun main() {\n    println(solution(5, 3))\n    println(secondSolution(5, 3))\n}\n\nfun solution(n: Int, m: Int): Long {\n    return max(n, m) * (n + m - 1) / 2\n}\n\nfun secondSolution(n: Int, m: Int): Long {\n    return (n + m - 1) * n / 2\n}"}
{"kt_path": "darian-catalin-cucer__divide-and-conquer-algorithms__1cea70d/kt.kt", "deepseek-coder-1.3b-base": "import kotlin.math.max\n\nfun main() {\n    val arr = intArrayOf(1, 2, 3, 4, 5, 6, 7, 8, 9, 10)\n    quickSort(arr, 0, arr.size - 1)\n    println(arr.joinToString())\n}\n\nfun quickSort(arr: IntArray, left: Int, right: Int) {\n    if (left < right) {\n        val pivot = partition(arr, left, right)\n        quickSort(arr, left, pivot - 1)\n        quickSort(arr, pivot + 1, right)\n    }\n}\n\nfun partition(arr: IntArray, left: Int, right: Int): Int {\n    val pivot = arr[right]\n    var i = left\n    for (j in left until right) {\n        if (arr[j] < pivot) {\n            i++\n            swap(arr, i, j)\n        }\n    }\n    swap(arr, i, right)\n    return i\n}\n\nfun swap(arr: IntArray, i: Int, j: Int) {\n    val tmp = arr[i]\n    arr[i] = arr[j]\n    arr[j] = tmp\n}"}
{"kt_path": "TonnyL__Windary__39f85cd/Kotlin/src/ThreeSumClosest.kt", "deepseek-coder-1.3b-base": "fun threeSumClosest(nums: IntArray, target: Int): Int {\n    nums.sort()\n    var closest = Int.MAX_VALUE\n    for (i in 0 until nums.size - 2) {\n        var j = i + 1\n        var k = nums.size - 1\n        while (j < k) {\n            val sum = nums[i] + nums[j] + nums[k]\n            if (sum == target) {\n                return target\n            }\n            if (sum < target) {\n                if (target - sum < closest) {\n                    closest = target - sum\n                }\n                j++\n            } else {\n                if (sum - target < closest) {\n                    closest = sum - target\n                }\n                k--\n            }\n        }\n    }\n    return closest\n}"}
{"kt_path": "Javran__leetcode__f3899fe/bulb-switcher/Solution.kt", "deepseek-coder-1.3b-base": "import kotlin.math.floor\nimport kotlin.math.sqrt\n\nclass Solution {\n    companion object {\n        val Companion = Solution()\n    }\n\n    fun bulbSwitch(n: Int): Int {\n        return floor(sqrt(n.toDouble())).toInt()\n    }\n\n    fun main(args: Array<String>) {\n        println(Companion.bulbSwitch(19))\n    }\n}"}
{"kt_path": "TonnyL__Windary__39f85cd/Kotlin/src/NextPermutation.kt", "deepseek-coder-1.3b-base": "import kotlin.math.max\n\nfun nextPermutation(nums: IntArray) {\n    var i = nums.size - 2\n    while (i >= 0 && nums[i] >= nums[i + 1]) {\n        i--\n    }\n    if (i < 0) {\n        return\n    }\n    var j = nums.size - 1\n    while (nums[j] <= nums[i]) {\n        j--\n    }\n    swap(nums, i, j)\n    reverse(nums, i + 1, nums.size - 1)\n}\n\nfun swap(nums: IntArray, i: Int, j: Int) {\n    val temp = nums[i]\n    nums[i] = nums[j]\n    nums[j] = temp\n}\n\nfun reverse(nums: IntArray, i: Int, j: Int) {\n    while (i < j) {\n        swap(nums, i, j)\n        i++\n        j--\n    }\n}"}
{"kt_path": "boris920308__HoOne__8881468/hoon/HoonAlgorithm/src/main/kotlin/programmers/lv01/Lv1_12940.kt", "deepseek-coder-1.3b-base": "fun main() {\n    println(\"- - - - - - - - - -\")\n    println(findGCD(12, 18))\n    println(findLCM(12, 18))\n    println(findGCD(12, 18).toList())\n    println(findLCM(12, 18).toList())\n}\n\nfun findGCD(a: Int, b: Int): Int {\n    return if (b == 0) a else findGCD(b, a % b)\n}\n\nfun findLCM(a: Int, b: Int): Int {\n    return a * b / findGCD(a, b)\n}"}
{"kt_path": "JiangKlijna__leetcode-learning__65a1348/kt/001 Two Sum/TwoSum.kt", "deepseek-coder-1.3b-base": "import java.util.HashMap\n\nclass TwoSum {\n    fun twoSum(nums: IntArray, target: Int): IntArray {\n        val map = HashMap<Int, Int>()\n        for (i in nums.indices) {\n            val diff = target - nums[i]\n            if (map.containsKey(diff)) {\n                return intArrayOf(map[diff]!!, i)\n            }\n            map[nums[i]] = i\n        }\n        return intArrayOf()\n    }\n}"}
{"kt_path": "rupeshsasne__coursera-algorithms-part1__341634c/classroom/src/main/kotlin/com/radix2/algorithms/week1/UnionFind.kt", "deepseek-coder-1.3b-base": "class WeightedQuickUnionWithPathCompressionUF(private val N: Int) {\n    private val id: IntArray = IntArray(N) { it }\n    private val sz: IntArray = IntArray(N) { 1 }\n\n    fun union(p: Int, q: Int) {\n        val pRoot = find(p)\n        val qRoot = find(q)\n        if (pRoot == qRoot) return\n        if (sz[pRoot] < sz[qRoot]) {\n            id[pRoot] = qRoot\n            sz[qRoot] += sz[pRoot]\n        } else {\n            id[qRoot] = pRoot\n            sz[pRoot] += sz[qRoot]\n        }\n    }\n\n    fun find(p: Int): Int {\n        var p = p\n        while (p != id[p]) {\n            p = id[p]\n        }\n        return p\n    }\n}"}
{"kt_path": "boris920308__HoOne__8881468/hoon/HoonAlgorithm/src/main/kotlin/programmers/lv01/Lv1_68935.kt", "deepseek-coder-1.3b-base": "fun main() {\n    println(solution(45))\n    println(solution_1(45))\n}\n\nfun solution(n: Int): Int {\n    return n.toString().reversed().toInt(45)\n}\n\nfun solution_1(n: Int): Int {\n    return n.toString().toInt(10).reversed().toInt(45)\n}"}
{"kt_path": "korilin__DSA-kt__b96ba1b/src/main/kotlin/sort_algorithm/quickSort.kt", "deepseek-coder-1.3b-base": "fun main() {\n    val array = intArrayOf(1, 2, 3, 4, 5)\n    quickSort(array)\n    println(array.contentToString())\n}\n\nfun quickSort(array: IntArray) {\n    quickSort(array, 0, array.size - 1)\n}\n\nprivate fun quickSort(array: IntArray, left: Int, right: Int) {\n    if (left < right) {\n        val pivot = partition(array, left, right)\n        quickSort(array, left, pivot - 1)\n        quickSort(array, pivot + 1, right)\n    }\n}\n\nprivate fun partition(array: IntArray, left: Int, right: Int): Int {\n    var i = left\n    var j = right - 1\n    while (i < j) {\n        if (array[i] > array[right]) {\n            swap(array, i, j)\n            j--\n        } else {\n            i++\n        }\n    }\n    if (array[i] > array[right]) {\n        swap(array, i, right)\n        return i\n    } else {\n        return right\n    }\n}\n\nprivate fun swap(array: IntArray, i: Int, j: Int) {\n    val temp = array[i]\n    array[i] = array[j]\n    array[j] = temp\n}"}
{"kt_path": "gardnerdickson__advent-of-code-2015__4a23ab3/src/day_10.kt", "deepseek-coder-1.3b-base": "class Day10 {\n    companion object {\n        val INSTANCE = Day10()\n    }\n\n    fun part1(input: String): Int {\n        return input.length\n    }\n\n    fun part2(input: String): Int {\n        return input.length\n    }\n}"}
{"kt_path": "gardnerdickson__advent-of-code-2015__4a23ab3/src/day_2.kt", "deepseek-coder-1.3b-base": "package day_2\n\nimport kotlin.io.println\n\nobject Day2 {\n    val INSTANCE = Day2()\n\n    fun part1(input: String): Int {\n        val (depth, distance) = input.split(\" \").map { it.toInt() }\n        return depth * distance\n    }\n\n    fun part2(input: String): Int {\n        val (depth, distance) = input.split(\" \").map { it.toInt() }\n        return depth + distance\n    }\n\n    fun main(args: Array<String>) {\n        val input = readInput(\"day_2_input.txt\")\n        println(part1(input))\n        println(part2(input))\n    }\n}\n\nfun readInput(fileName: String): String {\n    return Day2::class.java.getResource(fileName).readText()\n}"}
{"kt_path": "gardnerdickson__advent-of-code-2015__4a23ab3/src/day_3.kt", "deepseek-coder-1.3b-base": "package day_3\n\nfun main(args: Array<String>) {\n    val day3 = Day3()\n    println(\"Part 1: ${day3.part1(args[0])}\")\n    println(\"Part 2: ${day3.part2(args[0])}\")\n}\n\nclass Day3 {\n    companion object {\n        fun part1(input: String): Int {\n            return input.split(\"\\n\").map { it.toCharArray() }.map { it.map { it.digitToInt() } }.map { it.sum() }.sum()\n        }\n\n        fun part2(input: String): Int {\n            return input.split(\"\\n\").map { it.toCharArray() }.map { it.map { it.digitToInt() } }.map { it.sum() }.sum()\n        }\n    }\n}"}
{"kt_path": "antop-dev__algorithm__9a3e762/src/main/kotlin/kr/co/programmers/P161988.kt", "deepseek-coder-1.3b-base": "package kr.co.programmers\n\nfun main() {\n    val p161988 = P161988()\n    println(p161988.solution(intArrayOf(1, 2, 3, 4, 5)))\n}\n\nclass P161988 {\n    fun solution(sequence: IntArray): Long {\n        return sequence.max()\n    }\n\n    private fun IntArray.max(): Long {\n        var max = this[0]\n        for (i in this.indices) {\n            max = max.coerceAtLeast(this[i])\n        }\n        return max\n    }\n}"}
{"kt_path": "alexjlockwood__bees-and-bombs-compose__0d7a86b/app/src/main/java/com/alexjlockwood/beesandbombs/demos/utils/MathUtils.kt", "deepseek-coder-1.3b-base": "package com.alexjlockwood.beesandbombs.demos.utils\n\nimport kotlin.math.PI\nimport kotlin.math.TWO_PI\nimport kotlin.math.HALF_PI\nimport kotlin.math.dist\nimport kotlin.math.lerp\nimport kotlin.math.map\nimport kotlin.math.toDegrees\nimport kotlin.math.ease\nimport kotlin.math.ease as ease\n\n\nval PI = kotlin.math.PI\nval TWO_PI = kotlin.math.TWO_PI\nval HALF_PI = kotlin.math.HALF_PI\n\nfun dist(x1: Float, y1: Float, x2: Float, y2: Float): Float =\n    kotlin.math.dist(x1, y1, x2, y2)\n\nfun lerp(x1: Float, x2: Float, t: Float): Float =\n    kotlin.math.lerp(x1, x2, t)\n\nfun map(x1: Float, x2: Float, y1: Float, y2: Float, t: Float): Float =\n    kotlin.math.map(x1, x2, y1, y2, t)\n\nfun toDegrees(radians: Float): Float =\n    kotlin.math.toDegrees(radians)\n\nfun ease(t: Float): Float =\n    kotlin.math.ease(t)\n\nfun ease(t: Float, easeFactor: Float): Float =\n    kotlin.math.ease(t, easeFactor)"}
{"kt_path": "chengw315__daily-study__501b881/letcode/src/main/java/daily/LeetCodeLCP13.kt", "deepseek-coder-1.3b-base": "class SolutionLCP13 {\n    fun minimalSteps(s: String): Int {\n        val steps = IntArray(s.length)\n        for (i in s.indices) {\n            if (s[i] == '#') {\n                steps[i] = Int.MAX_VALUE\n            } else {\n                steps[i] = if (i == 0) 0 else steps[i - 1] + 1\n                if (i > 1 && s[i - 2] == 'M') {\n                    steps[i] = minOf(steps[i], steps[i - 2] + 1)\n                }\n            }\n        }\n        return steps.last()\n    }\n}"}
{"kt_path": "rajatenzyme__Coding-Journey__65a0570/Algo_Ds_Notes-master/Algo_Ds_Notes-master/Floyd_Warshall_Algorithm/Floyd_Warshall_Algorithm.kt", "deepseek-coder-1.3b-base": "public final class Floyd_Warshall_AlgorithmKt {\n  public static final void main(java.lang.String[]) {\n    var args: java.lang.String = kotlin.jvm.internal.Intrinsics.checkNotNullParameter(args, \"args\")\n    FloydWarshall.INSTANCE.doCalcs(args)\n  }\n}"}
{"kt_path": "brunorene__advent_of_code_2018__0cb6814/src/main/kotlin/advent/of/code/day17/Solution.kt", "deepseek-coder-1.3b-base": "import java.io.File\nimport kotlin.text.Regex\n\nval input = File(\"day17.txt\")\n\nval multipleCoord = Regex(\"(x|y)=([.0-9]+)\\\\.\\\\.([.0-9]+)\")\n\nval oneCoord = Regex(\"(x|y)=([.0-9]+)\")\n\nfun part1(): Int {\n    val clay = Underground(input).getClay()\n    return clay.size\n}\n\nfun part2(): Int {\n    return 2\n}\n\nclass Underground(val input: File) {\n    fun getClay(): Set<Pair<Int, Int>> {\n        val clay = mutableSetOf<Pair<Int, Int>>()\n        input.bufferedReader().forEachLine { line ->\n            val match = multipleCoord.find(line)\n            if (match != null) {\n                val (x, y1, y2) = match.destructured\n                val y1 = y1.toInt()\n                val y2 = y2.toInt()\n                for (y in y1..y2) {\n                    clay.add(Pair(x.toInt(), y))\n                }\n            } else {\n                val match = oneCoord.find(line)\n                if (match != null) {\n                    val (x, y) = match.destructured\n                    clay.add(Pair(x.toInt(), y.toInt()))\n                }\n            }\n        }\n        return clay\n    }\n}"}
{"kt_path": "Simplation__OpenSourceRepository__d45feaa/算法/一维数组的动态和1480.kt", "deepseek-coder-1.3b-base": "fun main() {\n    val nums = intArrayOf(1, 2, 3, 4, 5)\n    val newNum = \"newNum\"\n    checkNotNullParameter(newNum, \"nums\")\n    val sum = sumArr(nums, nums, nums.size)\n    println(\"sum: $sum\")\n}\n\nfun sumArr(arr1: IntArray, arr2: IntArray, size: Int): Int {\n    var sum = 0\n    for (i in 0 until size) {\n        sum += arr1[i] + arr2[i]\n    }\n    return sum\n}\n\nfun checkNotNullParameter(parameter: String, name: String) {\n    if (parameter.isEmpty()) {\n        throw IllegalArgumentException(\"$name cannot be empty\")\n    }\n}"}
{"kt_path": "jimmymorales__project-euler__e881cad/src/main/kotlin/Problem3.kt", "deepseek-coder-1.3b-base": "fun main() {\n    println(solution3(600851475143L))\n}\n\nprivate fun solution3(n: Long): Long {\n    var x = n\n    var y = n\n    while (true) {\n        if (x % 2 == 0L) {\n            x /= 2\n        } else {\n            y /= 2\n        }\n        if (x == 1L) {\n            return y\n        }\n    }\n}"}
{"kt_path": "age-series__ElectricalAge2__86d843f/src/main/kotlin/org/eln2/mc/data/SegmentTree.kt", "deepseek-coder-1.3b-base": "import org.eln2.mc.data.SegmentTreeNode\n\nclass SegmentTree<T>(root: SegmentTreeNode<T>) {\n    val root = root\n\n    fun queryOrNull(x: Double): T? {\n        if (root.contains(x)) {\n            return root.query(x)\n        }\n        return null\n    }\n\n    fun query(x: Double): T {\n        require(root.contains(x))\n        return root.query(x)\n    }\n}"}
{"kt_path": "ykrytsyn__leetcode-in-kotlin__0acf2a6/src/main/kotlin/leetcode/UniquePaths.kt", "deepseek-coder-1.3b-base": "class UniquePaths {\n    fun dynamicProgramming(m: Int, n: Int): Int {\n        val dp = Array(m) { IntArray(n) }\n        for (i in 0 until m) {\n            dp[i][0] = 1\n        }\n        for (j in 0 until n) {\n            dp[0][j] = 1\n        }\n        for (i in 1 until m) {\n            for (j in 1 until n) {\n                dp[i][j] = dp[i - 1][j] + dp[i][j - 1]\n            }\n        }\n        return dp[m - 1][n - 1]\n    }\n\n    fun recursive(m: Int, n: Int): Int {\n        if (m == 1 || n == 1) {\n            return 1\n        }\n        return recursive(m - 1, n) + recursive(m, n - 1)\n    }\n}"}
{"kt_path": "quincy__euler-kotlin__01d96f6/src/main/kotlin/com/quakbo/euler/Euler6.kt", "deepseek-coder-1.3b-base": "fun main(args: Array<String>) {\n    println(squareOfSums(1..100) - sumOfSquares(1..100))\n}\n\nfun squareOfSums(range: IntRange) = range.sumOfInt { it * it }\n\nfun sumOfSquares(range: IntRange) = range.sumOf { it * it }"}
{"kt_path": "Kirchberg__BigDataPL__b6a459a/LR7/src/main/kotlin/Task1V3.kt", "deepseek-coder-1.3b-base": "fun task1V3() {\n    val wordChainFinder = WordChainFinder(listOf(\"java\", \"android\", \"kotlin\", \"rust\"))\n    val longestWordChain = wordChainFinder.findLongestWordChain()\n    println(\"Longest word chain: $longestWordChain\")\n}"}
{"kt_path": "fredyw__leetcode__a59d77c/src/main/kotlin/leetcode/Problem2064.kt", "deepseek-coder-1.3b-base": "import kotlin.math.max\n\nclass Problem2064 {\n    fun minimizedMaximum(n: Int, quantities: IntArray): Int {\n        var max = quantities.max()\n        var min = quantities.min()\n        var sum = quantities.sum()\n        var count = 0\n        while (sum > n) {\n            sum -= max\n            max = max - 1\n            count++\n        }\n        return count\n    }\n\n    fun canDistribute(n: Int, quantities: IntArray, k: Int): Boolean {\n        var sum = quantities.sum()\n        var count = 0\n        while (sum > n) {\n            sum -= max(quantities)\n            quantities[count]--\n            count++\n        }\n        return count == k\n    }\n}"}
