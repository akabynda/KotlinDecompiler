{"kt_path": "remisultan__multiarm-bandit-algorithm-kotlin__ead934d/core-bandit/src/main/kotlin/org/rsultan/bandit/algorithms/BanditAlgorithm.kt", "CodeLlama-7B-KStack-clean": "public interface BanditAlgorithm {\n    fun selectArm(): Int\n    fun update(arm: Int, reward: Float)\n}"}
{"kt_path": "n81ur3__kotlin-coding-challenges__fdc5941/src/main/kotlin/adventofcode2018/Day22ModeMaze.kt", "CodeLlama-7B-KStack-clean": "class Day22ModeMaze {\n    fun main(args: Array<String>) {\n\n    }\n}"}
{"kt_path": "n81ur3__kotlin-coding-challenges__fdc5941/src/main/kotlin/adventofcode2017/Day21FractalArt.kt", "CodeLlama-7B-KStack-clean": "class Day21FractalArt {\n    fun fractalArt() {\n    }\n}"}
{"kt_path": "n81ur3__kotlin-coding-challenges__fdc5941/src/main/kotlin/adventofcode2017/Day03SpiralMemory.kt", "CodeLlama-7B-KStack-clean": "class Day03SpiralMemory {\n\n}"}
{"kt_path": "n81ur3__kotlin-coding-challenges__fdc5941/src/main/kotlin/adventofcode2019/Day03CrossedWires.kt", "CodeLlama-7B-KStack-clean": "fun main() {\n    val input = readInput(\"Day03CrossedWires\")\n    val wires = input.split(\"\\n\").map { it.split(\",\") }\n    val wire1 = wires[0].map { it.toDirection() }\n    val wire2 = wires[1].map { it.toDirection() }\n\n    val intersections = wire1.intersect(wire2.toSet())\n    val intersection = intersections.map { it.toPoint() }.minBy { it.manhattanDistance() }\n    println(\"Closest intersection: $intersection\")\n\n    val intersectionSteps = intersections.map { wire1.indexOf(it) + wire2.indexOf(it) }.min()\n    println(\"Steps to intersection: $intersectionSteps\")\n}\n\nprivate fun String.toDirection(): Direction {\n    val direction = when (this[0]) {\n        'R' -> Direction.RIGHT\n        'L' -> Direction.LEFT\n        'U' -> Direction.UP\n        'D' -> Direction.DOWN\n        else -> throw IllegalArgumentException(\"Unknown direction: $this\")\n    }\n    val steps = this.substring(1).toInt()\n    return direction.move(steps)\n}\n\nprivate fun Point.toPoint(): Point {\n    return Point(x, y)\n}\n\nprivate fun Point.manhattanDistance(): Int {\n    return Math.abs(x) + Math.abs(y)\n}\n\nprivate fun List<Direction>.indexOf(point: Point): Int {\n    return this.indexOfFirst { it.point == point }\n}\n\nprivate data class Point(val x: Int, val y: Int)\n\nprivate enum class Direction(val dx: Int, val dy: Int) {\n    RIGHT(1, 0),\n    LEFT(-1, 0),\n    UP(0, -1),\n    DOWN(0, 1);\n\n    val point: Point\n        get() = Point(x = dx, y = dy)\n\n    fun move(steps: Int): Direction {\n        return Direction(dx * steps, dy * steps)\n    }\n}"}
{"kt_path": "n81ur3__kotlin-coding-challenges__fdc5941/src/main/kotlin/adventofcode2018/Day04ReposeRecord.kt", "CodeLlama-7B-KStack-clean": "class Day04ReposeRecord {\n\n}"}
{"kt_path": "n81ur3__kotlin-coding-challenges__fdc5941/src/main/kotlin/adventofcode2017/Day08LikeRegisters.kt", "CodeLlama-7B-KStack-clean": "class LikeRegisters {\n\n}"}
{"kt_path": "n81ur3__kotlin-coding-challenges__fdc5941/src/main/kotlin/adventofcode2018/Day11ChronalCharge.kt", "CodeLlama-7B-KStack-clean": "class Day11ChronalCharge {\n\n}"}
{"kt_path": "n81ur3__kotlin-coding-challenges__fdc5941/src/main/kotlin/adventofcode2020/Day19MonsterMessage.kt", "CodeLlama-7B-KStack-clean": "fun main() {\n    println(\"Hello World!\")\n}"}
{"kt_path": "n81ur3__kotlin-coding-challenges__fdc5941/src/main/kotlin/adventofcode2017/Day07RecursiveCircus.kt", "CodeLlama-7B-KStack-clean": "class Day07RecursiveCircus {\n    fun main(args: Array<String>) {\n        println(\"Hello World!\")\n    }\n}"}
{"kt_path": "n81ur3__kotlin-coding-challenges__fdc5941/src/main/kotlin/adventofcode2019/Day12TheNbodyProblem.kt", "CodeLlama-7B-KStack-clean": "class Day12TheNbodyProblem {\n    fun main() {\n        println(\"Hello World!\")\n    }\n}"}
{"kt_path": "n81ur3__kotlin-coding-challenges__fdc5941/src/main/kotlin/adventofcode2018/Day15BeverageBandits.kt", "CodeLlama-7B-KStack-clean": "class Day15BeverageBandits() {\n\n}"}
{"kt_path": "n81ur3__kotlin-coding-challenges__fdc5941/src/main/kotlin/adventofcode2020/Day07HandyHaversacks.kt", "CodeLlama-7B-KStack-clean": "class Day07HandyHaversacks {\n    fun main() {\n        println(\"Hello World!\")\n    }\n}"}
{"kt_path": "n81ur3__kotlin-coding-challenges__fdc5941/src/main/kotlin/adventofcode2018/Day07TheSumOfItsParts.kt", "CodeLlama-7B-KStack-clean": "class Day07TheSumOfItsParts {\n    constructor()\n}"}
{"kt_path": "n81ur3__kotlin-coding-challenges__fdc5941/src/main/kotlin/adventofcode2017/Day25TheHaltingProblem.kt", "CodeLlama-7B-KStack-clean": "class Day25TheHaltingProblem {\n    fun main() {\n        println(\"Hello World!\")\n    }\n}"}
{"kt_path": "n81ur3__kotlin-coding-challenges__fdc5941/src/main/kotlin/adventofcode2019/Day06UniversalOrbitMap.kt", "CodeLlama-7B-KStack-clean": "class Day06UniversalOrbitMap {\n    fun main() {\n        val input = \"Day06UniversalOrbitMap.txt\".fileToText()\n        val orbits = input.lines().map { it.split(\")\") }\n        val orbitsMap = mutableMapOf<String, String>()\n        orbits.forEach { orbitsMap[it[1]] = it[0] }\n        val you = orbitsMap[\"YOU\"]!!\n        val san = orbitsMap[\"SAN\"]!!\n        var youOrbits = 0\n        var sanOrbits = 0\n        var youOrbit = you\n        var sanOrbit = san\n        while (true) {\n            if (youOrbit == sanOrbit) {\n                break\n            }\n            if (youOrbit == \"COM\") {\n                youOrbits++\n                youOrbit = orbitsMap[youOrbit]!!\n                continue\n            }\n            if (sanOrbit == \"COM\") {\n                sanOrbits++\n                sanOrbit = orbitsMap[sanOrbit]!!\n                continue\n            }\n            youOrbits++\n            sanOrbits++\n            youOrbit = orbitsMap[youOrbit]!!\n            sanOrbit = orbitsMap[sanOrbit]!!\n        }\n        println(youOrbits + sanOrbits - 2)\n    }\n}"}
{"kt_path": "n81ur3__kotlin-coding-challenges__fdc5941/src/main/kotlin/adventofcode2019/Day10MonitoringStation.kt", "CodeLlama-7B-KStack-clean": "class Day10MonitoringStation {\n\n}"}
{"kt_path": "n81ur3__kotlin-coding-challenges__fdc5941/src/main/kotlin/adventofcode2018/Day06ChronalCoordinates.kt", "CodeLlama-7B-KStack-clean": "class Day06ChronalCoordinates {\n\n}"}
{"kt_path": "n81ur3__kotlin-coding-challenges__fdc5941/src/main/kotlin/adventofcode2020/Day21AllergenAssessment.kt", "CodeLlama-7B-KStack-clean": "class Day21AllergenAssessment {\n    fun main() {\n        val input = readInput(\"Day21AllergenAssessment\")\n        val ingredients = mutableListOf<String>()\n        val allergens = mutableListOf<String>()\n        for (line in input) {\n            val (ingredientsLine, allergensLine) = line.split(\" (contains \")\n            ingredients.addAll(ingredientsLine.split(\" \"))\n            allergens.addAll(allergensLine.dropLast(1).split(\", \"))\n        }\n        val allergensMap = mutableMapOf<String, MutableList<String>>()\n        for (allergen in allergens) {\n            allergensMap[allergen] = mutableListOf()\n        }\n        for (ingredient in ingredients) {\n            for (allergen in allergens) {\n                if (ingredient.contains(allergen)) {\n                    allergensMap[allergen]?.add(ingredient)\n                }\n            }\n        }\n        val allergensIngredients = mutableMapOf<String, String>()\n        while (allergensMap.isNotEmpty()) {\n            val allergen = allergensMap.keys.first()\n            val ingredient = allergensMap[allergen]!!.first()\n            allergensMap.remove(allergen)\n            for (allergen2 in allergensMap.keys) {\n                allergensMap[allergen2]?.remove(ingredient)\n            }\n            allergensIngredients[allergen] = ingredient\n        }\n        val allergensIngredientsList = allergensIngredients.toList().sortedBy { it.first }\n        val allergensIngredientsList2 = allergensIngredientsList.sortedBy { it.second }\n        println(allergensIngredientsList.map { it.second })\n        println(allergensIngredientsList2.map { it.second })\n    }\n}"}
{"kt_path": "n81ur3__kotlin-coding-challenges__fdc5941/src/main/kotlin/adventofcode2017/Day24ElectromagneticMoat.kt", "CodeLlama-7B-KStack-clean": "class Day24ElectromagneticMoat {\n\n}"}
{"kt_path": "n81ur3__kotlin-coding-challenges__fdc5941/src/main/kotlin/adventofcode2018/Day12SubterraneanSustainability.kt", "CodeLlama-7B-KStack-clean": "package adventofcode2018\n\nclass Day12SubterraneanSustainability {\n    constructor()\n}"}
{"kt_path": "n81ur3__kotlin-coding-challenges__fdc5941/src/main/kotlin/adventofcode2018/Day23ExperimentalEmergencyTeleportation.kt", "CodeLlama-7B-KStack-clean": "class Day23ExperimentalEmergencyTeleportation {\n    constructor()\n}"}
{"kt_path": "alebedev__aoc2022__d6ba46b/src/main/kotlin/Map.kt", "CodeLlama-7B-KStack-clean": "class MapKt {\n    companion object {\n        fun main() {\n            AocMap.INSTANCE.solve()\n        }\n    }\n}"}
{"kt_path": "andrewrlee__adventOfCode2020__a9c21a6/src/main/kotlin/File09.kt", "CodeLlama-7B-KStack-clean": "class Challenge09 {\n    fun solve() {\n        val a = 1\n        val b = 2\n        val c = 3\n        val d = 4\n        val e = 5\n        val f = 6\n        val g = 7\n        val h = 8\n        val i = 9\n        val j = 10\n        val k = 11\n        val l = 12\n        val m = 13\n        val n = 14\n        val o = 15\n        val p = 16\n        val q = 17\n        val r = 18\n        val s = 19\n        val t = 20\n        val u = 21\n        val v = 22\n        val w = 23\n        val x = 24\n        val y = 25\n        val z = 26\n    }\n}"}
{"kt_path": "andrewrlee__adventOfCode2020__a9c21a6/src/main/kotlin/File08.kt", "CodeLlama-7B-KStack-clean": "class Challenge08 {\n    fun solve() {\n        val a = 1\n        val b = 2\n        val c = 3\n        val d = 4\n        val e = 5\n        val f = 6\n        val g = 7\n        val h = 8\n        val i = 9\n        val j = 10\n        val k = 11\n        val l = 12\n        val m = 13\n        val n = 14\n        val o = 15\n        val p = 16\n        val q = 17\n        val r = 18\n        val s = 19\n        val t = 20\n        val u = 21\n        val v = 22\n        val w = 23\n        val x = 24\n        val y = 25\n        val z = 26\n    }\n}"}
{"kt_path": "andrewrlee__adventOfCode2020__a9c21a6/src/main/kotlin/File02.kt", "CodeLlama-7B-KStack-clean": "class Challenge02 {\n    fun solve() {\n        val a = 1\n        val b = 2\n        val c = 3\n        val d = 4\n        val e = 5\n        val f = 6\n        val g = 7\n        val h = 8\n        val i = 9\n        val j = 10\n        val k = 11\n        val l = 12\n        val m = 13\n        val n = 14\n        val o = 15\n        val p = 16\n        val q = 17\n        val r = 18\n        val s = 19\n        val t = 20\n        val u = 21\n        val v = 22\n        val w = 23\n        val x = 24\n        val y = 25\n        val z = 26\n    }\n}"}
{"kt_path": "andrewrlee__adventOfCode2020__a9c21a6/src/main/kotlin/File07.kt", "CodeLlama-7B-KStack-clean": "class Challenge07 {\n    fun solve() {\n        val a = 1\n        val b = 2\n        val c = 3\n        val d = 4\n        val e = 5\n        val f = 6\n        val g = 7\n        val h = 8\n        val i = 9\n        val j = 10\n        val k = 11\n        val l = 12\n        val m = 13\n        val n = 14\n        val o = 15\n        val p = 16\n        val q = 17\n        val r = 18\n        val s = 19\n        val t = 20\n        val u = 21\n        val v = 22\n        val w = 23\n        val x = 24\n        val y = 25\n        val z = 26\n        println(\"The sum of all the numbers from 1 to 26 is: ${a + b + c + d + e + f + g + h + i + j + k + l + m + n + o + p + q + r + s + t + u + v + w + x + y + z}\")\n    }\n}\n\nfun main() {\n    Challenge07().solve()\n}"}
{"kt_path": "charlesfranciscodev__codingame__3ec8060/puzzles/kotlin/src/war/war.kt", "CodeLlama-7B-KStack-clean": "fun main(args: Array<String>) {\n    val game = Game()\n    game.play()\n}\n\nclass Game {\n    fun play() {\n        println(\"Hello World!\")\n    }\n}"}
{"kt_path": "al-volkov__spbu_2020_kotlin_homeworks__5049681/src/main/kotlin/homework_5/Task1.kt", "CodeLlama-7B-KStack-clean": "fun isNumber(s: String): Boolean {\n    return s.toIntOrNull() != null\n}"}
{"kt_path": "iafsilva__codility-lessons__5d86aef/src/main/kotlin/lesson3/FrogJmp.kt", "CodeLlama-7B-KStack-clean": "class FrogJmp {\n    fun solution(x: Int, y: Int, d: Int): Int {\n        val n = y - x\n        val z = n / d\n        val ans = if (n % d != 0) z + 1 else z\n        return ans\n    }\n}"}
{"kt_path": "mikhalchenko-alexander__advent-of-kotlin-2018-week1__c483ade/src/main/kotlin/com/anahoret/pathfinding/MarkingWayOnMap.kt", "CodeLlama-7B-KStack-clean": "fun addPath(map: String): String {\n    return Graph.INSTANCE.getMapWithPath(map)\n}"}
{"kt_path": "charlesfranciscodev__codingame__3ec8060/puzzles/kotlin/src/surface/surface.kt", "CodeLlama-7B-KStack-clean": "class Grid {\n    private val grid: Array<CharArray> = Array(100) { CharArray(100) }\n    private var index = 0\n    private var land = 'L'\n    private var water = 'W'\n\n    fun readGameInput() {\n        for (i in 0..99) {\n            val input = readLine()!!\n            for (j in 0..99) {\n                grid[i][j] = input[j]\n            }\n        }\n    }\n\n    fun test() {\n        for (i in 0..99) {\n            for (j in 0..99) {\n                if (grid[i][j] == land) {\n                    index++\n                }\n            }\n        }\n    }\n}\n\nfun main(args: Array<String>) {\n    val surface = Grid()\n    surface.readGameInput()\n    surface.test()\n}"}
{"kt_path": "andrew-suprun__AoC-2023__dd5f53e/src/main/kotlin/day03_oop/day03_oop.kt", "CodeLlama-7B-KStack-clean": "class Part1 {\n    val input = \"day03_oop.data\"\n\n    fun run() {\n        val data = input.readLines()\n        val gamma = data.map { it.toList() }.transpose().map { it.mostCommon() }.joinToString(\"\")\n        val epsilon = data.map { it.toList() }.transpose().map { it.leastCommon() }.joinToString(\"\")\n        println(\"${gamma.toInt(2)} * ${epsilon.toInt(2)} = ${gamma.toInt(2) * epsilon.toInt(2)}\")\n    }\n}\n\nclass Part2 {\n    val input = \"day03_oop.data\"\n\n    fun run() {\n        val data = input.readLines()\n        val oxygen = data.filter { it.toList() }.transpose().map { it.mostCommon() }.joinToString(\"\")\n        val co2 = data.filter { it.toList() }.transpose().map { it.leastCommon() }.joinToString(\"\")\n        println(\"${oxygen.toInt(2)} * ${co2.toInt(2)} = ${oxygen.toInt(2) * co2.toInt(2)}\")\n    }\n}"}
{"kt_path": "getnahid__programing-problem-solves-kotlin__589c392/CyclicRotation.kt", "CodeLlama-7B-KStack-clean": "fun solution(A: IntArray, K: Int): IntArray {\n    val N = A.size\n    val B = IntArray(N)\n    var i = 0\n    var j = N\n    while (i < N) {\n        B[i] = A[(i + K) % N]\n        i++\n    }\n    return B\n}"}
{"kt_path": "linisme__LeetCodeInKotlin__4382afc/LongestPalindrome.kt", "CodeLlama-7B-KStack-clean": "fun longestPalindrome(s: String): String {\n    val len = s.length\n    if (len < 2) return s\n    var start = 0\n    var end = 0\n    for (i in 0 until len) {\n        val len1 = expandAroundCenter(s, i, i)\n        val len2 = expandAroundCenter(s, i, i + 1)\n        val maxLen = Math.max(len1, len2)\n        if (maxLen > end - start) {\n            start = i - (maxLen - 1) / 2\n            end = i + maxLen / 2\n        }\n    }\n    return s.substring(start, end + 1)\n}\n\nprivate fun expandAroundCenter(s: String, left: Int, right: Int): Int {\n    var left = left\n    var right = right\n    while (left >= 0 && right < s.length && s[left] == s[right]) {\n        left--\n        right++\n    }\n    return right - left - 1\n}"}
{"kt_path": "iafsilva__codility-lessons__5d86aef/src/main/kotlin/lesson2/OddOccurrencesInArray.kt", "CodeLlama-7B-KStack-clean": "class OddOccurrencesInArray {\n    fun solution(A: IntArray): Int {\n        var res = 0\n        var xor = 0\n        var i = 0\n        var j = A.size\n        while (i < j) {\n            xor = xor xor A[i]\n            if (xor and 1 == 1) break\n            i++\n        }\n        i++\n        while (i < j) {\n            if (A[i] xor xor and 1 == 1) res = A[i]\n            i++\n        }\n        return res\n    }\n}"}
{"kt_path": "jjeda__playground__5d1ee6c/src/oop/algorithm/ProgressionNextNumber.kt", "CodeLlama-7B-KStack-clean": "class ProgressionNextNumber {\n    fun solution(a: IntArray): Int {\n        val helper = ProgressionHelper(a.toList())\n        return helper.nextInt()\n    }\n}\n\nclass ProgressionHelper(val list: List<Int>) {\n    fun nextInt(): Int {\n        val progression = list.toIntArray()\n        val progressionSize = progression.size\n        val progressionLast = progression[progressionSize - 1]\n        val progressionFirst = progression[0]\n        val progressionDiff = progressionLast - progressionFirst\n        val progressionDiffSign = progressionDiff.sign\n        val progressionDiffAbs = progressionDiff.absoluteValue\n        val progressionDiffAbsMod = progressionDiffAbs % (progressionSize - 1)\n        val progressionDiffAbsModSign = progressionDiffAbsMod.sign\n        val progressionDiffAbsModSignMod = progressionDiffAbsModSign.mod(progressionSize - 1)\n        val progressionDiffAbsModSignModPlusOne = (progressionDiffAbsModSignMod + 1).mod(progressionSize - 1)\n        val progressionDiffAbsModSignModPlusOneInt = progressionDiffAbsModSignModPlusOne.toInt()\n        val progressionDiffAbsModSignModPlusOneIntPlusOne = (progressionDiffAbsModSignModPlusOneInt + 1).mod(progressionSize - 1)\n        val progressionDiffAbsModSignModPlusOneIntPlusOneInt = progressionDiffAbsModSignModPlusOneIntPlusOne.toInt()\n        val progressionDiffAbsModSignModPlusOneIntPlusOneIntPlusOne = (progressionDiffAbsModSignModPlusOneIntPlusOneInt + 1).mod(progressionSize - 1)\n        val progressionDiffAbsModSignModPlusOneIntPlusOneIntPlusOneInt = progressionDiffAbsModSignModPlusOneIntPlusOneIntPlusOne.toInt()\n        val progressionDiffAbsModSignModPlusOneIntPlusOneIntPlusOneIntPlusOne = (progressionDiffAbsModSignModPlusOneIntPlusOneIntPlusOneInt + 1).mod(progressionSize - 1)\n        val progressionDiffAbsModSignModPlusOneIntPlusOneIntPlusOneIntPlusOneInt = progressionDiffAbsModSignModPlusOneIntPlusOneIntPlusOneIntPlusOne.toInt()\n        val progressionDiffAbsModSignModPlusOneIntPlusOneIntPlusOneIntPlusOneIntPlusOne = (progressionDiffAbsModSignModPlusOneIntPlusOneIntPlusOneIntPlusOneInt + 1).mod(progressionSize - 1)\n        val progressionDiffAbsModSignModPlusOneIntPlusOneIntPlusOneIntPlusOneIntPlusOneIntPlusOne = (progressionDiffAbsModSignModPlusOneIntPlusOneIntPlusOneIntPlusOneIntPlusOneInt + 1).mod(progressionSize - 1)\n        val progressionDiffAbsModSignModPlusOneIntPlusOneIntPlusOneIntPlusOneIntPlusOneIntPlusOneIntPlusOne = (progressionDiffAbsModSignModPlusOneIntPlusOneIntPlusOneIntPlusOneIntPlusOneIntPlusOneInt + 1).mod(progressionSize - 1)\n        val progressionDiffAbsModSignModPlusOneIntPlusOneIntPlusOneIntPlusOneIntPlusOneIntPlusOneIntPlusOneIntPlusOne = (progressionDiffAbsModSignModPlusOneIntPlusOneIntPlusOneIntPlusOneIntPlusOneIntPlusOneIntPlusOneInt + 1).mod(progressionSize - 1)\n        val progressionDiffAbsModSignModPlusOneIntPlusOneIntPlusOneIntPlusOneIntPlusOneIntPlusOneIntPlusOneIntPlusOneIntPlusOne = (progressionDiffAbsModSignModPlusOneIntPlusOneIntPlusOneIntPlusOneIntPlusOneIntPlusOneIntPlusOneInt + 1).mod(progressionSize - 1)\n        val progressionDiffAbsModSignModPlusOneIntPlusOneIntPlusOneIntPlusOneIntPlusOneIntPlusOneIntPlusOneIntPlusOneIntPlusOneIntPlusOne = (progressionDiffAbsModSignModPlusOneIntPlusOneIntPlusOneIntPlusOneIntPlusOneIntPlusOneIntPlusOneInt + 1).mod(progressionSize - 1)\n        val progressionDiffAbsModSignModPlusOneIntPlusOneIntPlusOneIntPlusOneIntPlusOneIntPlusOneIntPlusOneIntPlusOneIntPlusOneIntPlusOneIntPlusOne = (progressionDiffAbsModSignModPlusOneIntPlusOneIntPlusOneIntPlusOneIntPlusOneIntPlusOneIntPlusOneInt + 1).mod(progressionSize - 1)\n        val progressionDiffAbsModSignModPlusOneIntPlusOneIntPlusOneIntPlusOneIntPlusOneIntPlusOneIntPlusOneIntPlusOneIntPlusOneIntPlusOneIntPlusOneIntPlusOne = (progressionDiffAbsModSignModPlusOneIntPlusOneIntPlusOneIntPlusOneIntPlusOneIntPlusOneIntPlusOneInt + 1).mod(progressionSize - 1)\n        val progressionDiffAbsModSignModPlusOneIntPlusOneIntPlusOneIntPlusOneIntPlusOneIntPlusOneIntPlusOneIntPlusOneIntPlusOneIntPlusOneIntPlusOneIntPlusOneIntPlusOne = (progressionDiffAbsModSignModPlusOneIntPlusOneIntPlusOneIntPlusOneIntPlusOneIntPlusOneIntPlusOneInt + 1).mod(progressionSize - 1)\n        val progressionDiffAbsModSignModPlusOneIntPlusOneIntPlusOneIntPlusOneIntPlusOneIntPlusOneIntPlusOneIntPlusOneIntPlusOneIntPlusOneIntPlusOneIntPlusOneIntPlusOneIntPlusOne = (progressionDiffAbsModSignModPlusOneIntPlusOneIntPlusOneIntPlusOneIntPlusOneIntPlusOneIntPlusOneInt + 1).mod(progressionSize - 1)\n        val progressionDiffAbsModSignModPlusOneIntPlusOneIntPlusOneIntPlusOneIntPlusOneIntPlusOneIntPlusOneIntPlusOneIntPlusOneIntPlusOneIntPlusOneIntPlusOneIntPlusOneIntPlusOneIntPlusOne = (progressionDiffAbsModSignModPlusOneIntPlusOneIntPlusOneIntPlusOneIntPlusOneIntPlusOneIntPlusOneInt + 1).mod(progressionSize - 1)\n        val progressionDiffAbsModSignModPlusOneIntPlusOneIntPlusOneIntPlusOneIntPlusOneIntPlusOneIntPlusOneIntPlusOneIntPlusOneIntPlusOneIntPlusOneIntPlusOneIntPlusOneIntPlusOneIntPlusOneIntPlusOne = (progressionDiffAbsModSignModPlusOneIntPlusOneIntPlusOneIntPlusOneIntPlusOneIntPlusOneIntPlusOneInt + 1).mod(progressionSize - 1)\n        val progressionDiffAbsModSignModPlusOneIntPlusOneIntPlusOneIntPlusOneIntPlusOneIntPlusOneIntPlusOneIntPlusOneIntPlusOneIntPlusOneIntPlusOneIntPlusOneIntPlusOneIntPlusOneIntPlusOneIntPlusOneIntPlusOneIntPlusOne = (progressionDiffAbsModSignModPlusOneIntPlusOneIntPlusOneIntPlusOneIntPlusOneIntPlusOneIntPlusOneInt + 1).mod(progressionSize - 1)\n        val progressionDiffAbsModSignModPlusOneIntPlusOneIntPlusOneIntPlusOneIntPlusOneIntPlusOneIntPlusOneIntPlusOneIntPlusOneIntPlusOneIntPlusOneIntPlusOneIntPlusOneIntPlusOneIntPlusOneIntPlusOneIntPlusOneIntPlusOneIntPlusOneIntPlusOne = (progressionDiffAbsModSignModPlusOneIntPlusOneIntPlusOneIntPlus"}
{"kt_path": "linisme__LeetCodeInKotlin__4382afc/LengthOfLongestSubstring.kt", "CodeLlama-7B-KStack-clean": "fun lengthOfLongestSubstring(s: String): Int {\n    val map = HashMap<Char, Int>()\n    var max = 0\n    var i = 0\n    var j = 0\n    while (i < s.length && j < s.length) {\n        if (map.containsKey(s[j])) {\n            i = Math.max(map.get(s[j])!! + 1, i)\n        }\n        map.put(s[j], j)\n        max = Math.max(j - i + 1, max)\n        j++\n    }\n    return max\n}"}
{"kt_path": "nschulzke__mancala-puzzle-solver__b130d3b/src/main/kotlin/Main.kt", "CodeLlama-7B-KStack-clean": "private val mancalaIndices = setOf(6, 13)"}
{"kt_path": "sysion__DataStructureAlgorithmKt__6f9afda/TwoSumLessThanTarget.kt", "CodeLlama-7B-KStack-clean": "fun main() {\n    val intArray = intArrayOf(10, 20, 30)\n    val target = 15\n    SumTwoNumbersLessThanTarget(intArray, target)\n}\n\nfun SumTwoNumbersLessThanTarget(intArray: IntArray, target: Int): Int {\n    var sum = -1\n    for (i in intArray.indices) {\n        for (j in intArray.indices) {\n            if (i != j && intArray[i] + intArray[j] < target) {\n                sum = intArray[i] + intArray[j]\n            }\n        }\n    }\n    return sum\n}"}
{"kt_path": "linisme__LeetCodeInKotlin__4382afc/FineMedianSortedArrays.kt", "CodeLlama-7B-KStack-clean": "fun main(args: Array<String>) {\n    val solution = FindMedianSortedArraysSolution()\n    val nums1 = intArrayOf(0, 2)\n    val nums2 = intArrayOf(1, 3)\n    val result = solution.findMedianSortedArrays(nums1, nums2)\n    println(result)\n}"}
{"kt_path": "n81ur3__kotlin-coding-challenges__fdc5941/src/main/kotlin/adventofcode2018/Day18SettlersOfTheNorthPole.kt", "CodeLlama-7B-KStack-clean": "fun hash(input: List<List<AreaElement>>): Int {\n    var i = 0\n    var list = input\n    return list.hashCode()\n}\n\nclass Day18SettlersOfTheNorthPole {\n    constructor()\n}"}
{"kt_path": "iafsilva__codility-lessons__5d86aef/src/main/kotlin/lesson3/PermMissingElem.kt", "CodeLlama-7B-KStack-clean": "fun solution(A: IntArray): Int {\n    if (A.size == 1 && A[0] != 1) return 1\n    A.sort()\n    var i = 0\n    var n = A.size\n    while (i < n) {\n        if (A[i] != i + 1) return i + 1\n        i++\n    }\n    return A.size + 1\n}"}
{"kt_path": "getnahid__programing-problem-solves-kotlin__589c392/OddOccurrencesInArray.kt", "CodeLlama-7B-KStack-clean": "fun solution(A: IntArray): Int {\n    A.sort()\n    val n = A.size\n    var i = 1\n    var j = n - 1\n    var result = 0\n    while (i < j) {\n        if (A[i] == A[j]) {\n            j -= 2\n        } else {\n            result = A[i]\n            i += 2\n        }\n    }\n    return result\n}"}
{"kt_path": "rupeshsasne__coursera-algorithms-part1__341634c/classroom/src/main/kotlin/com/radix2/algorithms/week3/SortingLinkedList.kt", "CodeLlama-7B-KStack-clean": "fun main(args: Array<String>) {\n    val list = LinkedList<Int>()\n    var i = 0\n    while (i < 11) {\n        list.add(i)\n        i++\n    }\n    list.reverseRecurrsive()\n    println(list)\n}\n\nclass LinkedList<T : Comparable<T>> {\n    var head: Node<T>? = null\n\n    fun add(element: T) {\n        val node = Node(element)\n        node.next = head\n        head = node\n    }\n\n    fun reverseRecurrsive() {\n        var current = head\n        var previous: Node<T>? = null\n\n        while (current != null) {\n            val temp = current.next\n            current.next = previous\n            previous = current\n            current = temp\n        }\n\n        head = previous\n    }\n\n    override fun toString(): String {\n        val result = StringBuilder()\n        var current = head\n\n        while (current != null) {\n            result.append(current.element)\n            current = current.next\n        }\n\n        return result.toString()\n    }\n}\n\nclass Node<T>(val element: T) {\n    var next: Node<T>? = null\n}"}
{"kt_path": "boris920308__HoOne__8881468/hoon/HoonAlgorithm/src/main/kotlin/boj/week02/recursive_function/FibonacciSequence5.kt", "CodeLlama-7B-KStack-clean": "fun main() {\n    val input = Scanner(System.`in`)\n    val n = input.nextInt()\n    println(fibonacci(n))\n}\n\nfun fibonacci(n: Int): Int {\n    return if (n > 1) fibonacci(n - 1) + fibonacci(n - 2) else n\n}"}
{"kt_path": "Codextor__kotlin-codes__68b75a7/src/main/kotlin/PerfectSquares.kt", "CodeLlama-7B-KStack-clean": "fun numSquares(n: Int): Int {\n    var i = 0\n    var j = n + 1\n    val k = IntArray(j)\n    var l = 0\n    var m = 1\n    while (i < j) {\n        k[l++] = m * m\n        m++\n        i++\n    }\n    i = 1\n    while (i <= n) {\n        l = k.min(i + k[i], j)\n        j = l + 1\n        k[l] = i * i\n        i++\n    }\n    return k[n]\n}"}
{"kt_path": "Laomedeia__Java8InAction__0dcd843/src/main/java/leetcode/a167_twoSumInputSortArray_SIMPLE/Solution.kt", "CodeLlama-7B-KStack-clean": "class Solution {\n    fun twoSum(numbers: IntArray, target: Int): IntArray {\n        var low = 0\n        var high = numbers.size - 1\n        while (low < high) {\n            val sum = numbers[low] + numbers[high]\n            when {\n                sum == target -> return intArrayOf(low + 1, high + 1)\n                sum < target -> low++\n                else -> high--\n            }\n        }\n        return intArrayOf()\n    }\n}"}
{"kt_path": "ariannysOronoz__tutorialKotlin__a779f54/CombinacionesPalabras/src/main/java/Main.kt", "CodeLlama-7B-KStack-clean": "fun main(args: Array<String>) {\n    val permutation = Permutation()\n    val str = \"CARACOL\"\n    val len = str.length\n    permutation.findPermutation(str, 0, len)\n    println(str)\n    val str1 = \"caracol\"\n    val len1 = str1.length\n    permutation.findPermutation(str1, 0, len1)\n}\n\nclass Permutation {\n    fun findPermutation(str: String, start: Int, end: Int) {\n        if (start == end) {\n            println(str)\n            return\n        }\n        for (i in start until end) {\n            val temp = str[start]\n            str[start] = str[i]\n            str[i] = temp\n            findPermutation(str, start + 1, end)\n            val temp1 = str[start]\n            str[start] = str[i]\n            str[i] = temp1\n        }\n    }\n}"}
{"kt_path": "scientificCommunity__blog-sample__36e291c/algorithms/src/main/kotlin/org/baichuan/sample/algorithms/leetcode/middle/MaxArea.kt", "CodeLlama-7B-KStack-clean": "class MaxArea {\n    fun maxArea(height: IntArray): Int {\n        var maxArea = 0\n        var left = 0\n        var right = height.size - 1\n        while (left < right) {\n            val area = (right - left) * Math.min(height[left], height[right])\n            maxArea = Math.max(maxArea, area)\n            if (height[left] < height[right]) {\n                left++\n            } else {\n                right--\n            }\n        }\n        return maxArea\n    }\n}"}
{"kt_path": "boris920308__HoOne__8881468/hoon/HoonAlgorithm/src/main/kotlin/programmers/lv01/Lv1_70128.kt", "CodeLlama-7B-KStack-clean": "fun main() {\n    val arr1 = intArrayOf(1, 2, 3, 4)\n    val arr2 = intArrayOf(-3, -1, 0, 2)\n    println(solution(arr1, arr2))\n}\n\nfun solution(arr1: IntArray, arr2: IntArray): Int {\n    var answer = 0\n    var idx1 = 0\n    var idx2 = 0\n\n    while (idx1 < arr1.size && idx2 < arr2.size) {\n        answer += arr1[idx1] * arr2[idx2]\n        idx1++\n        idx2++\n    }\n\n    return answer\n}"}
{"kt_path": "kotler-dev__kotlin-leetcode__0659e72/src/main/kotlin/exercise/easy/id121/Solution121.kt", "CodeLlama-7B-KStack-clean": "fun maxProfit(prices: IntArray): Int {\n    Intrinsics.checkNotNullParameter(prices, \"prices\")\n    var profit = 2147483647\n    var maxProfit = 0\n    var minPrice = 0\n    var maxPrice = 0\n    var i = 0\n    var j = 0\n    val size = prices.size\n    if (size >= 2) {\n        maxProfit = 0\n        minPrice = prices[0]\n        maxPrice = prices[1]\n        i = 2\n    } else {\n        i = 1\n    }\n    while (j < size) {\n        if (maxPrice < prices[j]) {\n            maxPrice = prices[j]\n        }\n        if (minPrice > prices[j]) {\n            minPrice = prices[j]\n        }\n        if (maxPrice - minPrice > maxProfit) {\n            maxProfit = maxPrice - minPrice\n        }\n        j++\n    }\n    return maxProfit\n}"}
{"kt_path": "marc-bouvier-katas__Kotlin_EduTools_Advent_of_Code_2021__12cf74c/Day 5/Part 1/src/Task.kt", "CodeLlama-7B-KStack-clean": "fun overlaps(ventsLines: Array<String>): Int {\n    val lines = Lines(\n        mapOf(),\n        1,\n        null\n    )\n    if (ventsLines.size > 2) {\n        val size = ventsLines.size\n        var i = 0\n        var j = 0\n        while (i < size) {\n            j = 0\n            while (j < size) {\n                lines.mergeWith(\n                    Line.Companion.fromLineOfVent(\n                        LineOfVent.Companion.fromString(\n                            ventsLines[i]\n                        )\n                    )\n                )\n                j++\n            }\n            i++\n        }\n    }\n    return lines.overlaps()\n}"}
{"kt_path": "Laomedeia__Java8InAction__0dcd843/src/main/java/leetcode/a392_isSubSequence_HARD/Solution.kt", "CodeLlama-7B-KStack-clean": "class Solution {\n    fun isSubsequence(s: String, t: String): Boolean {\n        if (s.length == 0) return true\n        if (t.length == 0) return false\n        var i = 0\n        var j = 0\n        while (i < s.length && j < t.length) {\n            if (s[i] == t[j]) {\n                i++\n            }\n            j++\n        }\n        return i == s.length\n    }\n}"}
{"kt_path": "nickperov__Algorithms__6696f5d/fibonacci/src/main/kotlin/com/nickperov/stud/algorithms/fibonacci/FibonacciLargeGenerator.kt", "CodeLlama-7B-KStack-clean": "fun main() {\n    println(\"Hello, large Fibonacci numbers\")\n    println(FibonacciLargeTailRecursiveOptimisedGenerator().calculate(1000000))\n}\n\nabstract class FibonacciLargeGenerator {\n    abstract fun calculate(n: Int): BigInteger\n}\n\nclass FibonacciLargeTailRecursiveOptimisedGenerator : FibonacciLargeGenerator() {\n    override fun calculate(n: Int): BigInteger {\n        tailrec fun fib(n: Int, a: BigInteger, b: BigInteger): BigInteger {\n            return when (n) {\n                0 -> a\n                1 -> b\n                else -> fib(n - 1, b, a + b)\n            }\n        }\n        return fib(n, BigInteger.ZERO, BigInteger.ONE)\n    }\n}"}
{"kt_path": "TonnyL__Windary__39f85cd/Kotlin/src/UniqueBinarySearchTrees.kt", "CodeLlama-7B-KStack-clean": "class UniqueBinarySearchTrees {\n    fun numTrees(n: Int): Int {\n        var count = 0\n        val dp = IntArray(n + 2)\n        dp[0] = 1\n        dp[1] = 1\n        for (i in 2..n) {\n            var j = 0\n            while (j < i) {\n                dp[i] += dp[j] * dp[i - j - 1]\n                j++\n            }\n            count = dp[i]\n        }\n        return count\n    }\n}"}
{"kt_path": "quincy__euler-kotlin__01d96f6/src/main/kotlin/com/quakbo/euler/Euler4.kt", "CodeLlama-7B-KStack-clean": "fun isPalindrome(n: Int): Boolean {\n    val s = n.toString()\n    return s == s.reversed()\n}\n\nfun main(args: Array<String>) {\n    var n = 999\n    var m = 999\n    while (n < 1000) {\n        m = 999\n        while (m > n) {\n            val p = n * m\n            if (isPalindrome(p)) {\n                println(p)\n            }\n            m--\n        }\n        n++\n    }\n}"}
{"kt_path": "getupminaaa__Algorithm__01187e2/Algorithm/src/main/kotlin/programmers/level1/personalInfoCollectionValidityPeriod.kt", "CodeLlama-7B-KStack-clean": "fun solution(input: String, info: Array<String>, period: Array<String>): Array<Int> {\n    val answer = Array(info.size) { 0 }\n    for (i in info.indices) {\n        val (year, month, day) = input.split(\".\").map { it.toInt() }\n        val (startYear, startMonth, startDay) = info[i].split(\" \").map { it.toInt() }\n        val (endYear, endMonth, endDay) = period[i].split(\" \").map { it.toInt() }\n        if (year in startYear..endYear && month in startMonth..endMonth && day in startDay..endDay) {\n            answer[i] = 1\n        }\n    }\n    return answer\n}\n\nfun main() {\n    val input = \"2021.05.02\"\n    val info = arrayOf(\"A 6\", \"B 12\", \"C 3\")\n    val period = arrayOf(\"2021.05.02 A\", \"2021.07.01 B\", \"2022.02.19 C\", \"2022.02.20 C\")\n    solution(input, info, period).forEach { print(\"$it \") }\n}"}
{"kt_path": "iafsilva__codility-lessons__5d86aef/src/main/kotlin/lesson1/BinaryGap.kt", "CodeLlama-7B-KStack-clean": "fun solution(N: Int): Int {\n    var maxGap = 0\n    var currentGap = 0\n    var lastBit = false\n\n    for (i in N.toString(2).toCharArray()) {\n        if (i == '1') {\n            if (!lastBit) {\n                currentGap++\n            } else {\n                if (currentGap > maxGap) {\n                    maxGap = currentGap\n                }\n                currentGap = 0\n            }\n            lastBit = true\n        } else {\n            lastBit = false\n        }\n    }\n\n    if (currentGap > maxGap) {\n        maxGap = currentGap\n    }\n\n    return maxGap\n}"}
{"kt_path": "zys0909__CodeLabs__869c7c2/src/com/leecode/array/Code1.kt", "CodeLlama-7B-KStack-clean": "fun missingNumber1(nums: IntArray): Int {\n    var i = 0\n    var j = 0\n    var n = nums.size\n    while (j < n) {\n        if (nums[i] != i) {\n            return i\n        }\n        i++\n        j++\n    }\n    return n\n}\n\nfun missingNumber2(nums: IntArray): Int {\n    var i = 0\n    var j = nums.size - 1\n    while (i < j) {\n        if (nums[i] == i) {\n            i++\n            continue\n        }\n        if (nums[j] == j) {\n            j--\n            continue\n        }\n        val tmp = nums[i]\n        nums[i] = nums[j]\n        nums[j] = tmp\n        i++\n        j--\n    }\n    return if (nums[i] == i) i + 1 else i\n}"}
{"kt_path": "ykrytsyn__leetcode-in-kotlin__0acf2a6/src/main/kotlin/leetcode/ArrangingCoins.kt", "CodeLlama-7B-KStack-clean": "class ArrangingCoins {\n    fun bruteForce(n: Int): Int {\n        var coins = n\n        var i = 1\n        while (coins > i) {\n            coins -= i\n            i++\n        }\n        return i\n    }\n\n    fun binarySearch(n: Int): Int {\n        var left = 0L\n        var right = n.toLong()\n        var mid: Long\n        while (left < right) {\n            mid = (left + right) / 2\n            val num = (mid * (mid + 1)) / 2\n            if (num < n) {\n                left = mid + 1\n            } else if (num > n) {\n                right = mid - 1\n            } else {\n                return mid.toInt()\n            }\n        }\n        return left.toInt()\n    }\n}"}
{"kt_path": "mayabot__mynlp__b980da3/mynlp/src/main/java/com/mayabot/nlp/module/nwd/ValueObjects.kt", "CodeLlama-7B-KStack-clean": "public final class ValueObjectsKt {\n    public static final void addTo(HashMap<Character, IntCount>, Char, Int) {\n        val map = this as Map<Character, IntCount>\n        val c = Character.valueOf(c)\n        var count = 0\n        val old = map.get(c)\n        if (old == null) {\n            count = 0\n            val count = IntCount()\n            map.put(c, count)\n            count\n        } else {\n            old.value = old.value + i\n            old\n        }\n    }\n}"}
{"kt_path": "jjrodcast__CompetitiveProblems__a91868c/leetcode/UniquePathsTwo.kt", "CodeLlama-7B-KStack-clean": "class Solution {\n    fun uniquePathsWithObstacles(obstacleGrid: Array<IntArray>): Int {\n        val m = obstacleGrid.size\n        val n = obstacleGrid[0].size\n        val dp = Array(m) { IntArray(n) }\n        dp[0][0] = if (obstacleGrid[0][0] == 0) 1 else 0\n        for (i in 1 until m) {\n            dp[i][0] = if (obstacleGrid[i][0] == 0 && dp[i - 1][0] != 0) 1 else 0\n        }\n        for (j in 1 until n) {\n            dp[0][j] = if (obstacleGrid[0][j] == 0 && dp[0][j - 1] != 0) 1 else 0\n        }\n        for (i in 1 until m) {\n            for (j in 1 until n) {\n                dp[i][j] = if (obstacleGrid[i][j] == 0 && dp[i - 1][j] != 0 && dp[i][j - 1] != 0) 1 else 0\n            }\n        }\n        return dp[m - 1][n - 1]\n    }\n}"}
{"kt_path": "boris920308__HoOne__8881468/hoon/HoonAlgorithm/src/main/kotlin/programmers/lv01/Lv1_77884.kt", "CodeLlama-7B-KStack-clean": "177884"}
{"kt_path": "Codextor__kotlin-codes__68b75a7/src/main/kotlin/PartitionArrayForMaximumSum.kt", "CodeLlama-7B-KStack-clean": "fun maxSumAfterPartitioning(arr: IntArray, k: Int): Int {\n    val n = arr.size\n    val dp = IntArray(n + 1)\n    var max = 0\n    for (i in 1..n) {\n        var min = 1\n        var maxSum = 0\n        for (j in 1..k) {\n            val curMax = min.coerceAtLeast(maxSum + arr[i - j])\n            val curMin = j.coerceAtLeast(maxSum + arr[i - j])\n            maxSum = curMax\n            min = curMin\n        }\n        dp[i] = maxSum\n        max = max.coerceAtLeast(dp[i])\n    }\n    return dp[n]\n}"}
{"kt_path": "scientificCommunity__blog-sample__36e291c/algorithms/src/main/kotlin/org/baichuan/sample/algorithms/leetcode/simple/interview/MajorityElement.kt", "CodeLlama-7B-KStack-clean": "fun majorityElement(nums: IntArray): Int {\n    var count = 0\n    var candidate = 0\n    var majority = -1\n    for (num in nums) {\n        if (count == 0) {\n            candidate = num\n            majority = -1\n        }\n        count += if (candidate == num) 1 else -1\n    }\n    return majority\n}"}
{"kt_path": "rhavran__ProjectEuler__1115674/src/Utils.kt", "CodeLlama-7B-KStack-clean": "class UtilsKt {\n    companion object {\n        fun dividers(n: Long): Long {\n            var sum = 1L\n            val factors = PrimeFactorization.INSTANCE.primeFactors(n)\n            for ((_, value) in factors.entries) {\n                sum *= (value + 1)\n            }\n            return sum\n        }\n\n        fun sequenceSumStartingFrom(n: Long, m: Long): Long {\n            return sumFromTo(m, n)\n        }\n\n        fun sumFromTo(n: Long, m: Long): Long {\n            return (m - n + 1) / 2 * (n + m)\n        }\n    }\n}"}
{"kt_path": "jimmymorales__project-euler__e881cad/src/main/kotlin/Problem4.kt", "CodeLlama-7B-KStack-clean": ""}
{"kt_path": "Codextor__kotlin-codes__68b75a7/src/main/kotlin/PalindromicSubstrings.kt", "CodeLlama-7B-KStack-clean": "fun countSubstrings(s: String): Int {\n    var count = 0\n    var i = 0\n    var j = 0\n    val n = s.length\n    while (j < n) {\n        count += countSubstringsWithCenter(s, i, j)\n        count += countSubstringsWithCenter(s, i, j + 1)\n        i++\n        j++\n    }\n    return count\n}\n\nprivate fun countSubstringsWithCenter(s: String, i: Int, j: Int): Int {\n    var count = 0\n    var k = i\n    while (k <= j) {\n        if (s[k] != s[j]) break\n        count++\n        k++\n        j--\n    }\n    return count\n}"}
{"kt_path": "antop-dev__algorithm__9a3e762/src/main/kotlin/kr/co/programmers/P12952.kt", "CodeLlama-7B-KStack-clean": "class P12952 {\n    fun solution(n: Int): Int {\n        val answer = IntArray(n)\n        return dfs(answer, 0)\n    }\n\n    private fun dfs(answer: IntArray, idx: Int): Int {\n        if (idx == answer.size) return 1\n        var max = 0\n        for (i in 0..answer.size) {\n            answer[idx] = i\n            if (valid(answer, idx)) {\n                max = max(max, dfs(answer, idx + 1))\n            }\n        }\n        return max\n    }\n\n    private fun valid(answer: IntArray, idx: Int): Boolean {\n        for (i in 0 until idx) {\n            if (Math.abs(answer[i] - answer[idx]) == idx - i) return false\n            if (Math.abs(answer[i] - answer[idx]) == idx - i) return false\n        }\n        return true\n    }\n}"}
{"kt_path": "ILIYANGERMANOV__algorithms__4abe4b5/Algorithms/src/main/kotlin/MaxSubArray.kt", "CodeLlama-7B-KStack-clean": "class MaxSubArray {\n    fun maxSubArray(nums: IntArray): Int {\n        var max = Int.MIN_VALUE\n        var sum = 0\n        var start = 0\n        for (i in nums.indices) {\n            if (i == 0) {\n                sum = nums[0]\n            } else {\n                if (sum > 0) {\n                    sum += nums[i]\n                } else {\n                    sum = nums[i]\n                    start = i\n                }\n            }\n            max = maxOf(max, sum)\n        }\n        return max\n    }\n}"}
{"kt_path": "AlBovo__Compiti__56a3131/src/main/kotlin/segtree.kt", "CodeLlama-7B-KStack-clean": "class SegTree(val arr: Array<Int>) {\n    var tree = Array(4 * arr.size) { 0 }\n\n    fun build(index: Int, left: Int, right: Int) {\n        if (left == right) {\n            tree[index] = arr[left]\n            return\n        }\n        val mid = left + (right - left) / 2\n        build(2 * index + 1, left, mid)\n        build(2 * index + 2, mid + 1, right)\n        tree[index] = tree[2 * index + 1] + tree[2 * index + 2]\n    }\n\n    fun update(index: Int, left: Int, right: Int, i: Int, value: Int) {\n        if (left == right) {\n            tree[index] = value\n            return\n        }\n        val mid = left + (right - left) / 2\n        if (i <= mid) {\n            update(2 * index + 1, left, mid, i, value)\n        } else {\n            update(2 * index + 2, mid + 1, right, i, value)\n        }\n        tree[index] = tree[2 * index + 1] + tree[2 * index + 2]\n    }\n\n    fun getSum(index: Int, left: Int, right: Int, start: Int, end: Int): Int {\n        if (start > end || end < left || right < start) {\n            return 0\n        }\n        if (start <= left && right <= end) {\n            return tree[index]\n        }\n        val mid = left + (right - left) / 2\n        return getSum(2 * index + 1, left, mid, start, end) + getSum(2 * index + 2, mid + 1, right, start, end)\n    }\n}\n\nfun main() {\n    val arr = arrayOf(2, 4, 5, 8, 10, 11, 12)\n    val segTree = SegTree(arr)\n    println(segTree.getSum(0, 0, arr.size - 1, 0, arr.size - 1))\n}"}
{"kt_path": "3mtee__exercism-kotlin__6e3eb88/complex-numbers/src/main/kotlin/ComplexNumbers.kt", "CodeLlama-7B-KStack-clean": "fun exponential(c: ComplexNumber): ComplexNumber {\n    if (c.real == 0.0) {\n        return ComplexNumber(cos(c.imag), sin(c.imag))\n    }\n    return ComplexNumber(2.718281828459045, pow(c.real, 2.0))\n}"}
{"kt_path": "perihanmirkelam__ProjectEuler__a24ac44/src/main/kotlin/P014_LongestCollatzSequence.kt", "CodeLlama-7B-KStack-clean": "fun p14() {\n    var a = 0L\n    var b = 0\n    var c = 0\n    var d = 1000000\n    var e = 0\n    var f = 0L\n    while (e < d) {\n        f = a\n        a = if (a % 2 == 0L) a / 2 else a * 3 + 1\n        if (a > f) {\n            f = a\n            b = c\n            c = e\n        }\n        e++\n    }\n    println(\"A14: $f\")\n}"}
{"kt_path": "iafsilva__codility-lessons__5d86aef/src/main/kotlin/lesson2/CyclicRotation.kt", "CodeLlama-7B-KStack-clean": "fun solution(a: IntArray, b: Int): IntArray {\n    if (b == 0) return a\n    if (a.size == 1) return a\n    if (b % a.size == 0) return a\n    val rem = b % a.size\n    val result = IntArray(a.size)\n    val queue = ArrayDeque<Int>()\n    var i = 0\n    while (i < a.size) {\n        queue.addLast(a[i])\n        i++\n    }\n    i = 0\n    while (i < rem) {\n        queue.addFirst(queue.removeLast())\n        i++\n    }\n    i = 0\n    while (i < a.size) {\n        result[i] = queue.removeLast()\n        i++\n    }\n    return result\n}"}
{"kt_path": "boris920308__HoOne__8881468/hoon/HoonAlgorithm/src/main/kotlin/programmers/lv01/Lv1_12912.kt", "CodeLlama-7B-KStack-clean": "fun main() {\n    solution(3, 5)\n    solution(3, 3)\n    solution(5, 3)\n}\n\nfun solution(a: Int, b: Int): Long {\n    var answer: Long = 0\n    var tmp: Int = b\n    if (a <= b) {\n        while (a <= tmp) {\n            answer += tmp\n            tmp += a\n        }\n    } else {\n        var tmp2 = a\n        while (b <= tmp2) {\n            answer += tmp2\n            tmp2 += b\n        }\n    }\n    return answer\n}\n\nfun secondSolution(a: Int, b: Int): Long {\n    return if (a <= b) {\n        (a..b).sumOf { it.toLong() }\n    } else {\n        (b..a).sumOf { it.toLong() }\n    }\n}"}
{"kt_path": "darian-catalin-cucer__divide-and-conquer-algorithms__1cea70d/kt.kt", "CodeLlama-7B-KStack-clean": "fun quickSort(arr: IntArray, low: Int, high: Int) {\n    if (low >= high) return\n    val pivot = partition(arr, low, high)\n    quickSort(arr, low, pivot - 1)\n    quickSort(arr, pivot + 1, high)\n}\n\nfun partition(arr: IntArray, low: Int, high: Int): Int {\n    val pivot = arr[low]\n    var i = low\n    var j = high + 1\n    while (true) {\n        while (arr[++i] < pivot) if (i == high) break\n        while (pivot < arr[--j]) if (j == low) break\n        if (j <= i) break\n        swap(arr, i, j)\n    }\n    swap(arr, i, low)\n    return i\n}\n\nfun swap(arr: IntArray, i: Int, j: Int) {\n    val temp = arr[i]\n    arr[i] = arr[j]\n    arr[j] = temp\n}\n\nfun main() {\n    val arr = intArrayOf(64, 25, 12, 22, 11)\n    quickSort(arr, 0, arr.size - 1)\n    println(arr.joinToString())\n}"}
{"kt_path": "TonnyL__Windary__39f85cd/Kotlin/src/ThreeSumClosest.kt", "CodeLlama-7B-KStack-clean": "fun threeSumClosest(nums: IntArray, target: Int): Int {\n    nums.sort()\n    var closest = nums[0] + nums[1] + nums[2]\n    for (i in 0..nums.size - 3) {\n        var j = i + 1\n        var k = nums.size - 1\n        while (j < k) {\n            val sum = nums[i] + nums[j] + nums[k]\n            if (sum == target) {\n                return sum\n            }\n            if (Math.abs(sum - target) < Math.abs(closest - target)) {\n                closest = sum\n            }\n            if (sum < target) {\n                j++\n            } else {\n                k--\n            }\n        }\n    }\n    return closest\n}"}
{"kt_path": "Javran__leetcode__f3899fe/bulb-switcher/Solution.kt", "CodeLlama-7B-KStack-clean": "class Solution {\n    companion object {\n        fun main(args: Array<String>) {\n            Solution().bulbSwitch(10)\n        }\n    }\n\n    fun bulbSwitch(n: Int): Int {\n        return Math.floor(Math.sqrt(n.toDouble())).toInt()\n    }\n}"}
{"kt_path": "TonnyL__Windary__39f85cd/Kotlin/src/NextPermutation.kt", "CodeLlama-7B-KStack-clean": "class NextPermutation {\n    fun nextPermutation(nums: IntArray) {\n        var i = nums.size - 2\n        while (i >= 0 && nums[i] >= nums[i + 1]) i--\n        if (i >= 0) {\n            var j = nums.size - 1\n            while (nums[j] <= nums[i]) j--\n            swap(nums, i, j)\n        }\n        reverse(nums, i + 1, nums.size - 1)\n    }\n\n    private fun swap(nums: IntArray, i: Int, j: Int) {\n        val temp = nums[i]\n        nums[i] = nums[j]\n        nums[j] = temp\n    }\n\n    private fun reverse(nums: IntArray, i: Int, j: Int) {\n        var i = i\n        var j = j\n        while (i < j) {\n            swap(nums, i, j)\n            i++\n            j--\n        }\n    }\n}"}
{"kt_path": "boris920308__HoOne__8881468/hoon/HoonAlgorithm/src/main/kotlin/programmers/lv01/Lv1_12940.kt", "CodeLlama-7B-KStack-clean": "fun main() {\n    solution(3, 12)\n    solution(2, 5)\n}\n\nfun solution(a: Int, b: Int): Array<Int> {\n    val answer = Array(2) { 0 }\n\n    answer[0] = findGCD(a, b)\n    answer[1] = findLCM(a, b)\n\n    println(answer.toList())\n\n    return answer\n}\n\nfun findGCD(a: Int, b: Int): Int {\n    return if (b == 0) a else findGCD(b, a % b)\n}\n\nfun findLCM(a: Int, b: Int): Int {\n    return a * b / findGCD(a, b)\n}"}
{"kt_path": "JiangKlijna__leetcode-learning__65a1348/kt/001 Two Sum/TwoSum.kt", "CodeLlama-7B-KStack-clean": "class TwoSum {\n    fun twoSum(numbers: IntArray, target: Int): IntArray {\n        val map = HashMap<Int, Int>()\n        val result = IntArray(2)\n        for (i in numbers.indices) {\n            val value = map[numbers[i]]\n            if (value == null) {\n                map[target - numbers[i]] = i\n            } else {\n                result[0] = value\n                result[1] = i\n                return result\n            }\n        }\n        return result\n    }\n}"}
{"kt_path": "rupeshsasne__coursera-algorithms-part1__341634c/classroom/src/main/kotlin/com/radix2/algorithms/week1/UnionFind.kt", "CodeLlama-7B-KStack-clean": "fun main(args: Array<String>) {\n    val uf = WeightedQuickUnionWithPathCompressionUF(10)\n    uf.union(4, 3)\n    uf.union(3, 8)\n    uf.union(6, 5)\n    uf.union(9, 4)\n    uf.union(2, 1)\n    uf.union(5, 0)\n    uf.union(7, 2)\n    uf.union(6, 1)\n    uf.union(7, 3)\n}"}
{"kt_path": "boris920308__HoOne__8881468/hoon/HoonAlgorithm/src/main/kotlin/programmers/lv01/Lv1_68935.kt", "CodeLlama-7B-KStack-clean": "fun main() {\n    solution(45)\n}\n\nfun solution(x: Int): Int {\n    return Integer.parseInt(Integer.toString(x).reversed(), 3)\n}\n\nfun solution_1(x: Int): Int {\n    return Integer.parseInt(Integer.toString(x).reversed(), 10)\n}"}
{"kt_path": "korilin__DSA-kt__b96ba1b/src/main/kotlin/sort_algorithm/quickSort.kt", "CodeLlama-7B-KStack-clean": "fun quickSort(array: IntArray) {\n    quickSort(array, 0, array.size - 1)\n}\n\nprivate fun quickSort(array: IntArray, left: Int, right: Int) {\n    if (left >= right) return\n    val pivotIndex = partition(array, left, right)\n    quickSort(array, left, pivotIndex - 1)\n    quickSort(array, pivotIndex + 1, right)\n}\n\nprivate fun partition(array: IntArray, left: Int, right: Int): Int {\n    var left = left\n    var right = right\n    val pivot = array[left]\n    while (left < right) {\n        while (left < right && array[right] >= pivot) right--\n        array[left] = array[right]\n        while (left < right && array[left] < pivot) left++\n        array[right] = array[left]\n    }\n    array[left] = pivot\n    return left\n}"}
{"kt_path": "gardnerdickson__advent-of-code-2015__4a23ab3/src/day_10.kt", "CodeLlama-7B-KStack-clean": "fun main(args: Array<String>) {\n    val input = \"1113222113\"\n    println(\"Part 1: ${Day10().part1(input)}\")\n    println(\"Part 2: ${Day10().part2(input)}\")\n}\n\nclass Day10 {\n    fun part1(input: String): Int {\n        var current = 0\n        var previous = 0\n        var result = 0\n        for (c in input) {\n            current = when (c) {\n                '1' -> current + 1\n                '0' -> 0\n                else -> error(\"Unexpected input\")\n            }\n            if (current > previous) {\n                result += 1\n            }\n            previous = current\n        }\n        return result\n    }\n\n    fun part2(input: String): Int {\n        var current = 0\n        var previous = 0\n        var result = 0\n        for (c in input) {\n            current = when (c) {\n                '1' -> current + 1\n                '0' -> 0\n                else -> error(\"Unexpected input\")\n            }\n            if (current > previous) {\n                result += 1\n            }\n            previous = current\n        }\n        return result\n    }\n}"}
{"kt_path": "gardnerdickson__advent-of-code-2015__4a23ab3/src/day_2.kt", "CodeLlama-7B-KStack-clean": "class Day2 {\n    fun part1(input: String): Int {\n        val lines = input.split(\"\\n\")\n        val pairs = lines.map { it.split(\" \") }\n        val sum = pairs.map {\n            val first = it[0].toInt()\n            val second = it[1].toInt()\n            if (first + second == 15) 1 else 0\n        }.sum()\n        return sum\n    }\n\n    fun part2(input: String): Int {\n        val lines = input.split(\"\\n\")\n        val pairs = lines.map { it.split(\" \") }\n        val sum = pairs.map {\n            val first = it[0].toInt()\n            val second = it[1].toInt()\n            if (first + second == 15) 1 else 0\n        }.sum()\n        return sum\n    }\n}"}
{"kt_path": "gardnerdickson__advent-of-code-2015__4a23ab3/src/day_3.kt", "CodeLlama-7B-KStack-clean": "fun main(args: Array<String>) {\n    val input = \"res/day_3_input.txt\"\n    println(\"Part 1: ${Day3.INSTANCE.part1(input)}\")\n    println(\"Part 2: ${Day3.INSTANCE.part2(input)}\")\n}"}
{"kt_path": "antop-dev__algorithm__9a3e762/src/main/kotlin/kr/co/programmers/P161988.kt", "CodeLlama-7B-KStack-clean": "class P161988 {\n    fun solution(a: IntArray): Long {\n        val sequence = \"sequence\"\n        Intrinsics.checkNotNullParameter(a, sequence)\n        var max = max(a, 1)\n        var answer = max(a, -1)\n        max = Math.max(max, answer)\n        return max\n    }\n\n    private fun max(a: IntArray, start: Int): Long {\n        val size = a.size\n        val dp = LongArray(size)\n        var max = 1L\n        var i = start\n        while (i < size) {\n            dp[i] = (a[i] * max).toLong()\n            max = Math.max(max, a[i].toLong())\n            i++\n        }\n        i = start + 1\n        while (i < size) {\n            dp[i] = Math.max(dp[i - 1], dp[i - 1] + a[i])\n            i++\n        }\n        i = size - 2\n        while (i >= start) {\n            dp[i] = Math.max(dp[i + 1], dp[i + 1] + a[i])\n            i--\n        }\n        return dp[start]\n    }\n}"}
{"kt_path": "alexjlockwood__bees-and-bombs-compose__0d7a86b/app/src/main/java/com/alexjlockwood/beesandbombs/demos/utils/MathUtils.kt", "CodeLlama-7B-KStack-clean": "package com.alexjlockwood.beesandbombs.demos.utils\n\nimport kotlin.math.PI\nimport kotlin.math.TWO_PI\nimport kotlin.math.HALF_PI\n\npublic final class MathUtilsKt {\n    public static final float PI = PI\n    public static final float TWO_PI = TWO_PI\n    public static final float HALF_PI = HALF_PI\n\n    public static final float dist(x1: Float, y1: Float, x2: Float, y2: Float): Float {\n        return (x2 - x1) * (x2 - x1) + (y2 - y1) * (y2 - y1)\n    }\n\n    public static final float lerp(a: Float, b: Float, t: Float): Float {\n        return a + (b - a) * t\n    }\n\n    public static final float map(value: Float, start1: Float, stop1: Float, start2: Float, stop2: Float): Float {\n        return start2 + (stop2 - start2) * ((value - start1) / (stop1 - start1))\n    }\n\n    public static final float toDegrees(radians: Float): Float {\n        return radians * 180 / PI\n    }\n\n    public static final float ease(t: Float): Float {\n        return t * t * (3 - 2 * t)\n    }\n\n    public static final float ease(t: Float, g: Float): Float {\n        return t * t * (g + (1 - g) * (t - 1))\n    }\n}"}
{"kt_path": "chengw315__daily-study__501b881/letcode/src/main/java/daily/LeetCodeLCP13.kt", "CodeLlama-7B-KStack-clean": "class SolutionLCP13 {\n    fun minimalSteps(board: Array<String>): Int {\n        val n = board.size\n        val m = board[0].length\n        val dp = Array(n) { IntArray(m) }\n        for (i in 0 until n) {\n            for (j in 0 until m) {\n                if (board[i][j] == 'S') {\n                    dp[i][j] = 0\n                } else if (board[i][j] == 'O') {\n                    dp[i][j] = Int.MAX_VALUE\n                } else {\n                    dp[i][j] = Int.MAX_VALUE - 1\n                }\n            }\n        }\n\n        for (i in 0 until n) {\n            for (j in 0 until m) {\n                if (board[i][j] == 'S') {\n                    if (i > 0 && dp[i - 1][j] != Int.MAX_VALUE) {\n                        dp[i][j] = minOf(dp[i][j], dp[i - 1][j] + 1)\n                    }\n                    if (j > 0 && dp[i][j - 1] != Int.MAX_VALUE) {\n                        dp[i][j] = minOf(dp[i][j], dp[i][j - 1] + 1)\n                    }\n                }\n            }\n        }\n\n        for (i in n - 1 downTo 0) {\n            for (j in m - 1 downTo 0) {\n                if (board[i][j] == 'T') {\n                    if (i < n - 1 && dp[i + 1][j] != Int.MAX_VALUE) {\n                        dp[i][j] = minOf(dp[i][j], dp[i + 1][j] + 1)\n                    }\n                    if (j < m - 1 && dp[i][j + 1] != Int.MAX_VALUE) {\n                        dp[i][j] = minOf(dp[i][j], dp[i][j + 1] + 1)\n                    }\n                }\n            }\n        }\n\n        for (i in 0 until n) {\n            for (j in 0 until m) {\n                if (board[i][j] == 'O') {\n                    dp[i][j] = Int.MAX_VALUE\n                }\n            }\n        }\n\n        return dp[0][0]\n    }\n}"}
{"kt_path": "rajatenzyme__Coding-Journey__65a0570/Algo_Ds_Notes-master/Algo_Ds_Notes-master/Floyd_Warshall_Algorithm/Floyd_Warshall_Algorithm.kt", "CodeLlama-7B-KStack-clean": "fun main(args: Array<String>) {\n    val matrix = Array(5) { IntArray(5) }\n    matrix[0][0] = 0\n    matrix[0][1] = 1\n    matrix[0][2] = 2\n    matrix[0][3] = 3\n    matrix[0][4] = 4\n    matrix[1][0] = 1\n    matrix[1][1] = 0\n    matrix[1][2] = 3\n    matrix[1][3] = 4\n    matrix[1][4] = 5\n    matrix[2][0] = 2\n    matrix[2][1] = 3\n    matrix[2][2] = 0\n    matrix[2][3] = 6\n    matrix[2][4] = 7\n    matrix[3][0] = 3\n    matrix[3][1] = 4\n    matrix[3][2] = 6\n    matrix[3][3] = 0\n    matrix[3][4] = 8\n    matrix[4][0] = 4\n    matrix[4][1] = 5\n    matrix[4][2] = 7\n    matrix[4][3] = 8\n    matrix[4][4] = 0\n    FloydWarshall.INSTANCE.doCalcs(matrix, 5)\n}"}
{"kt_path": "brunorene__advent_of_code_2018__0cb6814/src/main/kotlin/advent/of/code/day17/Solution.kt", "CodeLlama-7B-KStack-clean": "class Solution {\n    companion object {\n        private val input = File(\"day17.txt\")\n        private val multipleCoord = Regex(\"(x|y)=([.0-9]+)\\\\.\\\\.([.0-9]+)\")\n        private val oneCoord = Regex(\"(x|y)=([.0-9]+)\")\n    }\n\n    fun part1(): Int {\n        val underground = Underground(input)\n        println(underground.getClay())\n        return 1\n    }\n\n    fun part2(): Int {\n        return 2\n    }\n}"}
{"kt_path": "Simplation__OpenSourceRepository__d45feaa/算法/一维数组的动态和1480.kt", "CodeLlama-7B-KStack-clean": "fun main() {\n    val newNum = IntArray(5)\n    val nums = IntArray(5)\n    nums[0] = 1\n    nums[1] = 1\n    nums[2] = 1\n    nums[3] = 1\n    nums[4] = 1\n    sumArr(newNum, nums, 0)\n    println(newNum.toString())\n}\n\nfun sumArr(newNum: IntArray, nums: IntArray, index: Int): Int {\n    if (index >= nums.size) {\n        newNum[0] = nums[0]\n        newNum[1] = nums[1]\n        return 0\n    }\n    newNum[index + 2] = nums[index] + sumArr(newNum, nums, index + 1)\n    return newNum[index + 1] + nums[index]\n}"}
{"kt_path": "jimmymorales__project-euler__e881cad/src/main/kotlin/Problem3.kt", "CodeLlama-7B-KStack-clean": ""}
{"kt_path": "age-series__ElectricalAge2__86d843f/src/main/kotlin/org/eln2/mc/data/SegmentTree.kt", "CodeLlama-7B-KStack-clean": "class SegmentTree<T>(val root: SegmentTreeNode<T>) {\n    fun queryOrNull(value: Double): T? {\n        return if (root.contains(value)) root.query(value) else null\n    }\n\n    fun query(value: Double): T {\n        return root.query(value)\n    }\n}"}
{"kt_path": "ykrytsyn__leetcode-in-kotlin__0acf2a6/src/main/kotlin/leetcode/UniquePaths.kt", "CodeLlama-7B-KStack-clean": "class UniquePaths {\n    fun dynamicProgramming(m: Int, n: Int): Int {\n        val dp = Array(m) { IntArray(n) }\n        for (i in 0 until m) {\n            for (j in 0 until n) {\n                if (i == 0 && j == 0) {\n                    dp[i][j] = 1\n                } else if (i == 0) {\n                    dp[i][j] = dp[i][j - 1]\n                } else if (j == 0) {\n                    dp[i][j] = dp[i - 1][j]\n                } else {\n                    dp[i][j] = dp[i - 1][j] + dp[i][j - 1]\n                }\n            }\n        }\n        return dp[m - 1][n - 1]\n    }\n\n    fun recursive(m: Int, n: Int): Int {\n        if (m == 1 && n == 1) {\n            return 1\n        }\n        if (m == 1) {\n            return recursive(m, n - 1)\n        }\n        if (n == 1) {\n            return recursive(m - 1, n)\n        }\n        return recursive(m - 1, n) + recursive(m, n - 1)\n    }\n}"}
{"kt_path": "quincy__euler-kotlin__01d96f6/src/main/kotlin/com/quakbo/euler/Euler6.kt", "CodeLlama-7B-KStack-clean": "fun sumOfSquares(sequence: Sequence<Int>): Int = sequence.map { it * it }.sum()\nfun squareOfSums(sequence: Sequence<Int>): Int = sequence.sum() * sequence.sum() / sequence.count()\n\nfun main(args: Array<String>) {\n    val sequence = generateSequence(1) { it + 1 }.take(100)\n    val diff = squareOfSums(sequence) - sumOfSquares(sequence)\n    println(diff)\n}"}
{"kt_path": "Kirchberg__BigDataPL__b6a459a/LR7/src/main/kotlin/Task1V3.kt", "CodeLlama-7B-KStack-clean": "fun task1V3() {\n    val input = \"java android kotlin rust\"\n    val words = listOf(\"\")\n    val wordChainFinder = WordChainFinder(input.split(words, true, 0, null))\n    val longestWordChain = wordChainFinder.findLongestWordChain()\n    println(\"Longest word chain: ${longestWordChain.joinToString(\", \", \"Longest word chain: \")}\")\n}\n\nclass WordChainFinder(private val words: List<String>) {\n    fun findLongestWordChain(): List<String> {\n        return words\n    }\n}"}
{"kt_path": "fredyw__leetcode__a59d77c/src/main/kotlin/leetcode/Problem2064.kt", "CodeLlama-7B-KStack-clean": "class Problem2064 {\n    fun minimizedMaximum(n: Int, quantities: IntArray): Int {\n        var max = quantities[0]\n        var min = 1\n        var i = 1\n        var j = 1\n        val size = quantities.size\n        while (j < size) {\n            max = Math.max(max, quantities[j])\n            j++\n        }\n        while (i < size) {\n            if (canDistribute(n, quantities, max)) {\n                max = max - 2\n                i++\n            } else {\n                min++\n            }\n        }\n        return min\n    }\n\n    private fun canDistribute(n: Int, quantities: IntArray, max: Int): Boolean {\n        var i = 0\n        var j = 0\n        while (i < quantities.size) {\n            j = quantities[i]\n            if (j > max % j) {\n                return false\n            }\n            i++\n        }\n        return true\n    }\n}"}
