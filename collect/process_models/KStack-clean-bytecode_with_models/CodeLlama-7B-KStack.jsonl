{"kt_path": "remisultan__multiarm-bandit-algorithm-kotlin__ead934d/core-bandit/src/main/kotlin/org/rsultan/bandit/algorithms/BanditAlgorithm.kt", "CodeLlama-7B-KStack": "interface BanditAlgorithm {\n    fun selectArm(): Int\n    fun update(arm: Int, reward: Float)\n}"}
{"kt_path": "n81ur3__kotlin-coding-challenges__fdc5941/src/main/kotlin/adventofcode2018/Day22ModeMaze.kt", "CodeLlama-7B-KStack": "class Day22ModeMaze"}
{"kt_path": "n81ur3__kotlin-coding-challenges__fdc5941/src/main/kotlin/adventofcode2017/Day21FractalArt.kt", "CodeLlama-7B-KStack": "class Day21FractalArt {\n    constructor()\n}"}
{"kt_path": "n81ur3__kotlin-coding-challenges__fdc5941/src/main/kotlin/adventofcode2017/Day03SpiralMemory.kt", "CodeLlama-7B-KStack": "class Day03SpiralMemory {\n    fun main(args: Array<String>) {\n        val input = 2678\n        val size = 300\n        val matrix = Array(size) { Array(size) { 0 } }\n        var x = 0\n        var y = 0\n        var direction = 0\n        var value = 1\n        for (i in 1..input) {\n            matrix[x][y] = value\n            when (direction) {\n                0 -> {\n                    y++\n                }\n                1 -> {\n                    x++\n                }\n                2 -> {\n                    y--\n                }\n                3 -> {\n                    x--\n                }\n            }\n            if (x == size - 1 || y == size - 1 || x == 0 || y == 0) {\n                direction = (direction + 1) % 4\n            }\n            value++\n        }\n        println(matrix[x][y])\n    }\n}"}
{"kt_path": "n81ur3__kotlin-coding-challenges__fdc5941/src/main/kotlin/adventofcode2019/Day03CrossedWires.kt", "CodeLlama-7B-KStack": "class Day03CrossedWires {\n\n}"}
{"kt_path": "n81ur3__kotlin-coding-challenges__fdc5941/src/main/kotlin/adventofcode2018/Day04ReposeRecord.kt", "CodeLlama-7B-KStack": "class Day04ReposeRecord {\n    init {\n        // TODO\n    }\n}"}
{"kt_path": "n81ur3__kotlin-coding-challenges__fdc5941/src/main/kotlin/adventofcode2017/Day08LikeRegisters.kt", "CodeLlama-7B-KStack": "class Day08LikeRegisters {\n    init {\n        // TODO\n    }\n}"}
{"kt_path": "n81ur3__kotlin-coding-challenges__fdc5941/src/main/kotlin/adventofcode2018/Day11ChronalCharge.kt", "CodeLlama-7B-KStack": "class Day11ChronalCharge {\n    constructor()\n}"}
{"kt_path": "n81ur3__kotlin-coding-challenges__fdc5941/src/main/kotlin/adventofcode2020/Day19MonsterMessage.kt", "CodeLlama-7B-KStack": "class Day19MonsterMessage {\n    init {\n        println(\"Hello, World!\")\n    }\n}"}
{"kt_path": "n81ur3__kotlin-coding-challenges__fdc5941/src/main/kotlin/adventofcode2017/Day07RecursiveCircus.kt", "CodeLlama-7B-KStack": "class Day07RecursiveCircus {\n    constructor()\n}"}
{"kt_path": "n81ur3__kotlin-coding-challenges__fdc5941/src/main/kotlin/adventofcode2019/Day12TheNbodyProblem.kt", "CodeLlama-7B-KStack": "class Day12TheNbodyProblem {\n    constructor()\n}"}
{"kt_path": "n81ur3__kotlin-coding-challenges__fdc5941/src/main/kotlin/adventofcode2018/Day15BeverageBandits.kt", "CodeLlama-7B-KStack": "class Day15BeverageBandits"}
{"kt_path": "n81ur3__kotlin-coding-challenges__fdc5941/src/main/kotlin/adventofcode2020/Day07HandyHaversacks.kt", "CodeLlama-7B-KStack": "class Day07HandyHaversacks {\n\n}"}
{"kt_path": "n81ur3__kotlin-coding-challenges__fdc5941/src/main/kotlin/adventofcode2018/Day07TheSumOfItsParts.kt", "CodeLlama-7B-KStack": "class Day07TheSumOfItsParts {\n    constructor()\n}"}
{"kt_path": "n81ur3__kotlin-coding-challenges__fdc5941/src/main/kotlin/adventofcode2017/Day25TheHaltingProblem.kt", "CodeLlama-7B-KStack": "class Day25TheHaltingProblem {\n    constructor()\n}"}
{"kt_path": "n81ur3__kotlin-coding-challenges__fdc5941/src/main/kotlin/adventofcode2019/Day06UniversalOrbitMap.kt", "CodeLlama-7B-KStack": "class Day06UniversalOrbitMap"}
{"kt_path": "n81ur3__kotlin-coding-challenges__fdc5941/src/main/kotlin/adventofcode2019/Day10MonitoringStation.kt", "CodeLlama-7B-KStack": "class Day10MonitoringStation {\n    constructor()\n}"}
{"kt_path": "n81ur3__kotlin-coding-challenges__fdc5941/src/main/kotlin/adventofcode2018/Day06ChronalCoordinates.kt", "CodeLlama-7B-KStack": "class Day06ChronalCoordinates {\n    constructor() {\n    }\n}"}
{"kt_path": "n81ur3__kotlin-coding-challenges__fdc5941/src/main/kotlin/adventofcode2020/Day21AllergenAssessment.kt", "CodeLlama-7B-KStack": "class Day21AllergenAssessment {\n    constructor()\n}"}
{"kt_path": "n81ur3__kotlin-coding-challenges__fdc5941/src/main/kotlin/adventofcode2017/Day24ElectromagneticMoat.kt", "CodeLlama-7B-KStack": "class Day24ElectromagneticMoat"}
{"kt_path": "n81ur3__kotlin-coding-challenges__fdc5941/src/main/kotlin/adventofcode2018/Day12SubterraneanSustainability.kt", "CodeLlama-7B-KStack": "class Day12SubterraneanSustainability {\n\n}"}
{"kt_path": "n81ur3__kotlin-coding-challenges__fdc5941/src/main/kotlin/adventofcode2018/Day23ExperimentalEmergencyTeleportation.kt", "CodeLlama-7B-KStack": "class Day23ExperimentalEmergencyTeleportation {\n    constructor()\n}"}
{"kt_path": "alebedev__aoc2022__d6ba46b/src/main/kotlin/Map.kt", "CodeLlama-7B-KStack": "class MapKt {\n    companion object {\n        @JvmStatic\n        fun main() {\n            AocMap.INSTANCE.solve()\n        }\n    }\n}"}
{"kt_path": "andrewrlee__adventOfCode2020__a9c21a6/src/main/kotlin/File09.kt", "CodeLlama-7B-KStack": "class Challenge09 {\n    fun solve() {\n        val a = 1\n        val b = 2\n        val c = 3\n        val d = 4\n        val e = 5\n        val f = 6\n        val g = 7\n        val h = 8\n        val i = 9\n        val j = 10\n        val k = 11\n        val l = 12\n        val m = 13\n        val n = 14\n        val o = 15\n        val p = 16\n        val q = 17\n        val r = 18\n        val s = 19\n        val t = 20\n        val u = 21\n        val v = 22\n        val w = 23\n        val x = 24\n        val y = 25\n        val z = 26\n        val A = 27\n        val B = 28\n        val C = 29\n        val D = 30\n        val E = 31\n        val F = 32\n        val G = 33\n        val H = 34\n        val I = 35\n        val J = 36\n        val K = 37\n        val L = 38\n        val M = 39\n        val N = 40\n        val O = 41\n        val P = 42\n        val Q = 43\n        val R = 44\n        val S = 45\n        val T = 46\n        val U = 47\n        val V = 48\n        val W = 49\n        val X = 50\n        val Y = 51\n        val Z = 52\n        val a1 = 53\n        val b1 = 54\n        val c1 = 55\n        val d1 = 56\n        val e1 = 57\n        val f1 = 58\n        val g1 = 59\n        val h1 = 60\n        val i1 = 61\n        val j1 = 62\n        val k1 = 63\n        val l1 = 64\n        val m1 = 65\n        val n1 = 66\n        val o1 = 67\n        val p1 = 68\n        val q1 = 69\n        val r1 = 70\n        val s1 = 71\n        val t1 = 72\n        val u1 = 73\n        val v1 = 74\n        val w1 = 75\n        val x1 = 76\n        val y1 = 77\n        val z1 = 78\n        val A1 = 79\n        val B1 = 80\n        val C1 = 81\n        val D1 = 82\n        val E1 = 83\n        val F1 = 84\n        val G1 = 85\n        val H1 = 86\n        val I1 = 87\n        val J1 = 88\n        val K1 = 89\n        val L1 = 90\n        val M1 = 91\n        val N1 = 92\n        val O1 = 93\n        val P1 = 94\n        val Q1 = 95\n        val R1 = 96\n        val S1 = 97\n        val T1 = 98\n        val U1 = 99\n        val V1 = 100\n        val W1 = 101\n        val X1 = 102\n        val Y1 = 103\n        val Z1 = 104\n        val a2 = 105\n        val b2 = 106\n        val c2 = 107\n        val d2 = 108\n        val e2 = 109\n        val f2 = 110\n        val g2 = 111\n        val h2 = 112\n        val i2 = 113\n        val j2 = 114\n        val k2 = 115\n        val l2 = 116\n        val m2 = 117\n        val n2 = 118\n        val o2 = 119\n        val p2 = 120\n        val q2 = 121\n        val r2 = 122\n        val s2 = 123\n        val t2 = 124\n        val u2 = 125\n        val v2 = 126\n        val w2 = 127\n        val x2 = 128\n        val y2 = 129\n        val z2 = 130\n        val A2 = 131\n        val B2 = 132\n        val C2 = 133\n        val D2 = 134\n        val E2 = 135\n        val F2 = 136\n        val G2 = 137\n        val H2 = 138\n        val I2 = 139\n        val J2 = 140\n        val K2 = 141\n        val L2 = 142\n        val M2 = 143\n        val N2 = 144\n        val O2 = 145\n        val P2 = 146\n        val Q2 = 147\n        val R2 = 148\n        val S2 = 149\n        val T2 = 150\n        val U2 = 151\n        val V2 = 152\n        val W2 = 153\n        val X2 = 154\n        val Y2 = 155\n        val Z2 = 156\n        val a3 = 157\n        val b3 = 158\n        val c3 = 159\n        val d3 = 160\n        val e3 = 161\n        val f3 = 162\n        val g3 = 163\n        val h3 = 164\n        val i3 = 165\n        val j3 = 166\n        val k3 = 167\n        val l3 = 168\n        val m3 = 169\n        val n3 = 170\n        val o3 = 171\n        val p3 = 172\n        val q3 = 173\n        val r3 = 174\n        val s3 = 175\n        val t3 = 176\n        val u3 = 177\n        val v3 = 178\n        val w3 = 179\n        val x3 = 180\n        val y3 = 181\n        val z3 = 182\n        val A3 = 183\n        val B3 = 184\n        val C3 = 185\n        val D3 = 186\n        val E3 = 187\n        val F3 = 188\n        val G3 = 189\n        val H3 = 190\n        val I3 = 191\n        val J3 = 192"}
{"kt_path": "andrewrlee__adventOfCode2020__a9c21a6/src/main/kotlin/File08.kt", "CodeLlama-7B-KStack": "class Challenge08 {\n    fun solve() {\n        val a = 1\n        val b = 2\n        val c = 3\n        val d = 4\n        val e = 5\n        val f = 6\n        val g = 7\n        val h = 8\n        val i = 9\n        val j = 10\n        val k = 11\n        val l = 12\n        val m = 13\n        val n = 14\n        val o = 15\n        val p = 16\n        val q = 17\n        val r = 18\n        val s = 19\n        val t = 20\n        val u = 21\n        val v = 22\n        val w = 23\n        val x = 24\n        val y = 25\n        val z = 26\n        val A = 27\n        val B = 28\n        val C = 29\n        val D = 30\n        val E = 31\n        val F = 32\n        val G = 33\n        val H = 34\n        val I = 35\n        val J = 36\n        val K = 37\n        val L = 38\n        val M = 39\n        val N = 40\n        val O = 41\n        val P = 42\n        val Q = 43\n        val R = 44\n        val S = 45\n        val T = 46\n        val U = 47\n        val V = 48\n        val W = 49\n        val X = 50\n        val Y = 51\n        val Z = 52\n        val a = 53\n        val b = 54\n        val c = 55\n        val d = 56\n        val e = 57\n        val f = 58\n        val g = 59\n        val h = 60\n        val i = 61\n        val j = 62\n        val k = 63\n        val l = 64\n        val m = 65\n        val n = 66\n        val o = 67\n        val p = 68\n        val q = 69\n        val r = 70\n        val s = 71\n        val t = 72\n        val u = 73\n        val v = 74\n        val w = 75\n        val x = 76\n        val y = 77\n        val z = 78\n        val A = 79\n        val B = 80\n        val C = 81\n        val D = 82\n        val E = 83\n        val F = 84\n        val G = 85\n        val H = 86\n        val I = 87\n        val J = 88\n        val K = 89\n        val L = 90\n        val M = 91\n        val N = 92\n        val O = 93\n        val P = 94\n        val Q = 95\n        val R = 96\n        val S = 97\n        val T = 98\n        val U = 99\n        val V = 100\n        val W = 101\n        val X = 102\n        val Y = 103\n        val Z = 104\n        val a = 105\n        val b = 106\n        val c = 107\n        val d = 108\n        val e = 109\n        val f = 110\n        val g = 111\n        val h = 112\n        val i = 113\n        val j = 114\n        val k = 115\n        val l = 116\n        val m = 117\n        val n = 118\n        val o = 119\n        val p = 120\n        val q = 121\n        val r = 122\n        val s = 123\n        val t = 124\n        val u = 125\n        val v = 126\n        val w = 127\n        val x = 128\n        val y = 129\n        val z = 130\n        val A = 131\n        val B = 132\n        val C = 133\n        val D = 134\n        val E = 135\n        val F = 136\n        val G = 137\n        val H = 138\n        val I = 139\n        val J = 140\n        val K = 141\n        val L = 142\n        val M = 143\n        val N = 144\n        val O = 145\n        val P = 146\n        val Q = 147\n        val R = 148\n        val S = 149\n        val T = 150\n        val U = 151\n        val V = 152\n        val W = 153\n        val X = 154\n        val Y = 155\n        val Z = 156\n        val a = 157\n        val b = 158\n        val c = 159\n        val d = 160\n        val e = 161\n        val f = 162\n        val g = 163\n        val h = 164\n        val i = 165\n        val j = 166\n        val k = 167\n        val l = 168\n        val m = 169\n        val n = 170\n        val o = 171\n        val p = 172\n        val q = 173\n        val r = 174\n        val s = 175\n        val t = 176\n        val u = 177\n        val v = 178\n        val w = 179\n        val x = 180\n        val y = 181\n        val z = 182\n        val A = 183\n        val B = 184\n        val C = 185\n        val D = 186\n        val E = 187\n        val F = 188\n        val G = 189\n        val H = 190\n        val I = 191\n        val J = 192\n        val K = 193\n        val L = 194\n        val M = 195\n        val N = 196\n        val O = 197\n        val P = 198\n        val Q = 199\n        val R = 200\n        val S = 201\n        val T = 202\n        val U = 203\n        val V = 204\n        val W = 205\n        val X = 206\n        val Y = 207\n        val Z ="}
{"kt_path": "andrewrlee__adventOfCode2020__a9c21a6/src/main/kotlin/File02.kt", "CodeLlama-7B-KStack": "class Challenge02 {\n    fun solve() {\n        val a = 1\n        val b = 2\n        val c = 3\n        val d = 4\n        val e = 5\n        val f = 6\n        val g = 7\n        val h = 8\n        val i = 9\n        val j = 10\n        val k = 11\n        val l = 12\n        val m = 13\n        val n = 14\n        val o = 15\n        val p = 16\n        val q = 17\n        val r = 18\n        val s = 19\n        val t = 20\n        val u = 21\n        val v = 22\n        val w = 23\n        val x = 24\n        val y = 25\n        val z = 26\n        val aa = 27\n        val bb = 28\n        val cc = 29\n        val dd = 30\n        val ee = 31\n        val ff = 32\n        val gg = 33\n        val hh = 34\n        val ii = 35\n        val jj = 36\n        val kk = 37\n        val ll = 38\n        val mm = 39\n        val nn = 40\n        val oo = 41\n        val pp = 42\n        val qq = 43\n        val rr = 44\n        val ss = 45\n        val tt = 46\n        val uu = 47\n        val vv = 48\n        val ww = 49\n        val xx = 50\n        val yy = 51\n        val zz = 52\n        val aaa = 53\n        val bbb = 54\n        val ccc = 55\n        val ddd = 56\n        val eee = 57\n        val fff = 58\n        val ggg = 59\n        val hhh = 60\n        val iii = 61\n        val jjj = 62\n        val kkk = 63\n        val lll = 64\n        val mmm = 65\n        val nnn = 66\n        val ooo = 67\n        val ppp = 68\n        val qqq = 69\n        val rrr = 70\n        val sss = 71\n        val ttt = 72\n        val uuu = 73\n        val vvv = 74\n        val www = 75\n        val xxx = 76\n        val yyy = 77\n        val zzz = 78\n        val aaaa = 79\n        val bbbb = 80\n        val cccc = 81\n        val dddd = 82\n        val eeee = 83\n        val ffff = 84\n        val gggg = 85\n        val hhhh = 86\n        val iiii = 87\n        val jjjj = 88\n        val kkkk = 89\n        val llll = 90\n        val mmmm = 91\n        val nnnn = 92\n        val oooo = 93\n        val pppp = 94\n        val qqqq = 95\n        val rrrr = 96\n        val ssss = 97\n        val tttt = 98\n        val uuuu = 99\n        val vvvv = 100\n        val wwww = 101\n        val xxxx = 102\n        val yyyy = 103\n        val zzzz = 104\n        val aaaaa = 105\n        val bbbbb = 106\n        val ccccc = 107\n        val ddddd = 108\n        val eeeee = 109\n        val fffff = 110\n        val ggggg = 111\n        val hhhhh = 112\n        val iiiii = 113\n        val jjjjj = 114\n        val kkkkk = 115\n        val lllll = 116\n        val mmmmm = 117\n        val nnnnn = 118\n        val ooooo = 119\n        val ppppp = 120\n        val qqqqq = 121\n        val rrrrr = 122\n        val sssss = 123\n        val ttttt = 124\n        val uuuuu = 125\n        val vvvvv = 126\n        val wwww"}
{"kt_path": "andrewrlee__adventOfCode2020__a9c21a6/src/main/kotlin/File07.kt", "CodeLlama-7B-KStack": "class Challenge07 {\n    fun solve() {\n        val a = 1\n        val b = 2\n        val c = 3\n        val d = 4\n        val e = 5\n        val f = 6\n        val g = 7\n        val h = 8\n        val i = 9\n        val j = 10\n        val k = 11\n        val l = 12\n        val m = 13\n        val n = 14\n        val o = 15\n        val p = 16\n        val q = 17\n        val r = 18\n        val s = 19\n        val t = 20\n        val u = 21\n        val v = 22\n        val w = 23\n        val x = 24\n        val y = 25\n        val z = 26\n        val A = 27\n        val B = 28\n        val C = 29\n        val D = 30\n        val E = 31\n        val F = 32\n        val G = 33\n        val H = 34\n        val I = 35\n        val J = 36\n        val K = 37\n        val L = 38\n        val M = 39\n        val N = 40\n        val O = 41\n        val P = 42\n        val Q = 43\n        val R = 44\n        val S = 45\n        val T = 46\n        val U = 47\n        val V = 48\n        val W = 49\n        val X = 50\n        val Y = 51\n        val Z = 52\n        val a1 = 53\n        val b1 = 54\n        val c1 = 55\n        val d1 = 56\n        val e1 = 57\n        val f1 = 58\n        val g1 = 59\n        val h1 = 60\n        val i1 = 61\n        val j1 = 62\n        val k1 = 63\n        val l1 = 64\n        val m1 = 65\n        val n1 = 66\n        val o1 = 67\n        val p1 = 68\n        val q1 = 69\n        val r1 = 70\n        val s1 = 71\n        val t1 = 72\n        val u1 = 73\n        val v1 = 74\n        val w1 = 75\n        val x1 = 76\n        val y1 = 77\n        val z1 = 78\n        val A1 = 79\n        val B1 = 80\n        val C1 = 81\n        val D1 = 82\n        val E1 = 83\n        val F1 = 84\n        val G1 = 85\n        val H1 = 86\n        val I1 = 87\n        val J1 = 88\n        val K1 = 89\n        val L1 = 90\n        val M1 = 91\n        val N1 = 92\n        val O1 = 93\n        val P1 = 94\n        val Q1 = 95\n        val R1 = 96\n        val S1 = 97\n        val T1 = 98\n        val U1 = 99\n        val V1 = 100\n        val W1 = 101\n        val X1 = 102\n        val Y1 = 103\n        val Z1 = 104\n        val a2 = 105\n        val b2 = 106\n        val c2 = 107\n        val d2 = 108\n        val e2 = 109\n        val f2 = 110\n        val g2 = 111\n        val h2 = 112\n        val i2 = 113\n        val j2 = 114\n        val k2 = 115\n        val l2 = 116\n        val m2 = 117\n        val n2 = 118\n        val o2 = 119\n        val p2 = 120\n        val q2 = 121\n        val r2 = 122\n        val s2 = 123\n        val t2 = 124\n        val u2 = 125\n        val v2 = 126\n        val w2 = 127\n        val x2 = 128\n        val y2 = 129\n        val z2 = 130\n        val A2 = 131\n        val B2 = 132\n        val C2 = 133\n        val D2 = 134\n        val E2 = 135\n        val F2 = 136\n        val G2 = 137\n        val H2 = 138\n        val I2 = 139\n        val J2 = 140\n        val K2 = 141\n        val L2 = 142\n        val M2 = 143\n        val N2 = 144\n        val O2 = 145\n        val P2 = 146\n        val Q2 = 147\n        val R2 = 148\n        val S2 = 149\n        val T2 = 150\n        val U2 = 151\n        val V2 = 152\n        val W2 = 153\n        val X2 = 154\n        val Y2 = 155\n        val Z2 = 156\n        val a3 = 157\n        val b3 = 158\n        val c3 = 159\n        val d3 = 160\n        val e3 = 161\n        val f3 = 162\n        val g3 = 163\n        val h3 = 164\n        val i3 = 165\n        val j3 = 166\n        val k3 = 167\n        val l3 = 168\n        val m3 = 169\n        val n3 = 170\n        val o3 = 171\n        val p3 = 172\n        val q3 = 173\n        val r3 = 174\n        val s3 = 175\n        val t3 = 176\n        val u3 = 177\n        val v3 = 178\n        val w3 = 179\n        val x3 = 180\n        val y3 = 181\n        val z3 = 182\n        val A3 = 183\n        val B3 = 184\n        val C3 = 185\n        val D3 = 186\n        val E3 = 187\n        val F3 = 188\n        val G3 = 189\n        val H3 = 190\n        val I3 = 191\n        val J3 = 192"}
{"kt_path": "charlesfranciscodev__codingame__3ec8060/puzzles/kotlin/src/war/war.kt", "CodeLlama-7B-KStack": "fun main(args: Array<String>) {\n    val game = Game()\n    game.play()\n}"}
{"kt_path": "al-volkov__spbu_2020_kotlin_homeworks__5049681/src/main/kotlin/homework_5/Task1.kt", "CodeLlama-7B-KStack": "fun isNumber(s: String): Boolean {\n    return s.toIntOrNull() != null\n}"}
{"kt_path": "iafsilva__codility-lessons__5d86aef/src/main/kotlin/lesson3/FrogJmp.kt", "CodeLlama-7B-KStack": "class FrogJmp {\n    fun solution(x: Int, y: Int, d: Int): Int {\n        val n = x - y\n        val k = n / d\n        val m = n % d\n        return if (m == 0) k else k + 1\n    }\n}"}
{"kt_path": "mikhalchenko-alexander__advent-of-kotlin-2018-week1__c483ade/src/main/kotlin/com/anahoret/pathfinding/MarkingWayOnMap.kt", "CodeLlama-7B-KStack": "fun addPath(map: String): String {\n    requireNotNull(map) { \"Parameter map must not be null\" }\n    return Graph.INSTANCE.getMapWithPath(map)\n}"}
{"kt_path": "charlesfranciscodev__codingame__3ec8060/puzzles/kotlin/src/surface/surface.kt", "CodeLlama-7B-KStack": "class SurfaceKt {\n    companion object {\n        const val LAND = '.'\n        const val WATER = '~'\n        const val DEFAULT_INDEX = 0\n    }\n\n    fun main(args: Array<String>) {\n        val grid = Grid()\n        grid.readGameInput()\n        grid.test()\n    }\n}"}
{"kt_path": "andrew-suprun__AoC-2023__dd5f53e/src/main/kotlin/day03_oop/day03_oop.kt", "CodeLlama-7B-KStack": "class Part1(val input: String) {\n    fun run() {\n        val data = input.split(\"\\n\").map { it.toInt() }\n        val result = data.fold(0) { acc, i -> acc + i }\n        println(result)\n    }\n}\n\nclass Part2(val input: String) {\n    fun run() {\n        val data = input.split(\"\\n\").map { it.toInt() }\n        val result = data.fold(0) { acc, i -> acc + i }\n        println(result)\n    }\n}\n\nfun main() {\n    val input = \"\"\"\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1"}
{"kt_path": "getnahid__programing-problem-solves-kotlin__589c392/CyclicRotation.kt", "CodeLlama-7B-KStack": "fun solution(a: IntArray, k: Int): IntArray {\n    val n = a.size\n    val result = IntArray(n)\n    var i = 0\n    var j = k % n\n    while (i < n) {\n        result[i] = a[(j + i) % n]\n        i++\n        j++\n    }\n    return result\n}"}
{"kt_path": "linisme__LeetCodeInKotlin__4382afc/LongestPalindrome.kt", "CodeLlama-7B-KStack": "fun main(args: Array<String>) {\n    println(LongestPalindromeSolution().longestPalindrome(\"abbccbbdl\"))\n}"}
{"kt_path": "iafsilva__codility-lessons__5d86aef/src/main/kotlin/lesson2/OddOccurrencesInArray.kt", "CodeLlama-7B-KStack": "package lesson2\n\nclass OddOccurrencesInArray {\n    fun solution(A: IntArray): Int {\n        var odd = 0\n        var even = 0\n        for (a in A) {\n            if (a % 2 == 0) {\n                even += a\n            } else {\n                odd += a\n            }\n        }\n        return odd - even\n    }\n}"}
{"kt_path": "jjeda__playground__5d1ee6c/src/oop/algorithm/ProgressionNextNumber.kt", "CodeLlama-7B-KStack": "package oop.algorithm\n\nclass ProgressionNextNumber {\n    fun solution(a: IntArray): Int {\n        val helper = ProgressionHelper(a.toList())\n        return helper.nextInt()\n    }\n}\n\nclass ProgressionHelper(private val list: List<Int>) {\n    private var index = 0\n    private var current = 0\n\n    init {\n        list.forEach {\n            if (it > current) {\n                current = it\n            }\n        }\n    }\n\n    fun nextInt(): Int {\n        val result = current\n        index++\n        if (index < list.size) {\n            current = list[index]\n        }\n        return result\n    }\n}"}
{"kt_path": "linisme__LeetCodeInKotlin__4382afc/LengthOfLongestSubstring.kt", "CodeLlama-7B-KStack": "fun main(args: Array<String>) {\n    val solution = LengthOfLongestSubstringSolution2()\n    val result = solution.lengthOfLongestSubstring(\"abba\")\n    println(result)\n}"}
{"kt_path": "nschulzke__mancala-puzzle-solver__b130d3b/src/main/kotlin/Main.kt", "CodeLlama-7B-KStack": "private val mancalaIndices = setOf(6, 13)"}
{"kt_path": "sysion__DataStructureAlgorithmKt__6f9afda/TwoSumLessThanTarget.kt", "CodeLlama-7B-KStack": "fun main() {\n    val intArray = intArrayOf(10, 20, 30)\n    val target = 15\n    SumTwoNumbersLessThanTarget(intArray, target)\n}\n\nfun SumTwoNumbersLessThanTarget(intArray: IntArray, target: Int): Int {\n    var sum = -1\n    for (i in intArray.indices) {\n        for (j in intArray.indices) {\n            if (i != j && intArray[i] + intArray[j] < target) {\n                sum = intArray[i] + intArray[j]\n                break\n            }\n        }\n    }\n    return sum\n}"}
{"kt_path": "linisme__LeetCodeInKotlin__4382afc/FineMedianSortedArrays.kt", "CodeLlama-7B-KStack": "fun main(args: Array<String>) {\n    val solution = FindMedianSortedArraysSolution()\n    val nums1 = intArrayOf(0, 2)\n    val nums2 = intArrayOf(1, 3)\n    val median = solution.findMedianSortedArrays(nums1, nums2)\n    println(median)\n}"}
{"kt_path": "n81ur3__kotlin-coding-challenges__fdc5941/src/main/kotlin/adventofcode2018/Day18SettlersOfTheNorthPole.kt", "CodeLlama-7B-KStack": "fun hash(input: List<List<AreaElement>>): Int {\n    val list = input.toTypedArray()\n    return Arrays.deepHashCode(list)\n}"}
{"kt_path": "iafsilva__codility-lessons__5d86aef/src/main/kotlin/lesson3/PermMissingElem.kt", "CodeLlama-7B-KStack": "package lesson3\n\nimport kotlin.collections.ArraysKt\n\npublic final class PermMissingElem {\n    public PermMissingElem() {\n    }\n\n    public final int solution(int[] a) {\n        Intrinsics.checkNotNullParameter(a, \"a\");\n        ArraysKt.sort(a);\n        int i = 0;\n        int i2 = a.length;\n        if (i2 != 0) {\n            if (i2 != 1) {\n                int i3 = 0;\n                while (i3 < i2) {\n                    int i4 = a[i3];\n                    int i5 = i3 + 1;\n                    if (i4 != i5) {\n                        return i5;\n                    }\n                    i3 = i5;\n                }\n            }\n            return 1;\n        }\n        return 1;\n    }\n}"}
{"kt_path": "getnahid__programing-problem-solves-kotlin__589c392/OddOccurrencesInArray.kt", "CodeLlama-7B-KStack": "fun solution(A: IntArray): Int {\n    A.sort()\n    var odd = 0\n    var even = 1\n    var i = 0\n    while (i < A.size) {\n        if (A[i] == A[i + 1]) {\n            i += 2\n        } else if (A[i] == A[i + 2]) {\n            i += 3\n        } else if (A[i] == A[i + 3]) {\n            i += 4\n        } else if (A[i] == A[i + 4]) {\n            i += 5\n        } else {\n            if (A[i] % 2 == 0) {\n                even++\n            } else {\n                odd++\n            }\n            i++\n        }\n    }\n    return if (odd > even) A[0] else A[A.size - 1]\n}"}
{"kt_path": "rupeshsasne__coursera-algorithms-part1__341634c/classroom/src/main/kotlin/com/radix2/algorithms/week3/SortingLinkedList.kt", "CodeLlama-7B-KStack": "fun main(args: Array<String>) {\n    val list = LinkedList<Int>()\n    for (i in 0..10) {\n        list.add(i)\n    }\n    list.reverseRecurrsive()\n    println(list)\n}"}
{"kt_path": "boris920308__HoOne__8881468/hoon/HoonAlgorithm/src/main/kotlin/boj/week02/recursive_function/FibonacciSequence5.kt", "CodeLlama-7B-KStack": "fun main() {\n    val scanner = Scanner(System.`in`)\n    val n = scanner.nextInt()\n    println(fibonacci(n))\n}\n\nfun fibonacci(n: Int): Int {\n    return if (n <= 1) n else fibonacci(n - 1) + fibonacci(n - 2)\n}"}
{"kt_path": "Codextor__kotlin-codes__68b75a7/src/main/kotlin/PerfectSquares.kt", "CodeLlama-7B-KStack": "fun numSquares(n: Int): Int {\n    var i = 0\n    var j = n\n    val a = IntArray(n)\n    a[0] = 1\n    var k = 1\n    while (i < j) {\n        k = k + 1\n        a[k] = k * k\n        i = a[k]\n        j = a[k] + k\n    }\n    return a[k]\n}"}
{"kt_path": "Laomedeia__Java8InAction__0dcd843/src/main/java/leetcode/a167_twoSumInputSortArray_SIMPLE/Solution.kt", "CodeLlama-7B-KStack": "class Solution {\n    fun twoSum(numbers: IntArray, target: Int): IntArray {\n        var left = 0\n        var right = numbers.size - 1\n        while (left < right) {\n            val sum = numbers[left] + numbers[right]\n            if (sum == target) {\n                return intArrayOf(left + 1, right + 1)\n            } else if (sum < target) {\n                left++\n            } else {\n                right--\n            }\n        }\n        return intArrayOf()\n    }\n}"}
{"kt_path": "ariannysOronoz__tutorialKotlin__a779f54/CombinacionesPalabras/src/main/java/Main.kt", "CodeLlama-7B-KStack": "fun main(args: Array<String>) {\n    val permutation = Permutation()\n    val caracol = \"CARACOL\"\n    val caracolLength = caracol.length\n    permutation.findPermutation(caracol, 0, caracolLength)\n    println(caracol)\n    val caracol2 = \"caracol\"\n    val caracol2Length = caracol2.length\n    permutation.findPermutation(caracol2, 0, caracol2Length)\n}"}
{"kt_path": "scientificCommunity__blog-sample__36e291c/algorithms/src/main/kotlin/org/baichuan/sample/algorithms/leetcode/middle/MaxArea.kt", "CodeLlama-7B-KStack": "class MaxArea {\n    fun maxArea(height: IntArray): Int {\n        var maxArea = 0\n        var left = 0\n        var right = height.size - 1\n\n        while (left < right) {\n            val area = (right - left) * minOf(height[left], height[right])\n            maxArea = maxOf(maxArea, area)\n\n            if (height[left] < height[right]) {\n                left++\n            } else {\n                right--\n            }\n        }\n\n        return maxArea\n    }\n}"}
{"kt_path": "boris920308__HoOne__8881468/hoon/HoonAlgorithm/src/main/kotlin/programmers/lv01/Lv1_70128.kt", "CodeLlama-7B-KStack": "fun main(args: Array<String>) {\n    val a = intArrayOf(1, 2, 3, 4)\n    val b = intArrayOf(-3, -1, 0, 2)\n    println(solution(a, b))\n}\n\nfun solution(a: IntArray, b: IntArray): Int {\n    var sum = 0\n    var i = 0\n    while (i < a.size) {\n        sum += a[i] * b[i]\n        i++\n    }\n    return sum\n}"}
{"kt_path": "kotler-dev__kotlin-leetcode__0659e72/src/main/kotlin/exercise/easy/id121/Solution121.kt", "CodeLlama-7B-KStack": "class Solution121 {\n    fun maxProfit(prices: IntArray): Int {\n        if (prices.size < 2) return 0\n        var maxProfit = Int.MAX_VALUE\n        var minPrice = prices[0]\n        var maxPrice = prices[0]\n        for (i in 1 until prices.size) {\n            if (prices[i] < minPrice) {\n                minPrice = prices[i]\n            }\n            if (prices[i] - minPrice > maxProfit) {\n                maxProfit = prices[i] - minPrice\n            }\n        }\n        return maxProfit\n    }\n}"}
{"kt_path": "marc-bouvier-katas__Kotlin_EduTools_Advent_of_Code_2021__12cf74c/Day 5/Part 1/src/Task.kt", "CodeLlama-7B-KStack": "class Task {\n    companion object {\n        fun overlaps(ventsLines: Array<String>): Int {\n            val lines = Lines(null, 1, null)\n            val size = ventsLines.size\n            var i = 0\n            while (i < size) {\n                val j = i\n                while (j < size) {\n                    lines.mergeWith(Line.Companion.fromString(ventsLines[j]).toLine())\n                    j++\n                }\n                i++\n            }\n            return lines.overlaps()\n        }\n    }\n}"}
{"kt_path": "Laomedeia__Java8InAction__0dcd843/src/main/java/leetcode/a392_isSubSequence_HARD/Solution.kt", "CodeLlama-7B-KStack": "class Solution {\n    fun isSubsequence(s: String, t: String): Boolean {\n        if (s.isEmpty()) return true\n        if (t.isEmpty()) return false\n        var i = 0\n        var j = 0\n        while (j < t.length) {\n            if (s[i] == t[j]) {\n                i++\n                if (i == s.length) return true\n            }\n            j++\n        }\n        return false\n    }\n}"}
{"kt_path": "nickperov__Algorithms__6696f5d/fibonacci/src/main/kotlin/com/nickperov/stud/algorithms/fibonacci/FibonacciLargeGenerator.kt", "CodeLlama-7B-KStack": "package com.nickperov.stud.algorithms.fibonacci\n\nimport java.math.BigInteger\n\nclass FibonacciLargeTailRecursiveOptimisedGenerator : FibonacciLargeGenerator() {\n\n    override fun calculate(n: Int): BigInteger {\n        tailrec fun fib(n: Int, a: BigInteger, b: BigInteger): BigInteger {\n            return if (n == 0) a else fib(n - 1, b, a + b)\n        }\n\n        return fib(n, BigInteger.ZERO, BigInteger.ONE)\n    }\n}\n\nclass FibonacciLargeGenerator {\n    abstract fun calculate(n: Int): BigInteger\n}\n\nfun main() {\n    println(\"Hello, large Fibonacci numbers\")\n    println(FibonacciLargeTailRecursiveOptimisedGenerator().calculate(1000000))\n}"}
{"kt_path": "TonnyL__Windary__39f85cd/Kotlin/src/UniqueBinarySearchTrees.kt", "CodeLlama-7B-KStack": "class UniqueBinarySearchTrees {\n    fun numTrees(n: Int): Int {\n        var count = 0\n        val dp = IntArray(n + 1)\n        dp[0] = 1\n        dp[1] = 1\n        for (i in 2..n) {\n            for (j in 0..i) {\n                dp[i] += dp[j] * dp[i - j - 1]\n            }\n        }\n        return dp[n]\n    }\n}"}
{"kt_path": "quincy__euler-kotlin__01d96f6/src/main/kotlin/com/quakbo/euler/Euler4.kt", "CodeLlama-7B-KStack": "fun isPalindrome(number: Int): Boolean {\n    val reversed = number.toString().reversed()\n    return number.toString() == reversed\n}\n\nfun main(args: Array<String>) {\n    for (i in 999 downTo 99) {\n        for (j in 999 downTo 99) {\n            val product = i * j\n            if (isPalindrome(product)) {\n                println(product)\n            }\n        }\n    }\n}"}
{"kt_path": "getupminaaa__Algorithm__01187e2/Algorithm/src/main/kotlin/programmers/level1/personalInfoCollectionValidityPeriod.kt", "CodeLlama-7B-KStack": "fun main() {\n    val solution = Solution()\n    val input1 = arrayOf(\"A\", \"B\", \"C\")\n    val input2 = arrayOf(\"2021.05.02 A\", \"2021.07.01 B\", \"2022.02.19 C\", \"2022.02.20 C\")\n    val output = solution.solution(\"2022.05.19\", input1, input2)\n    println(output.joinToString(separator = \"\\n\"))\n}\n\nclass Solution {\n    fun solution(input: String, input1: Array<String>, input2: Array<String>): Array<Int> {\n        val output = IntArray(input1.size)\n        val input1Map = mutableMapOf<String, Int>()\n        for (i in input1.indices) {\n            input1Map[input1[i]] = i\n        }\n        for (i in input2.indices) {\n            val date = input2[i].split(\" \")[0]\n            val name = input2[i].split(\" \")[1]\n            val index = input1Map[name]!!\n            if (date.compareTo(input) <= 0) {\n                output[index]++\n            }\n        }\n        return output\n    }\n}"}
{"kt_path": "iafsilva__codility-lessons__5d86aef/src/main/kotlin/lesson1/BinaryGap.kt", "CodeLlama-7B-KStack": "package lesson1\n\nclass BinaryGap {\n    fun solution(N: Int): Int {\n        var maxGap = 0\n        var currentGap = 0\n        var prev = 0\n        for (i in N.toString().toCharArray()) {\n            if (i == '1') {\n                if (currentGap > maxGap) {\n                    maxGap = currentGap\n                }\n                currentGap = 0\n                prev = 1\n            } else if (i == '0' && prev == 1) {\n                currentGap++\n            }\n        }\n        return maxGap\n    }\n}"}
{"kt_path": "zys0909__CodeLabs__869c7c2/src/com/leecode/array/Code1.kt", "CodeLlama-7B-KStack": "fun missingNumber1(nums: IntArray): Int {\n    var i = 0\n    var j = 0\n    val n = nums.size\n    for (i in 0..n - 1) {\n        if (nums[i] != i) {\n            break\n        }\n    }\n    for (j in 0..n - 1) {\n        if (nums[j] == i) {\n            break\n        }\n    }\n    return i\n}\n\nfun missingNumber2(nums: IntArray): Int {\n    var i = 0\n    var j = 0\n    val n = nums.size - 1\n    for (i in 0..n) {\n        if (nums[i] != i) {\n            break\n        }\n    }\n    for (j in 0..n) {\n        if (nums[j] == i) {\n            break\n        }\n    }\n    return i\n}"}
{"kt_path": "ykrytsyn__leetcode-in-kotlin__0acf2a6/src/main/kotlin/leetcode/ArrangingCoins.kt", "CodeLlama-7B-KStack": "class ArrangingCoins {\n    fun bruteForce(n: Int): Int {\n        var coins = 0\n        var i = 1\n        while (i <= n) {\n            coins++\n            i += 2\n        }\n        return coins\n    }\n\n    fun binarySearch(n: Int): Int {\n        var left = 0L\n        var right = n.toLong()\n        var mid = 0L\n        while (left <= right) {\n            mid = (left + right) / 2\n            val numCoins = (mid * (mid + 1)) / 2\n            if (numCoins == n) {\n                return mid.toInt()\n            }\n            if (numCoins < n) {\n                left = mid + 1\n            } else {\n                right = mid - 1\n            }\n        }\n        return (left - 1).toInt()\n    }\n}"}
{"kt_path": "mayabot__mynlp__b980da3/mynlp/src/main/java/com/mayabot/nlp/module/nwd/ValueObjects.kt", "CodeLlama-7B-KStack": "public final class ValueObjectsKt {\n    public static final void addTo(HashMap<Character, IntCount> map, char c, int i) {\n        Intrinsics.checkNotNullParameter(map, \"receiver$0\");\n        map.put(Character.valueOf(c), new IntCount(i));\n    }\n}"}
{"kt_path": "jjrodcast__CompetitiveProblems__a91868c/leetcode/UniquePathsTwo.kt", "CodeLlama-7B-KStack": "class Solution {\n    fun uniquePathsWithObstacles(obstacleGrid: Array<IntArray>): Int {\n        val m = obstacleGrid.size\n        val n = obstacleGrid[0].size\n        val dp = Array(m) { IntArray(n) }\n        dp[0][0] = if (obstacleGrid[0][0] == 1) 0 else 1\n        for (i in 1 until m) {\n            dp[i][0] = if (obstacleGrid[i][0] == 1) 0 else dp[i - 1][0]\n        }\n        for (j in 1 until n) {\n            dp[0][j] = if (obstacleGrid[0][j] == 1) 0 else dp[0][j - 1]\n        }\n        for (i in 1 until m) {\n            for (j in 1 until n) {\n                if (obstacleGrid[i][j] == 1) {\n                    dp[i][j] = 0\n                } else {\n                    dp[i][j] = dp[i - 1][j] + dp[i][j - 1]\n                }\n            }\n        }\n        return dp[m - 1][n - 1]\n    }\n}\n\nfun main() {\n    val obstacleGrid = arrayOf(\n        intArrayOf(0, 0, 0),\n        intArrayOf(0, 1, 0),\n        intArrayOf(0, 0, 0)\n    )\n    val solution = Solution()\n    println(solution.uniquePathsWithObstacles(obstacleGrid))\n}"}
{"kt_path": "boris920308__HoOne__8881468/hoon/HoonAlgorithm/src/main/kotlin/programmers/lv01/Lv1_77884.kt", "CodeLlama-7B-KStack": "fun main(args: Array<String>) {\n    println(solution(13, 17))\n}\n\nfun solution(a: Int, b: Int): Int {\n    var answer = 0\n    var i = a\n    var j = b\n    while (i <= j) {\n        if (countDivisors(i) % 2 == 0) {\n            answer += i\n        } else {\n            answer -= i\n        }\n        i++\n    }\n    return answer\n}\n\nfun countDivisors(n: Int): Int {\n    var answer = 0\n    var i = 1\n    while (i <= n) {\n        if (n % i == 0) {\n            answer += 2\n        }\n        i++\n    }\n    return answer\n}"}
{"kt_path": "Codextor__kotlin-codes__68b75a7/src/main/kotlin/PartitionArrayForMaximumSum.kt", "CodeLlama-7B-KStack": "fun maxSumAfterPartitioning(arr: IntArray, k: Int): Int {\n    require(arr.isNotEmpty()) { \"Empty array\" }\n    require(k > 0) { \"k should be positive\" }\n\n    val maxSum = IntArray(arr.size + 1)\n    maxSum[0] = 0\n    var maxSumIndex = 0\n    for (i in 1..arr.size) {\n        maxSum[i] = maxSum[i - 1]\n        for (j in 1..k) {\n            val sum = maxSum[i - j] + arr[i - 1]\n            if (sum > maxSum[i]) {\n                maxSum[i] = sum\n                maxSumIndex = i - j\n            }\n        }\n    }\n    return maxSum[arr.size]\n}"}
{"kt_path": "scientificCommunity__blog-sample__36e291c/algorithms/src/main/kotlin/org/baichuan/sample/algorithms/leetcode/simple/interview/MajorityElement.kt", "CodeLlama-7B-KStack": "class MajorityElement {\n    fun majorityElement(nums: IntArray): Int {\n        var count1 = 0\n        var count2 = 0\n        var candidate1 = 0\n        var candidate2 = 0\n        for (i in nums.indices) {\n            if (count1 == 0) {\n                candidate1 = nums[i]\n                count1++\n            } else if (candidate1 == nums[i]) {\n                count1++\n            } else {\n                count2++\n            }\n            if (count2 == 0) {\n                candidate2 = nums[i]\n                count2++\n            } else if (candidate2 == nums[i]) {\n                count2++\n            } else {\n                count1--\n            }\n            if (count1 > count2) {\n                return candidate1\n            }\n        }\n        return candidate2\n    }\n}"}
{"kt_path": "rhavran__ProjectEuler__1115674/src/Utils.kt", "CodeLlama-7B-KStack": "package com.example\n\nimport java.util.*\n\npublic class UtilsKt {\n    public static final long dividers(long n) {\n        var sum = 1L\n        val factors = PrimeFactorization.INSTANCE.primeFactors(n)\n        for (factor in factors.entries) {\n            sum *= factor.value.toLong() + 1\n        }\n        return sum\n    }\n\n    public static final long sequenceSumStartingFrom(long n, long m) {\n        return sumFromTo(m, n)\n    }\n\n    public static final long sumFromTo(long n, long m) {\n        var sum = n\n        for (i in m..n) {\n            sum += i\n        }\n        return sum\n    }\n}"}
{"kt_path": "jimmymorales__project-euler__e881cad/src/main/kotlin/Problem4.kt", "CodeLlama-7B-KStack": "fun main() {\n    println(largestPalindrome())\n}\n\nfun largestPalindrome(): Int {\n    var largest = 0\n    for (i in 999 downTo 99) {\n        for (j in i downTo 100) {\n            val product = i * j\n            if (isPalindrome(product) && product > largest) {\n                largest = product\n            }\n        }\n    }\n    return largest\n}\n\nfun isPalindrome(number: Int): Boolean {\n    var reversed = 0\n    var original = number\n    do {\n        reversed = reversed * 10 + original % 10\n        original /= 10\n    } while (original != 0)\n    return number == reversed\n}\n\nfun reverse(number: Int): Int {\n    var reversed = 0\n    var original = number\n    do {\n        reversed = reversed * 10 + original % 10\n        original /= 10\n    } while (original != 0)\n    return reversed\n}"}
{"kt_path": "Codextor__kotlin-codes__68b75a7/src/main/kotlin/PalindromicSubstrings.kt", "CodeLlama-7B-KStack": "class PalindromicSubstringsKt {\n    companion object {\n        fun countSubstrings(s: String): Int {\n            var count = 0\n            var i = 0\n            var j = 0\n            val n = s.length\n            while (i < n && j < n) {\n                count += countSubstringsWithCenter(s, i, j)\n                i++\n                j++\n            }\n            return count\n        }\n\n        private fun countSubstringsWithCenter(s: String, i: Int, j: Int): Int {\n            var count = 0\n            while (i >= 0 && j < s.length && s[i] == s[j]) {\n                count++\n                i--\n                j++\n            }\n            return count\n        }\n    }\n}"}
{"kt_path": "antop-dev__algorithm__9a3e762/src/main/kotlin/kr/co/programmers/P12952.kt", "CodeLlama-7B-KStack": "class P12952 {\n    fun solution(n: Int): Int {\n        val answer = IntArray(n)\n        return dfs(answer, 0)\n    }\n\n    private fun dfs(answer: IntArray, idx: Int): Int {\n        if (idx == answer.size) return 1\n        var max = 0\n        for (i in 0 until answer.size) {\n            answer[idx] = i\n            if (valid(answer, idx)) {\n                max = Math.max(max, dfs(answer, idx + 1))\n            }\n        }\n        return max\n    }\n\n    private fun valid(answer: IntArray, idx: Int): Boolean {\n        for (i in 0 until idx) {\n            if (Math.abs(answer[i] - answer[idx]) == idx - i) return false\n        }\n        return true\n    }\n}"}
{"kt_path": "ILIYANGERMANOV__algorithms__4abe4b5/Algorithms/src/main/kotlin/MaxSubArray.kt", "CodeLlama-7B-KStack": "class MaxSubArray {\n    fun maxSubArray(nums: IntArray): Int {\n        var max = nums[0]\n        var sum = nums[0]\n        for (i in 1 until nums.size) {\n            if (sum < 0) {\n                sum = nums[i]\n            } else {\n                sum += nums[i]\n            }\n            max = max(max, sum)\n        }\n        return max\n    }\n}"}
{"kt_path": "AlBovo__Compiti__56a3131/src/main/kotlin/segtree.kt", "CodeLlama-7B-KStack": "class SegmentTree(val arr: Array<Int>) {\n    private val n = arr.size\n    private val seg = Array(4 * n) { 0 }\n\n    init {\n        build(arr, 1, 0, n - 1)\n    }\n\n    private fun build(arr: Array<Int>, node: Int, left: Int, right: Int) {\n        if (left == right) {\n            seg[node] = arr[left]\n            return\n        }\n        val mid = (left + right) / 2\n        build(arr, 2 * node, left, mid)\n        build(arr, 2 * node + 1, mid + 1, right)\n        seg[node] = seg[2 * node] + seg[2 * node + 1]\n    }\n\n    fun getSum(left: Int, right: Int): Int {\n        return getSum(1, 0, n - 1, left, right)\n    }\n\n    private fun getSum(node: Int, left: Int, right: Int, qleft: Int, qright: Int): Int {\n        if (qleft <= left && qright >= right) {\n            return seg[node]\n        }\n        val mid = (left + right) / 2\n        var sum = 0\n        if (qleft <= mid) sum += getSum(2 * node, left, mid, qleft, qright)\n        if (qright > mid) sum += getSum(2 * node + 1, mid + 1, right, qleft, qright)\n        return sum\n    }\n}\n\nfun main() {\n    val arr = arrayOf(2, 1, 3, 4, 5, 6)\n    val seg = SegmentTree(arr)\n    println(seg.getSum(0, 4))\n}"}
{"kt_path": "3mtee__exercism-kotlin__6e3eb88/complex-numbers/src/main/kotlin/ComplexNumbers.kt", "CodeLlama-7B-KStack": "fun exponential(c: ComplexNumber): ComplexNumber {\n    requireNotNull(c) { \"Parameter specified as non-null is null: c\" }\n    return if (c.real == 0.0) {\n        ComplexNumber(1.0, 0.0)\n    } else {\n        ComplexNumber(Math.cos(c.imag), Math.sin(c.imag)) * ComplexNumber(Math.pow(c.real, 2.0), 0.0)\n    }\n}"}
{"kt_path": "perihanmirkelam__ProjectEuler__a24ac44/src/main/kotlin/P014_LongestCollatzSequence.kt", "CodeLlama-7B-KStack": "fun p14() {\n    var max = 0L\n    var maxNum = 0\n    var num = 0L\n    var count = 0\n    for (i in 1..1000000) {\n        num = i\n        count = 1\n        while (num != 1) {\n            if (num % 2 == 0L) {\n                num /= 2\n            } else {\n                num = 3 * num + 1\n            }\n            count++\n        }\n        if (count > max) {\n            max = count\n            maxNum = i\n        }\n    }\n    println(\"A14: $maxNum\")\n}"}
{"kt_path": "iafsilva__codility-lessons__5d86aef/src/main/kotlin/lesson2/CyclicRotation.kt", "CodeLlama-7B-KStack": "class CyclicRotation {\n    fun solution(a: IntArray, k: Int): IntArray {\n        if (a.isEmpty()) return intArrayOf()\n        if (a.size == 1) return a\n        if (k == 0) return a\n        if (k % a.size == 0) return a\n        val k1 = k % a.size\n        val result = IntArray(a.size)\n        val queue = ArrayDeque<Int>()\n        queue.addAll(a.toList())\n        var i = 0\n        while (i < a.size) {\n            result[i] = queue.removeLast()\n            queue.addFirst(result[i])\n            i++\n        }\n        return result.sliceArray(0 until k1) + result.sliceArray(k1 until a.size)\n    }\n}"}
{"kt_path": "boris920308__HoOne__8881468/hoon/HoonAlgorithm/src/main/kotlin/programmers/lv01/Lv1_12912.kt", "CodeLlama-7B-KStack": "fun main() {\n    println(solution(3, 5))\n    println(solution(3, 3))\n    println(solution(5, 3))\n}\n\nfun solution(a: Int, b: Int): Long {\n    var sum = 0L\n    var i = a\n    while (i <= b) {\n        sum += i\n        i++\n    }\n    return sum\n}\n\nfun secondSolution(a: Int, b: Int): Long {\n    return if (a <= b) {\n        (a..b).sumOf { it.toLong() }\n    } else {\n        (b..a).sumOf { it.toLong() }\n    }\n}"}
{"kt_path": "darian-catalin-cucer__divide-and-conquer-algorithms__1cea70d/kt.kt", "CodeLlama-7B-KStack": "fun quickSort(arr: IntArray, left: Int, right: Int) {\n    if (left < right) {\n        val pivot = partition(arr, left, right)\n        quickSort(arr, left, pivot - 1)\n        quickSort(arr, pivot + 1, right)\n    }\n}\n\nfun partition(arr: IntArray, left: Int, right: Int): Int {\n    val pivot = arr[left]\n    var i = left\n    var j = right\n    while (i < j) {\n        while (arr[i] < pivot) {\n            i++\n        }\n        while (arr[j] > pivot) {\n            j--\n        }\n        if (i < j) {\n            val temp = arr[i]\n            arr[i] = arr[j]\n            arr[j] = temp\n        }\n    }\n    arr[left] = arr[j]\n    arr[j] = pivot\n    return j\n}"}
{"kt_path": "TonnyL__Windary__39f85cd/Kotlin/src/ThreeSumClosest.kt", "CodeLlama-7B-KStack": "fun threeSumClosest(nums: IntArray, target: Int): Int {\n    nums.sort()\n    var closest = nums[0] + nums[1] + nums[2]\n    for (i in 0 until nums.size - 2) {\n        var j = i + 1\n        var k = nums.size - 1\n        while (j < k) {\n            val sum = nums[i] + nums[j] + nums[k]\n            if (sum == target) {\n                return sum\n            }\n            if (Math.abs(sum - target) < Math.abs(closest - target)) {\n                closest = sum\n            }\n            if (sum > target) {\n                k--\n            } else {\n                j++\n            }\n        }\n    }\n    return closest\n}"}
{"kt_path": "Javran__leetcode__f3899fe/bulb-switcher/Solution.kt", "CodeLlama-7B-KStack": "class Solution {\n    companion object {\n        fun main(args: Array<String>) {\n            Solution().bulbSwitch(10)\n        }\n    }\n\n    fun bulbSwitch(n: Int): Int {\n        return (Math.sqrt(n.toDouble())).toInt()\n    }\n}"}
{"kt_path": "TonnyL__Windary__39f85cd/Kotlin/src/NextPermutation.kt", "CodeLlama-7B-KStack": "class NextPermutation {\n    fun nextPermutation(nums: IntArray) {\n        val length = nums.size - 1\n        var i = length - 1\n        while (i >= 1 && nums[i] <= nums[i - 1]) {\n            i--\n        }\n        if (i >= 1) {\n            var j = length\n            while (nums[j] <= nums[i - 1]) {\n                j--\n            }\n            swap(nums, i - 1, j)\n        }\n        reverse(nums, i, length)\n    }\n\n    private fun swap(nums: IntArray, i: Int, j: Int) {\n        val temp = nums[i]\n        nums[i] = nums[j]\n        nums[j] = temp\n    }\n\n    private fun reverse(nums: IntArray, i: Int, j: Int) {\n        while (i < j) {\n            swap(nums, i, j)\n            i++\n            j--\n        }\n    }\n}"}
{"kt_path": "boris920308__HoOne__8881468/hoon/HoonAlgorithm/src/main/kotlin/programmers/lv01/Lv1_12940.kt", "CodeLlama-7B-KStack": "fun main() {\n    println(solution(3, 12))\n    println(solution(2, 5))\n}\n\nfun solution(a: Int, b: Int): List<Int> {\n    val answer = IntArray(2)\n    answer[0] = findGCD(a, b)\n    answer[1] = findLCM(a, b)\n    println(answer.toList())\n    return answer.toList()\n}\n\nfun findGCD(a: Int, b: Int): Int {\n    return if (b == 0) a else findGCD(b, a % b)\n}\n\nfun findLCM(a: Int, b: Int): Int {\n    return a * b / findGCD(a, b)\n}"}
{"kt_path": "JiangKlijna__leetcode-learning__65a1348/kt/001 Two Sum/TwoSum.kt", "CodeLlama-7B-KStack": "class TwoSum {\n    fun twoSum(numbers: IntArray, target: Int): IntArray {\n        val map = HashMap<Int, Int>()\n        val result = IntArray(2)\n        for (i in numbers.indices) {\n            val complement = map[target - numbers[i]]\n            if (complement != null) {\n                result[0] = complement\n                result[1] = i\n                return result\n            }\n            map[numbers[i]] = i\n        }\n        throw IllegalArgumentException(\"No two sum solution\")\n    }\n}"}
{"kt_path": "rupeshsasne__coursera-algorithms-part1__341634c/classroom/src/main/kotlin/com/radix2/algorithms/week1/UnionFind.kt", "CodeLlama-7B-KStack": "fun main(args: Array<String>) {\n    val uf = WeightedQuickUnionWithPathCompressionUF(10)\n    uf.union(4, 3)\n    uf.union(3, 8)\n    uf.union(6, 5)\n    uf.union(9, 4)\n    uf.union(2, 1)\n    uf.union(5, 0)\n    uf.union(7, 2)\n    uf.union(6, 1)\n    uf.union(7, 3)\n}"}
{"kt_path": "boris920308__HoOne__8881468/hoon/HoonAlgorithm/src/main/kotlin/programmers/lv01/Lv1_68935.kt", "CodeLlama-7B-KStack": "fun main() {\n    println(solution(45))\n}\n\nfun solution(n: Int): Int {\n    return n.toString().reversed().toInt(3)\n}\n\nfun solution_1(n: Int): Int {\n    return n.toString().reversed().toInt(10)\n}"}
{"kt_path": "korilin__DSA-kt__b96ba1b/src/main/kotlin/sort_algorithm/quickSort.kt", "CodeLlama-7B-KStack": "package sort_algorithm\n\nimport kotlin.Unit\nimport kotlin.jvm.internal.Intrinsics\n\npublic final class QuickSortKt {\n    public static final void quickSort(int[] array) {\n        Intrinsics.checkNotNullParameter(array, \"array\");\n        quickSort$inner(array, 0, array.size - 1);\n    }\n\n    private static final int quickSort$partition(int[] array, int left, int right) {\n        int pivot = array[left];\n        int i = left;\n        int j = right;\n        while (true) {\n            while (array[i] < pivot) {\n                i++;\n            }\n            while (array[j] > pivot) {\n                j--;\n            }\n            if (i >= j) {\n                break;\n            }\n            int tmp = array[i];\n            array[i] = array[j];\n            array[j] = tmp;\n            i++;\n            j--;\n        }\n        array[left] = array[j];\n        array[j] = pivot;\n        return j;\n    }\n\n    private static final void quickSort$inner(int[] array, int left, int right) {\n        if (left >= right) {\n            return;\n        }\n        int pivot = quickSort$partition(array, left, right);\n        quickSort$inner(array, left, pivot - 1);\n        quickSort$inner(array, pivot + 1, right);\n    }\n}"}
{"kt_path": "gardnerdickson__advent-of-code-2015__4a23ab3/src/day_10.kt", "CodeLlama-7B-KStack": "class Day10 {\n    companion object {\n        val INSTANCE = Day10()\n    }\n\n    fun part1(input: String): Int {\n        var total = 0\n        var prev = 0\n        for (i in input.toIntArray()) {\n            if (i > prev) {\n                total++\n            }\n            prev = i\n        }\n        return total\n    }\n\n    fun part2(input: String): Int {\n        var total = 0\n        var prev = 0\n        for (i in input.toIntArray()) {\n            if (i > prev) {\n                total++\n            } else if (i == prev) {\n                prev = i\n            } else {\n                prev = i\n            }\n        }\n        return total\n    }\n}\n\nfun String.toIntArray(): IntArray {\n    return this.split(\"\").map { it.toInt() }.toIntArray()\n}\n\nfun main(args: Array<String>) {\n    val input = \"1113222113\"\n    println(\"Part 1: ${Day10.INSTANCE.part1(input)}\")\n    println(\"Part 2: ${Day10.INSTANCE.part2(input)}\")\n}"}
{"kt_path": "gardnerdickson__advent-of-code-2015__4a23ab3/src/day_2.kt", "CodeLlama-7B-KStack": "class Day2 {\n    companion object {\n        val INSTANCE = Day2()\n    }\n\n    fun part1(input: String): Int {\n        val lines = input.split(\"\\n\")\n        val (min, max) = lines.map { it.toInt() }.sorted()\n        return max - min\n    }\n\n    fun part2(input: String): Int {\n        val lines = input.split(\"\\n\")\n        val (min, max) = lines.map { it.toInt() }.sorted()\n        val (min2, max2) = lines.map { it.toInt() }.sortedDescending()\n        return max2 - min2\n    }\n}"}
{"kt_path": "gardnerdickson__advent-of-code-2015__4a23ab3/src/day_3.kt", "CodeLlama-7B-KStack": "class Day3 {\n    companion object {\n        val INSTANCE = Day3()\n    }\n\n    fun part1(input: String): Int {\n        val lines = input.split(\"\\n\")\n        val (x, y) = lines.map { it.toInt() }\n        return x * y\n    }\n\n    fun part2(input: String): Int {\n        val lines = input.split(\"\\n\")\n        val (x, y, z) = lines.map { it.toInt() }\n        return x * y * z\n    }\n}\n\nfun main(args: Array<String>) {\n    val input = Day3.INSTANCE.part1(args[0])\n    println(\"Part 1: $input\")\n    val input2 = Day3.INSTANCE.part2(args[0])\n    println(\"Part 2: $input2\")\n}"}
{"kt_path": "antop-dev__algorithm__9a3e762/src/main/kotlin/kr/co/programmers/P161988.kt", "CodeLlama-7B-KStack": "class P161988 {\n    fun solution(a: IntArray): Long {\n        val sequence = \"sequence\"\n        Intrinsics.checkNotNullParameter(a, sequence)\n        val max = max(a, 1)\n        val max2 = max(a, -1)\n        return Math.max(max, max2)\n    }\n\n    private fun max(a: IntArray, i: Int): Long {\n        val size = a.size\n        val result = LongArray(size)\n        var max = 1L\n        var i = 0\n        while (i < size) {\n            result[i] = a[i] * i * max\n            max = Math.max(max, a[i] * i)\n            i++\n        }\n        var max2 = -1L\n        i = -1\n        while (i < size) {\n            max2 = Math.max(max2, result[i] + max)\n            max = Math.max(max, result[i] + a[i])\n            i--\n        }\n        return Math.max(max, max2)\n    }\n}"}
{"kt_path": "alexjlockwood__bees-and-bombs-compose__0d7a86b/app/src/main/java/com/alexjlockwood/beesandbombs/demos/utils/MathUtils.kt", "CodeLlama-7B-KStack": "package com.alexjlockwood.beesandbombs.demos.utils\n\nimport kotlin.math.PI\nimport kotlin.math.TWO_PI\nimport kotlin.math.HALF_PI\n\npublic fun dist(x1: Float, y1: Float, x2: Float, y2: Float): Float {\n    val dx = x2 - x1\n    val dy = y2 - y1\n    return sqrt(dx * dx + dy * dy)\n}\n\npublic fun lerp(start: Float, end: Float, amount: Float): Float {\n    return start + amount * (end - start)\n}\n\npublic fun map(value: Float, start1: Float, stop1: Float, start2: Float, stop2: Float): Float {\n    return lerp(start2, stop2, (value - start1) / (stop1 - start1))\n}\n\npublic fun toDegrees(radians: Float): Float {\n    return radians * (180f / PI)\n}\n\npublic fun ease(t: Float): Float {\n    return t * t * t * (t * (t * 6 - 15) + 10)\n}\n\npublic fun ease(t: Float, power: Float): Float {\n    return t * t * t * (t * (t * power - power) + power)\n}"}
{"kt_path": "chengw315__daily-study__501b881/letcode/src/main/java/daily/LeetCodeLCP13.kt", "CodeLlama-7B-KStack": "class SolutionLCP13 {\n    fun minimalSteps(board: Array<String>): Int {\n        var steps = 0\n        val n = board.size\n        val m = board[0].length\n        val visited = Array(n) { BooleanArray(m) }\n        val queue = ArrayDeque<Pair<Int, Int>>()\n        queue.add(Pair(0, 0))\n        visited[0][0] = true\n        while (queue.isNotEmpty()) {\n            val (i, j) = queue.removeFirst()\n            if (i == n - 1 && j == m - 1) {\n                break\n            }\n            for (k in 0..3) {\n                val ni = i + dir[k][0]\n                val nj = j + dir[k][1]\n                if (ni in 0 until n && nj in 0 until m && !visited[ni][nj]) {\n                    if (board[ni][nj] == 'S') {\n                        queue.add(Pair(ni, nj))\n                        visited[ni][nj] = true\n                    } else if (board[ni][nj] == 'T') {\n                        steps++\n                        visited[ni][nj] = true\n                    }\n                }\n            }\n        }\n        return steps\n    }\n\n    companion object {\n        val dir = arrayOf(intArrayOf(0, 1), intArrayOf(1, 0), intArrayOf(0, -1), intArrayOf(-1, 0))\n    }\n}\n\nfun main() {\n    val board = arrayOf(\"S#O\", \"M..\", \"M.T\")\n    println(SolutionLCP13().minimalSteps(board))\n    val board2 = arrayOf(\"S#O\", \"M.#\", \"M.T\")\n    println(SolutionLCP13().minimalSteps(board2))\n    val board3 = arrayOf(\"S#O\", \"M.T\", \"M..\")\n    println(SolutionLCP13().minimalSteps(board3))\n}"}
{"kt_path": "rajatenzyme__Coding-Journey__65a0570/Algo_Ds_Notes-master/Algo_Ds_Notes-master/Floyd_Warshall_Algorithm/Floyd_Warshall_Algorithm.kt", "CodeLlama-7B-KStack": "package com.example\n\nimport com.example.FloydWarshall\n\nfun main(args: Array<String>) {\n    val matrix = Array(5) { IntArray(5) }\n    matrix[0][0] = 0\n    matrix[0][1] = 1\n    matrix[0][2] = 2\n    matrix[0][3] = 3\n    matrix[0][4] = 4\n    matrix[1][0] = 1\n    matrix[1][1] = 2\n    matrix[1][2] = 3\n    matrix[1][3] = 4\n    matrix[1][4] = 5\n    matrix[2][0] = 2\n    matrix[2][1] = 3\n    matrix[2][2] = 4\n    matrix[2][3] = 5\n    matrix[2][4] = 6\n    matrix[3][0] = 3\n    matrix[3][1] = 4\n    matrix[3][2] = 5\n    matrix[3][3] = 6\n    matrix[3][4] = 7\n    matrix[4][0] = 4\n    matrix[4][1] = 5\n    matrix[4][2] = 6\n    matrix[4][3] = 7\n    matrix[4][4] = 8\n    FloydWarshall.INSTANCE.doCalcs(matrix)\n}"}
{"kt_path": "brunorene__advent_of_code_2018__0cb6814/src/main/kotlin/advent/of/code/day17/Solution.kt", "CodeLlama-7B-KStack": "package advent.of.code.day17\n\nimport java.io.File\nimport java.util.regex.Pattern\n\nclass SolutionKt {\n    companion object {\n        private val input: File = File(\"day17.txt\")\n        private val multipleCoord: Pattern = Pattern.compile(\"(x|y)=([.0-9]+)\\\\.\\\\.([.0-9]+)\")\n        private val oneCoord: Pattern = Pattern.compile(\"(x|y)=([.0-9]+)\")\n\n        fun getInput(): File = input\n        fun getMultipleCoord(): Pattern = multipleCoord\n        fun getOneCoord(): Pattern = oneCoord\n\n        fun part1(): Int {\n            val underground = Underground(input)\n            println(underground.getClay())\n            return 1\n        }\n\n        fun part2(): Int = 2\n    }\n}"}
{"kt_path": "Simplation__OpenSourceRepository__d45feaa/算法/一维数组的动态和1480.kt", "CodeLlama-7B-KStack": "fun main() {\n    val newNum = IntArray(5)\n    newNum[0] = 1\n    newNum[1] = 1\n    newNum[2] = 1\n    newNum[3] = 1\n    newNum[4] = 1\n    println(newNum.toString())\n}\n\nfun sumArr(newNum: IntArray, nums: IntArray, index: Int): Int {\n    if (index == 0) {\n        nums[0] = newNum[0]\n        nums[1] = newNum[1]\n        return nums[0] + nums[1]\n    }\n    nums[index] = newNum[index] + sumArr(newNum, nums, index - 1)\n    return nums[index]\n}"}
{"kt_path": "jimmymorales__project-euler__e881cad/src/main/kotlin/Problem3.kt", "CodeLlama-7B-KStack": "fun main() {\n    println(solution3(600851475143L))\n}\n\nprivate fun solution3(n: Long): Long {\n    var a = n\n    var b = 2L\n    while (a % 2L != 0L) {\n        a = a % 2L\n        b = b / 2L\n    }\n    var c = b\n    var d = 3L\n    while (c % 3L != 0L) {\n        c = c % 3L\n        d = d / 3L\n    }\n    var e = d\n    var f = 5L\n    while (e % 5L != 0L) {\n        e = e % 5L\n        f = f / 5L\n    }\n    var g = f\n    var h = 7L\n    while (g % 7L != 0L) {\n        g = g % 7L\n        h = h / 7L\n    }\n    var i = h\n    var j = 11L\n    while (i % 11L != 0L) {\n        i = i % 11L\n        j = j / 11L\n    }\n    var k = j\n    var l = 13L\n    while (k % 13L != 0L) {\n        k = k % 13L\n        l = l / 13L\n    }\n    var m = l\n    var n = 17L\n    while (m % 17L != 0L) {\n        m = m % 17L\n        n = n / 17L\n    }\n    var o = n\n    var p = 19L\n    while (o % 19L != 0L) {\n        o = o % 19L\n        p = p / 19L\n    }\n    var q = p\n    var r = 23L\n    while (q % 23L != 0L) {\n        q = q % 23L\n        r = r / 23L\n    }\n    var s = r\n    var t = 29L\n    while (s % 29L != 0L) {\n        s = s % 29L\n        t = t / 29L\n    }\n    var u = t\n    var v = 31L\n    while (u % 31L != 0L) {\n        u = u % 31L\n        v = v / 31L\n    }\n    var w = v\n    var x = 37L\n    while (w % 37L != 0L) {\n        w = w % 37L\n        x = x / 37L\n    }\n    var y = x\n    var z = 41L\n    while (y % 41L != 0L) {\n        y = y % 41L\n        z = z / 41L\n    }\n    var aa = z\n    var bb = 43L\n    while (aa % 43L != 0L) {\n        aa = aa % 43L\n        bb = bb / 43L\n    }\n    var cc = bb\n    var dd = 47L\n    while (cc % 47L != 0L) {\n        cc = cc % 47L\n        dd = dd / 47L\n    }\n    var ee = dd\n    var ff = 53L\n    while (ee % 53L != 0L) {\n        ee = ee % 53L\n        ff = ff / 53L\n    }\n    var gg = ff\n    var hh = 59L\n    while (gg % 59L != 0L) {\n        gg = gg % 59L\n        hh = hh / 59L\n    }\n    var ii = hh\n    var jj = 61L\n    while (ii % 61L != 0L) {\n        ii = ii % 61L\n        jj = jj / 61L\n    }\n    var kk = jj\n    var ll = 67L\n    while (kk % 67L != 0L) {\n        kk = kk % 67L\n        ll = ll / 67L\n    }\n    var mm = ll\n    var nn = 71L\n    while (mm % 71L != 0L) {\n        mm = mm % 71L\n        nn = nn / 71L\n    }\n    var oo = nn\n    var pp = 73L\n    while (oo % 73L != 0L) {\n        oo = oo % 73L\n        pp = pp / 73L\n    }\n    var qq = pp\n    var rr = 79L\n    while (qq % 79L != 0L) {\n        qq = qq % 79L\n        rr = rr / 79L\n    }\n    var ss = rr\n    var tt = 83L\n    while (ss % 83L != 0L) {\n        ss = ss % 83L\n        tt = tt / 83L\n    }\n    var uu = tt\n    var vv = 89L\n    while (uu % 89L != 0L) {\n        uu = uu % 89L\n        vv = vv / 89L\n    }\n    var ww = vv\n    var xx = 97L\n    while (ww % 97L != 0L) {\n        ww = ww % 97L\n        xx = xx / 97L\n    }\n    var yy = xx\n    var zz = 101L\n    while (yy % 101L != 0L) {\n        yy = yy % 101L\n        zz = zz / 101L\n    }\n    var aa = zz\n    var bb = 103L\n    while (aa % 103L != 0L) {\n        aa = aa % 103L\n        bb = bb / 103L\n    }\n    var cc = bb\n    var dd = 107L\n    while (cc % 107L != 0L) {\n        cc = cc % 107L\n        dd = dd / 107L\n    }\n    var ee = dd\n    var ff = 109L\n    while (ee % 109L != 0L) {\n        ee = ee % 109L\n        ff = ff / 109L\n    }\n    var gg = ff\n    var hh = 113L\n    while (gg % 113L != 0L) {\n        gg = gg % 113L\n        hh = hh / 113L\n    }\n    var ii = hh\n    var jj = 127L\n    while (ii % 127L != 0L) {\n        ii = ii % 127"}
{"kt_path": "age-series__ElectricalAge2__86d843f/src/main/kotlin/org/eln2/mc/data/SegmentTree.kt", "CodeLlama-7B-KStack": "class SegmentTree<T>(private val root: SegmentTreeNode<T>) {\n    fun queryOrNull(x: Double): T? {\n        if (!root.contains(x)) return null\n        return root.query(x)\n    }\n\n    fun query(x: Double): T {\n        val result = root.query(x)\n        if (result == null) {\n            throw IllegalStateException(\"$x not found\")\n        }\n        return result\n    }\n}"}
{"kt_path": "ykrytsyn__leetcode-in-kotlin__0acf2a6/src/main/kotlin/leetcode/UniquePaths.kt", "CodeLlama-7B-KStack": "class UniquePaths {\n    fun dynamicProgramming(m: Int, n: Int): Int {\n        val dp = Array(m) { IntArray(n) }\n        for (i in 0 until m) {\n            for (j in 0 until n) {\n                if (i == 0 || j == 0) {\n                    dp[i][j] = 1\n                } else {\n                    dp[i][j] = dp[i - 1][j] + dp[i][j - 1]\n                }\n            }\n        }\n        return dp[m - 1][n - 1]\n    }\n\n    fun recursive(m: Int, n: Int): Int {\n        if (m == 1 || n == 1) {\n            return 1\n        }\n        return recursive(m - 1, n) + recursive(m, n - 1)\n    }\n}"}
{"kt_path": "quincy__euler-kotlin__01d96f6/src/main/kotlin/com/quakbo/euler/Euler6.kt", "CodeLlama-7B-KStack": "fun sumOfSquares(sequence: Sequence<Int>): Int {\n    return sequence.map { it * it }.sum()\n}\n\nfun squareOfSums(sequence: Sequence<Int>): Int {\n    return sequence.sum() * sequence.sum()\n}\n\nfun main(args: Array<String>) {\n    val sequence = generateSequence(1) { it + 1 }.take(100)\n    val sumOfSquares = squareOfSums(sequence)\n    val squareOfSums = sumOfSquares(sequence)\n    println(squareOfSums - sumOfSquares)\n}"}
{"kt_path": "Kirchberg__BigDataPL__b6a459a/LR7/src/main/kotlin/Task1V3.kt", "CodeLlama-7B-KStack": "fun task1V3() {\n    val wordChainFinder = WordChainFinder(listOf(\"java\", \"android\", \"kotlin\", \"rust\"))\n    val longestWordChain = wordChainFinder.findLongestWordChain()\n    println(\"Longest word chain: ${longestWordChain.joinToString(\", \")}\")\n}"}
{"kt_path": "fredyw__leetcode__a59d77c/src/main/kotlin/leetcode/Problem2064.kt", "CodeLlama-7B-KStack": "class Problem2064 {\n    fun minimizedMaximum(n: Int, quantities: IntArray): Int {\n        var max = 1\n        var min = 1\n        for (i in 1..quantities.size) {\n            if (max > quantities[i - 1]) {\n                max = max(quantities[i - 1], max(max / 2, quantities[i - 1] / 2))\n            }\n            if (min < quantities[i - 1]) {\n                min = min(quantities[i - 1], min(min * 2, quantities[i - 1] * 2))\n            }\n        }\n        return if (max > n) min else max\n    }\n\n    private fun canDistribute(n: Int, quantities: IntArray, i: Int): Boolean {\n        val q = quantities[i]\n        return n % q == 0\n    }\n}"}
