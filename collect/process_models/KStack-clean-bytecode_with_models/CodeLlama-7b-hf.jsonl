{"kt_path": "remisultan__multiarm-bandit-algorithm-kotlin__ead934d/core-bandit/src/main/kotlin/org/rsultan/bandit/algorithms/BanditAlgorithm.kt", "CodeLlama-7b-hf": "package org.rsultan.bandit.algorithms\n\ninterface BanditAlgorithm {\n    fun selectArm(): Int\n    fun update(arm: Int, reward: Float)\n}"}
{"kt_path": "n81ur3__kotlin-coding-challenges__fdc5941/src/main/kotlin/adventofcode2018/Day22ModeMaze.kt", "CodeLlama-7b-hf": "class Day22ModeMaze {\n    constructor()\n}"}
{"kt_path": "n81ur3__kotlin-coding-challenges__fdc5941/src/main/kotlin/adventofcode2017/Day21FractalArt.kt", "CodeLlama-7b-hf": "class Day21FractalArt {\n    constructor() {\n    }\n}"}
{"kt_path": "n81ur3__kotlin-coding-challenges__fdc5941/src/main/kotlin/adventofcode2017/Day03SpiralMemory.kt", "CodeLlama-7b-hf": "class Day03SpiralMemory {\n    constructor() {\n    }\n}"}
{"kt_path": "n81ur3__kotlin-coding-challenges__fdc5941/src/main/kotlin/adventofcode2019/Day03CrossedWires.kt", "CodeLlama-7b-hf": "class Day03CrossedWires {\n    fun main() {\n        val input = readInput(\"Day03CrossedWires.txt\")\n        val wire1 = input.first()\n        val wire2 = input.last()\n\n        val intersections = mutableSetOf<Pair<Int, Int>>()\n        val visited = mutableSetOf<Pair<Int, Int>>()\n\n        var current = Pair(0, 0)\n        visited.add(current)\n\n        wire1.split(\" \").forEach {\n            when (it.first()) {\n                'R' -> {\n                    val steps = it.drop(1).toInt()\n                    (1..steps).forEach {\n                        current = Pair(current.first + 1, current.second)\n                        visited.add(current)\n                    }\n                }\n                'L' -> {\n                    val steps = it.drop(1).toInt()\n                    (1..steps).forEach {\n                        current = Pair(current.first - 1, current.second)\n                        visited.add(current)\n                    }\n                }\n                'U' -> {\n                    val steps = it.drop(1).toInt()\n                    (1..steps).forEach {\n                        current = Pair(current.first, current.second + 1)\n                        visited.add(current)\n                    }\n                }\n                'D' -> {\n                    val steps = it.drop(1).toInt()\n                    (1..steps).forEach {\n                        current = Pair(current.first, current.second - 1)\n                        visited.add(current)\n                    }\n                }\n            }\n        }\n\n        val wire2Steps = mutableMapOf<Pair<Int, Int>, Int>()\n        var current2 = Pair(0, 0)\n        wire2.split(\" \").forEach {\n            when (it.first()) {\n                'R' -> {\n                    val steps = it.drop(1).toInt()\n                    (1..steps).forEach {\n                        current2 = Pair(current2.first + 1, current2.second)\n                        wire2Steps[current2] = it.drop(1).toInt()\n                    }\n                }\n                'L' -> {\n                    val steps = it.drop(1).toInt()\n                    (1..steps).forEach {\n                        current2 = Pair(current2.first - 1, current2.second)\n                        wire2Steps[current2] = it.drop(1).toInt()\n                    }\n                }\n                'U' -> {\n                    val steps = it.drop(1).toInt()\n                    (1..steps).forEach {\n                        current2 = Pair(current2.first, current2.second + 1)\n                        wire2Steps[current2] = it.drop(1).toInt()\n                    }\n                }\n                'D' -> {\n                    val steps = it.drop(1).toInt()\n                    (1..steps).forEach {\n                        current2 = Pair(current2.first, current2.second - 1)\n                        wire2Steps[current2] = it.drop(1).toInt()\n                    }\n                }\n            }\n        }\n\n        val intersections = mutableSetOf<Pair<Int, Int>>()\n        visited.forEach {\n            if (wire2Steps.containsKey(it)) {\n                intersections.add(it)\n            }\n        }\n\n        val distances = mutableMapOf<Pair<Int, Int>, Int>()\n        intersections.forEach {\n            distances[it] = wire1.length + wire2Steps[it]!!\n        }\n\n        println(distances.minBy { it.value }!!.value)\n    }\n\n    private fun readInput(fileName: String): List<String> {\n        val input = File(\"src/main/resources/$fileName\").readLines()\n        return input\n    }\n}"}
{"kt_path": "n81ur3__kotlin-coding-challenges__fdc5941/src/main/kotlin/adventofcode2018/Day04ReposeRecord.kt", "CodeLlama-7b-hf": "class Day04ReposeRecord {\n    constructor()\n}"}
{"kt_path": "n81ur3__kotlin-coding-challenges__fdc5941/src/main/kotlin/adventofcode2017/Day08LikeRegisters.kt", "CodeLlama-7b-hf": "class Day08LikeRegisters {\n    init {\n        // TODO\n    }\n}"}
{"kt_path": "n81ur3__kotlin-coding-challenges__fdc5941/src/main/kotlin/adventofcode2018/Day11ChronalCharge.kt", "CodeLlama-7b-hf": "class Day11ChronalCharge {\n    constructor()\n}"}
{"kt_path": "n81ur3__kotlin-coding-challenges__fdc5941/src/main/kotlin/adventofcode2020/Day19MonsterMessage.kt", "CodeLlama-7b-hf": "class Day19MonsterMessage {\n    constructor()\n}"}
{"kt_path": "n81ur3__kotlin-coding-challenges__fdc5941/src/main/kotlin/adventofcode2017/Day07RecursiveCircus.kt", "CodeLlama-7b-hf": "class Day07RecursiveCircus {\n    constructor()\n}"}
{"kt_path": "n81ur3__kotlin-coding-challenges__fdc5941/src/main/kotlin/adventofcode2019/Day12TheNbodyProblem.kt", "CodeLlama-7b-hf": "class Day12TheNbodyProblem {\n    constructor()\n}"}
{"kt_path": "n81ur3__kotlin-coding-challenges__fdc5941/src/main/kotlin/adventofcode2018/Day15BeverageBandits.kt", "CodeLlama-7b-hf": "class Day15BeverageBandits {\n    constructor()\n}"}
{"kt_path": "n81ur3__kotlin-coding-challenges__fdc5941/src/main/kotlin/adventofcode2020/Day07HandyHaversacks.kt", "CodeLlama-7b-hf": "class Day07HandyHaversacks {\n\n}"}
{"kt_path": "n81ur3__kotlin-coding-challenges__fdc5941/src/main/kotlin/adventofcode2018/Day07TheSumOfItsParts.kt", "CodeLlama-7b-hf": "class Day07TheSumOfItsParts {\n    init {\n        println(\"Hello World!\")\n    }\n}"}
{"kt_path": "n81ur3__kotlin-coding-challenges__fdc5941/src/main/kotlin/adventofcode2017/Day25TheHaltingProblem.kt", "CodeLlama-7b-hf": "class Day25TheHaltingProblem {\n    constructor()\n}"}
{"kt_path": "n81ur3__kotlin-coding-challenges__fdc5941/src/main/kotlin/adventofcode2019/Day06UniversalOrbitMap.kt", "CodeLlama-7b-hf": "class Day06UniversalOrbitMap {\n    constructor() {\n    }\n}"}
{"kt_path": "n81ur3__kotlin-coding-challenges__fdc5941/src/main/kotlin/adventofcode2019/Day10MonitoringStation.kt", "CodeLlama-7b-hf": "class Day10MonitoringStation {\n    constructor()\n}"}
{"kt_path": "n81ur3__kotlin-coding-challenges__fdc5941/src/main/kotlin/adventofcode2018/Day06ChronalCoordinates.kt", "CodeLlama-7b-hf": "class Day06ChronalCoordinates {\n\n}"}
{"kt_path": "n81ur3__kotlin-coding-challenges__fdc5941/src/main/kotlin/adventofcode2020/Day21AllergenAssessment.kt", "CodeLlama-7b-hf": "class Day21AllergenAssessment {\n\n    fun main() {\n        val input = readInput(\"Day21AllergenAssessment\")\n        val ingredients = mutableListOf<String>()\n        val allergens = mutableListOf<String>()\n        for (line in input) {\n            val (ingredientsLine, allergensLine) = line.split(\" (contains \")\n            ingredients.addAll(ingredientsLine.split(\" \"))\n            allergens.addAll(allergensLine.dropLast(1).split(\", \"))\n        }\n\n        val ingredientsCount = mutableMapOf<String, Int>()\n        for (ingredient in ingredients) {\n            ingredientsCount[ingredient] = ingredients.filter { it == ingredient }.size\n        }\n\n        val allergensCount = mutableMapOf<String, Int>()\n        for (allergen in allergens) {\n            allergensCount[allergen] = allergens.filter { it == allergen }.size\n        }\n\n        val ingredientsWithAllergens = mutableMapOf<String, String>()\n        while (ingredientsCount.isNotEmpty() && allergensCount.isNotEmpty()) {\n            val ingredient = ingredientsCount.entries.minByOrNull { it.value }!!.key\n            val allergen = allergensCount.entries.minByOrNull { it.value }!!.key\n            ingredientsWithAllergens[allergen] = ingredient\n            ingredientsCount.remove(ingredient)\n            allergensCount.remove(allergen)\n        }\n\n        val ingredientsWithoutAllergens = ingredients.filter { !ingredientsWithAllergens.containsKey(it) }\n        println(\"Part 1: ${ingredientsWithoutAllergens.size}\")\n\n        val allergensOrdered = allergens.sortedBy { ingredientsWithAllergens[it] }\n        val allergensString = allergensOrdered.joinToString(\",\")\n        println(\"Part 2: ${allergensString}\")\n    }\n\n    private fun readInput(fileName: String): List<String> {\n        val input = File(\"src/main/resources/$fileName.txt\").readLines()\n        return input\n    }\n}"}
{"kt_path": "n81ur3__kotlin-coding-challenges__fdc5941/src/main/kotlin/adventofcode2017/Day24ElectromagneticMoat.kt", "CodeLlama-7b-hf": "class Day24ElectromagneticMoat {\n    constructor()\n}"}
{"kt_path": "n81ur3__kotlin-coding-challenges__fdc5941/src/main/kotlin/adventofcode2018/Day12SubterraneanSustainability.kt", "CodeLlama-7b-hf": "class Day12SubterraneanSustainability {\n    constructor()\n}"}
{"kt_path": "n81ur3__kotlin-coding-challenges__fdc5941/src/main/kotlin/adventofcode2018/Day23ExperimentalEmergencyTeleportation.kt", "CodeLlama-7b-hf": "class Day23ExperimentalEmergencyTeleportation {\n    constructor()\n}"}
{"kt_path": "alebedev__aoc2022__d6ba46b/src/main/kotlin/Map.kt", "CodeLlama-7b-hf": "class Map {\n    companion object {\n        @JvmStatic\n        fun main() {\n            AocMap.INSTANCE.solve()\n        }\n    }\n}"}
{"kt_path": "andrewrlee__adventOfCode2020__a9c21a6/src/main/kotlin/File09.kt", "CodeLlama-7b-hf": "class Challenge09 {\n    fun solve() {\n        val a = 1\n        val b = 2\n        val c = 3\n        val d = 4\n        val e = 5\n        val f = 6\n        val g = 7\n        val h = 8\n        val i = 9\n        val j = 10\n        val k = 11\n        val l = 12\n        val m = 13\n        val n = 14\n        val o = 15\n        val p = 16\n        val q = 17\n        val r = 18\n        val s = 19\n        val t = 20\n        val u = 21\n        val v = 22\n        val w = 23\n        val x = 24\n        val y = 25\n        val z = 26\n        val A = 27\n        val B = 28\n        val C = 29\n        val D = 30\n        val E = 31\n        val F = 32\n        val G = 33\n        val H = 34\n        val I = 35\n        val J = 36\n        val K = 37\n        val L = 38\n        val M = 39\n        val N = 40\n        val O = 41\n        val P = 42\n        val Q = 43\n        val R = 44\n        val S = 45\n        val T = 46\n        val U = 47\n        val V = 48\n        val W = 49\n        val X = 50\n        val Y = 51\n        val Z = 52\n        val a1 = 53\n        val b1 = 54\n        val c1 = 55\n        val d1 = 56\n        val e1 = 57\n        val f1 = 58\n        val g1 = 59\n        val h1 = 60\n        val i1 = 61\n        val j1 = 62\n        val k1 = 63\n        val l1 = 64\n        val m1 = 65\n        val n1 = 66\n        val o1 = 67\n        val p1 = 68\n        val q1 = 69\n        val r1 = 70\n        val s1 = 71\n        val t1 = 72\n        val u1 = 73\n        val v1 = 74\n        val w1 = 75\n        val x1 = 76\n        val y1 = 77\n        val z1 = 78\n        val A1 = 79\n        val B1 = 80\n        val C1 = 81\n        val D1 = 82\n        val E1 = 83\n        val F1 = 84\n        val G1 = 85\n        val H1 = 86\n        val I1 = 87\n        val J1 = 88\n        val K1 = 89\n        val L1 = 90\n        val M1 = 91\n        val N1 = 92\n        val O1 = 93\n        val P1 = 94\n        val Q1 = 95\n        val R1 = 96\n        val S1 = 97\n        val T1 = 98\n        val U1 = 99\n        val V1 = 100\n        val W1 = 101\n        val X1 = 102\n        val Y1 = 103\n        val Z1 = 104\n        val a2 = 105\n        val b2 = 106\n        val c2 = 107\n        val d2 = 108\n        val e2 = 109\n        val f2 = 110\n        val g2 = 111\n        val h2 = 112\n        val i2 = 113\n        val j2 = 114\n        val k2 = 115\n        val l2 = 116\n        val m2 = 117\n        val n2 = 118\n        val o2 = 119\n        val p2 = 120\n        val q2 = 121\n        val r2 = 122\n        val s2 = 123\n        val t2 = 124\n        val u2 = 125\n        val v2 = 126\n        val w2 = 127\n        val x2 = 128\n        val y2 = 129\n        val z2 = 130\n        val A2 = 131\n        val B2 = 132\n        val C2 = 133\n        val D2 = 134\n        val E2 = 135\n        val F2 = 136\n        val G2 = 137\n        val H2 = 138\n        val I2 = 139\n        val J2 = 140\n        val K2 = 141\n        val L2 = 142\n        val M2 = 143\n        val N2 = 144\n        val O2 = 145\n        val P2 = 146\n        val Q2 = 147\n        val R2 = 148\n        val S2 = 149\n        val T2 = 150\n        val U2 = 151\n        val V2 = 152\n        val W2 = 153\n        val X2 = 154\n        val Y2 = 155\n        val Z2 = 156\n        val a3 = 157\n        val b3 = 158\n        val c3 = 159\n        val d3 = 160\n        val e3 = 161\n        val f3 = 162\n        val g3 = 163\n        val h3 = 164\n        val i3 = 165\n        val j3 = 166\n        val k3 = 167\n        val l3 = 168\n        val m3 = 169\n        val n3 = 170\n        val o3 = 171\n        val p3 = 172\n        val q3 = 173\n        val r3 = 174\n        val s3 = 175\n        val t3 = 176\n        val u3 = 177\n        val v3 = 178\n        val w3 = 179\n        val x3 = 180\n        val y3 = 181\n        val z3 = 182\n        val A3 = 183\n        val B3 = 184\n        val C3 = 185\n        val D3 = 186\n        val E3 = 187\n        val F3 = 188\n        val G3 = 189\n        val H3 = 190\n        val I3 = 191\n        val J3 = 192"}
{"kt_path": "andrewrlee__adventOfCode2020__a9c21a6/src/main/kotlin/File08.kt", "CodeLlama-7b-hf": "class Challenge08 {\n    fun solve() {\n        val a = 1\n        val b = 2\n        val c = 3\n        val d = 4\n        val e = 5\n        val f = 6\n        val g = 7\n        val h = 8\n        val i = 9\n        val j = 10\n        val k = 11\n        val l = 12\n        val m = 13\n        val n = 14\n        val o = 15\n        val p = 16\n        val q = 17\n        val r = 18\n        val s = 19\n        val t = 20\n        val u = 21\n        val v = 22\n        val w = 23\n        val x = 24\n        val y = 25\n        val z = 26\n        val A = 27\n        val B = 28\n        val C = 29\n        val D = 30\n        val E = 31\n        val F = 32\n        val G = 33\n        val H = 34\n        val I = 35\n        val J = 36\n        val K = 37\n        val L = 38\n        val M = 39\n        val N = 40\n        val O = 41\n        val P = 42\n        val Q = 43\n        val R = 44\n        val S = 45\n        val T = 46\n        val U = 47\n        val V = 48\n        val W = 49\n        val X = 50\n        val Y = 51\n        val Z = 52\n        val a = 53\n        val b = 54\n        val c = 55\n        val d = 56\n        val e = 57\n        val f = 58\n        val g = 59\n        val h = 60\n        val i = 61\n        val j = 62\n        val k = 63\n        val l = 64\n        val m = 65\n        val n = 66\n        val o = 67\n        val p = 68\n        val q = 69\n        val r = 70\n        val s = 71\n        val t = 72\n        val u = 73\n        val v = 74\n        val w = 75\n        val x = 76\n        val y = 77\n        val z = 78\n        val A = 79\n        val B = 80\n        val C = 81\n        val D = 82\n        val E = 83\n        val F = 84\n        val G = 85\n        val H = 86\n        val I = 87\n        val J = 88\n        val K = 89\n        val L = 90\n        val M = 91\n        val N = 92\n        val O = 93\n        val P = 94\n        val Q = 95\n        val R = 96\n        val S = 97\n        val T = 98\n        val U = 99\n        val V = 100\n        val W = 101\n        val X = 102\n        val Y = 103\n        val Z = 104\n        val a = 105\n        val b = 106\n        val c = 107\n        val d = 108\n        val e = 109\n        val f = 110\n        val g = 111\n        val h = 112\n        val i = 113\n        val j = 114\n        val k = 115\n        val l = 116\n        val m = 117\n        val n = 118\n        val o = 119\n        val p = 120\n        val q = 121\n        val r = 122\n        val s = 123\n        val t = 124\n        val u = 125\n        val v = 126\n        val w = 127\n        val x = 128\n        val y = 129\n        val z = 130\n        val A = 131\n        val B = 132\n        val C = 133\n        val D = 134\n        val E = 135\n        val F = 136\n        val G = 137\n        val H = 138\n        val I = 139\n        val J = 140\n        val K = 141\n        val L = 142\n        val M = 143\n        val N = 144\n        val O = 145\n        val P = 146\n        val Q = 147\n        val R = 148\n        val S = 149\n        val T = 150\n        val U = 151\n        val V = 152\n        val W = 153\n        val X = 154\n        val Y = 155\n        val Z = 156\n        val a = 157\n        val b = 158\n        val c = 159\n        val d = 160\n        val e = 161\n        val f = 162\n        val g = 163\n        val h = 164\n        val i = 165\n        val j = 166\n        val k = 167\n        val l = 168\n        val m = 169\n        val n = 170\n        val o = 171\n        val p = 172\n        val q = 173\n        val r = 174\n        val s = 175\n        val t = 176\n        val u = 177\n        val v = 178\n        val w = 179\n        val x = 180\n        val y = 181\n        val z = 182\n        val A = 183\n        val B = 184\n        val C = 185\n        val D = 186\n        val E = 187\n        val F = 188\n        val G = 189\n        val H = 190\n        val I = 191\n        val J = 192\n        val K = 193\n        val L = 194\n        val M = 195\n        val N = 196\n        val O = 197\n        val P = 198\n        val Q = 199\n        val R = 200\n        val S = 201\n        val T = 202\n        val U = 203\n        val V = 204\n        val W = 205\n        val X = 206\n        val Y = 207\n        val Z ="}
{"kt_path": "andrewrlee__adventOfCode2020__a9c21a6/src/main/kotlin/File02.kt", "CodeLlama-7b-hf": "class Challenge02 {\n    fun solve() {\n        val a = 1\n        val b = 2\n        val c = 3\n        val d = 4\n        val e = 5\n        val f = 6\n        val g = 7\n        val h = 8\n        val i = 9\n        val j = 10\n        val k = 11\n        val l = 12\n        val m = 13\n        val n = 14\n        val o = 15\n        val p = 16\n        val q = 17\n        val r = 18\n        val s = 19\n        val t = 20\n        val u = 21\n        val v = 22\n        val w = 23\n        val x = 24\n        val y = 25\n        val z = 26\n        val aa = 27\n        val bb = 28\n        val cc = 29\n        val dd = 30\n        val ee = 31\n        val ff = 32\n        val gg = 33\n        val hh = 34\n        val ii = 35\n        val jj = 36\n        val kk = 37\n        val ll = 38\n        val mm = 39\n        val nn = 40\n        val oo = 41\n        val pp = 42\n        val qq = 43\n        val rr = 44\n        val ss = 45\n        val tt = 46\n        val uu = 47\n        val vv = 48\n        val ww = 49\n        val xx = 50\n        val yy = 51\n        val zz = 52\n        val aaa = 53\n        val bbb = 54\n        val ccc = 55\n        val ddd = 56\n        val eee = 57\n        val fff = 58\n        val ggg = 59\n        val hhh = 60\n        val iii = 61\n        val jjj = 62\n        val kkk = 63\n        val lll = 64\n        val mmm = 65\n        val nnn = 66\n        val ooo = 67\n        val ppp = 68\n        val qqq = 69\n        val rrr = 70\n        val sss = 71\n        val ttt = 72\n        val uuu = 73\n        val vvv = 74\n        val www = 75\n        val xxx = 76\n        val yyy = 77\n        val zzz = 78\n        val aaaa = 79\n        val bbbb = 80\n        val cccc = 81\n        val dddd = 82\n        val eeee = 83\n        val ffff = 84\n        val gggg = 85\n        val hhhh = 86\n        val iiii = 87\n        val jjjj = 88\n        val kkkk = 89\n        val llll = 90\n        val mmmm = 91\n        val nnnn = 92\n        val oooo = 93\n        val pppp = 94\n        val qqqq = 95\n        val rrrr = 96\n        val ssss = 97\n        val tttt = 98\n        val uuuu = 99\n        val vvvv = 100\n        val wwww = 101\n        val xxxx = 102\n        val yyyy = 103\n        val zzzz = 104\n        val aaaa = 105\n        val bbbb = 106\n        val cccc = 107\n        val dddd = 108\n        val eeee = 109\n        val ffff = 110\n        val gggg = 111\n        val hhhh = 112\n        val iiii = 113\n        val jjjj = 114\n        val kkkk = 115\n        val llll = 116\n        val mmmm = 117\n        val nnnn = 118\n        val oooo = 119\n        val pppp = 120\n        val qqqq = 121\n        val rrrr = 122\n        val ssss = 123\n        val tttt = 124\n        val uuuu = 125\n        val vvvv = 126\n        val wwww = 127\n        val xxxx = 128\n        val yyyy = 129\n        val zzzz = 130\n        val aaaaa = 131\n        val bbbbb = 132\n        val ccccc = 133\n        val ddddd = 134\n        val eeeee = 135\n        val fffff = 136\n        val ggggg = 137\n        val hhhhh = 138\n        val iiii = 139\n        val jjjjj = 140\n        val kkkkk = 141\n        val lllll = 142\n        val mmmmm = 143\n        val nnnnn = 144\n        val ooooo = 145\n        val ppppp = 146\n        val qqqqq = 147\n        val rrrrr = 148\n        val sssss = 149\n        val ttttt = 150\n        val uuuuu = 151\n        val vvvvv = 152\n        val wwww = 153\n        val xxxx = 154\n        val yyyy = 155\n        val zzzzz = 156\n        val aaaaaa = 157\n        val bbbbbb = 158\n        val cccccc = 159\n        val dddddd = 160\n        val eeeeee = 161\n        val ffffff = 162\n        val gggggg = 163\n        val hhhhhh = 164\n        val iiiiii = 165\n        val jjjjjj = 166\n        val kkkkkk = 167\n        val llllll = 168\n        val mmmmmm = 169\n        val nnnnnn = 170\n        val oooooo = 171\n        val pppppp = 172\n        val qqqqqq = 173\n        val rrrrrr = 174\n        val ssssss = 175\n        val tttttt = 176\n        val uuuuuu = 177\n        val vvvvvv = 178\n        val w"}
{"kt_path": "andrewrlee__adventOfCode2020__a9c21a6/src/main/kotlin/File07.kt", "CodeLlama-7b-hf": "class Challenge07 {\n    fun solve() {\n        val a = 1\n        val b = 2\n        val c = 3\n        val d = 4\n        val e = 5\n        val f = 6\n        val g = 7\n        val h = 8\n        val i = 9\n        val j = 10\n        val k = 11\n        val l = 12\n        val m = 13\n        val n = 14\n        val o = 15\n        val p = 16\n        val q = 17\n        val r = 18\n        val s = 19\n        val t = 20\n        val u = 21\n        val v = 22\n        val w = 23\n        val x = 24\n        val y = 25\n        val z = 26\n        val A = 27\n        val B = 28\n        val C = 29\n        val D = 30\n        val E = 31\n        val F = 32\n        val G = 33\n        val H = 34\n        val I = 35\n        val J = 36\n        val K = 37\n        val L = 38\n        val M = 39\n        val N = 40\n        val O = 41\n        val P = 42\n        val Q = 43\n        val R = 44\n        val S = 45\n        val T = 46\n        val U = 47\n        val V = 48\n        val W = 49\n        val X = 50\n        val Y = 51\n        val Z = 52\n        val a = 53\n        val b = 54\n        val c = 55\n        val d = 56\n        val e = 57\n        val f = 58\n        val g = 59\n        val h = 60\n        val i = 61\n        val j = 62\n        val k = 63\n        val l = 64\n        val m = 65\n        val n = 66\n        val o = 67\n        val p = 68\n        val q = 69\n        val r = 70\n        val s = 71\n        val t = 72\n        val u = 73\n        val v = 74\n        val w = 75\n        val x = 76\n        val y = 77\n        val z = 78\n        val A = 79\n        val B = 80\n        val C = 81\n        val D = 82\n        val E = 83\n        val F = 84\n        val G = 85\n        val H = 86\n        val I = 87\n        val J = 88\n        val K = 89\n        val L = 90\n        val M = 91\n        val N = 92\n        val O = 93\n        val P = 94\n        val Q = 95\n        val R = 96\n        val S = 97\n        val T = 98\n        val U = 99\n        val V = 100\n        val W = 101\n        val X = 102\n        val Y = 103\n        val Z = 104\n        val a = 105\n        val b = 106\n        val c = 107\n        val d = 108\n        val e = 109\n        val f = 110\n        val g = 111\n        val h = 112\n        val i = 113\n        val j = 114\n        val k = 115\n        val l = 116\n        val m = 117\n        val n = 118\n        val o = 119\n        val p = 120\n        val q = 121\n        val r = 122\n        val s = 123\n        val t = 124\n        val u = 125\n        val v = 126\n        val w = 127\n        val x = 128\n        val y = 129\n        val z = 130\n        val A = 131\n        val B = 132\n        val C = 133\n        val D = 134\n        val E = 135\n        val F = 136\n        val G = 137\n        val H = 138\n        val I = 139\n        val J = 140\n        val K = 141\n        val L = 142\n        val M = 143\n        val N = 144\n        val O = 145\n        val P = 146\n        val Q = 147\n        val R = 148\n        val S = 149\n        val T = 150\n        val U = 151\n        val V = 152\n        val W = 153\n        val X = 154\n        val Y = 155\n        val Z = 156\n        val a = 157\n        val b = 158\n        val c = 159\n        val d = 160\n        val e = 161\n        val f = 162\n        val g = 163\n        val h = 164\n        val i = 165\n        val j = 166\n        val k = 167\n        val l = 168\n        val m = 169\n        val n = 170\n        val o = 171\n        val p = 172\n        val q = 173\n        val r = 174\n        val s = 175\n        val t = 176\n        val u = 177\n        val v = 178\n        val w = 179\n        val x = 180\n        val y = 181\n        val z = 182\n        val A = 183\n        val B = 184\n        val C = 185\n        val D = 186\n        val E = 187\n        val F = 188\n        val G = 189\n        val H = 190\n        val I = 191\n        val J = 192\n        val K = 193\n        val L = 194\n        val M = 195\n        val N = 196\n        val O = 197\n        val P = 198\n        val Q = 199\n        val R = 200\n        val S = 201\n        val T = 202\n        val U = 203\n        val V = 204\n        val W = 205\n        val X = 206\n        val Y = 207\n        val Z ="}
{"kt_path": "charlesfranciscodev__codingame__3ec8060/puzzles/kotlin/src/war/war.kt", "CodeLlama-7b-hf": "fun main(args: Array<String>) {\n    val game = Game()\n    game.play()\n}\n\nclass Game {\n    fun play() {\n        println(\"Hello, world!\")\n    }\n}"}
{"kt_path": "al-volkov__spbu_2020_kotlin_homeworks__5049681/src/main/kotlin/homework_5/Task1.kt", "CodeLlama-7b-hf": "fun isNumber(s: String): Boolean {\n    s.checkNotNull()\n    return s.toIntOrNull() != null\n}"}
{"kt_path": "iafsilva__codility-lessons__5d86aef/src/main/kotlin/lesson3/FrogJmp.kt", "CodeLlama-7b-hf": "class FrogJmp {\n    fun solution(x: Int, y: Int, d: Int): Int {\n        val n = y - x\n        val k = n / d\n        val r = n % d\n        return if (r == 0) k else k + 1\n    }\n}"}
{"kt_path": "mikhalchenko-alexander__advent-of-kotlin-2018-week1__c483ade/src/main/kotlin/com/anahoret/pathfinding/MarkingWayOnMap.kt", "CodeLlama-7b-hf": "fun addPath(map: String): String {\n    requireNotNull(map) { \"Parameter map must not be null\" }\n    return Graph.INSTANCE.getMapWithPath(map)\n}"}
{"kt_path": "charlesfranciscodev__codingame__3ec8060/puzzles/kotlin/src/surface/surface.kt", "CodeLlama-7b-hf": "class SurfaceKt {\n    companion object {\n        const val LAND = '.'\n        const val WATER = '~'\n        const val DEFAULT_INDEX = 0\n    }\n\n    fun main(args: Array<String>) {\n        val grid = Grid()\n        grid.readGameInput()\n        grid.test()\n    }\n}\n\nclass Grid {\n    private val grid: Array<CharArray> = Array(100) { CharArray(100) }\n    private var index = 0\n\n    fun readGameInput() {\n        for (i in 0..99) {\n            for (j in 0..99) {\n                grid[i][j] = readChar()\n            }\n        }\n    }\n\n    fun test() {\n        for (i in 0..99) {\n            for (j in 0..99) {\n                if (grid[i][j] == LAND) {\n                    index++\n                }\n            }\n        }\n    }\n\n    private fun readChar(): Char {\n        return '.'\n    }\n}"}
{"kt_path": "andrew-suprun__AoC-2023__dd5f53e/src/main/kotlin/day03_oop/day03_oop.kt", "CodeLlama-7b-hf": "class Part1(val input: String) {\n    fun run() {\n        val data = input.split(\"\\n\")\n        val lines = data.map { it.toInt() }\n        val result = lines.sum()\n        println(\"Result: $result\")\n    }\n}\n\nclass Part2(val input: String) {\n    fun run() {\n        val data = input.split(\"\\n\")\n        val lines = data.map { it.toInt() }\n        val result = lines.sum()\n        println(\"Result: $result\")\n    }\n}\n\nfun main() {\n    val input = \"\"\"\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1\n        1"}
{"kt_path": "getnahid__programing-problem-solves-kotlin__589c392/CyclicRotation.kt", "CodeLlama-7b-hf": "fun solution(a: IntArray, k: Int): IntArray {\n    val n = a.size\n    val result = IntArray(n)\n    var i = 0\n    var j = k % n\n    while (i < n) {\n        result[i] = a[(j + i) % n]\n        i++\n        j++\n    }\n    return result\n}"}
{"kt_path": "linisme__LeetCodeInKotlin__4382afc/LongestPalindrome.kt", "CodeLlama-7b-hf": "class LongestPalindromeSolution {\n    fun longestPalindrome(s: String): String {\n        val len = s.length\n        if (len < 2) return s\n        val dp = Array(len) { BooleanArray(len) }\n        var maxLen = 1\n        var maxStart = 0\n        for (i in 1 until len) {\n            for (j in 0 until i) {\n                if (s[i] == s[j] && (i - j < 3 || dp[j + 1][i - 1])) {\n                    dp[j][i] = true\n                    if (i - j + 1 > maxLen) {\n                        maxLen = i - j + 1\n                        maxStart = j\n                    }\n                }\n            }\n        }\n        return s.substring(maxStart, maxStart + maxLen)\n    }\n}"}
{"kt_path": "iafsilva__codility-lessons__5d86aef/src/main/kotlin/lesson2/OddOccurrencesInArray.kt", "CodeLlama-7b-hf": "class OddOccurrencesInArray {\n    fun solution(a: IntArray): Int {\n        var odd = 0\n        var even = 0\n        for (i in a) {\n            if (i % 2 == 0) {\n                even += 1\n            } else {\n                odd += 1\n            }\n        }\n        return if (odd > even) a.filter { it % 2 == 1 }.first() else a.filter { it % 2 == 0 }.first()\n    }\n}"}
{"kt_path": "jjeda__playground__5d1ee6c/src/oop/algorithm/ProgressionNextNumber.kt", "CodeLlama-7b-hf": "class ProgressionNextNumber {\n    fun solution(a: IntArray): Int {\n        val helper = ProgressionHelper(a.toList())\n        return helper.nextInt()\n    }\n}\n\nclass ProgressionHelper(private val list: List<Int>) {\n    fun nextInt(): Int {\n        var result = 0\n        for (i in 0..list.size - 2) {\n            if (list[i] < list[i + 1]) {\n                result = list[i]\n                break\n            }\n        }\n        return result\n    }\n}"}
{"kt_path": "linisme__LeetCodeInKotlin__4382afc/LengthOfLongestSubstring.kt", "CodeLlama-7b-hf": "fun main(args: Array<String>) {\n    val solution = LengthOfLongestSubstringSolution2()\n    val result = solution.lengthOfLongestSubstring(\"abba\")\n    println(result)\n}"}
{"kt_path": "nschulzke__mancala-puzzle-solver__b130d3b/src/main/kotlin/Main.kt", "CodeLlama-7b-hf": "private val mancalaIndices = setOf(6, 13)"}
{"kt_path": "sysion__DataStructureAlgorithmKt__6f9afda/TwoSumLessThanTarget.kt", "CodeLlama-7b-hf": "fun main() {\n    val intArray = intArrayOf(10, 20, 30)\n    val target = 15\n    SumTwoNumbersLessThanTarget(intArray, target)\n}\n\nfun SumTwoNumbersLessThanTarget(intArray: IntArray, target: Int): Int {\n    var sum = -1\n    for (i in 0 until intArray.size) {\n        for (j in 0 until intArray.size) {\n            if (i != j) {\n                val sum1 = intArray[i] + intArray[j]\n                if (sum1 < target) {\n                    sum = sum1\n                }\n            }\n        }\n    }\n    return sum\n}"}
{"kt_path": "linisme__LeetCodeInKotlin__4382afc/FineMedianSortedArrays.kt", "CodeLlama-7b-hf": "class FindMedianSortedArraysSolution {\n    fun findMedianSortedArrays(nums1: IntArray, nums2: IntArray): Double {\n        val m = nums1.size\n        val n = nums2.size\n        val totalLength = m + n\n        val totalLengthIsOdd = totalLength % 2 == 1\n        val medianIndex = totalLength / 2\n        var leftIndex = 0\n        var rightIndex = 0\n        var leftArrayIndex = 0\n        var rightArrayIndex = 0\n        var leftArrayLength = 0\n        var rightArrayLength = 0\n        var leftArrayValue = 0\n        var rightArrayValue = 0\n        var median = 0.0\n        while (leftIndex <= medianIndex && rightIndex <= medianIndex) {\n            leftArrayLength = m - leftArrayIndex\n            rightArrayLength = n - rightArrayIndex\n            if (leftArrayLength == 0) {\n                median = rightArrayValue\n                break\n            }\n            if (rightArrayLength == 0) {\n                median = leftArrayValue\n                break\n            }\n            leftArrayValue = if (leftArrayIndex < m) nums1[leftArrayIndex] else Int.MAX_VALUE\n            rightArrayValue = if (rightArrayIndex < n) nums2[rightArrayIndex] else Int.MAX_VALUE\n            if (leftArrayValue < rightArrayValue) {\n                leftArrayIndex++\n                leftIndex++\n            } else {\n                rightArrayIndex++\n                rightIndex++\n            }\n        }\n        if (totalLengthIsOdd) {\n            return median.toDouble()\n        }\n        leftArrayLength = m - leftArrayIndex\n        rightArrayLength = n - rightArrayIndex\n        if (leftArrayLength == 0) {\n            return rightArrayValue.toDouble()\n        }\n        if (rightArrayLength == 0) {\n            return leftArrayValue.toDouble()\n        }\n        median = (leftArrayValue + rightArrayValue) / 2.0\n        return median\n    }\n}"}
{"kt_path": "n81ur3__kotlin-coding-challenges__fdc5941/src/main/kotlin/adventofcode2018/Day18SettlersOfTheNorthPole.kt", "CodeLlama-7b-hf": "fun hash(input: List<List<AreaElement>>): Int {\n    val list = input.toTypedArray()\n    return list.deepHashCode()\n}\n\nclass Day18SettlersOfTheNorthPole {\n    constructor()\n}"}
{"kt_path": "iafsilva__codility-lessons__5d86aef/src/main/kotlin/lesson3/PermMissingElem.kt", "CodeLlama-7b-hf": "package lesson3\n\nimport kotlin.collections.*\n\npublic final class PermMissingElem {\n    public PermMissingElem() {\n    }\n\n    public final int solution(int[] a) {\n        Intrinsics.checkNotNullParameter(a, \"a\");\n        if (a.size != 0) {\n            if (a.size == 1) {\n                return 1;\n            }\n            a.sort();\n            var i = 0;\n            var j = a.size;\n            while (i < j) {\n                if (a[i] != i + 1) {\n                    return i + 1;\n                }\n                i++;\n            }\n            return a.size + 1;\n        }\n        return 1;\n    }\n}"}
{"kt_path": "getnahid__programing-problem-solves-kotlin__589c392/OddOccurrencesInArray.kt", "CodeLlama-7b-hf": "fun solution(A: IntArray): Int {\n    A.sort()\n    var odd = 0\n    var even = 0\n    for (i in 0..A.size - 1) {\n        if (i % 2 == 0) {\n            even = A[i]\n        } else {\n            odd = A[i]\n        }\n        if (even == odd) {\n            return even\n        }\n    }\n    return 0\n}"}
{"kt_path": "rupeshsasne__coursera-algorithms-part1__341634c/classroom/src/main/kotlin/com/radix2/algorithms/week3/SortingLinkedList.kt", "CodeLlama-7b-hf": "fun main(args: Array<String>) {\n    val list = LinkedList<Int>()\n    var i = 0\n    while (i < 11) {\n        list.add(i)\n        i++\n    }\n    list.reverseRecurrsive()\n    println(list)\n}"}
{"kt_path": "boris920308__HoOne__8881468/hoon/HoonAlgorithm/src/main/kotlin/boj/week02/recursive_function/FibonacciSequence5.kt", "CodeLlama-7b-hf": "fun main() {\n    val scanner = Scanner(System.`in`)\n    val n = scanner.nextInt()\n    println(fibonacci(n))\n}\n\nfun fibonacci(n: Int): Int {\n    return if (n <= 1) n else fibonacci(n - 1) + fibonacci(n - 2)\n}"}
{"kt_path": "Codextor__kotlin-codes__68b75a7/src/main/kotlin/PerfectSquares.kt", "CodeLlama-7b-hf": "fun numSquares(n: Int): Int {\n    var i = 0\n    var j = n + 1\n    val squares = IntArray(j)\n    squares[0] = 0\n    var k = 1\n    while (i < j) {\n        squares[k] = k * k\n        k++\n        i++\n    }\n    var l = 1\n    while (l <= n) {\n        var min = squares[l]\n        var j = l + 1\n        while (j <= n) {\n            val temp = squares[l] + squares[j]\n            if (temp < min) {\n                min = temp\n            }\n            j++\n        }\n        l++\n    }\n    return squares[n]\n}"}
{"kt_path": "Laomedeia__Java8InAction__0dcd843/src/main/java/leetcode/a167_twoSumInputSortArray_SIMPLE/Solution.kt", "CodeLlama-7b-hf": "class Solution {\n    fun twoSum(numbers: IntArray, target: Int): IntArray {\n        var i = 0\n        var j = numbers.size - 1\n        while (i < j) {\n            val sum = numbers[i] + numbers[j]\n            if (sum == target) {\n                return intArrayOf(i + 1, j + 1)\n            } else if (sum < target) {\n                i++\n            } else {\n                j--\n            }\n        }\n        return intArrayOf()\n    }\n}"}
{"kt_path": "ariannysOronoz__tutorialKotlin__a779f54/CombinacionesPalabras/src/main/java/Main.kt", "CodeLlama-7b-hf": "fun main(args: Array<String>) {\n    val permutation = Permutation()\n    val caracol = \"CARACOL\"\n    val length = caracol.length\n    permutation.findPermutation(caracol, 0, length)\n    println(caracol)\n    permutation.findPermutation(caracol, 0, length)\n}"}
{"kt_path": "scientificCommunity__blog-sample__36e291c/algorithms/src/main/kotlin/org/baichuan/sample/algorithms/leetcode/middle/MaxArea.kt", "CodeLlama-7b-hf": "class MaxArea {\n    fun maxArea(height: IntArray): Int {\n        var maxArea = 0\n        var left = 0\n        var right = height.size - 1\n        while (left < right) {\n            val area = (right - left) * minOf(height[left], height[right])\n            maxArea = max(maxArea, area)\n            if (height[left] < height[right]) {\n                left++\n            } else {\n                right--\n            }\n        }\n        return maxArea\n    }\n}"}
{"kt_path": "boris920308__HoOne__8881468/hoon/HoonAlgorithm/src/main/kotlin/programmers/lv01/Lv1_70128.kt", "CodeLlama-7b-hf": "fun main(args: Array<String>) {\n    val a = intArrayOf(1, 2, 3, 4)\n    val b = intArrayOf(-3, -1, 0, 2)\n    println(solution(a, b))\n}\n\nfun solution(a: IntArray, b: IntArray): Int {\n    var sum = 0\n    var i = 0\n    while (i < a.size) {\n        sum += a[i] * b[i]\n        i++\n    }\n    return sum\n}"}
{"kt_path": "kotler-dev__kotlin-leetcode__0659e72/src/main/kotlin/exercise/easy/id121/Solution121.kt", "CodeLlama-7b-hf": "fun maxProfit(prices: IntArray): Int {\n    if (prices.size < 2) return 0\n    var maxProfit = Int.MAX_VALUE\n    var minPrice = Int.MAX_VALUE\n    var maxPrice = 0\n    var minIndex = 0\n    var maxIndex = 0\n    for (i in 0 until prices.size) {\n        if (prices[i] < minPrice) {\n            minPrice = prices[i]\n            minIndex = i\n        }\n        if (prices[i] > maxPrice) {\n            maxPrice = prices[i]\n            maxIndex = i\n        }\n        if (maxPrice - minPrice > maxProfit) {\n            maxProfit = maxPrice - minPrice\n        }\n    }\n    return maxProfit\n}"}
{"kt_path": "marc-bouvier-katas__Kotlin_EduTools_Advent_of_Code_2021__12cf74c/Day 5/Part 1/src/Task.kt", "CodeLlama-7b-hf": "class Task {\n    companion object {\n        fun overlaps(ventsLines: Array<String>): Int {\n            val lines = Lines(null, 1, null)\n            val length = ventsLines.size\n            var i = 0\n            while (i < length) {\n                val j = i\n                while (j < length) {\n                    lines.mergeWith(Line.Companion.fromString(ventsLines[j]).toLine())\n                    j++\n                }\n                i++\n            }\n            return lines.overlaps()\n        }\n    }\n}"}
{"kt_path": "Laomedeia__Java8InAction__0dcd843/src/main/java/leetcode/a392_isSubSequence_HARD/Solution.kt", "CodeLlama-7b-hf": "class Solution {\n    fun isSubsequence(s: String, t: String): Boolean {\n        if (s.isEmpty()) return true\n        if (t.isEmpty()) return false\n        var i = 0\n        var j = 0\n        while (i < s.length && j < t.length) {\n            if (s[i] == t[j]) {\n                i++\n                j++\n            } else {\n                j++\n            }\n        }\n        return i == s.length\n    }\n}"}
{"kt_path": "nickperov__Algorithms__6696f5d/fibonacci/src/main/kotlin/com/nickperov/stud/algorithms/fibonacci/FibonacciLargeGenerator.kt", "CodeLlama-7b-hf": "package com.nickperov.stud.algorithms.fibonacci\n\nimport java.math.BigInteger\n\nclass FibonacciLargeTailRecursiveOptimisedGenerator : FibonacciLargeGenerator() {\n\n    override fun calculate(n: Int): BigInteger {\n        tailrec fun fib(n: Int, a: BigInteger, b: BigInteger): BigInteger {\n            return when (n) {\n                0 -> a\n                1 -> b\n                else -> fib(n - 1, b, a + b)\n            }\n        }\n\n        return fib(n, BigInteger.ZERO, BigInteger.ONE)\n    }\n}\n\nfun main(args: Array<String>) {\n    println(\"Hello, large Fibonacci numbers\")\n    println(FibonacciLargeTailRecursiveOptimisedGenerator().calculate(1000000))\n}"}
{"kt_path": "TonnyL__Windary__39f85cd/Kotlin/src/UniqueBinarySearchTrees.kt", "CodeLlama-7b-hf": "class UniqueBinarySearchTrees {\n    fun numTrees(n: Int): Int {\n        var count = 0\n        val dp = IntArray(n + 2)\n        dp[0] = 1\n        dp[1] = 1\n        for (i in 2..n) {\n            for (j in 0..i) {\n                dp[i + 1] += dp[j] * dp[i - j]\n            }\n        }\n        return dp[n + 1]\n    }\n}"}
{"kt_path": "quincy__euler-kotlin__01d96f6/src/main/kotlin/com/quakbo/euler/Euler4.kt", "CodeLlama-7b-hf": "fun isPalindrome(number: Int): Boolean {\n    val reversed = number.toString().reversed()\n    return number.toString() == reversed\n}\n\nfun main(args: Array<String>) {\n    for (i in 999 downTo 99) {\n        for (j in 999 downTo 99) {\n            val product = i * j\n            if (isPalindrome(product)) {\n                println(product)\n                break\n            }\n        }\n    }\n}"}
{"kt_path": "getupminaaa__Algorithm__01187e2/Algorithm/src/main/kotlin/programmers/level1/personalInfoCollectionValidityPeriod.kt", "CodeLlama-7b-hf": "class Solution {\n    fun solution(input: String, info: Array<String>, dates: Array<String>): IntArray {\n        val answer = IntArray(dates.size)\n        for (i in 0 until dates.size) {\n            val date = dates[i]\n            val dateInfo = date.split(\" \")[1]\n            val dateYear = date.split(\" \")[0].split(\".\")[0]\n            val dateMonth = date.split(\" \")[0].split(\".\")[1]\n            val dateDay = date.split(\" \")[0].split(\".\")[2]\n            val infoYear = info[0].split(\".\")[0]\n            val infoMonth = info[0].split(\".\")[1]\n            val infoDay = info[0].split(\".\")[2]\n            val infoPeriod = info[1]\n            val infoPeriodYear = infoPeriod.split(\".\")[0]\n            val infoPeriodMonth = infoPeriod.split(\".\")[1]\n            val infoPeriodDay = infoPeriod.split(\".\")[2]\n            val infoPeriodYearInt = infoPeriodYear.toInt()\n            val infoPeriodMonthInt = infoPeriodMonth.toInt()\n            val infoPeriodDayInt = infoPeriodDay.toInt()\n            val dateYearInt = dateYear.toInt()\n            val dateMonthInt = dateMonth.toInt()\n            val dateDayInt = dateDay.toInt()\n            val infoYearInt = infoYear.toInt()\n            val infoMonthInt = infoMonth.toInt()\n            val infoDayInt = infoDay.toInt()\n            val dateYearInt2 = dateYearInt + infoPeriodYearInt\n            val dateMonthInt2 = dateMonthInt + infoPeriodMonthInt\n            val dateDayInt2 = dateDayInt + infoPeriodDayInt\n            val dateYearInt3 = dateYearInt2 + infoYearInt\n            val dateMonthInt3 = dateMonthInt2 + infoMonthInt\n            val dateDayInt3 = dateDayInt2 + infoDayInt\n            val dateYearInt4 = dateYearInt3 + infoYearInt\n            val dateMonthInt4 = dateMonthInt3 + infoMonthInt\n            val dateDayInt4 = dateDayInt3 + infoDayInt\n            if (dateYearInt2 > 2022) {\n                answer[i] = 0\n            } else if (dateYearInt2 == 2022 && dateMonthInt2 > 2) {\n                answer[i] = 0\n            } else if (dateYearInt2 == 2022 && dateMonthInt2 == 2 && dateDayInt2 > 20) {\n                answer[i] = 0\n            } else if (dateYearInt2 == 2022 && dateMonthInt2 == 2 && dateDayInt2 == 20 && dateYearInt3 > 2022) {\n                answer[i] = 0\n            } else if (dateYearInt2 == 2022 && dateMonthInt2 == 2 && dateDayInt2 == 20 && dateYearInt3 == 2022 && dateMonthInt3 > 2) {\n                answer[i] = 0\n            } else if (dateYearInt2 == 2022 && dateMonthInt2 == 2 && dateDayInt2 == 20 && dateYearInt3 == 2022 && dateMonthInt3 == 2 && dateDayInt3 > 20) {\n                answer[i] = 0\n            } else if (dateYearInt2 == 2022 && dateMonthInt2 == 2 && dateDayInt2 == 20 && dateYearInt3 == 2022 && dateMonthInt3 == 2 && dateDayInt3 == 20 && dateYearInt4 > 2022) {\n                answer[i] = 0\n            } else if (dateYearInt2 == 2022 && dateMonthInt2 == 2 && dateDayInt2 == 20 && dateYearInt3 == 2022 && dateMonthInt3 == 2 && dateDayInt3 == 20 && dateYearInt4 == 2022 && dateMonthInt4 > 2) {\n                answer[i] = 0\n            } else if (dateYearInt2 == 2022 && dateMonthInt2 == 2 && dateDayInt2 == 20 && dateYearInt3 == 2022 && dateMonthInt3 == 2 && dateDayInt3 == 20 && dateYearInt4 == 2022 && dateMonthInt4 == 2 && dateDayInt4 > 20) {\n                answer[i] = 0\n            } else if (dateYearInt2 == 2022 && dateMonthInt2 == 2 && dateDayInt2 == 20 && dateYearInt3 == 2022 && dateMonthInt3 == 2 && dateDayInt3 == 20 && dateYearInt4 == 2022 && dateMonthInt4 == 2 && dateDayInt4 == 20 && dateYearInt4 > 2022) {\n                answer[i] = 0\n            } else if (dateYearInt2 == 2022 && dateMonthInt2 == 2 && dateDayInt2 == 20 && dateYearInt3 == 2022 && dateMonthInt3 == 2 && dateDayInt3 == 20 && dateYearInt4 == 2022 && dateMonthInt4 == 2 && dateDayInt4 == 20 && dateYearInt4 == 2022 && dateMonthInt4 > 2) {\n                answer[i] = 0\n            } else if (dateYearInt2 == 2022 && dateMonthInt2 == 2 && dateDayInt2 == 20 && dateYearInt3 == 2022 && dateMonthInt3 == 2 && dateDayInt3 == 20 && dateYearInt4 == 2022 && dateMonthInt4 == 2 && dateDayInt4 == 20 && dateYearInt4 == 2022 && dateMonthInt4 == 2 && dateDayInt4 > 20) {\n                answer[i] = 0\n            } else if (dateYearInt2 == 2022 && dateMonthInt2 == 2 && dateDayInt2 == 20 && dateYearInt3 == 2022 && dateMonthInt3 == 2 && dateDayInt3 == 20 && dateYearInt4 == 2022 && dateMonthInt4 == 2 && dateDayInt4 == 20 && dateYearInt4 == 2022 && dateMonthInt4 == 2 && dateDayInt4 == 20 && dateYearInt4 > 2022) {\n                answer[i] = 0\n            } else if (dateYearInt2 == 2022 && dateMonthInt2 == 2 && dateDayInt2 == 20 && dateYearInt3 == 2022 && dateMonthInt3 == 2 && dateDayInt3 == 20 && dateYearInt4 == 2022 && dateMonthInt4 == 2 && dateDayInt4 == 20 && dateYearInt4 == 2022 && dateMonthInt4 == 2 && dateDayInt4 == 20 && dateYearInt4 == 2022 && dateMonthInt4 > 2) {\n                answer[i] = 0\n            } else if (dateYearInt2 == 2022 && dateMonthInt2 == 2 && dateDayInt2 == 20 && dateYearInt3 == 2022 && dateMonthInt3"}
{"kt_path": "iafsilva__codility-lessons__5d86aef/src/main/kotlin/lesson1/BinaryGap.kt", "CodeLlama-7b-hf": "package lesson1\n\nclass BinaryGap {\n    fun solution(N: Int): Int {\n        var maxGap = 0\n        var currentGap = 0\n        var prevDigit = 0\n        var isDigit = false\n        for (digit in N.toString().toCharArray()) {\n            if (digit == '1') {\n                if (isDigit) {\n                    currentGap++\n                } else {\n                    isDigit = true\n                    prevDigit = currentGap\n                    currentGap = 0\n                }\n            } else {\n                isDigit = false\n            }\n            if (currentGap > maxGap) {\n                maxGap = currentGap\n            }\n        }\n        return maxGap + prevDigit\n    }\n}"}
{"kt_path": "zys0909__CodeLabs__869c7c2/src/com/leecode/array/Code1.kt", "CodeLlama-7b-hf": "package com.leecode.array\n\nclass Code1Kt {\n    fun missingNumber1(nums: IntArray): Int {\n        var i = 0\n        var j = 0\n        val n = nums.size\n        while (j < n) {\n            if (nums[i] != i + 1) {\n                i++\n            } else {\n                j++\n                i++\n            }\n        }\n        return i\n    }\n\n    fun missingNumber2(nums: IntArray): Int {\n        var i = 0\n        var j = 1\n        val n = nums.size\n        while (j < n) {\n            if (nums[i] != i + 1) {\n                i++\n            } else {\n                j++\n                i++\n            }\n        }\n        return i\n    }\n}"}
{"kt_path": "ykrytsyn__leetcode-in-kotlin__0acf2a6/src/main/kotlin/leetcode/ArrangingCoins.kt", "CodeLlama-7b-hf": "class ArrangingCoins {\n    fun bruteForce(n: Int): Int {\n        var count = n\n        var coin = 1\n        while (coin < n) {\n            count = count - coin\n            coin++\n        }\n        return count\n    }\n\n    fun binarySearch(n: Int): Int {\n        var left = 0L\n        var right = n.toLong()\n        while (left < right) {\n            val mid = (left + right) / 2\n            val num = (mid * (mid + 1)) / 2\n            if (num == n.toLong()) {\n                return mid.toInt()\n            } else if (num < n.toLong()) {\n                left = mid + 1\n            } else {\n                right = mid - 1\n            }\n        }\n        return left.toInt()\n    }\n}"}
{"kt_path": "mayabot__mynlp__b980da3/mynlp/src/main/java/com/mayabot/nlp/module/nwd/ValueObjects.kt", "CodeLlama-7b-hf": "public final class ValueObjectsKt {\n    public static final void addTo(HashMap<Character, IntCount> map, char c, int i) {\n        Intrinsics.checkNotNullParameter(map, \"this\");\n        map.put(Character.valueOf(c), new IntCount().apply {\n            setValue(getValue() + i)\n        });\n    }\n}"}
{"kt_path": "jjrodcast__CompetitiveProblems__a91868c/leetcode/UniquePathsTwo.kt", "CodeLlama-7b-hf": "fun main(args: Array<String>) {\n    val solution = Solution()\n    val obstacleGrid = Array(3, { IntArray(3) })\n    obstacleGrid[0][0] = 0\n    obstacleGrid[0][1] = 0\n    obstacleGrid[0][2] = 0\n    obstacleGrid[1][0] = 0\n    obstacleGrid[1][1] = 0\n    obstacleGrid[1][2] = 0\n    obstacleGrid[2][0] = 0\n    obstacleGrid[2][1] = 0\n    obstacleGrid[2][2] = 0\n    val result = solution.uniquePathsWithObstacles(obstacleGrid)\n    println(result)\n}\n\nclass Solution {\n    fun uniquePathsWithObstacles(obstacleGrid: Array<IntArray>): Int {\n        val m = obstacleGrid.size\n        val n = obstacleGrid[0].size\n        val dp = Array(m) { IntArray(n) }\n        dp[0][0] = if (obstacleGrid[0][0] == 1) 0 else 1\n        for (i in 1 until m) {\n            dp[i][0] = if (obstacleGrid[i][0] == 1) 0 else dp[i - 1][0]\n        }\n        for (i in 1 until n) {\n            dp[0][i] = if (obstacleGrid[0][i] == 1) 0 else dp[0][i - 1]\n        }\n        for (i in 1 until m) {\n            for (j in 1 until n) {\n                if (obstacleGrid[i][j] == 1) {\n                    dp[i][j] = 0\n                } else {\n                    dp[i][j] = dp[i - 1][j] + dp[i][j - 1]\n                }\n            }\n        }\n        return dp[m - 1][n - 1]\n    }\n}"}
{"kt_path": "boris920308__HoOne__8881468/hoon/HoonAlgorithm/src/main/kotlin/programmers/lv01/Lv1_77884.kt", "CodeLlama-7b-hf": "fun main() {\n    println(solution(13, 17))\n}\n\nfun solution(a: Int, b: Int): Int {\n    var answer = 0\n    var i = a\n    var j = b\n    while (i <= j) {\n        if (countDivisors(i) % 2 == 0) {\n            answer += i\n        } else {\n            answer -= i\n        }\n        if (i < j) {\n            i++\n        } else {\n            j--\n        }\n    }\n    return answer\n}\n\nfun countDivisors(n: Int): Int {\n    var answer = 0\n    var i = 1\n    while (i <= n) {\n        if (n % i == 0) {\n            answer += 2\n        }\n        i++\n    }\n    return answer\n}"}
{"kt_path": "Codextor__kotlin-codes__68b75a7/src/main/kotlin/PartitionArrayForMaximumSum.kt", "CodeLlama-7b-hf": "fun maxSumAfterPartitioning(arr: IntArray, k: Int): Int {\n    require(arr.isNotEmpty()) { \"Empty array\" }\n    require(k > 0) { \"K must be positive\" }\n\n    var maxSum = Int.MIN_VALUE\n    var currentSum = 0\n    var currentPartition = 1\n\n    for (i in arr.indices) {\n        currentSum += arr[i]\n        if (currentPartition == k) {\n            maxSum = maxOf(maxSum, currentSum)\n            currentSum = 0\n            currentPartition = 1\n        } else {\n            currentPartition++\n        }\n    }\n\n    return maxSum\n}"}
{"kt_path": "scientificCommunity__blog-sample__36e291c/algorithms/src/main/kotlin/org/baichuan/sample/algorithms/leetcode/simple/interview/MajorityElement.kt", "CodeLlama-7b-hf": "package org.baichuan.sample.algorithms.leetcode.simple.interview\n\nclass MajorityElement {\n    fun majorityElement(nums: IntArray): Int {\n        var count = 0\n        var candidate = 0\n        for (i in nums.indices) {\n            if (count == 0) {\n                candidate = nums[i]\n            }\n            if (nums[i] == candidate) {\n                count++\n            } else {\n                count--\n            }\n        }\n        return candidate\n    }\n}"}
{"kt_path": "rhavran__ProjectEuler__1115674/src/Utils.kt", "CodeLlama-7b-hf": "package com.example\n\nimport java.util.Map\nimport java.util.Map.Entry\n\npublic final class UtilsKt {\n    public static final long dividers(long n):\n        var sum = 1L\n        val factors = PrimeFactorization.INSTANCE.primeFactors(n)\n        for (factor in factors.entries) {\n            sum *= (n / factor.value.toLong() + 1)\n        }\n        return sum\n\n    public static final long sequenceSumStartingFrom(long n, long m):\n        return sumFromTo(m, n)\n\n    public static final long sumFromTo(long n, long m):\n        var sum = 0L\n        for (i in m..n) {\n            sum += i\n        }\n        return sum\n}"}
{"kt_path": "jimmymorales__project-euler__e881cad/src/main/kotlin/Problem4.kt", "CodeLlama-7b-hf": "fun main() {\n    println(largestPalindrome())\n}\n\nfun largestPalindrome(): Int {\n    var largest = 0\n    for (i in 999 downTo 99) {\n        for (j in i downTo 100) {\n            val product = i * j\n            if (isPalindrome(product) && product > largest) {\n                largest = product\n            }\n        }\n    }\n    return largest\n}\n\nfun isPalindrome(number: Int): Boolean {\n    var numberCopy = number\n    var reversed = 0\n    while (numberCopy > 0) {\n        reversed = reversed * 10 + numberCopy % 10\n        numberCopy /= 10\n    }\n    return number == reversed\n}\n\nfun reverse(number: Int): Int {\n    var numberCopy = number\n    var reversed = 0\n    while (numberCopy > 0) {\n        reversed = reversed * 10 + numberCopy % 10\n        numberCopy /= 10\n    }\n    return reversed\n}"}
{"kt_path": "Codextor__kotlin-codes__68b75a7/src/main/kotlin/PalindromicSubstrings.kt", "CodeLlama-7b-hf": "fun countSubstrings(s: String): Int {\n    var count = 0\n    var i = 0\n    var j = 0\n    val n = s.length\n    while (i < n && j < n) {\n        count += countSubstringsWithCenter(s, i, j)\n        i++\n        j++\n    }\n    return count\n}\n\nprivate fun countSubstringsWithCenter(s: String, i: Int, j: Int): Int {\n    var count = 0\n    while (i >= 0 && j < s.length && s[i] == s[j]) {\n        count++\n        i--\n        j++\n    }\n    return count\n}"}
{"kt_path": "antop-dev__algorithm__9a3e762/src/main/kotlin/kr/co/programmers/P12952.kt", "CodeLlama-7b-hf": "class P12952 {\n    fun solution(n: Int): Int {\n        val answer = IntArray(n)\n        return dfs(answer, 0)\n    }\n\n    private fun dfs(arr: IntArray, idx: Int): Int {\n        if (idx == arr.size) return 1\n        var answer = 0\n        for (i in 0 until arr.size) {\n            if (valid(arr, i)) {\n                arr[idx] = i\n                answer += dfs(arr, idx + 1)\n            }\n        }\n        return answer\n    }\n\n    private fun valid(arr: IntArray, idx: Int): Boolean {\n        for (i in 0 until idx) {\n            if (Math.abs(arr[idx] - arr[i]) == idx - i) return false\n        }\n        return true\n    }\n}"}
{"kt_path": "ILIYANGERMANOV__algorithms__4abe4b5/Algorithms/src/main/kotlin/MaxSubArray.kt", "CodeLlama-7b-hf": "class MaxSubArray {\n    fun maxSubArray(nums: IntArray): Int {\n        var max = Int.MIN_VALUE\n        var sum = 0\n        var start = 0\n        for (i in 1..nums.size) {\n            val num = nums[i - 1]\n            if (num > 0) {\n                sum += num\n            } else {\n                if (sum > max) {\n                    max = sum\n                }\n                sum = 0\n                start = i\n            }\n        }\n        if (sum > max) {\n            max = sum\n        }\n        return max\n    }\n}"}
{"kt_path": "AlBovo__Compiti__56a3131/src/main/kotlin/segtree.kt", "CodeLlama-7b-hf": "fun main() {\n    val a = arrayOf(2, 4, 2, 1, 3, 5, 6)\n    val segtree = SegmentTree(a)\n    println(segtree.getSum(0, 4))\n}\n\nclass SegmentTree(val a: Array<Int>) {\n    val n = a.size\n    val segtree = Array(4 * n) { 0 }\n\n    init {\n        build(a, 0, 0, n - 1)\n    }\n\n    fun build(a: Array<Int>, node: Int, left: Int, right: Int) {\n        if (left == right) {\n            segtree[node] = a[left]\n            return\n        }\n\n        val mid = (left + right) / 2\n        build(a, 2 * node + 1, left, mid)\n        build(a, 2 * node + 2, mid + 1, right)\n        segtree[node] = segtree[2 * node + 1] + segtree[2 * node + 2]\n    }\n\n    fun getSum(left: Int, right: Int): Int {\n        return getSum(0, left, right)\n    }\n\n    fun getSum(node: Int, left: Int, right: Int): Int {\n        if (left > right) {\n            return 0\n        }\n\n        if (segtree[node] != 0 && left in segtree[node * 2 + 1]..segtree[node * 2 + 2] && right in segtree[node * 2 + 1]..segtree[node * 2 + 2]) {\n            return segtree[node]\n        }\n\n        val mid = (left + right) / 2\n        return getSum(node * 2 + 1, left, mid) + getSum(node * 2 + 2, mid + 1, right)\n    }\n}"}
{"kt_path": "3mtee__exercism-kotlin__6e3eb88/complex-numbers/src/main/kotlin/ComplexNumbers.kt", "CodeLlama-7b-hf": "class ComplexNumbers {\n    companion object {\n        fun exponential(c: ComplexNumber): ComplexNumber {\n            if (c.real == 0.0) {\n                return ComplexNumber(1.0, 0.0)\n            }\n            if (c.real == 1.0) {\n                return ComplexNumber(Math.cos(c.imag), Math.sin(c.imag))\n            }\n            return ComplexNumber(Math.pow(2.718281828459045, c.real), 2.0 * Math.sin(c.imag))\n        }\n    }\n}"}
{"kt_path": "perihanmirkelam__ProjectEuler__a24ac44/src/main/kotlin/P014_LongestCollatzSequence.kt", "CodeLlama-7b-hf": "fun p14() {\n    var longest = 0L\n    var longestStart = 0L\n    var i = 0\n    var j = 0\n    for (i in 1..1000000) {\n        j = i\n        while (j != 1) {\n            if (j % 2 == 0L) {\n                j /= 2\n            } else {\n                j = 3 * j + 1\n            }\n            if (j > longest) {\n                longest = j\n                longestStart = i.toLong()\n            }\n        }\n    }\n    println(\"A14: $longestStart\")\n}"}
{"kt_path": "iafsilva__codility-lessons__5d86aef/src/main/kotlin/lesson2/CyclicRotation.kt", "CodeLlama-7b-hf": "class CyclicRotation {\n    fun solution(a: IntArray, k: Int): IntArray {\n        if (a.isEmpty()) return intArrayOf()\n        if (a.size == 1) return a\n        if (k == 0) return a\n\n        val n = a.size\n        val kk = k % n\n        val result = IntArray(n)\n        val queue = ArrayDeque<Int>()\n\n        for (i in 0 until n) {\n            queue.addLast(a[i])\n        }\n\n        var i = 0\n        while (i < n) {\n            result[i] = queue.removeLast()\n            queue.addFirst(a[i])\n            i++\n        }\n\n        return result\n    }\n}"}
{"kt_path": "boris920308__HoOne__8881468/hoon/HoonAlgorithm/src/main/kotlin/programmers/lv01/Lv1_12912.kt", "CodeLlama-7b-hf": "fun main() {\n    println(solution(3, 5))\n    println(solution(3, 3))\n    println(solution(5, 3))\n}\n\nfun solution(a: Int, b: Int): Long {\n    var answer = 0L\n    if (a <= b) {\n        for (i in a..b) {\n            answer += i.toLong()\n        }\n    } else {\n        for (i in b..a) {\n            answer += i.toLong()\n        }\n    }\n    return answer\n}\n\nfun secondSolution(a: Int, b: Int): Long {\n    var answer = 0L\n    if (a <= b) {\n        answer = (a..b).sumOf { it.toLong() }\n    } else {\n        answer = (b..a).sumOf { it.toLong() }\n    }\n    return answer\n}"}
{"kt_path": "darian-catalin-cucer__divide-and-conquer-algorithms__1cea70d/kt.kt", "CodeLlama-7b-hf": "fun quickSort(arr: IntArray, left: Int, right: Int) {\n    if (left < right) {\n        val pivot = partition(arr, left, right)\n        quickSort(arr, left, pivot - 1)\n        quickSort(arr, pivot + 1, right)\n    }\n}\n\nfun partition(arr: IntArray, left: Int, right: Int): Int {\n    val pivot = arr[left]\n    var i = left\n    var j = right\n    while (i < j) {\n        while (arr[i] < pivot) {\n            i++\n        }\n        while (arr[j] > pivot) {\n            j--\n        }\n        if (i < j) {\n            val tmp = arr[i]\n            arr[i] = arr[j]\n            arr[j] = tmp\n        }\n    }\n    arr[left] = arr[j]\n    arr[j] = pivot\n    return j\n}\n\nfun main() {\n    val arr = intArrayOf(5, 4, 3, 2, 1)\n    quickSort(arr, 0, arr.size - 1)\n    println(arr.joinToString())\n}"}
{"kt_path": "TonnyL__Windary__39f85cd/Kotlin/src/ThreeSumClosest.kt", "CodeLlama-7b-hf": "fun threeSumClosest(nums: IntArray, target: Int): Int {\n    nums.sort()\n    var closest = Int.MAX_VALUE\n    for (i in 0 until nums.size - 2) {\n        var left = i + 1\n        var right = nums.size - 1\n        while (left < right) {\n            val sum = nums[i] + nums[left] + nums[right]\n            val diff = sum - target\n            if (diff == 0) {\n                return sum\n            }\n            if (diff < 0) {\n                right--\n            } else {\n                left++\n            }\n            if (Math.abs(diff) < Math.abs(closest)) {\n                closest = diff\n            }\n        }\n    }\n    return target + closest\n}"}
{"kt_path": "Javran__leetcode__f3899fe/bulb-switcher/Solution.kt", "CodeLlama-7b-hf": "class Solution {\n    companion object {\n        fun main(args: Array<String>) {\n            Solution().bulbSwitch(10)\n        }\n    }\n\n    fun bulbSwitch(n: Int): Int {\n        return (Math.sqrt(n.toDouble())).toInt()\n    }\n}"}
{"kt_path": "TonnyL__Windary__39f85cd/Kotlin/src/NextPermutation.kt", "CodeLlama-7b-hf": "class NextPermutation {\n    fun nextPermutation(nums: IntArray) {\n        val length = nums.size - 1\n        var i = length - 1\n        while (i >= 1 && nums[i] <= nums[i - 1]) {\n            i--\n        }\n        if (i >= 1) {\n            var j = length\n            while (nums[i - 1] <= nums[j]) {\n                j--\n            }\n            swap(nums, i - 1, j)\n        }\n        reverse(nums, i, length)\n    }\n\n    private fun swap(nums: IntArray, i: Int, j: Int) {\n        val temp = nums[i]\n        nums[i] = nums[j]\n        nums[j] = temp\n    }\n\n    private fun reverse(nums: IntArray, i: Int, j: Int) {\n        while (i < j) {\n            swap(nums, i, j)\n            i++\n            j--\n        }\n    }\n}"}
{"kt_path": "boris920308__HoOne__8881468/hoon/HoonAlgorithm/src/main/kotlin/programmers/lv01/Lv1_12940.kt", "CodeLlama-7b-hf": "fun main() {\n    solution(3, 12)\n    solution(2, 5)\n}\n\nfun solution(a: Int, b: Int): List<Int> {\n    val answer = IntArray(2)\n    answer[0] = findGCD(a, b)\n    answer[1] = findLCM(a, b)\n    println(answer.toList())\n    return answer.toList()\n}\n\nfun findGCD(a: Int, b: Int): Int {\n    return if (b == 0) a else findGCD(b, a % b)\n}\n\nfun findLCM(a: Int, b: Int): Int {\n    return a * b / findGCD(a, b)\n}"}
{"kt_path": "JiangKlijna__leetcode-learning__65a1348/kt/001 Two Sum/TwoSum.kt", "CodeLlama-7b-hf": "class TwoSum {\n    fun twoSum(numbers: IntArray, target: Int): IntArray {\n        val map = HashMap<Int, Int>()\n        val result = IntArray(2)\n        for (i in numbers.indices) {\n            val value = map[numbers[i]]\n            if (value != null) {\n                result[0] = value\n                result[1] = i\n                return result\n            }\n            map[target - numbers[i]] = i\n        }\n        return result\n    }\n}"}
{"kt_path": "rupeshsasne__coursera-algorithms-part1__341634c/classroom/src/main/kotlin/com/radix2/algorithms/week1/UnionFind.kt", "CodeLlama-7b-hf": "fun main(args: Array<String>) {\n    val uf = WeightedQuickUnionWithPathCompressionUF(10)\n    uf.union(4, 3)\n    uf.union(3, 8)\n    uf.union(6, 5)\n    uf.union(9, 4)\n    uf.union(2, 1)\n    uf.union(5, 0)\n    uf.union(7, 2)\n    uf.union(6, 1)\n    uf.union(7, 3)\n}"}
{"kt_path": "boris920308__HoOne__8881468/hoon/HoonAlgorithm/src/main/kotlin/programmers/lv01/Lv1_68935.kt", "CodeLlama-7b-hf": "fun main() {\n    println(solution(45))\n}\n\nfun solution(n: Int): Int {\n    return n.toString().reversed().toInt(3)\n}\n\nfun solution_1(n: Int): Int {\n    return n.toString().reversed().toInt(10)\n}"}
{"kt_path": "korilin__DSA-kt__b96ba1b/src/main/kotlin/sort_algorithm/quickSort.kt", "CodeLlama-7b-hf": "package sort_algorithm\n\nfun quickSort(array: IntArray) {\n    quickSort(array, 0, array.size - 1)\n}\n\nprivate fun quickSort(array: IntArray, left: Int, right: Int) {\n    if (left < right) {\n        val partitionIndex = partition(array, left, right)\n        quickSort(array, left, partitionIndex - 1)\n        quickSort(array, partitionIndex + 1, right)\n    }\n}\n\nprivate fun partition(array: IntArray, left: Int, right: Int): Int {\n    var pivotIndex = left\n    var i = left + 1\n    var j = right\n    while (i <= j) {\n        while (array[i] < array[pivotIndex]) {\n            i++\n        }\n        while (array[j] > array[pivotIndex]) {\n            j--\n        }\n        if (i <= j) {\n            val tmp = array[i]\n            array[i] = array[j]\n            array[j] = tmp\n            i++\n            j--\n        }\n    }\n    val tmp = array[pivotIndex]\n    array[pivotIndex] = array[j]\n    array[j] = tmp\n    return j\n}"}
{"kt_path": "gardnerdickson__advent-of-code-2015__4a23ab3/src/day_10.kt", "CodeLlama-7b-hf": "class Day10 {\n    companion object {\n        val INSTANCE = Day10()\n    }\n\n    fun part1(input: String): Int {\n        val stack = Stack<Char>()\n        var score = 0\n        for (c in input) {\n            when (c) {\n                '(' -> stack.push(')')\n                '[' -> stack.push(']')\n                '{' -> stack.push('}')\n                '<' -> stack.push('>')\n                else -> {\n                    val expected = stack.pop()\n                    if (c != expected) {\n                        when (c) {\n                            ')' -> score += 3\n                            ']' -> score += 57\n                            '}' -> score += 1197\n                            '>' -> score += 25137\n                        }\n                    }\n                }\n            }\n        }\n        return score\n    }\n\n    fun part2(input: String): Int {\n        val scores = mutableListOf<Int>()\n        for (line in input.split(\"\\n\")) {\n            val stack = Stack<Char>()\n            for (c in line) {\n                when (c) {\n                    '(' -> stack.push(')')\n                    '[' -> stack.push(']')\n                    '{' -> stack.push('}')\n                    '<' -> stack.push('>')\n                    else -> {\n                        val expected = stack.pop()\n                        if (c != expected) {\n                            stack.clear()\n                            break\n                        }\n                    }\n                }\n            }\n            if (stack.isNotEmpty()) {\n                var score = 0\n                while (stack.isNotEmpty()) {\n                    val c = stack.pop()\n                    score *= 5\n                    score += when (c) {\n                        ')' -> 1\n                        ']' -> 2\n                        '}' -> 3\n                        '>' -> 4\n                        else -> 0\n                    }\n                }\n                scores.add(score)\n            }\n        }\n        scores.sort()\n        return scores[scores.size / 2]\n    }\n}"}
{"kt_path": "gardnerdickson__advent-of-code-2015__4a23ab3/src/day_2.kt", "CodeLlama-7b-hf": "package day_2\n\nimport java.io.File\n\nclass Day2 {\n    companion object {\n        val INSTANCE = Day2()\n    }\n\n    fun part1(input: String): Int {\n        val lines = input.split(\"\\n\")\n        val (min, max) = lines.map { it.toInt() }.sorted()\n        return max - min\n    }\n\n    fun part2(input: String): Int {\n        val lines = input.split(\"\\n\")\n        val (min, max) = lines.map { it.toInt() }.sorted()\n        var count = 0\n        for (i in min..max) {\n            val sum = lines.map { it.toInt() }.filter { it % i == 0 }.sum()\n            if (sum == i) count++\n        }\n        return count\n    }\n}\n\nfun main(args: Array<String>) {\n    val input = File(\"res/day_2_input.txt\").readText()\n    println(\"Part 1: ${Day2.INSTANCE.part1(input)}\")\n    println(\"Part 2: ${Day2.INSTANCE.part2(input)}\")\n}"}
{"kt_path": "gardnerdickson__advent-of-code-2015__4a23ab3/src/day_3.kt", "CodeLlama-7b-hf": "class Day3 {\n    companion object {\n        val INSTANCE = Day3()\n    }\n\n    fun part1(input: String): Int {\n        val lines = input.lines()\n        val width = lines.first().length\n        val height = lines.size\n        val treeCount = lines.fold(0) { acc, line ->\n            val x = acc % width\n            val y = acc / width\n            val char = line[x]\n            if (char == '#') {\n                acc + 1\n            } else {\n                acc\n            }\n        }\n        return treeCount\n    }\n\n    fun part2(input: String): Int {\n        val lines = input.lines()\n        val width = lines.first().length\n        val height = lines.size\n        val slopes = listOf(\n            Pair(1, 1),\n            Pair(3, 1),\n            Pair(5, 1),\n            Pair(7, 1),\n            Pair(1, 2)\n        )\n        val treeCounts = slopes.map { slope ->\n            val x = slope.first\n            val y = slope.second\n            val treeCount = lines.fold(0) { acc, line ->\n                val x = acc % width\n                val y = acc / width\n                val char = line[x]\n                if (char == '#') {\n                    acc + 1\n                } else {\n                    acc\n                }\n            }\n            treeCount\n        }\n        return treeCounts.fold(1) { acc, treeCount -> acc * treeCount }\n    }\n}"}
{"kt_path": "antop-dev__algorithm__9a3e762/src/main/kotlin/kr/co/programmers/P161988.kt", "CodeLlama-7b-hf": "class P161988 {\n    fun solution(A: IntArray): Long {\n        val sequence = \"sequence\"\n        Intrinsics.checkNotNullParameter(A, sequence)\n        val max = max(A, 1)\n        val max2 = max(A, -1)\n        return Math.max(max, max2)\n    }\n\n    private fun max(A: IntArray, i: Int): Long {\n        val length = A.size\n        val array = LongArray(length)\n        var i2 = 0\n        var i3 = i\n        while (i2 < length) {\n            array[i2] = (A[i2] * i3).toLong()\n            i3 *= -1\n            i2++\n        }\n        var max = array[0]\n        var i4 = -1\n        while (i4 < length) {\n            max = Math.max(max, array[i4 + 1])\n            i4--\n        }\n        return max\n    }\n}"}
{"kt_path": "alexjlockwood__bees-and-bombs-compose__0d7a86b/app/src/main/java/com/alexjlockwood/beesandbombs/demos/utils/MathUtils.kt", "CodeLlama-7b-hf": "package com.alexjlockwood.beesandbombs.demos.utils\n\nimport kotlin.math.*\n\nobject MathUtils {\n    val PI = PI\n    val TWO_PI = TWO_PI\n    val HALF_PI = HALF_PI\n\n    fun dist(x1: Float, y1: Float, x2: Float, y2: Float): Float {\n        return sqrt((x2 - x1) * (x2 - x1) + (y2 - y1) * (y2 - y1))\n    }\n\n    fun lerp(a: Float, b: Float, t: Float): Float {\n        return a + (b - a) * t\n    }\n\n    fun map(value: Float, start1: Float, stop1: Float, start2: Float, stop2: Float): Float {\n        return start2 + (stop2 - start2) * ((value - start1) / (stop1 - start1))\n    }\n\n    fun toDegrees(radians: Float): Float {\n        return toDegrees(radians.toDouble()).toFloat()\n    }\n\n    fun ease(t: Float): Float {\n        return t * t * t * (t * (t * 6 - 15) + 10)\n    }\n\n    fun ease(t: Float, power: Float): Float {\n        return t.pow(power) * (1 - t).pow(1 - power)\n    }\n}"}
{"kt_path": "chengw315__daily-study__501b881/letcode/src/main/java/daily/LeetCodeLCP13.kt", "CodeLlama-7b-hf": "class SolutionLCP13 {\n    fun minimalSteps(board: Array<String>): Int {\n        val n = board.size\n        val m = board[0].length\n        val dp = Array(n) { IntArray(m) }\n        for (i in 0 until n) {\n            for (j in 0 until m) {\n                if (board[i][j] == 'S') {\n                    dp[i][j] = 0\n                } else {\n                    dp[i][j] = Int.MAX_VALUE\n                }\n            }\n        }\n        for (i in 0 until n) {\n            for (j in 0 until m) {\n                if (board[i][j] == 'S') {\n                    dp[i][j] = 0\n                } else {\n                    dp[i][j] = Int.MAX_VALUE\n                }\n            }\n        }\n        for (i in 0 until n) {\n            for (j in 0 until m) {\n                if (board[i][j] == 'S') {\n                    dp[i][j] = 0\n                } else {\n                    dp[i][j] = Int.MAX_VALUE\n                }\n            }\n        }\n        return dp[n - 1][m - 1]\n    }\n}\n\nfun main() {\n    val board = arrayOf(\"S#O\", \"M..\", \"M.T\")\n    val solution = SolutionLCP13()\n    val result = solution.minimalSteps(board)\n    println(result)\n}"}
{"kt_path": "rajatenzyme__Coding-Journey__65a0570/Algo_Ds_Notes-master/Algo_Ds_Notes-master/Floyd_Warshall_Algorithm/Floyd_Warshall_Algorithm.kt", "CodeLlama-7b-hf": "package com.example\n\nimport com.example.FloydWarshall\n\nfun main(args: Array<String>) {\n    val matrix = Array(5) { IntArray(5) }\n    matrix[0][0] = 0\n    matrix[0][1] = 1\n    matrix[0][2] = 2\n    matrix[0][3] = 3\n    matrix[0][4] = 4\n    matrix[1][0] = 1\n    matrix[1][1] = 1\n    matrix[1][2] = 3\n    matrix[1][3] = 4\n    matrix[1][4] = 5\n    matrix[2][0] = 2\n    matrix[2][1] = 3\n    matrix[2][2] = 2\n    matrix[2][3] = 4\n    matrix[2][4] = 5\n    matrix[3][0] = 3\n    matrix[3][1] = 4\n    matrix[3][2] = 4\n    matrix[3][3] = 3\n    matrix[3][4] = 5\n    matrix[4][0] = 4\n    matrix[4][1] = 5\n    matrix[4][2] = 5\n    matrix[4][3] = 4\n    matrix[4][4] = 3\n    FloydWarshall.INSTANCE.doCalcs(matrix)\n}"}
{"kt_path": "brunorene__advent_of_code_2018__0cb6814/src/main/kotlin/advent/of/code/day17/Solution.kt", "CodeLlama-7b-hf": "package advent.of.code.day17\n\nimport java.io.File\nimport java.util.*\n\nclass Underground(input: File) {\n    private val clay: Set<Coord>\n    private val water: Set<Coord>\n    private val xMin: Int\n    private val xMax: Int\n    private val yMin: Int\n    private val yMax: Int\n\n    init {\n        val lines = input.readLines()\n        val clay = mutableSetOf<Coord>()\n        val water = mutableSetOf<Coord>()\n        val xMin = lines.map { it.xMin }.min()!!\n        val xMax = lines.map { it.xMax }.max()!!\n        val yMin = lines.map { it.yMin }.min()!!\n        val yMax = lines.map { it.yMax }.max()!!\n\n        for (line in lines) {\n            for (coord in line.coords) {\n                if (coord.x < xMin) continue\n                if (coord.x > xMax) continue\n                if (coord.y < yMin) continue\n                if (coord.y > yMax) continue\n                if (coord.x == xMin || coord.x == xMax || coord.y == yMin || coord.y == yMax) {\n                    clay.add(coord)\n                } else {\n                    water.add(coord)\n                }\n            }\n        }\n\n        this.clay = clay\n        this.water = water\n        this.xMin = xMin\n        this.xMax = xMax\n        this.yMin = yMin\n        this.yMax = yMax\n    }\n\n    fun getClay(): Set<Coord> {\n        return clay\n    }\n\n    fun getWater(): Set<Coord> {\n        return water\n    }\n\n    fun getXMin(): Int {\n        return xMin\n    }\n\n    fun getXMax(): Int {\n        return xMax\n    }\n\n    fun getYMin(): Int {\n        return yMin\n    }\n\n    fun getYMax(): Int {\n        return yMax\n    }\n\n    fun getWater(x: Int, y: Int): Set<Coord> {\n        val coords = mutableSetOf<Coord>()\n        for (i in x - 1..x + 1) {\n            for (j in y - 1..y + 1) {\n                if (i == x && j == y) continue\n                if (i < xMin || i > xMax || j < yMin || j > yMax) continue\n                coords.add(Coord(i, j))\n            }\n        }\n        return coords\n    }\n\n    fun getClay(x: Int, y: Int): Set<Coord> {\n        val coords = mutableSetOf<Coord>()\n        for (i in x - 1..x + 1) {\n            for (j in y - 1..y + 1) {\n                if (i == x && j == y) continue\n                if (i < xMin || i > xMax || j < yMin || j > yMax) continue\n                coords.add(Coord(i, j))\n            }\n        }\n        return coords\n    }\n\n    fun getClay(coord: Coord): Set<Coord> {\n        return getClay(coord.x, coord.y)\n    }\n\n    fun getWater(coord: Coord): Set<Coord> {\n        return getWater(coord.x, coord.y)\n    }\n\n    fun getClay(coords: Set<Coord>): Set<Coord> {\n        val clay = mutableSetOf<Coord>()\n        for (coord in coords) {\n            clay.addAll(getClay(coord))\n        }\n        return clay\n    }\n\n    fun getWater(coords: Set<Coord>): Set<Coord> {\n        val water = mutableSetOf<Coord>()\n        for (coord in coords) {\n            water.addAll(getWater(coord))\n        }\n        return water\n    }\n\n    fun getClay(coords: List<Coord>): Set<Coord> {\n        val clay = mutableSetOf<Coord>()\n        for (coord in coords) {\n            clay.addAll(getClay(coord))\n        }\n        return clay\n    }\n\n    fun getWater(coords: List<Coord>): Set<Coord> {\n        val water = mutableSetOf<Coord>()\n        for (coord in coords) {\n            water.addAll(getWater(coord))\n        }\n        return water\n    }\n\n    fun getClay(coords: Coord): Set<Coord> {\n        return getClay(coords.x, coords.y)\n    }\n\n    fun getWater(coords: Coord): Set<Coord> {\n        return getWater(coords.x, coords.y)\n    }\n\n    fun getClay(x: Int): Set<Coord> {\n        return getClay(x, yMin)\n    }\n\n    fun getWater(x: Int): Set<Coord> {\n        return getWater(x, yMin)\n    }\n\n    fun getClay(y: Int): Set<Coord> {\n        return getClay(xMin, y)\n    }\n\n    fun getWater(y: Int): Set<Coord> {\n        return getWater(xMin, y)\n    }\n\n    fun getClay(x: Int, y: Int): Set<Coord> {\n        val coords = mutableSetOf<Coord>()\n        for (i in x - 1..x + 1) {\n            for (j in y - 1..y + 1) {\n                if (i == x && j == y) continue\n                if (i < xMin || i > xMax || j < yMin || j > yMax) continue\n                coords.add(Coord(i, j))\n            }\n        }\n        return coords\n    }\n\n    fun getWater(x: Int, y: Int): Set<Coord> {\n        val coords = mutableSetOf<Coord>()\n        for (i in x - 1..x + 1) {\n            for (j in y - 1..y + 1) {\n                if (i == x && j == y) continue\n                if (i < xMin || i > xMax || j < yMin || j > yMax) continue\n                coords.add(Coord(i, j))\n            }\n        }\n        return coords\n    }\n\n    fun getClay(coords: Set<Coord>, x: Int, y: Int): Set<Coord> {\n        val clay = mutableSetOf<Coord>()\n        for (coord in coords) {\n            clay.addAll(getClay(coord.x, coord.y))\n        }\n        return clay\n    }\n\n    fun getWater(coords: Set<Coord>, x: Int, y: Int): Set<Coord> {\n        val water = mutableSetOf<Coord>()\n        for (coord"}
{"kt_path": "Simplation__OpenSourceRepository__d45feaa/算法/一维数组的动态和1480.kt", "CodeLlama-7b-hf": "fun main() {\n    val newNum = IntArray(5)\n    newNum[0] = 1\n    newNum[1] = 1\n    newNum[2] = 1\n    newNum[3] = 1\n    newNum[4] = 1\n    println(newNum.toString())\n}\n\nfun sumArr(newNum: IntArray, nums: IntArray, index: Int): Int {\n    if (index == 0) {\n        nums[0] = newNum[0]\n        nums[1] = newNum[1]\n        return 0\n    }\n    nums[index] = newNum[index] + sumArr(newNum, nums, index - 1)\n    return nums[index]\n}"}
{"kt_path": "jimmymorales__project-euler__e881cad/src/main/kotlin/Problem3.kt", "CodeLlama-7b-hf": "fun main() {\n    println(solution3(600851475143L))\n}\n\nprivate fun solution3(n: Long): Long {\n    var a = n\n    var b = a\n    while (a % 2L == 0L) {\n        a /= 2L\n    }\n    while (b % 2L == 0L) {\n        b /= 2L\n    }\n    while (a != b) {\n        if (a > b) {\n            a -= b\n        } else {\n            b -= a\n        }\n    }\n    return a\n}"}
{"kt_path": "age-series__ElectricalAge2__86d843f/src/main/kotlin/org/eln2/mc/data/SegmentTree.kt", "CodeLlama-7b-hf": "class SegmentTree<T>(private val root: SegmentTreeNode<T>) {\n    fun queryOrNull(x: Double): T? {\n        if (!root.contains(x)) return null\n        return root.query(x)\n    }\n\n    fun query(x: Double): T {\n        val result = root.query(x)\n        if (result == null) throw IllegalStateException(\"$x not found\")\n        return result\n    }\n}"}
{"kt_path": "ykrytsyn__leetcode-in-kotlin__0acf2a6/src/main/kotlin/leetcode/UniquePaths.kt", "CodeLlama-7b-hf": "class UniquePaths {\n    fun dynamicProgramming(m: Int, n: Int): Int {\n        val dp = Array(m) { IntArray(n) }\n        for (i in 0 until m) {\n            for (j in 0 until n) {\n                if (i == 0 || j == 0) {\n                    dp[i][j] = 1\n                } else {\n                    dp[i][j] = dp[i - 1][j] + dp[i][j - 1]\n                }\n            }\n        }\n        return dp[m - 1][n - 1]\n    }\n\n    fun recursive(m: Int, n: Int): Int {\n        if (m == 1 || n == 1) {\n            return 1\n        }\n        return recursive(m - 1, n) + recursive(m, n - 1)\n    }\n}"}
{"kt_path": "quincy__euler-kotlin__01d96f6/src/main/kotlin/com/quakbo/euler/Euler6.kt", "CodeLlama-7b-hf": "fun sumOfSquares(sequence: Sequence<Int>): Int {\n    return sequence.map { it * it }.sum()\n}\n\nfun squareOfSums(sequence: Sequence<Int>): Int {\n    return sequence.sum() * sequence.sum()\n}\n\nfun main(args: Array<String>) {\n    val sequence = generateSequence(1) { it + 1 }.take(100)\n    val sumOfSquares = squareOfSums(sequence)\n    val squareOfSums = sumOfSquares(sequence)\n    println(squareOfSums - sumOfSquares)\n}"}
{"kt_path": "Kirchberg__BigDataPL__b6a459a/LR7/src/main/kotlin/Task1V3.kt", "CodeLlama-7b-hf": "fun task1V3() {\n    val words = \"java android kotlin rust\".split(\" \")\n    val finder = WordChainFinder(words)\n    val longestWordChain = finder.findLongestWordChain()\n    println(\"Longest word chain: ${longestWordChain.joinToString(\",\")}\")\n}"}
{"kt_path": "fredyw__leetcode__a59d77c/src/main/kotlin/leetcode/Problem2064.kt", "CodeLlama-7b-hf": "class Problem2064 {\n    fun minimizedMaximum(n: Int, quantities: IntArray): Int {\n        var max = 0\n        var min = 1\n        var i = 0\n        var j = 0\n        var k = 0\n        while (j < quantities.size) {\n            if (max < quantities[j]) {\n                max = quantities[j]\n            }\n            if (min > quantities[j]) {\n                min = quantities[j]\n            }\n            j++\n        }\n        while (i < max) {\n            if (canDistribute(n, quantities, i)) {\n                min = i\n                break\n            }\n            i++\n        }\n        return min\n    }\n\n    private fun canDistribute(n: Int, quantities: IntArray, i: Int): Boolean {\n        var j = 0\n        var k = 0\n        while (j < quantities.size) {\n            if (quantities[j] % i != 0) {\n                return false\n            }\n            j++\n        }\n        return true\n    }\n}"}
