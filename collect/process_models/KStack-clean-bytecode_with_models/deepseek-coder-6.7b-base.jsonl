{"kt_path": "remisultan__multiarm-bandit-algorithm-kotlin__ead934d/core-bandit/src/main/kotlin/org/rsultan/bandit/algorithms/BanditAlgorithm.kt", "deepseek-coder-6.7b-base": "interface BanditAlgorithm {\n    fun selectArm(): Int\n    fun update(arm: Int, reward: Float)\n}"}
{"kt_path": "n81ur3__kotlin-coding-challenges__fdc5941/src/main/kotlin/adventofcode2018/Day22ModeMaze.kt", "deepseek-coder-6.7b-base": "class Day22ModeMaze {\n    constructor() {\n        // ...\n    }\n}"}
{"kt_path": "n81ur3__kotlin-coding-challenges__fdc5941/src/main/kotlin/adventofcode2017/Day21FractalArt.kt", "deepseek-coder-6.7b-base": "class Day21FractalArt {\n    constructor()\n}"}
{"kt_path": "n81ur3__kotlin-coding-challenges__fdc5941/src/main/kotlin/adventofcode2017/Day03SpiralMemory.kt", "deepseek-coder-6.7b-base": "class Day03SpiralMemory {\n    constructor() {\n        val x = 0\n        val y = 0\n        val dx = 0\n        val dy = 1\n        val xmax = 1\n        val ymax = 1\n        val xmin = 1\n        val ymin = 1\n        val xdir = 1\n        val ydir = 0\n        val xstep = 1\n        val ystep = 1\n        val xsign = 1\n        val ysign = 1\n        val xc = 0\n        val yc = 0\n        val xm = 0\n        val ym = 0\n        val xp = 0\n        val yp = 0\n        val xpp = 0\n        val ypp = 0\n        val xm2 = 0\n        val ym2 = 0\n        val xp2 = 0\n        val yp2 = 0\n        val xpp2 = 0\n        val ypp2 = 0\n        val xm3 = 0\n        val ym3 = 0\n        val xp3 = 0\n        val yp3 = 0\n        val xpp3 = 0\n        val ypp3 = 0\n        val xm4 = 0\n        val ym4 = 0\n        val xp4 = 0\n        val yp4 = 0\n        val xpp4 = 0\n        val ypp4 = 0\n        val xm5 = 0\n        val ym5 = 0\n        val xp5 = 0\n        val yp5 = 0\n        val xpp5 = 0\n        val ypp5 = 0\n        val xm6 = 0\n        val ym6 = 0\n        val xp6 = 0\n        val yp6 = 0\n        val xpp6 = 0\n        val ypp6 = 0\n        val xm7 = 0\n        val ym7 = 0\n        val xp7 = 0\n        val yp7 = 0\n        val xpp7 = 0\n        val ypp7 = 0\n        val xm8 = 0\n        val ym8 = 0\n        val xp8 = 0\n        val yp8 = 0\n        val xpp8 = 0\n        val ypp8 = 0\n        val xm9 = 0\n        val ym9 = 0\n        val xp9 = 0\n        val yp9 = 0\n        val xpp9 = 0\n        val ypp9 = 0\n        val xm10 = 0\n        val ym10 = 0\n        val xp10 = 0\n        val yp10 = 0\n        val xpp10 = 0\n        val ypp10 = 0\n        val xm11 = 0\n        val ym11 = 0\n        val xp11 = 0\n        val yp11 = 0\n        val xpp11 = 0\n        val ypp11 = 0\n        val xm12 = 0\n        val ym12 = 0\n        val xp12 = 0\n        val yp12 = 0\n        val xpp12 = 0\n        val ypp12 = 0\n        val xm13 = 0\n        val ym13 = 0\n        val xp13 = 0\n        val yp13 = 0\n        val xpp13 = 0\n        val ypp13 = 0\n        val xm14 = 0\n        val ym14 = 0\n        val xp14 = 0\n        val yp14 = 0\n        val xpp14 = 0\n        val ypp14 = 0\n        val xm15 = 0\n        val ym15 = 0\n        val xp15 = 0\n        val yp15 = 0\n        val xpp15 = 0\n        val ypp15 = 0\n        val xm16 = 0\n        val ym16 = 0\n        val xp16 = 0\n        val yp16 = 0\n        val xpp16 = 0\n        val ypp16 = 0\n        val xm17 = 0\n        val ym17 = 0\n        val xp17 = 0\n        val yp17 = 0\n        val xpp17 = 0\n        val ypp17 = 0\n        val xm18 = 0\n        val ym18 = 0\n        val xp18 = 0\n        val yp18 = 0\n        val xpp18 = 0\n        val ypp18 = 0\n        val xm19 = 0\n        val ym19 = 0\n        val xp19 = 0\n        val yp19 = 0\n        val xpp19 = 0\n        val ypp19 = 0\n        val xm20 = 0\n        val ym20 = 0\n        val xp20 = 0\n        val yp20 = 0\n        val xpp20 = 0\n        val ypp20 = 0\n        val xm21 = 0\n        val ym21 = 0\n        val xp21 = 0\n        val yp21 = 0\n        val xpp21 = 0\n        val ypp21 = 0\n        val xm22 = 0\n        val ym22 = 0\n        val xp22 = 0\n        val yp22 = 0\n        val xpp22 = 0\n        val ypp22 = 0\n        val xm23 = 0\n        val ym23 = 0\n        val xp23 = 0\n        val yp23 = 0\n        val xpp23 = 0\n        val ypp23 = 0\n        val xm24 = 0\n        val ym24 = 0\n        val xp24 = 0\n        val yp24 = 0\n        val xpp24 = 0\n        val ypp24 = 0\n        val xm25 = 0\n        val ym25 = 0\n        val xp25 = 0\n        val yp25 = 0\n        val xpp25 = 0\n        val ypp25 = 0\n        val xm26 = 0\n        val ym26 = 0\n        val xp26 = 0\n        val yp26 = 0\n        val xpp26 = 0\n        val ypp26 = 0\n        val xm27 = 0\n        val ym27 = 0\n        val xp27 = 0\n        val yp27 = 0\n        val xpp27 = 0\n        val ypp27 = 0\n        val xm28 = 0\n        val ym28 = 0\n        val xp28 = 0\n        val yp28 = 0\n        val xpp28 = 0\n        val ypp28 = 0\n        val xm29 = 0\n        val ym29 = 0\n        val xp29 = 0\n        val yp29 = 0\n        val xpp29 = 0\n        val ypp29 = 0\n        val xm30 = 0\n        val ym30 = 0\n        val xp30 = 0\n        val yp30 = 0\n        val xpp30 = 0\n        val ypp30 = 0\n        val xm31 = 0\n        val ym31 = 0\n        val xp31 = 0\n        val yp31 = 0\n        val xpp31 = 0\n        val ypp31 = 0\n        val xm32 = 0\n        val ym32 = 0\n        val xp32 = 0\n        val yp32 = 0\n        val xpp32 = 0\n        val ypp32 = 0\n        val xm33 = 0"}
{"kt_path": "n81ur3__kotlin-coding-challenges__fdc5941/src/main/kotlin/adventofcode2019/Day03CrossedWires.kt", "deepseek-coder-6.7b-base": "class Day03CrossedWires {\n    constructor()\n}"}
{"kt_path": "n81ur3__kotlin-coding-challenges__fdc5941/src/main/kotlin/adventofcode2018/Day04ReposeRecord.kt", "deepseek-coder-6.7b-base": "class Day04ReposeRecord {\n    constructor()\n}"}
{"kt_path": "n81ur3__kotlin-coding-challenges__fdc5941/src/main/kotlin/adventofcode2017/Day08LikeRegisters.kt", "deepseek-coder-6.7b-base": "class Day08LikeRegisters {\n    constructor() {\n    }\n}"}
{"kt_path": "n81ur3__kotlin-coding-challenges__fdc5941/src/main/kotlin/adventofcode2018/Day11ChronalCharge.kt", "deepseek-coder-6.7b-base": "class Day11ChronalCharge {\n    constructor()\n}"}
{"kt_path": "n81ur3__kotlin-coding-challenges__fdc5941/src/main/kotlin/adventofcode2020/Day19MonsterMessage.kt", "deepseek-coder-6.7b-base": "class Day19MonsterMessage {\n    constructor() {\n    }\n}"}
{"kt_path": "n81ur3__kotlin-coding-challenges__fdc5941/src/main/kotlin/adventofcode2017/Day07RecursiveCircus.kt", "deepseek-coder-6.7b-base": "class Day07RecursiveCircus {\n    constructor()\n}"}
{"kt_path": "n81ur3__kotlin-coding-challenges__fdc5941/src/main/kotlin/adventofcode2019/Day12TheNbodyProblem.kt", "deepseek-coder-6.7b-base": "class Day12TheNbodyProblem {\n    constructor() {\n        // ...\n    }\n}"}
{"kt_path": "n81ur3__kotlin-coding-challenges__fdc5941/src/main/kotlin/adventofcode2018/Day15BeverageBandits.kt", "deepseek-coder-6.7b-base": "class Day15BeverageBandits {\n    constructor()\n}"}
{"kt_path": "n81ur3__kotlin-coding-challenges__fdc5941/src/main/kotlin/adventofcode2020/Day07HandyHaversacks.kt", "deepseek-coder-6.7b-base": "class Day07HandyHaversacks {\n    constructor() {\n    }\n}"}
{"kt_path": "n81ur3__kotlin-coding-challenges__fdc5941/src/main/kotlin/adventofcode2018/Day07TheSumOfItsParts.kt", "deepseek-coder-6.7b-base": "class Day07TheSumOfItsParts {\n    constructor() {\n        // ...\n    }\n}"}
{"kt_path": "n81ur3__kotlin-coding-challenges__fdc5941/src/main/kotlin/adventofcode2017/Day25TheHaltingProblem.kt", "deepseek-coder-6.7b-base": "class Day25TheHaltingProblem {\n    constructor() {\n        // ...\n    }\n}"}
{"kt_path": "n81ur3__kotlin-coding-challenges__fdc5941/src/main/kotlin/adventofcode2019/Day06UniversalOrbitMap.kt", "deepseek-coder-6.7b-base": "class Day06UniversalOrbitMap {\n    constructor()\n}"}
{"kt_path": "n81ur3__kotlin-coding-challenges__fdc5941/src/main/kotlin/adventofcode2019/Day10MonitoringStation.kt", "deepseek-coder-6.7b-base": "class Day10MonitoringStation {\n    constructor() {\n        // ...\n    }\n}"}
{"kt_path": "n81ur3__kotlin-coding-challenges__fdc5941/src/main/kotlin/adventofcode2018/Day06ChronalCoordinates.kt", "deepseek-coder-6.7b-base": "class Day06ChronalCoordinates {\n    constructor()\n}"}
{"kt_path": "n81ur3__kotlin-coding-challenges__fdc5941/src/main/kotlin/adventofcode2020/Day21AllergenAssessment.kt", "deepseek-coder-6.7b-base": "class Day21AllergenAssessment {\n    constructor() {\n        println(\"Hello, world\")\n    }\n}"}
{"kt_path": "n81ur3__kotlin-coding-challenges__fdc5941/src/main/kotlin/adventofcode2017/Day24ElectromagneticMoat.kt", "deepseek-coder-6.7b-base": "class Day24ElectromagneticMoat {\n    constructor() {\n    }\n}"}
{"kt_path": "n81ur3__kotlin-coding-challenges__fdc5941/src/main/kotlin/adventofcode2018/Day12SubterraneanSustainability.kt", "deepseek-coder-6.7b-base": "class Day12SubterraneanSustainability {\n    constructor()\n}"}
{"kt_path": "n81ur3__kotlin-coding-challenges__fdc5941/src/main/kotlin/adventofcode2018/Day23ExperimentalEmergencyTeleportation.kt", "deepseek-coder-6.7b-base": "class Day23ExperimentalEmergencyTeleportation {\n    constructor() {\n        // ...\n    }\n}"}
{"kt_path": "alebedev__aoc2022__d6ba46b/src/main/kotlin/Map.kt", "deepseek-coder-6.7b-base": "fun main() {\n    AocMap.INSTANCE.solve()\n}"}
{"kt_path": "andrewrlee__adventOfCode2020__a9c21a6/src/main/kotlin/File09.kt", "deepseek-coder-6.7b-base": "fun main() {\n    Challenge09().solve()\n}\n\nclass Challenge09 {\n    fun solve() {\n        val a = \"Hello\"\n        val b = \"World\"\n        val c = \"!\"\n        println(\"$a $b $c\")\n    }\n}"}
{"kt_path": "andrewrlee__adventOfCode2020__a9c21a6/src/main/kotlin/File08.kt", "deepseek-coder-6.7b-base": "fun main() {\n    val challenge08 = Challenge08()\n    challenge08.solve()\n}\n\nclass Challenge08 {\n    fun solve() {\n        val input = readLine()!!.split(\" \")\n        val n = input[0].toInt()\n        val k = input[1].toInt()\n        val a = input[2].toInt()\n        val b = input[3].toInt()\n        val c = input[4].toInt()\n        val d = input[5].toInt()\n        val e = input[6].toInt()\n        val f = input[7].toInt()\n        val g = input[8].toInt()\n        val h = input[9].toInt()\n        val i = input[10].toInt()\n        val j = input[11].toInt()\n        val k = input[12].toInt()\n        val l = input[13].toInt()\n        val m = input[14].toInt()\n        val n = input[15].toInt()\n        val o = input[16].toInt()\n        val p = input[17].toInt()\n        val q = input[18].toInt()\n        val r = input[19].toInt()\n        val s = input[20].toInt()\n        val t = input[21].toInt()\n        val u = input[22].toInt()\n        val v = input[23].toInt()\n        val w = input[24].toInt()\n        val x = input[25].toInt()\n        val y = input[26].toInt()\n        val z = input[27].toInt()\n        val aa = input[28].toInt()\n        val ab = input[29].toInt()\n        val ac = input[30].toInt()\n        val ad = input[31].toInt()\n        val ae = input[32].toInt()\n        val af = input[33].toInt()\n        val ag = input[34].toInt()\n        val ah = input[35].toInt()\n        val ai = input[36].toInt()\n        val aj = input[37].toInt()\n        val ak = input[38].toInt()\n        val al = input[39].toInt()\n        val am = input[40].toInt()\n        val an = input[41].toInt()\n        val ao = input[42].toInt()\n        val ap = input[43].toInt()\n        val aq = input[44].toInt()\n        val ar = input[45].toInt()\n        val as = input[46].toInt()\n        val at = input[47].toInt()\n        val au = input[48].toInt()\n        val av = input[49].toInt()\n        val aw = input[50].toInt()\n        val ax = input[51].toInt()\n        val ay = input[52].toInt()\n        val az = input[53].toInt()\n        val ba = input[54].toInt()\n        val bb = input[55].toInt()\n        val bc = input[56].toInt()\n        val bd = input[57].toInt()\n        val be = input[58].toInt()\n        val bf = input[59].toInt()\n        val bg = input[60].toInt()\n        val bh = input[61].toInt()\n        val bi = input[62].toInt()\n        val bj = input[63].toInt()\n        val bk = input[64].toInt()\n        val bl = input[65].toInt()\n        val bm = input[66].toInt()\n        val bn = input[67].toInt()\n        val bo = input[68].toInt()\n        val bp = input[69].toInt()\n        val bq = input[70].toInt()\n        val br = input[71].toInt()\n        val bs = input[72].toInt()\n        val bt = input[73].toInt()\n        val bu = input[74].toInt()\n        val bv = input[75].toInt()\n        val bw = input[76].toInt()\n        val bx = input[77].toInt()\n        val by = input[78].toInt()\n        val bz = input[79].toInt()\n        val ca = input[80].toInt()\n        val cb = input[81].toInt()\n        val cc = input[82].toInt()\n        val cd = input[83].toInt()\n        val ce = input[84].toInt()\n        val cf = input[85].toInt()\n        val cg = input[86].toInt()\n        val ch = input[87].toInt()\n        val ci = input[88].toInt()\n        val cj = input[89].toInt()\n        val ck = input[90].toInt()\n        val cl = input[91].toInt()\n        val cm = input[92].toInt()\n        val cn = input[93].toInt()\n        val co = input[94].toInt()\n        val cp = input[95].toInt()\n        val cq = input[96].toInt()\n        val cr = input[97].toInt()\n        val cs = input[98].toInt()\n        val ct = input[99].toInt()\n        val cu = input[100].toInt()\n        val cv = input[101].toInt()\n        val cw = input[102].toInt()\n        val cx = input[103].toInt()\n        val cy = input[104].toInt()\n        val cz = input[105].toInt()\n        val da = input[106].toInt()\n        val db = input[107].toInt()\n        val dc = input[108].toInt()\n        val dd = input[109].toInt()\n        val de = input[110].toInt()\n        val df = input[111].toInt()\n        val dg = input[112].toInt()\n        val dh = input[113].toInt()\n        val di = input[114].toInt()\n        val dj = input[115].toInt()\n        val dk = input[116].toInt()\n        val dl = input[117].toInt()\n        val dm = input[118].toInt()\n        val dn = input[119].toInt()\n        val do = input[120].toInt()\n        val dp = input[121].toInt()\n        val dq = input[122].toInt()\n        val dr = input[123].toInt()\n        val ds = input[124].toInt()\n        val dt = input[125].toInt()\n        val du = input[126].toInt()\n        val dv = input[127].toInt()\n        val dw = input[128].toInt()\n        val dx = input[1"}
{"kt_path": "andrewrlee__adventOfCode2020__a9c21a6/src/main/kotlin/File02.kt", "deepseek-coder-6.7b-base": "fun main() {\n    val challenge = Challenge02()\n    challenge.solve()\n}\n\nclass Challenge02 {\n    fun solve() {\n        val input = readLine()!!.split(\" \")\n        val n = input[0].toInt()\n        val m = input[1].toInt()\n        val k = input[2].toInt()\n        val a = readLine()!!.split(\" \").map { it.toInt() }\n        val b = readLine()!!.split(\" \").map { it.toInt() }\n        val c = readLine()!!.split(\" \").map { it.toInt() }\n        val d = readLine()!!.split(\" \").map { it.toInt() }\n        val e = readLine()!!.split(\" \").map { it.toInt() }\n        val f = readLine()!!.split(\" \").map { it.toInt() }\n        val g = readLine()!!.split(\" \").map { it.toInt() }\n        val h = readLine()!!.split(\" \").map { it.toInt() }\n        val i = readLine()!!.split(\" \").map { it.toInt() }\n        val j = readLine()!!.split(\" \").map { it.toInt() }\n        val k = readLine()!!.split(\" \").map { it.toInt() }\n        val l = readLine()!!.split(\" \").map { it.toInt() }\n        val m = readLine()!!.split(\" \").map { it.toInt() }\n        val n = readLine()!!.split(\" \").map { it.toInt() }\n        val o = readLine()!!.split(\" \").map { it.toInt() }\n        val p = readLine()!!.split(\" \").map { it.toInt() }\n        val q = readLine()!!.split(\" \").map { it.toInt() }\n        val r = readLine()!!.split(\" \").map { it.toInt() }\n        val s = readLine()!!.split(\" \").map { it.toInt() }\n        val t = readLine()!!.split(\" \").map { it.toInt() }\n        val u = readLine()!!.split(\" \").map { it.toInt() }\n        val v = readLine()!!.split(\" \").map { it.toInt() }\n        val w = readLine()!!.split(\" \").map { it.toInt() }\n        val x = readLine()!!.split(\" \").map { it.toInt() }\n        val y = readLine()!!.split(\" \").map { it.toInt() }\n        val z = readLine()!!.split(\" \").map { it.toInt() }\n        val aa = readLine()!!.split(\" \").map { it.toInt() }\n        val bb = readLine()!!.split(\" \").map { it.toInt() }\n        val cc = readLine()!!.split(\" \").map { it.toInt() }\n        val dd = readLine()!!.split(\" \").map { it.toInt() }\n        val ee = readLine()!!.split(\" \").map { it.toInt() }\n        val ff = readLine()!!.split(\" \").map { it.toInt() }\n        val gg = readLine()!!.split(\" \").map { it.toInt() }\n        val hh = readLine()!!.split(\" \").map { it.toInt() }\n        val ii = readLine()!!.split(\" \").map { it.toInt() }\n        val jj = readLine()!!.split(\" \").map { it.toInt() }\n        val kk = readLine()!!.split(\" \").map { it.toInt() }\n        val ll = readLine()!!.split(\" \").map { it.toInt() }\n        val mm = readLine()!!.split(\" \").map { it.toInt() }\n        val nn = readLine()!!.split(\" \").map { it.toInt() }\n        val oo = readLine()!!.split(\" \").map { it.toInt() }\n        val pp = readLine()!!.split(\" \").map { it.toInt() }\n        val qq = readLine()!!.split(\" \").map { it.toInt() }\n        val rr = readLine()!!.split(\" \").map { it.toInt() }\n        val ss = readLine()!!.split(\" \").map { it.toInt() }\n        val tt = readLine()!!.split(\" \").map { it.toInt() }\n        val uu = readLine()!!.split(\" \").map { it.toInt() }\n        val vv = readLine()!!.split(\" \").map { it.toInt() }\n        val ww = readLine()!!.split(\" \").map { it.toInt() }\n        val xx = readLine()!!.split(\" \").map { it.toInt() }\n        val yy = readLine()!!.split(\" \").map { it.toInt() }\n        val zz = readLine()!!.split(\" \").map { it.toInt() }\n        val aaa = readLine()!!.split(\" \").map { it.toInt() }\n        val bbb = readLine()!!.split(\" \").map { it.toInt() }\n        val ccc = readLine()!!.split(\" \").map { it.toInt() }\n        val ddd = readLine()!!.split(\" \").map { it.toInt() }\n        val eee = readLine()!!.split(\" \").map { it.toInt() }\n        val fff = readLine()!!.split(\" \").map { it.toInt() }\n        val ggg = readLine()!!.split(\" \").map { it.toInt() }\n        val hhh = readLine()!!.split(\" \").map { it.toInt() }\n        val iii = readLine()!!.split(\" \").map { it.toInt() }\n        val jjj = readLine()!!.split(\" \").map { it.toInt() }\n        val kkk = readLine()!!.split(\" \").map { it.toInt() }\n        val lll = readLine()!!.split(\" \").map { it.toInt() }\n        val mmm = readLine()!!.split(\" \").map { it.toInt() }\n        val nnn = readLine()!!.split(\" \").map { it.toInt() }\n        val ooo = readLine()!!.split(\" \").map { it.toInt() }\n        val ppp = readLine()!!.split(\" \").map { it.toInt() }\n        val qqq = readLine()!!.split(\" \").map { it.toInt() }\n        val rrr = readLine()!!.split(\" \").map { it.toInt() }\n        val sss = readLine()!!.split(\" \").map { it.toInt() }\n        val ttt = readLine()!!.split(\" \").map { it.toInt() }\n        val uuu = readLine()!!.split(\" \").map { it.toInt() }\n        val vvv = readLine()!!.split(\" \").map { it.toInt() }\n        val www = readLine()!!.split(\" \").map { it.toInt() }\n        val xxx = readLine()!!.split(\" \").map { it.toInt() }\n        val y"}
{"kt_path": "andrewrlee__adventOfCode2020__a9c21a6/src/main/kotlin/File07.kt", "deepseek-coder-6.7b-base": "fun main() {\n    Challenge07().solve()\n}\n\nclass Challenge07 {\n    fun solve() {\n        println(\"Hello World\")\n    }\n}"}
{"kt_path": "charlesfranciscodev__codingame__3ec8060/puzzles/kotlin/src/war/war.kt", "deepseek-coder-6.7b-base": "fun main(args: Array<String>) {\n    val game = Game()\n    game.play()\n}\n\nclass Game {\n    fun play() {\n        val player1 = Player()\n        val player2 = Player()\n        val deck = Deck()\n        val card1 = deck.drawCard()\n        val card2 = deck.drawCard()\n        val card3 = deck.drawCard()\n        val card4 = deck.drawCard()\n        val card5 = deck.drawCard()\n        val card6 = deck.drawCard()\n        val card7 = deck.drawCard()\n        val card8 = deck.drawCard()\n        val card9 = deck.drawCard()\n        val card10 = deck.drawCard()\n        val card11 = deck.drawCard()\n        val card12 = deck.drawCard()\n        val card13 = deck.drawCard()\n        val card14 = deck.drawCard()\n        val card15 = deck.drawCard()\n        val card16 = deck.drawCard()\n        val card17 = deck.drawCard()\n        val card18 = deck.drawCard()\n        val card19 = deck.drawCard()\n        val card20 = deck.drawCard()\n        val card21 = deck.drawCard()\n        val card22 = deck.drawCard()\n        val card23 = deck.drawCard()\n        val card24 = deck.drawCard()\n        val card25 = deck.drawCard()\n        val card26 = deck.drawCard()\n        val card27 = deck.drawCard()\n        val card28 = deck.drawCard()\n        val card29 = deck.drawCard()\n        val card30 = deck.drawCard()\n        val card31 = deck.drawCard()\n        val card32 = deck.drawCard()\n        val card33 = deck.drawCard()\n        val card34 = deck.drawCard()\n        val card35 = deck.drawCard()\n        val card36 = deck.drawCard()\n        val card37 = deck.drawCard()\n        val card38 = deck.drawCard()\n        val card39 = deck.drawCard()\n        val card40 = deck.drawCard()\n        val card41 = deck.drawCard()\n        val card42 = deck.drawCard()\n        val card43 = deck.drawCard()\n        val card44 = deck.drawCard()\n        val card45 = deck.drawCard()\n        val card46 = deck.drawCard()\n        val card47 = deck.drawCard()\n        val card48 = deck.drawCard()\n        val card49 = deck.drawCard()\n        val card50 = deck.drawCard()\n        val card51 = deck.drawCard()\n        val card52 = deck.drawCard()\n        val card53 = deck.drawCard()\n        val card54 = deck.drawCard()\n        val card55 = deck.drawCard()\n        val card56 = deck.drawCard()\n        val card57 = deck.drawCard()\n        val card58 = deck.drawCard()\n        val card59 = deck.drawCard()\n        val card60 = deck.drawCard()\n        val card61 = deck.drawCard()\n        val card62 = deck.drawCard()\n        val card63 = deck.drawCard()\n        val card64 = deck.drawCard()\n        val card65 = deck.drawCard()\n        val card66 = deck.drawCard()\n        val card67 = deck.drawCard()\n        val card68 = deck.drawCard()\n        val card69 = deck.drawCard()\n        val card70 = deck.drawCard()\n        val card71 = deck.drawCard()\n        val card72 = deck.drawCard()\n        val card73 = deck.drawCard()\n        val card74 = deck.drawCard()\n        val card75 = deck.drawCard()\n        val card76 = deck.drawCard()\n        val card77 = deck.drawCard()\n        val card78 = deck.drawCard()\n        val card79 = deck.drawCard()\n        val card80 = deck.drawCard()\n        val card81 = deck.drawCard()\n        val card82 = deck.drawCard()\n        val card83 = deck.drawCard()\n        val card84 = deck.drawCard()\n        val card85 = deck.drawCard()\n        val card86 = deck.drawCard()\n        val card87 = deck.drawCard()\n        val card88 = deck.drawCard()\n        val card89 = deck.drawCard()\n        val card90 = deck.drawCard()\n        val card91 = deck.drawCard()\n        val card92 = deck.drawCard()\n        val card93 = deck.drawCard()\n        val card94 = deck.drawCard()\n        val card95 = deck.drawCard()\n        val card96 = deck.drawCard()\n        val card97 = deck.drawCard()\n        val card98 = deck.drawCard()\n        val card99 = deck.drawCard()\n        val card100 = deck.drawCard()\n        val card101 = deck.drawCard()\n        val card102 = deck.drawCard()\n        val card103 = deck.drawCard()\n        val card104 = deck.drawCard()\n        val card105 = deck.drawCard()\n        val card106 = deck.drawCard()\n        val card107 = deck.drawCard()\n        val card108 = deck.drawCard()\n        val card109 = deck.drawCard()\n        val card110 = deck.drawCard()\n        val card111 = deck.drawCard()\n        val card112 = deck.drawCard()\n        val card113 = deck.drawCard()\n        val card114 = deck.drawCard()\n        val card115 = deck.drawCard()\n        val card116 = deck.drawCard()\n        val card117 = deck.drawCard()\n        val card118 = deck.drawCard()\n        val card119 = deck.drawCard()\n        val card120 = deck.drawCard()\n        val card121 = deck.drawCard()\n        val card122 = deck.drawCard()\n        val card123 = deck.drawCard()\n        val card124 = deck.drawCard()\n        val card125 = deck.drawCard()\n        val card126 = deck.drawCard()\n        val card127 = deck.drawCard()\n        val card128 = deck.drawCard()\n        val card129 = deck.drawCard()\n        val card130 = deck.drawCard()\n        val card131 = deck.drawCard()\n        val card132 = deck.drawCard()\n        val card133 = deck.drawCard()\n        val card134 = deck.drawCard()\n        val card135 = deck.drawCard()\n        val card136 = deck.drawCard()\n        val card137 = deck.drawCard()\n        val card138 = deck.drawCard()\n        val card139 = deck.drawCard()\n        val card140 = deck.drawCard()\n        val card141 = deck.drawCard()\n        val card142 = deck.drawCard()"}
{"kt_path": "al-volkov__spbu_2020_kotlin_homeworks__5049681/src/main/kotlin/homework_5/Task1.kt", "deepseek-coder-6.7b-base": ""}
{"kt_path": "iafsilva__codility-lessons__5d86aef/src/main/kotlin/lesson3/FrogJmp.kt", "deepseek-coder-6.7b-base": "class FrogJmp {\n    fun solution(x: Int, y: Int, d: Int): Int {\n        return (y - x) / d + if ((y - x) % d != 0) 1 else 0\n    }\n}"}
{"kt_path": "mikhalchenko-alexander__advent-of-kotlin-2018-week1__c483ade/src/main/kotlin/com/anahoret/pathfinding/MarkingWayOnMap.kt", "deepseek-coder-6.7b-base": "fun addPath(map: String): String {\n    Graph.INSTANCE.getMapWithPath(map)\n}"}
{"kt_path": "charlesfranciscodev__codingame__3ec8060/puzzles/kotlin/src/surface/surface.kt", "deepseek-coder-6.7b-base": "fun main(args: Array<String>) {\n    val grid = Grid()\n    grid.readGameInput()\n    grid.test()\n}\n\nclass Grid {\n    companion object {\n        const val LAND = 'L'\n        const val WATER = 'W'\n        const val DEFAULT_INDEX = -1\n    }\n\n    private val grid = Array(10) { Array(10) { WATER } }\n\n    fun readGameInput() {\n        for (i in 0 until 10) {\n            val line = readLine()!!\n            for (j in 0 until 10) {\n                grid[i][j] = line[j]\n            }\n        }\n    }\n\n    fun test() {\n        val visited = Array(10) { Array(10) { false } }\n        var maxArea = 0\n        for (i in 0 until 10) {\n            for (j in 0 until 10) {\n                if (grid[i][j] == LAND && !visited[i][j]) {\n                    val area = dfs(i, j, visited)\n                    maxArea = maxOf(maxArea, area)\n                }\n            }\n        }\n        println(maxArea)\n    }\n\n    private fun dfs(i: Int, j: Int, visited: Array<Array<Boolean>>): Int {\n        if (i < 0 || i >= 10 || j < 0 || j >= 10 || visited[i][j] || grid[i][j] == WATER) {\n            return 0\n        }\n        visited[i][j] = true\n        return 1 + dfs(i + 1, j, visited) + dfs(i - 1, j, visited) + dfs(i, j + 1, visited) + dfs(i, j - 1, visited)\n    }\n}"}
{"kt_path": "andrew-suprun__AoC-2023__dd5f53e/src/main/kotlin/day03_oop/day03_oop.kt", "deepseek-coder-6.7b-base": "fun main() {\n    Part1(\"input.data\").run()\n    Part2(\"input.data\").run()\n}\n\nclass Part1(input: String) {\n    private val data = input.lines()\n\n    fun run() {\n        println(data.sumOf { it.toInt() })\n    }\n}\n\nclass Part2(input: String) {\n    private val data = input.lines()\n\n    fun run() {\n        println(data.sumOf { it.toInt() })\n    }\n}"}
{"kt_path": "getnahid__programing-problem-solves-kotlin__589c392/CyclicRotation.kt", "deepseek-coder-6.7b-base": "fun solution(A: IntArray, K: Int): IntArray {\n    val result = IntArray(A.size)\n    var i = 0\n    while (i < A.size) {\n        result[i] = A[(i + K) % A.size]\n        i++\n    }\n    return result\n}"}
{"kt_path": "linisme__LeetCodeInKotlin__4382afc/LongestPalindrome.kt", "deepseek-coder-6.7b-base": "fun main(args: Array<String>) {\n    val solution = LongestPalindromeSolution()\n    println(solution.longestPalindrome(\"abbccbbdl\"))\n}\n\nclass LongestPalindromeSolution {\n    fun longestPalindrome(s: String): String {\n        if (s.length < 2) return s\n        var start = 0\n        var end = 0\n        for (i in 0 until s.length) {\n            val len1 = expandAroundCenter(s, i, i)\n            val len2 = expandAroundCenter(s, i, i + 1)\n            val len = Math.max(len1, len2)\n            if (len > end - start) {\n                start = i - (len - 1) / 2\n                end = i + len / 2\n            }"}
{"kt_path": "iafsilva__codility-lessons__5d86aef/src/main/kotlin/lesson2/OddOccurrencesInArray.kt", "deepseek-coder-6.7b-base": "fun solution(a: IntArray): Int {\n    var result = 0\n    for (i in a) {\n        result = result xor i\n    }\n    return result\n}"}
{"kt_path": "jjeda__playground__5d1ee6c/src/oop/algorithm/ProgressionNextNumber.kt", "deepseek-coder-6.7b-base": "class ProgressionNextNumber {\n    fun solution(nums: IntArray): Int {\n        val list = nums.toList()\n        val helper = ProgressionHelper(list)\n        return helper.nextInt()\n    }\n}\n\nclass ProgressionHelper(private val list: List<Int>) {\n    private var index = 0\n\n    fun nextInt(): Int {\n        if (index == list.size) {\n            index = 0\n        }\n        return list[index++]"}
{"kt_path": "linisme__LeetCodeInKotlin__4382afc/LengthOfLongestSubstring.kt", "deepseek-coder-6.7b-base": "fun main(args: Array<String>) {\n    val solution = LengthOfLongestSubstringSolution2()\n    val result = solution.lengthOfLongestSubstring(\"abba\")\n    println(result)\n}"}
{"kt_path": "nschulzke__mancala-puzzle-solver__b130d3b/src/main/kotlin/Main.kt", "deepseek-coder-6.7b-base": "fun main() {\n    val mancalaIndices = setOf(6, 13)\n}"}
{"kt_path": "sysion__DataStructureAlgorithmKt__6f9afda/TwoSumLessThanTarget.kt", "deepseek-coder-6.7b-base": "fun main() {\n    val intArray = intArrayOf(10, 20, 30)\n    val target = 15\n    println(SumTwoNumbersLessThanTarget(intArray, target))\n}\n\nfun SumTwoNumbersLessThanTarget(intArray: IntArray, target: Int): Int {\n    var result = -1\n    for (i in intArray.indices) {\n        for (j in i + 1 until intArray.size) {\n            if (intArray[i] + intArray[j] < target) {\n                result = maxOf(result, intArray[i] + intArray[j])"}
{"kt_path": "linisme__LeetCodeInKotlin__4382afc/FineMedianSortedArrays.kt", "deepseek-coder-6.7b-base": "fun main(args: Array<String>) {\n    val solution = FindMedianSortedArraysSolution()\n    val result = solution.findMedianSortedArrays(intArrayOf(0, 2), intArrayOf(1, 3))\n    println(result)\n}\n\nclass FindMedianSortedArraysSolution {\n    fun findMedianSortedArrays(nums1: IntArray, nums2: IntArray): Double {\n        val merged = merge(nums1, nums2)\n        return if (merged.size % 2 == 0) {\n            (merged[merged.size / 2 - 1] + merged[merged.size / 2]) / 2.0\n        } else {\n            merged[merged.size / 2]\n        }\n    }\n\n    private fun merge(nums1: IntArray, nums2: IntArray): IntArray {\n        val merged = IntArray(nums1.size + nums2.size)\n        var i = 0\n        var j = 0\n        var k = 0\n        while (i < nums1.size && j < nums2.size) {\n            if (nums1[i] < nums2[j]) {\n                merged[k++] = nums1[i++]\n            } else {\n                merged[k++] = nums2[j++]\n            }\n        }\n        while (i < nums1.size) {\n            merged[k++] = nums1[i++]\n        }\n        while (j < nums2.size) {\n            merged[k++] = nums2[j++]\n        }\n        return merged\n    }\n}"}
{"kt_path": "n81ur3__kotlin-coding-challenges__fdc5941/src/main/kotlin/adventofcode2018/Day18SettlersOfTheNorthPole.kt", "deepseek-coder-6.7b-base": "fun hash(list: List<List<AreaElement>>): Int {\n    var result = 0\n    for (element in list) {\n        result = result xor element.hashCode()\n    }\n    return result\n}"}
{"kt_path": "iafsilva__codility-lessons__5d86aef/src/main/kotlin/lesson3/PermMissingElem.kt", "deepseek-coder-6.7b-base": "fun solution(a: IntArray): Int {\n    a.sort()\n    var i = 0\n    while (i < a.size) {\n        if (a[i] != i + 1) return i + 1\n        i++\n    }\n    return a.size + 1\n}"}
{"kt_path": "getnahid__programing-problem-solves-kotlin__589c392/OddOccurrencesInArray.kt", "deepseek-coder-6.7b-base": "fun solution(A: IntArray): Int {\n    A.sort()\n    var i = 0\n    var j = A.size - 1\n    while (i < j) {\n        if (A[i] != A[i + 1]) return A[i]\n        if (A[j] != A[j - 1]) return A[j]\n        i += 2\n        j -= 2\n    }\n    return 0\n}"}
{"kt_path": "rupeshsasne__coursera-algorithms-part1__341634c/classroom/src/main/kotlin/com/radix2/algorithms/week3/SortingLinkedList.kt", "deepseek-coder-6.7b-base": "fun main(args: Array<String>) {\n    val list = LinkedList<Int>()\n    for (i in 0..10) {\n        list.add(i)\n    }\n    list.reverseRecurrsive()\n    println(list)\n}\n\nclass LinkedList<T : Comparable<T>> {\n    private var head: Node<T>? = null\n\n    fun add(value: T) {\n        val newNode = Node(value)\n        if (head == null) {\n            head = newNode\n        } else {\n            var current = head\n            while (current?.next != null) {\n                current = current.next\n            }\n            current?.next = newNode\n        }\n    }\n\n    fun reverseRecurrsive() {\n        head = reverseRecurrsive(head)\n    }\n\n    private fun reverseRecurrsive(node: Node<T>?): Node<T>? {\n        if (node?.next == null) {\n            return node\n        }\n        val last = reverseRecurrsive(node.next)\n        node.next?.next = node\n        node.next = null\n        return last\n    }\n\n    override fun toString(): String {\n        var current = head\n        val sb = StringBuilder()\n        while (current != null) {\n            sb.append(current.value)\n            sb.append(\" \")\n            current = current.next\n        }\n        return sb.toString()\n    }\n\n    private class Node<T>(val value: T) {\n        var next: Node<T>? = null\n    }\n}"}
{"kt_path": "boris920308__HoOne__8881468/hoon/HoonAlgorithm/src/main/kotlin/boj/week02/recursive_function/FibonacciSequence5.kt", "deepseek-coder-6.7b-base": "fun main() {\n    val sc = Scanner(System.`in`)\n    val n = sc.nextInt()\n    println(fibonacci(n))\n}\n\nfun fibonacci(n: Int): Int {\n    return if (n > 1) {\n        fibonacci(n - 1) + fibonacci(n - 2)\n    } else {\n        n\n    }\n}"}
{"kt_path": "Codextor__kotlin-codes__68b75a7/src/main/kotlin/PerfectSquares.kt", "deepseek-coder-6.7b-base": "fun numSquares(n: Int): Int {\n    val dp = IntArray(n + 1)\n    dp[0] = 0\n    var i = 1\n    while (i <= n) {\n        var j = i\n        var min = Int.MAX_VALUE\n        while (j > 0) {\n            min = Math.min(min, dp[j - 1])\n            j -= 1\n        }\n        dp[i] = min + 1\n        i += 1\n    }\n    return dp[n]\n}"}
{"kt_path": "Laomedeia__Java8InAction__0dcd843/src/main/java/leetcode/a167_twoSumInputSortArray_SIMPLE/Solution.kt", "deepseek-coder-6.7b-base": "class Solution {\n    fun twoSum(numbers: IntArray, target: Int): IntArray {\n        var i = 0\n        var j = numbers.size - 1\n        while (i < j) {\n            val sum = numbers[i] + numbers[j]\n            if (sum == target) return intArrayOf(i + 1, j + 1)\n            if (sum < target) i++\n            else j--\n        }\n        return intArrayOf(0, 0)\n    }\n}"}
{"kt_path": "ariannysOronoz__tutorialKotlin__a779f54/CombinacionesPalabras/src/main/java/Main.kt", "deepseek-coder-6.7b-base": "fun main(args: Array<String>) {\n    val permutation = Permutation()\n    var word = \"CARACOL\"\n    permutation.findPermutation(word, 0, word.length)\n    println()\n    word = \"caracol\"\n    permutation.findPermutation(word, 0, word.length)\n}\n\nclass Permutation {\n    fun findPermutation(word: String, start: Int, end: Int) {\n        if (start == end) {\n            print(word + \" \")\n        } else {\n            for (i in start until end) {\n                word = swap(word, start, i)\n                findPermutation(word, start + 1, end)\n                word = swap(word, start, i)\n            }\n        }\n    }\n\n    fun swap(word: String, i: Int, j: Int): String {\n        val charArray = word.toCharArray()\n        val temp = charArray[i]\n        charArray[i] = charArray[j]\n        charArray[j] = temp\n        return String(charArray)\n    }\n}"}
{"kt_path": "scientificCommunity__blog-sample__36e291c/algorithms/src/main/kotlin/org/baichuan/sample/algorithms/leetcode/middle/MaxArea.kt", "deepseek-coder-6.7b-base": "class MaxArea {\n    fun maxArea(height: IntArray): Int {\n        var maxArea = 0\n        var left = 0\n        var right = height.size - 1\n        while (left < right) {\n            val area = (right - left) * Math.min(height[left], height[right])\n            maxArea = Math.max(maxArea, area)\n            if (height[left] < height[right]) {\n                left++\n            } else {\n                right--\n            }\n        }\n        return maxArea\n    }\n}"}
{"kt_path": "boris920308__HoOne__8881468/hoon/HoonAlgorithm/src/main/kotlin/programmers/lv01/Lv1_70128.kt", "deepseek-coder-6.7b-base": "fun main() {\n    val arr = intArrayOf(4, 1, 2, 3, 4)\n    val arr2 = intArrayOf(1, 2, 3, 4)\n    println(solution(arr, arr2))\n}\n\nprivate fun solution(arr: IntArray, arr2: IntArray): Int {\n    var answer = 0\n    for (i in 0 until arr.size) {\n        answer += arr[i] * arr2[i]\n    }\n    return answer\n}"}
{"kt_path": "kotler-dev__kotlin-leetcode__0659e72/src/main/kotlin/exercise/easy/id121/Solution121.kt", "deepseek-coder-6.7b-base": "class Solution121 {\n    fun maxProfit(prices: IntArray): Int {\n        var maxProfit = 0\n        var minPrice = 2147483647\n        var i = 0\n        while (i < prices.size) {\n            if (prices[i] < minPrice) {\n                minPrice = prices[i]\n                i++\n                continue\n            }\n            if (prices[i] - minPrice > maxProfit) {\n                maxProfit = prices[i] - minPrice\n            }\n            i++\n       }"}
{"kt_path": "marc-bouvier-katas__Kotlin_EduTools_Advent_of_Code_2021__12cf74c/Day 5/Part 1/src/Task.kt", "deepseek-coder-6.7b-base": "fun overlaps(ventsLines: Array<String>): Int {\n    val lines = Lines(null, 1, null)\n    ventsLines.forEachIndexed { index, ventLine ->\n        lines.mergeWith(\n            Line.Companion.fromLineOfVent(\n                LineOfVent.Companion.fromString(ventLine)\n            )\n        )\n    }\n    return lines.overlaps()\n}"}
{"kt_path": "Laomedeia__Java8InAction__0dcd843/src/main/java/leetcode/a392_isSubSequence_HARD/Solution.kt", "deepseek-coder-6.7b-base": "class Solution {\n    fun isSubsequence(s: String, t: String): Boolean {\n        var i = 0\n        var j = 0\n        while (i < s.length && j < t.length) {\n            if (s[i] == t[j]) {\n                i++\n            }\n            j++\n        }\n        return i == s.length\n    }\n}"}
{"kt_path": "nickperov__Algorithms__6696f5d/fibonacci/src/main/kotlin/com/nickperov/stud/algorithms/fibonacci/FibonacciLargeGenerator.kt", "deepseek-coder-6.7b-base": "fun main() {\n    println(\"Hello, large Fibonacci numbers\")\n    val generator = FibonacciLargeTailRecursiveOptimisedGenerator()\n    println(generator.calculate(1000000))\n}\n\nabstract class FibonacciLargeGenerator {\n    abstract fun calculate(n: Int): BigInteger\n}\n\nclass FibonacciLargeTailRecursiveOptimisedGenerator : FibonacciLargeGenerator() {\n    override fun calculate(n: Int): BigInteger {\n        return calculate(n, BigInteger.ZERO, BigInteger.ONE)\n    }\n\n    private fun calculate(n: Int, a: BigInteger, b: BigInteger): BigInteger {\n        return if (n == 0) a else calculate(n - 1, b, a + b)\n    }\n}"}
{"kt_path": "TonnyL__Windary__39f85cd/Kotlin/src/UniqueBinarySearchTrees.kt", "deepseek-coder-6.7b-base": "fun numTrees(n: Int): Int {\n    var result = 0\n    var i = 0\n    val dp = IntArray(n + 1)\n    while (i <= n) {\n        if (i < 2) {\n            dp[i] = 1\n        } else {\n            dp[i] = 0\n            var j = 0\n            while (j < i) {\n                dp[j] = dp[j] * dp[i - j - 1]\n                j++\n            }\n        }\n        i++\n    }\n    return dp[n]\n}"}
{"kt_path": "quincy__euler-kotlin__01d96f6/src/main/kotlin/com/quakbo/euler/Euler4.kt", "deepseek-coder-6.7b-base": "fun isPalindrome(n: Int): Boolean {\n    val str = n.toString()\n    return str == str.reversed()\n}\n\nfun main(args: Array<String>) {\n    for (i in 999 downTo 1) {\n        for (j in 999 downTo 1) {\n            val n = i * j\n            if (isPalindrome(n)) {\n                println(n)\n                return\n            }\n        }\n    }\n}"}
{"kt_path": "getupminaaa__Algorithm__01187e2/Algorithm/src/main/kotlin/programmers/level1/personalInfoCollectionValidityPeriod.kt", "deepseek-coder-6.7b-base": "fun main() {\n    val solution = Solution()\n    val input = \"2022.05.19\"\n    val personalInfoCollectionValidityPeriod = arrayOf(\"A 6\", \"B 12\", \"C 3\")\n    val period = arrayOf(\"2021.05.02 A\", \"2021.07.01 B\", \"2022.02.19 C\", \"2022.02.20 C\")\n    println(solution.solution(input, personalInfoCollectionValidityPeriod, period).contentToString())\n}\n\nclass Solution {\n    fun solution(today: String, terms: Array<String>, privacies: Array<String>): IntArray {\n        val todayDate = getDate(today)\n        val termMap = terms.map { it.split(\" \") }.toMap()\n        return privacies.mapIndexed { index, privacy ->\n            val (date, term) = privacy.split(\" \")\n            val dateDate = getDate(date)\n            val termDate = getDate(termMap[term]!!)\n            if (dateDate + termDate <= todayDate) index + 1 else 0\n        }.filter { it != 0 }.toIntArray()\n    }\n\n    private fun getDate(date: String): Int {\n        val (year, month, day) = date.split(\".\").map { it.toInt() }\n        return year * 12 * 28 + month * 28 + day\n    }\n}"}
{"kt_path": "iafsilva__codility-lessons__5d86aef/src/main/kotlin/lesson1/BinaryGap.kt", "deepseek-coder-6.7b-base": "fun solution(N: Int): Int {\n    var binary = Integer.toBinaryString(N)\n    var count = 0\n    var max = 0\n    var flag = false\n    for (i in 0 until binary.length) {\n        if (binary[i] == '1') {\n            if (flag) {\n                if (count > max) max = count\n                count = 0\n            } else {\n                flag = true\n            }\n        } else if (flag) {\n            count++\n        }\n    }\n    return max\n}"}
{"kt_path": "zys0909__CodeLabs__869c7c2/src/com/leecode/array/Code1.kt", "deepseek-coder-6.7b-base": "fun missingNumber1(nums: IntArray): Int {\n    var i = 0\n    var j = 0\n    val n = nums.size\n    while (j < n) {\n        if (nums[j] != i) return i\n        i++\n        j++\n    }\n    return i\n}\n\nfun missingNumber2(nums: IntArray): Int {\n    var i = 0\n    var j = nums.size - 1\n    while (i <= j) {\n        val m = (i + j) / 2\n        if (nums[m] == m) i = m + 1\n        else j = m - 1\n    }\n    return i\n}"}
{"kt_path": "ykrytsyn__leetcode-in-kotlin__0acf2a6/src/main/kotlin/leetcode/ArrangingCoins.kt", "deepseek-coder-6.7b-base": "class ArrangingCoins {\n    fun bruteForce(n: Int): Int {\n        var n = n\n        var count = 0\n        while (n > 0) {\n            count++\n            n -= count\n        }\n        return count\n    }\n\n    fun binarySearch(n: Int): Int {\n        var n = n.toLong()\n        var left = 0L\n        var right = n\n        var count = 0L\n        while (left <= right) {\n            val mid = (left + right) / 2\n            val sum = mid * (mid + 1) / 2\n            if (sum == n) {\n                count = mid\n                break\n            } else if (sum < n) {\n                left = mid + 1\n                count = mid\n           } else {\n                right = mid - 1\n            }\n        }\n        return count.toInt()\n    }\n}"}
{"kt_path": "mayabot__mynlp__b980da3/mynlp/src/main/java/com/mayabot/nlp/module/nwd/ValueObjects.kt", "deepseek-coder-6.7b-base": "fun addTo(map: HashMap<Char, IntCount>, char: Char, count: Int) {\n    val charCount = map[char]\n    if (charCount != null) {\n        charCount.value += count\n    } else {\n        val newCharCount = IntCount()\n        newCharCount.value = count\n        map[char] = newCharCount"}
{"kt_path": "jjrodcast__CompetitiveProblems__a91868c/leetcode/UniquePathsTwo.kt", "deepseek-coder-6.7b-base": "fun main() {\n    val solution = Solution()\n    val grid = arrayOf(\n        intArrayOf(0, 0, 0),\n        intArrayOf(0, 1, 0),\n        intArrayOf(0, 0, 0)\n    )\n    val result = solution.uniquePathsWithObstacles(grid)\n    println(result)\n}\n\nclass Solution {\n    fun uniquePathsWithObstacles(obstacleGrid: Array<IntArray>): Int {\n        val m = obstacleGrid.size\n        val n = obstacleGrid[0].size\n        val dp = Array(m) { IntArray(n) }\n        dp[0][0] = 1\n        for (i in 0 until m) {\n            for (j in 0 until n) {\n                if (obstacleGrid[i][j] == 1) {\n                    dp[i][j] = 0\n                } else if (i > 0) {\n                    dp[i][j] += dp[i - 1][j]\n                }\n                if (j > 0) {\n                    dp[i][j] += dp[i][j - 1]\n                }\n            }\n        }\n        return dp[m - 1][n - 1]\n    }\n}"}
{"kt_path": "boris920308__HoOne__8881468/hoon/HoonAlgorithm/src/main/kotlin/programmers/lv01/Lv1_77884.kt", "deepseek-coder-6.7b-base": "fun main() {\n    println(solution(13, 17))\n}\n\nfun solution(left: Int, right: Int): Int {\n    var answer = 0\n    var i = left\n    while (i <= right) {\n        if (countDivisors(i) % 2 == 0) answer += i\n        else answer -= i\n        i++\n    }\n    return answer\n}\n\nfun countDivisors(n: Int): Int {\n    var count = 0\n    var i = 1\n    while (i * i <= n) {\n        if (n % i == 0) {\n            count += 2\n            if (i * i == n) count--\n       }"}
{"kt_path": "Codextor__kotlin-codes__68b75a7/src/main/kotlin/PartitionArrayForMaximumSum.kt", "deepseek-coder-6.7b-base": "fun maxSumAfterPartitioning(arr: IntArray, k: Int): Int {\n    val n = arr.size\n    val dp = IntArray(n + 1)\n    dp[0] = 0\n    for (i in 1..n) {\n        var max = Int.MIN_VALUE\n        for (j in 1..k) {\n            if (i - j < 0) break\n            max = max.coerceAtLeast(arr[i - j])\n            dp[i] = dp[i].coerceAtLeast(dp[i - j] + max * j)\n        }\n    }\n    return dp[n]\n}"}
{"kt_path": "scientificCommunity__blog-sample__36e291c/algorithms/src/main/kotlin/org/baichuan/sample/algorithms/leetcode/simple/interview/MajorityElement.kt", "deepseek-coder-6.7b-base": "class MajorityElement {\n    fun majorityElement(nums: IntArray): Int {\n        var count = 0\n        var candidate = 0\n        for (num in nums) {\n            if (count == 0) {\n                candidate = num\n            }\n            count += if (num == candidate) 1 else -1\n       }\n        return candidate"}
{"kt_path": "rhavran__ProjectEuler__1115674/src/Utils.kt", "deepseek-coder-6.7b-base": "fun dividers(n: Long): Long {\n    var result = 1L\n    PrimeFactorization.INSTANCE.primeFactors(n)\n        .entrySet()\n        .iterator()\n        .asSequence()\n        .forEach {\n            result *= it.value.longValue() + 1\n        }\n    return result\n}\n\nfun sequenceSumStartingFrom(n: Long, m: Long): Long {\n    return sumFromTo(n, m)\n}\n\nfun sumFromTo(n: Long, m: Long): Long {\n    return (m - n + 1) * (n + m) / 2\n}"}
{"kt_path": "jimmymorales__project-euler__e881cad/src/main/kotlin/Problem4.kt", "deepseek-coder-6.7b-base": "fun main() {\n    println(largestPalindrome())\n}\n\nfun largestPalindrome(): Int {\n    var max = 0\n    for (i in 999 downTo 99) {\n        for (j in i downTo 99) {\n            val product = i * j\n            if (product > max && isPalindrome(product)) {\n                max = product\n            }\n        }\n    }\n    return max\n}\n\nfun isPalindrome(n: Int): Boolean {\n    return n == reverse(n)\n}\n\nfun reverse(n: Int): Int {\n    var reversed = 0\n    var num = n\n    while (num > 0) {\n        reversed = reversed * 10 + num % 10\n        num /= 10\n    }\n    return reversed\n}"}
{"kt_path": "Codextor__kotlin-codes__68b75a7/src/main/kotlin/PalindromicSubstrings.kt", "deepseek-coder-6.7b-base": "fun countSubstrings(s: String): Int {\n    var count = 0\n    for (i in 0 until s.length) {\n        count += countSubstringsWithCenter(s, i, i)\n        count += countSubstringsWithCenter(s, i, i + 1)\n    }\n    return count\n}\n\nprivate fun countSubstringsWithCenter(s: String, left: Int, right: Int): Int {\n    var count = 0\n    while (left >= 0 && right < s.length && s[left] == s[right]) {\n        count++\n        left--\n        right++\n    }\n    return count\n}"}
{"kt_path": "antop-dev__algorithm__9a3e762/src/main/kotlin/kr/co/programmers/P12952.kt", "deepseek-coder-6.7b-base": "class P12952 {\n    fun solution(n: Int): Int {\n        return dfs(IntArray(n), 0)\n    }\n\n    private fun dfs(arr: IntArray, depth: Int): Int {\n        if (depth == arr.size) return 1\n\n        var count = 0\n        for (i in 0 until arr.size) {\n            if (valid(arr, i)) {\n                arr[depth] = i\n                count += dfs(arr, depth + 1)\n            }\n        }\n        return count\n    }\n\n    private fun valid(arr: IntArray, col: Int): Boolean {\n        for (i in 0 until arr.size) {\n            if (arr[i] == col || Math.abs(arr[i] - col) == Math.abs(i - arr.size)) return false\n        }\n        return true\n    }\n}"}
{"kt_path": "ILIYANGERMANOV__algorithms__4abe4b5/Algorithms/src/main/kotlin/MaxSubArray.kt", "deepseek-coder-6.7b-base": "fun maxSubArray(nums: IntArray): Int {\n    if (nums.size == 1) return nums[0]\n    var max = nums[0]\n    var sum = max\n    for (i in 1 until nums.size) {\n        sum = Math.max(sum + nums[i], nums[i])\n        max = Math.max(max, sum)\n    }\n    return max\n}"}
{"kt_path": "AlBovo__Compiti__56a3131/src/main/kotlin/segtree.kt", "deepseek-coder-6.7b-base": "fun main() {\n    val arr = arrayOf(2, 4, 2, 1, 3, 5, 4)\n    val st = SegmentTree(arr)\n    println(st.getSum(0, 4))\n}\n\nclass SegmentTree(arr: Array<Int>) {\n    private val tree = Array(arr.size * 4) { 0 }\n    private val n = arr.size\n\n    init {\n        build(1, 0, n - 1, arr)\n    }\n\n    private fun build(v: Int, l: Int, r: Int, arr: Array<Int>) {\n        if (l == r) {\n            tree[v] = arr[l]\n            return\n        }\n        val mid = (l + r) / 2\n        build(v * 2, l, mid, arr)\n        build(v * 2 + 1, mid + 1, r, arr)\n        tree[v] = tree[v * 2] + tree[v * 2 + 1]\n    }\n\n    fun getSum(l: Int, r: Int): Int {\n        return getSum(1, 0, n - 1, l, r)\n    }\n\n    private fun getSum(v: Int, l: Int, r: Int, left: Int, right: Int): Int {\n        if (left > r || right < l) return 0\n        if (left <= l && right >= r) return tree[v]\n        val mid = (l + r) / 2\n        val sumLeft = getSum(v * 2, l, mid, left, right)\n        val sumRight = getSum(v * 2 + 1, mid + 1, r, left, right)\n        return sumLeft + sumRight\n    }\n}"}
{"kt_path": "3mtee__exercism-kotlin__6e3eb88/complex-numbers/src/main/kotlin/ComplexNumbers.kt", "deepseek-coder-6.7b-base": "fun exponential(c: ComplexNumber): ComplexNumber {\n    if (c.real == 0.0) {\n        if (c.imag == 0.0) {\n            return ComplexNumber(1.0, 0.0)\n        }\n        return ComplexNumber(0.0, 0.0)\n    }\n    return ComplexNumber(\n        Math.cos(c.imag) * Math.exp(c.real),\n        Math.sin(c.imag) * Math.exp(c.real)\n    )\n}"}
{"kt_path": "perihanmirkelam__ProjectEuler__a24ac44/src/main/kotlin/P014_LongestCollatzSequence.kt", "deepseek-coder-6.7b-base": "fun p14() {\n    var max = 0\n    var maxNum = 0\n    for (i in 1..1000000) {\n        var num = i\n        var count = 0\n        while (num != 1L) {\n            count++\n            if (num % 2 == 0L) {\n                num /= 2\n            } else {\n                num = num * 3 + 1"}
{"kt_path": "iafsilva__codility-lessons__5d86aef/src/main/kotlin/lesson2/CyclicRotation.kt", "deepseek-coder-6.7b-base": "fun solution(a: IntArray, k: Int): IntArray {\n    if (k == 0 || a.isEmpty()) return a\n    val deque = ArrayDeque<Int>()\n    a.forEach { deque.addFirst(it) }\n    var i = 1\n    while (i <= k) {\n        if (i > a.size) i = 1\n        if (i == k) break\n        i++\n    }\n    while (i <= k) {\n        deque.removeLast()\n        deque.addFirst(deque.removeLast())\n        if (i == k) break\n        i++\n    }\n    return deque.toIntArray()\n}"}
{"kt_path": "boris920308__HoOne__8881468/hoon/HoonAlgorithm/src/main/kotlin/programmers/lv01/Lv1_12912.kt", "deepseek-coder-6.7b-base": "fun main() {\n    println(solution(3, 5))\n    println(solution(3, 3))\n    println(solution(5, 3))\n}\n\nfun solution(a: Int, b: Int): Long {\n    return if (a < b) {\n        var sum = 0L\n        for (i in a..b) {\n            sum += i\n        }\n        sum\n    } else {\n        var sum = 0L\n        for (i in b..a) {\n            sum += i\n        }\n        sum\n   }\n}"}
{"kt_path": "darian-catalin-cucer__divide-and-conquer-algorithms__1cea70d/kt.kt", "deepseek-coder-6.7b-base": "fun quickSort(arr: IntArray, left: Int, right: Int) {\n    if (left >= right) return\n    val pivot = partition(arr, left, right)\n    quickSort(arr, left, pivot - 1)\n    quickSort(arr, pivot + 1, right)\n}\n\nfun partition(arr: IntArray, left: Int, right: Int): Int {\n    val pivot = arr[right]\n    var i = left\n    for (j in left until right) {\n        if (arr[j] <= pivot) {\n            val temp = arr[i]\n            arr[i] = arr[j]\n            arr[j] = temp\n            i++\n        }\n    }\n    val temp = arr[i]\n    arr[i] = arr[right]\n    arr[right] = temp\n    return i\n}"}
{"kt_path": "TonnyL__Windary__39f85cd/Kotlin/src/ThreeSumClosest.kt", "deepseek-coder-6.7b-base": "fun threeSumClosest(nums: IntArray, target: Int): Int {\n    nums.sort()\n    var closest = nums[0] + nums[1] + nums[2]\n    for (i in 0 until nums.size - 2) {\n        var j = i + 1\n        var k = nums.size - 1\n        while (j < k) {\n            val sum = nums[i] + nums[j] + nums[k]\n            if (sum == target) {\n                return sum\n            }\n            if (Math.abs(sum - target) < Math.abs(closest - target)) {\n                closest = sum\n            }\n            if (sum < target) {\n                j++\n            } else {\n                k--\n            }\n        }\n    }\n    return closest\n}"}
{"kt_path": "Javran__leetcode__f3899fe/bulb-switcher/Solution.kt", "deepseek-coder-6.7b-base": "class Solution {\n    companion object {\n        @JvmStatic\n        fun main(args: Array<String>) {\n            val solution = Solution()\n            val result = solution.bulbSwitch(10)\n            println(result)\n        }\n    }\n\n    fun bulbSwitch(n: Int): Int {\n        return Math.floor(Math.sqrt(n.toDouble())).toInt()\n    }\n}"}
{"kt_path": "TonnyL__Windary__39f85cd/Kotlin/src/NextPermutation.kt", "deepseek-coder-6.7b-base": "class NextPermutation {\n    fun nextPermutation(nums: IntArray) {\n        val n = nums.size\n        var i = n - 2\n        while (i >= 0 && nums[i] >= nums[i + 1]) i--\n        if (i >= 0) {\n            var j = n - 1\n            while (j >= 0 && nums[i] >= nums[j]) j--\n            swap(nums, i, j)\n       \n        }\n        reverse(nums, i + 1, n - 1)\n    }\n\n    private fun swap(nums: IntArray, i: Int, j: Int) {\n        val temp = nums[i]\n        nums[i] = nums[j]\n        nums[j] = temp\n    }\n\n    private fun reverse(nums: IntArray, start: Int, end: Int) {\n        var start = start\n        var end = end\n        while (start < end) {\n            swap(nums, start, end)\n            start++\n            end--\n        }\n    }\n}"}
{"kt_path": "boris920308__HoOne__8881468/hoon/HoonAlgorithm/src/main/kotlin/programmers/lv01/Lv1_12940.kt", "deepseek-coder-6.7b-base": "fun main() {\n    val result = solution(3, 12)\n    println(\"- - - - - - - - - - -\")\n    println(result)\n}\n\nfun solution(n: Int, m: Int): IntArray {\n    val result = intArrayOf(0, 0)\n    result[0] = findGCD(n, m)\n    result[1] = findLCM(n, m)\n    return result\n}\n\nfun findGCD(n: Int, m: Int): Int {\n    return if (m != 0) findGCD(m, n % m) else n\n}\n\nfun findLCM(n: Int, m: Int): Int {\n    return n * m / findGCD(n, m)\n}"}
{"kt_path": "JiangKlijna__leetcode-learning__65a1348/kt/001 Two Sum/TwoSum.kt", "deepseek-coder-6.7b-base": "class TwoSum {\n    fun twoSum(numbers: IntArray, target: Int): IntArray {\n        val map = hashMapOf<Int, Int>()\n        for (i in 0 until numbers.size) {\n            val num = map[numbers[i]]\n            if (num != null) {\n                return intArrayOf(num, i)\n            }\n            map[target - numbers[i]] = i\n       }\n        return intArrayOf()\n    }\n}"}
{"kt_path": "rupeshsasne__coursera-algorithms-part1__341634c/classroom/src/main/kotlin/com/radix2/algorithms/week1/UnionFind.kt", "deepseek-coder-6.7b-base": "fun main(args: Array<String>) {\n    val uf = WeightedQuickUnionWithPathCompressionUF(10)\n    uf.union(4, 3)\n    uf.union(3, 8)\n    uf.union(6, 5)\n    uf.union(9, 4)\n    uf.union(2, 1)\n    uf.union(5, 0)\n    uf.union(7, 2)\n    uf.union(6, 1)\n    uf.union(7, 3)\n}"}
{"kt_path": "boris920308__HoOne__8881468/hoon/HoonAlgorithm/src/main/kotlin/programmers/lv01/Lv1_68935.kt", "deepseek-coder-6.7b-base": "fun main() {\n    println(solution(45))\n}\n\nfun solution(n: Int): Int {\n    return Integer.parseInt(Integer.toString(n, 3).reversed().toString(10), 10)\n}"}
{"kt_path": "korilin__DSA-kt__b96ba1b/src/main/kotlin/sort_algorithm/quickSort.kt", "deepseek-coder-6.7b-base": "fun quickSort(array: IntArray) {\n    quickSort(array, 0, array.size - 1)\n}\n\nprivate fun quickSort(array: IntArray, left: Int, right: Int) {\n    if (left >= right) return\n    val pivot = partition(array, left, right)\n    quickSort(array, left, pivot - 1)\n    quickSort(array, pivot + 1, right)\n}\n\nprivate fun partition(array: IntArray, left: Int, right: Int): Int {\n    var i = left\n    var j = right\n    val pivot = array[left]\n    while (i <= j) {\n        while (array[i] < pivot) i++\n        while (array[j] > pivot) j--\n        if (i <= j) {\n            val temp = array[i]\n            array[i] = array\n            array[j] = temp\n            i++\n            j--\n        }\n    }\n    return i\n}"}
{"kt_path": "gardnerdickson__advent-of-code-2015__4a23ab3/src/day_10.kt", "deepseek-coder-6.7b-base": "fun main(args: Array<String>) {\n    val input = \"1113222113\"\n    println(\"Part 1: ${Day10.part1(input)}\")\n    println(\"Part 2: ${Day10.part2(input)}\")\n}"}
{"kt_path": "gardnerdickson__advent-of-code-2015__4a23ab3/src/day_2.kt", "deepseek-coder-6.7b-base": "fun main(args: Array<String>) {\n    val input = args.checkNotNullParameter(\"args\")\n    val day2 = Day2.INSTANCE\n    val part1 = day2.part1(input)\n    println(\"Part 1: $part1\")\n    val part2 = day2.part2(input)\n    println(\"Part 2: $part2\")\n}"}
{"kt_path": "gardnerdickson__advent-of-code-2015__4a23ab3/src/day_3.kt", "deepseek-coder-6.7b-base": "fun main(args: Array<String>) {\n    val input = args[0]\n    val part1 = Day3.part1(input)\n    println(\"Part 1: $part1\")\n    val part2 = Day3.part2(input)\n    println(\"Part 2: $part2\")\n}"}
{"kt_path": "antop-dev__algorithm__9a3e762/src/main/kotlin/kr/co/programmers/P161988.kt", "deepseek-coder-6.7b-base": "class P161988 {\n    fun solution(sequence: IntArray): Long {\n        var max = max(sequence, 1)\n        var min = max(sequence, -1)\n        for (i in 2 until sequence.size) {\n            max = Math.max(max, max(sequence, i))\n            min = Math.max(min, max(sequence, -i))\n        }\n        return Math.max(max, min)\n    }\n\n    private fun max(sequence: IntArray, multiplier: Int): Long {\n        val dp = LongArray(sequence.size)\n        dp[0] = sequence[0].toLong() * multiplier\n        var max = dp[0]\n        for (i in 1 until sequence.size) {\n            dp[i] = Math.max(dp[i - 1] + sequence[i].toLong() * multiplier, sequence[i].toLong() * multiplier)\n            max = Math.max(max, dp[i])\n        }\n        return max\n    }\n}"}
{"kt_path": "alexjlockwood__bees-and-bombs-compose__0d7a86b/app/src/main/java/com/alexjlockwood/beesandbombs/demos/utils/MathUtils.kt", "deepseek-coder-6.7b-base": "package com.alexjlockwood.beesandbombs.demos.utils\n\nobject MathUtils {\n    const val PI = Math.PI.toFloat()\n    const val TWO_PI = PI * 2\n    const val HALF_PI = PI / 2\n\n    fun dist(x1: Float, y1: Float, x2: Float, y2: Float): Float {\n        val dx = x2 - x1\n        val dy = y2 - y1\n        return Math.sqrt((dx * dx + dy * dy).toDouble()).toFloat()\n    }\n\n    fun lerp(a: Float, b: Float, t: Float): Float {\n        return a + (b - a) * t"}
{"kt_path": "chengw315__daily-study__501b881/letcode/src/main/java/daily/LeetCodeLCP13.kt", "deepseek-coder-6.7b-base": "fun main() {\n    val solution = SolutionLCP13()\n    val input = arrayOf(\"S#O\", \"M..\", \"M.T\")\n    val result = solution.minimalSteps(input)\n    println(result)\n}\n\nclass SolutionLCP13 {\n    fun minimalSteps(maze: Array<String>): Int {\n        val m = maze.size\n        val n = maze[0].length\n        val visited = Array(m) { BooleanArray(n) }\n        val queue = ArrayDeque<Pair<Int, Int>>()\n        queue.add(Pair(0, 0))\n        visited[0][0] = true\n        var steps = 0\n        while (queue.isNotEmpty()) {\n            val size = queue.size\n            for (i in 0 until size) {\n                val (x, y) = queue.removeFirst()\n                if (x == m - 1 && y == n - 1) return steps\n                for (dx in -1..1) {\n                    for (dy in -1..1) {\n                        if (dx != 0 && dy != 0) continue\n                        var nx = x + dx\n                        var ny = y + dy\n                        while (nx in 0 until m && ny in 0 until n && maze[nx][ny] == '.') {\n                            nx += dx\n                            ny += dy\n                        }\n                        nx -= dx\n                        ny -= dy\n                        if (!visited[nx][ny]) {\n                            visited[nx][ny] = true\n                            queue.add(Pair(nx, ny))\n                        }\n                    }\n                }\n            }\n            steps++\n        }\n        return -1\n    }\n}"}
{"kt_path": "rajatenzyme__Coding-Journey__65a0570/Algo_Ds_Notes-master/Algo_Ds_Notes-master/Floyd_Warshall_Algorithm/Floyd_Warshall_Algorithm.kt", "deepseek-coder-6.7b-base": "fun main(args: Array<String>) {\n    val n = 5\n    val graph = arrayOf(\n        intArrayOf(0, 3, -2),\n        intArrayOf(3, 0, 1),\n        intArrayOf(-2, 1, 0),\n        intArrayOf(1, -2, 4),\n        intArrayOf(-1, 2, -1)\n    )\n\n    val floydWarshall = FloydWarshall(graph)\n    floydWarshall.doCalcs(n)\n}\n\nclass FloydWarshall(private val graph: Array<IntArray>) {\n\n    fun doCalcs(n: Int) {\n        for (k in 0 until n) {\n            for (i in 0 until n) {\n                for (j in 0 until n) {\n                    if (graph[i][k] + graph[k][j] < graph[i][j]) {\n                        graph[i][j] = graph[i][k] + graph[k][j]\n                    }\n                }\n            }\n        }\n\n        for (i in 0 until n) {\n            for (j in 0 until n) {\n                print(\"${graph[i][j]} \")\n            }\n            println()\n        }\n    }\n}"}
{"kt_path": "brunorene__advent_of_code_2018__0cb6814/src/main/kotlin/advent/of/code/day17/Solution.kt", "deepseek-coder-6.7b-base": "import java.io.File\nimport kotlin.text.Regex\n\nprivate val input = File(\"day17.txt\")\nprivate val multipleCoord = Regex(\"(x|y)=([.0-9]+)\\\\.\\\\.([.0-9]+)\")\nprivate val oneCoord = Regex(\"(x|y)=([.0-9]+)\")\n\nfun main() {\n    println(part1())\n    println(part2())\n}\n\nfun part1(): Int {\n    val underground = Underground(input)\n    underground.getClay()\n    println(underground)\n    return 1\n}\n\nfun part2(): Int {\n    return 2\n}"}
{"kt_path": "Simplation__OpenSourceRepository__d45feaa/算法/一维数组的动态和1480.kt", "deepseek-coder-6.7b-base": "fun main() {\n    val nums = intArrayOf(1, 1, 1, 1, 1)\n    val newNum = intArrayOf(nums[0])\n    for (i in 1 until nums.size) {\n        newNum[i] = newNum[i - 1] + nums[i]\n    }\n    println(newNum.contentToString())\n}"}
{"kt_path": "jimmymorales__project-euler__e881cad/src/main/kotlin/Problem3.kt", "deepseek-coder-6.7b-base": "fun main() {\n    println(solution3(600851475143L))\n}\n\nprivate fun solution3(n: Long): Long {\n    var n = n\n    var i = 2L\n    while (i * i <= n) {\n        if (n % i == 0L) {\n            n /= i\n        } else {\n            i++\n        }"}
{"kt_path": "age-series__ElectricalAge2__86d843f/src/main/kotlin/org/eln2/mc/data/SegmentTree.kt", "deepseek-coder-6.7b-base": "class SegmentTree<T>(root: SegmentTreeNode<T>) {\n    private var root: SegmentTreeNode<T> = root\n\n    fun queryOrNull(x: Double): T? {\n        return if (root.contains(x)) root.query(x) else null\n    }\n\n    fun query(x: Double): T {\n        return root.query(x) ?: throw IllegalStateException(\"$x not found\")\n    }\n}"}
{"kt_path": "ykrytsyn__leetcode-in-kotlin__0acf2a6/src/main/kotlin/leetcode/UniquePaths.kt", "deepseek-coder-6.7b-base": "class UniquePaths {\n    fun dynamicProgramming(m: Int, n: Int): Int {\n        val dp = Array(m) { IntArray(n) }\n        for (i in 0 until m) {\n            for (j in 0 until n) {\n                if (i == 0 || j == 0) {\n                    dp[i][j] = 1\n                } else {\n                    dp[i][j] = dp[i - ][j] + dp[i][j - 1]\n                }\n            }\n        }\n        return dp[m - 1][n - 1]\n    }\n\n    fun recursive(m: Int, n: Int): Int {\n        if (m == 1 || n == 1) {\n            return 1\n        }\n        return recursive(m - 1, n) + recursive(m, n - 1)\n    }\n}"}
{"kt_path": "quincy__euler-kotlin__01d96f6/src/main/kotlin/com/quakbo/euler/Euler6.kt", "deepseek-coder-6.7b-base": "fun main(args: Array<String>) {\n    val sequence = generateSequence(1) { it + 1 }.take(100)\n    val squareOfSums = squareOfSums(sequence)\n    val sumOfSquares = sumOfSquares(sequence)\n    println(squareOfSums - sumOfSquares)\n}\n\nfun sumOfSquares(sequence: Sequence<Int>) = sequence.map { it * it }.sumOfInt()\n\nfun squareOfSums(sequence: Sequence<Int>) = sequence.sumOfInt() * sequence.sumOfInt()"}
{"kt_path": "Kirchberg__BigDataPL__b6a459a/LR7/src/main/kotlin/Task1V3.kt", "deepseek-coder-6.7b-base": "fun task1V3() {\n    val str = \"java android kotlin rust\"\n    val words = str.split(\" \")\n    val wordChainFinder = WordChainFinder(words)\n    val longestWordChain = wordChainFinder.findLongestWordChain()\n    println(\"Longest word chain: ${longestWordChain.joinToString(\", \")}\")\n}"}
{"kt_path": "fredyw__leetcode__a59d77c/src/main/kotlin/leetcode/Problem2064.kt", "deepseek-coder-6.7b-base": "class Problem2064 {\n    fun minimizedMaximum(n: Int, quantities: IntArray): Int {\n        var max = 1\n        var min = 1\n        var maxQuantity = quantities[0]\n        var minQuantity = 1\n        val length = quantities.size\n        while (minQuantity <= length) {\n            if (maxQuantity > max) {\n                max = maxQuantity\n                min = minQuantity\n            }\n            minQuantity++\n            maxQuantity = Math.max(maxQuantity, quantities[minQuantity - 1])\n        }\n        if (max > n) {\n            max = min\n            maxQuantity = quantities[min - 1]\n            minQuantity = 1\n            while (minQuantity <= length) {\n                if (maxQuantity > max) {\n                    max = maxQuantity\n                    min = minQuantity\n                }\n                minQuantity++\n                maxQuantity = Math.max(maxQuantity, quantities[minQuantity - 1])\n            }\n        }\n        return max\n    }\n\n    private fun canDistribute(n: Int, quantities: IntArray, i: Int): Boolean {\n        var n = n\n        var i = 0\n        val length = quantities.size\n        while (i < length) {\n            if (n <= 0) return false\n            val quantity = quantities[i]\n            n -= quantity / i\n        }\n        return n >= 0\n    }\n}"}
