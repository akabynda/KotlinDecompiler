{"kt_path": "remisultan__multiarm-bandit-algorithm-kotlin__ead934d/core-bandit/src/main/kotlin/org/rsultan/bandit/algorithms/BanditAlgorithm.kt", "Mellum-4b-base": "interface BanditAlgorithm {\n    fun selectArm(): Int\n    fun update(arm: Int, reward: Float)\n}"}
{"kt_path": "n81ur3__kotlin-coding-challenges__fdc5941/src/main/kotlin/adventofcode2018/Day22ModeMaze.kt", "Mellum-4b-base": "fun main() {\n    println(\"Hello, world!\")\n}"}
{"kt_path": "n81ur3__kotlin-coding-challenges__fdc5941/src/main/kotlin/adventofcode2017/Day21FractalArt.kt", "Mellum-4b-base": "fun main(args: Array<String>) {\n    println(\"Hello, World!\")\n}"}
{"kt_path": "n81ur3__kotlin-coding-challenges__fdc5941/src/main/kotlin/adventofcode2017/Day03SpiralMemory.kt", "Mellum-4b-base": ""}
{"kt_path": "n81ur3__kotlin-coding-challenges__fdc5941/src/main/kotlin/adventofcode2019/Day03CrossedWires.kt", "Mellum-4b-base": ""}
{"kt_path": "n81ur3__kotlin-coding-challenges__fdc5941/src/main/kotlin/adventofcode2018/Day04ReposeRecord.kt", "Mellum-4b-base": "class Day04ReposeRecord {\n    constructor()\n}"}
{"kt_path": "n81ur3__kotlin-coding-challenges__fdc5941/src/main/kotlin/adventofcode2017/Day08LikeRegisters.kt", "Mellum-4b-base": ""}
{"kt_path": "n81ur3__kotlin-coding-challenges__fdc5941/src/main/kotlin/adventofcode2018/Day11ChronalCharge.kt", "Mellum-4b-base": "fun main(args: Array<String>) {\n    println(\"Hello, World!\")\n}"}
{"kt_path": "n81ur3__kotlin-coding-challenges__fdc5941/src/main/kotlin/adventofcode2020/Day19MonsterMessage.kt", "Mellum-4b-base": "class Day19MonsterMessage"}
{"kt_path": "n81ur3__kotlin-coding-challenges__fdc5941/src/main/kotlin/adventofcode2017/Day07RecursiveCircus.kt", "Mellum-4b-base": "fun main(args: Array<String>) {\n    println(\"Hello, world!\")\n}"}
{"kt_path": "n81ur3__kotlin-coding-challenges__fdc5941/src/main/kotlin/adventofcode2019/Day12TheNbodyProblem.kt", "Mellum-4b-base": ""}
{"kt_path": "n81ur3__kotlin-coding-challenges__fdc5941/src/main/kotlin/adventofcode2018/Day15BeverageBandits.kt", "Mellum-4b-base": "class Day15BeverageBandits {\n    fun solve() {\n        // TODO\n    }\n}"}
{"kt_path": "n81ur3__kotlin-coding-challenges__fdc5941/src/main/kotlin/adventofcode2020/Day07HandyHaversacks.kt", "Mellum-4b-base": ""}
{"kt_path": "n81ur3__kotlin-coding-challenges__fdc5941/src/main/kotlin/adventofcode2018/Day07TheSumOfItsParts.kt", "Mellum-4b-base": "fun main(args: Array<String>) {\n    println(\"Hello, world!\")\n}"}
{"kt_path": "n81ur3__kotlin-coding-challenges__fdc5941/src/main/kotlin/adventofcode2017/Day25TheHaltingProblem.kt", "Mellum-4b-base": "fun main(args: Array<String>) {\n    println(\"Hello, World!\")\n}"}
{"kt_path": "n81ur3__kotlin-coding-challenges__fdc5941/src/main/kotlin/adventofcode2019/Day06UniversalOrbitMap.kt", "Mellum-4b-base": "import java.io.File\n\nfun main() {\n    val input = File(\"input.txt\").readText()\n    val map = Day06UniversalOrbitMap()\n    val orbits = map.getOrbits(input)\n    println(orbits)\n}"}
{"kt_path": "n81ur3__kotlin-coding-challenges__fdc5941/src/main/kotlin/adventofcode2019/Day10MonitoringStation.kt", "Mellum-4b-base": "class Day11KnotHash {\n    fun main() {\n        println(\"Hello, World!\")\n    }\n}"}
{"kt_path": "n81ur3__kotlin-coding-challenges__fdc5941/src/main/kotlin/adventofcode2018/Day06ChronalCoordinates.kt", "Mellum-4b-base": "class Day07RecursiveCircus {\n    fun main() {\n        println(\"Hello, World!\")\n    }\n}"}
{"kt_path": "n81ur3__kotlin-coding-challenges__fdc5941/src/main/kotlin/adventofcode2020/Day21AllergenAssessment.kt", "Mellum-4b-base": ""}
{"kt_path": "n81ur3__kotlin-coding-challenges__fdc5941/src/main/kotlin/adventofcode2017/Day24ElectromagneticMoat.kt", "Mellum-4b-base": "fun main(args: Array<String>) {\n    println(\"Hello, World!\")\n}"}
{"kt_path": "n81ur3__kotlin-coding-challenges__fdc5941/src/main/kotlin/adventofcode2018/Day12SubterraneanSustainability.kt", "Mellum-4b-base": ""}
{"kt_path": "n81ur3__kotlin-coding-challenges__fdc5941/src/main/kotlin/adventofcode2018/Day23ExperimentalEmergencyTeleportation.kt", "Mellum-4b-base": ""}
{"kt_path": "alebedev__aoc2022__d6ba46b/src/main/kotlin/Map.kt", "Mellum-4b-base": ""}
{"kt_path": "andrewrlee__adventOfCode2020__a9c21a6/src/main/kotlin/File09.kt", "Mellum-4b-base": "class Challenge09 {\n    fun solve() {\n        val numbers = listOf(1, 2, 3, 4, 5, 6, 7, 8, 9, 10)\n        val evenNumbers = numbers.filter { it % 2 == 0 }\n        val oddNumbers = numbers.filter { it % 2!= 0 }\n        println(\"Even numbers: $evenNumbers\")\n        println(\"Odd numbers: $oddNumbers\")\n    }\n}"}
{"kt_path": "andrewrlee__adventOfCode2020__a9c21a6/src/main/kotlin/File08.kt", "Mellum-4b-base": "class Challenge08 {\n    fun solve() {\n        val list = mutableListOf(1, 2, 3, 4, 5)\n        val result = list.filter { it % 2 == 0 }\n        println(result)\n    }\n}"}
{"kt_path": "andrewrlee__adventOfCode2020__a9c21a6/src/main/kotlin/File02.kt", "Mellum-4b-base": "class Challenge02 {\n    fun solve() {\n        println(\"Hello, World!\")\n    }\n}"}
{"kt_path": "andrewrlee__adventOfCode2020__a9c21a6/src/main/kotlin/File07.kt", "Mellum-4b-base": "fun main() {\n    Challenge08().solve()\n}\n\nfun main(args: Array<String>) {\n    Challenge08().solve()\n}"}
{"kt_path": "charlesfranciscodev__codingame__3ec8060/puzzles/kotlin/src/war/war.kt", "Mellum-4b-base": "class Game {\n    fun play() {\n        println(\"Playing...\")\n    }\n}"}
{"kt_path": "al-volkov__spbu_2020_kotlin_homeworks__5049681/src/main/kotlin/homework_5/Task1.kt", "Mellum-4b-base": "fun isNumber(s: String): Boolean {\n    return s.toIntOrNull()!= null\n}"}
{"kt_path": "iafsilva__codility-lessons__5d86aef/src/main/kotlin/lesson3/FrogJmp.kt", "Mellum-4b-base": "fun solution(x: Int, y: Int, d: Int): Int {\n    var z = y - x\n    var i = 0\n    while (z > 0) {\n        z -= d\n        i++\n    }\n    return i\n}"}
{"kt_path": "mikhalchenko-alexander__advent-of-kotlin-2018-week1__c483ade/src/main/kotlin/com/anahoret/pathfinding/MarkingWayOnMap.kt", "Mellum-4b-base": "fun getMapWithPath(map: String): String {\n    val graph = Graph.INSTANCE\n    return graph.getMapWithPath(map)\n}"}
{"kt_path": "charlesfranciscodev__codingame__3ec8060/puzzles/kotlin/src/surface/surface.kt", "Mellum-4b-base": "import java.io.File\n\nfun main(args: Array<String>) {\n    val grid = Grid()\n    grid.readGameInput()\n    grid.test()\n}\n\nclass Grid {\n    private val grid = Array(10) { CharArray(10) }\n\n    fun readGameInput() {\n        val file = File(\"input.txt\")\n        val reader = file.bufferedReader()\n        var y = 0\n        while (true) {\n            val line = reader.readLine()?: break\n            var x = 0\n            for (c in line) {\n                grid[y][x] = c\n                x++\n            }\n            y++\n        }\n    }\n\n    fun test() {\n        var y = 0\n        while (true) {\n            var x = 0\n            while (true) {\n                val c = grid[y][x]\n                if (c == LAND) {\n                    grid[y][x] = WATER\n                    break\n                }\n                if (c == WATER) {\n                    grid[y][x] = LAND\n                    break\n                }\n                x++\n            }\n            y++\n        }\n    }\n}"}
{"kt_path": "andrew-suprun__AoC-2023__dd5f53e/src/main/kotlin/day03_oop/day03_oop.kt", "Mellum-4b-base": "class Part1(private val input: String) {\n    fun run() {\n        val lines = input.lines()\n        val gamma = lines.map { it.count { it == '1' } }.sum()\n        val epsilon = gamma.inv()\n        println(\"gamma: $gamma, epsilon: $epsilon\")\n        println(\"gamma * epsilon: ${gamma * epsilon}\")\n    }\n}\n\nclass Part2(private val input: String) {\n    fun run() {\n        val lines = input.lines()\n        val oxygen = lines.map { it.count { it == '1' } }.toList().toMutableList()\n        val co2 = lines.map { it.count { it == '1' } }.toList().toMutableList()\n        var i = 0\n        while (oxygen.size > 1) {\n            val mostCommon = if (oxygen[i] >= oxygen[i + 1]) 1 else 0\n            val leastCommon = if (oxygen[i] >= oxygen[i + 1]) 0 else 1\n            oxygen.removeAt(i)\n            oxygen.removeAt(i)\n            oxygen.removeAll { it == mostCommon }\n            oxygen.removeAll { it == leastCommon }\n            i++\n        }\n        i = 0\n        while (co2.size > 1) {\n            val mostCommon = if (co2[i] >= co2[i + 1]) 1 else 0\n            val leastCommon = if (co2[i] >= co2[i + 1]) 0 else 1\n            co2.removeAt(i)\n            co2.removeAt(i)\n            co2.removeAll { it == mostCommon }\n            co2.removeAll { it == leastCommon }\n            i++\n        }\n        println(\"oxygen: ${oxygen[0]}, co2: ${co2[0]}\")\n        println(\"oxygen * co2: ${oxygen[0] * co2[0]}\")\n    }\n}\n\nfun main() {\n    Part1(\"input.data\").run()\n    Part2(\"input.data\").run()\n}"}
{"kt_path": "getnahid__programing-problem-solves-kotlin__589c392/CyclicRotation.kt", "Mellum-4b-base": "fun solution(a: IntArray, k: Int): IntArray {\n    val n = a.size\n    val result = IntArray(n)\n    for (i in 0 until n) {\n        result[(i + k) % n] = a[i]\n    }\n    return result\n}"}
{"kt_path": "linisme__LeetCodeInKotlin__4382afc/LongestPalindrome.kt", "Mellum-4b-base": "fun main(args: Array<String>) {\n    val solution = LongestPalindromeSolution()\n    val result = solution.longestPalindrome(\"abccbbdl\")\n    println(result)\n}"}
{"kt_path": "iafsilva__codility-lessons__5d86aef/src/main/kotlin/lesson2/OddOccurrencesInArray.kt", "Mellum-4b-base": "fun solution(a: IntArray, k: Int): Int {\n    return a.getOrNull(k - 1)?: 0\n}"}
{"kt_path": "jjeda__playground__5d1ee6c/src/oop/algorithm/ProgressionNextNumber.kt", "Mellum-4b-base": "class ProgressionNextNumber {\n    fun solution(array: IntArray): Int {\n        array.toList()\n        return ProgressionHelper(array).nextInt()\n    }\n}\n\nclass ProgressionHelper(private val array: List<Int>) {\n    private var current = 0\n\n    fun nextInt(): Int {\n        val next = array[current]\n        current++\n        return next\n    }\n}"}
{"kt_path": "linisme__LeetCodeInKotlin__4382afc/LengthOfLongestSubstring.kt", "Mellum-4b-base": "fun main(args: Array<String>) {\n    val solution = LongestPalindromicSubstringSolution()\n    val longest = solution.longestPalindromicSubstring(\"babad\")\n    println(longest)\n}"}
{"kt_path": "nschulzke__mancala-puzzle-solver__b130d3b/src/main/kotlin/Main.kt", "Mellum-4b-base": "fun main() {\n    println(\"Hello, Kotlin!\")\n}"}
{"kt_path": "sysion__DataStructureAlgorithmKt__6f9afda/TwoSumLessThanTarget.kt", "Mellum-4b-base": "fun main() {\n    val intArray = intArrayOf(3, 1, 2)\n    val result = SumTwoNumbersLessThanTarget(intArray, 15)\n    println(result)\n}\n\nfun SumTwoNumbersLessThanTarget(intArray: IntArray, target: Int): Int {\n    var left = 0\n    var right = intArray.size - 1\n    while (left < right) {\n        val sum = intArray[left] + intArray[right]\n        if (sum < target) {\n            left++\n        } else {\n            right--\n        }\n    }\n    return left\n}"}
{"kt_path": "linisme__LeetCodeInKotlin__4382afc/FineMedianSortedArrays.kt", "Mellum-4b-base": "import java.util.*\n\nfun main(args: Array<String>) {\n    val solution = FindMedianSortedArraysSolution()\n    val result = solution.findMedianSortedArrays(intArrayOf(1, 2), intArrayOf(3, 4))\n    println(result)\n}\n\nclass FindMedianSortedArraysSolution {\n    fun findMedianSortedArrays(nums1: IntArray, nums2: IntArray): Double {\n        val nums = nums1.plus(nums2)\n        val sorted = nums.sorted()\n        val size = sorted.size\n        val mid = size / 2\n        return if (size % 2 == 0) {\n            (sorted[mid - 1] + sorted[mid]).toDouble() / 2\n        } else {\n            sorted[mid]\n        }\n    }\n}"}
{"kt_path": "n81ur3__kotlin-coding-challenges__fdc5941/src/main/kotlin/adventofcode2018/Day18SettlersOfTheNorthPole.kt", "Mellum-4b-base": "package adventofcode2018\n\nimport java.util.*\n\nfun main(args: Array<String>) {\n    val input = \"\"\"\n        1 2 N\n        LMLMLMLMM\n        3 3 E\n        MMRMMRMRRM\n    \"\"\".trimIndent()\n    val area = Area(input)\n    println(area.hash())\n}\n\nclass Area(input: String) {\n    private val area: List<List<AreaElement>>\n\n    init {\n        val lines = input.lines()\n        val width = lines[0].length\n        val height = lines.size\n        area = ArrayList(height)\n        for (y in 0 until height) {\n            val line = lines[y]\n            val row = ArrayList(width)\n            for (x in 0 until width) {\n                row.add(AreaElement(line[x], x, y))\n            }\n            area.add(row)\n        }\n    }\n\n    fun hash(): Int {\n        return hash(area)\n    }\n\n    companion object {\n        fun hash(area: List<List<AreaElement>>): Int {\n            return area.hashCode()\n        }\n    }\n}\n\nclass AreaElement(val type: Char, val x: Int, val y: Int)"}
{"kt_path": "iafsilva__codility-lessons__5d86aef/src/main/kotlin/lesson3/PermMissingElem.kt", "Mellum-4b-base": ""}
{"kt_path": "getnahid__programing-problem-solves-kotlin__589c392/OddOccurrencesInArray.kt", "Mellum-4b-base": "// Source : https://leetcode.com/problems/find-the-duplicate-number/\n// Author : <NAME>\n// Date   : 2016-11-18\n\nfun solution(a: IntArray): Int {\n    a.sort()\n    var result = 0\n    for (i in a.indices) {\n        if (a[i]!= a[i + 1]) {\n            result = a[i]\n            break\n        }\n    }\n    return result\n}"}
{"kt_path": "rupeshsasne__coursera-algorithms-part1__341634c/classroom/src/main/kotlin/com/radix2/algorithms/week3/SortingLinkedList.kt", "Mellum-4b-base": "import java.util.*\n\nfun main(args: Array<String>) {\n    val list = LinkedList<Int>()\n    for (i in 0..10) {\n        list.add(i)\n    }\n    list.reverseRecurrsive()\n    println(list)\n}"}
{"kt_path": "boris920308__HoOne__8881468/hoon/HoonAlgorithm/src/main/kotlin/boj/week02/recursive_function/FibonacciSequence5.kt", "Mellum-4b-base": ""}
{"kt_path": "Codextor__kotlin-codes__68b75a7/src/main/kotlin/PerfectSquares.kt", "Mellum-4b-base": ""}
{"kt_path": "Laomedeia__Java8InAction__0dcd843/src/main/java/leetcode/a167_twoSumInputSortArray_SIMPLE/Solution.kt", "Mellum-4b-base": "fun twoSum(numbers: IntArray, target: Int): IntArray {\n    numbers.sort()\n    var i = 0\n    var j = numbers.size - 1\n    while (i < j) {\n        val sum = numbers[i] + numbers[j]\n        if (sum == target) {\n            return intArrayOf(i + 1, j + 1)\n        } else if (sum < target) {\n            i++\n        } else {\n            j--\n        }\n    }\n    return intArrayOf()\n}"}
{"kt_path": "ariannysOronoz__tutorialKotlin__a779f54/CombinacionesPalabras/src/main/java/Main.kt", "Mellum-4b-base": ""}
{"kt_path": "scientificCommunity__blog-sample__36e291c/algorithms/src/main/kotlin/org/baichuan/sample/algorithms/leetcode/middle/MaxArea.kt", "Mellum-4b-base": "fun maxArea(height: IntArray): Int {\n    var maxArea = 0\n    for (i in 0 until height.size - 1) {\n        for (j in i + 1 until height.size) {\n            val area = (j - i) * min(height[i], height[j])\n            maxArea = max(area, maxArea)\n        }\n    }\n    return maxArea\n}"}
{"kt_path": "boris920308__HoOne__8881468/hoon/HoonAlgorithm/src/main/kotlin/programmers/lv01/Lv1_70128.kt", "Mellum-4b-base": "fun solution(array: IntArray, array2: IntArray): Int {\n    var sum = 0\n    for (i in 0 until array.size) {\n        sum += array[i] * array2[i]\n    }\n    return sum\n}"}
{"kt_path": "kotler-dev__kotlin-leetcode__0659e72/src/main/kotlin/exercise/easy/id121/Solution121.kt", "Mellum-4b-base": "fun maxProfit(prices: IntArray): Int {\n    if (prices.size!= 2) return 0\n    var min = prices[0]\n    var max = prices[1]\n    var profit = 0\n    for (i in 2 until prices.size) {\n        val price = prices[i]\n        if (price < min) min = price\n        if (price - min > profit) profit = price - min\n        if (price > max) max = price\n    }\n    return profit\n}"}
{"kt_path": "marc-bouvier-katas__Kotlin_EduTools_Advent_of_Code_2021__12cf74c/Day 5/Part 1/src/Task.kt", "Mellum-4b-base": "fun overlaps(ventsLines: Array<String>): Int {\n    val lines = Lines(ventsLines.map { LineOfVent.fromString(it) }.toMap(), 1, DefaultConstructorMarker)\n    return lines.overlaps()\n}"}
{"kt_path": "Laomedeia__Java8InAction__0dcd843/src/main/java/leetcode/a392_isSubSequence_HARD/Solution.kt", "Mellum-4b-base": "fun isSubsequence(s: String, t: String): Boolean {\n    return s.length == t.length && s.zip(t).all { (a, b) -> a == b }\n}"}
{"kt_path": "nickperov__Algorithms__6696f5d/fibonacci/src/main/kotlin/com/nickperov/stud/algorithms/fibonacci/FibonacciLargeGenerator.kt", "Mellum-4b-base": ""}
{"kt_path": "TonnyL__Windary__39f85cd/Kotlin/src/UniqueBinarySearchTrees.kt", "Mellum-4b-base": "// Source : https://leetcode.com/problems/unique-binary-search-trees/\n// Author : <NAME>\n// Date   : 2018-06-25\n\nclass Solution {\n    fun numTrees(n: Int): Int {\n        val dp = Array(n + 1) { IntArray(n + 1) }\n        dp[0][0] = 1\n        for (i in 1..n) {\n            for (j in 1..n) {\n                dp[i][j] = 0\n                for (k in 1..j) {\n                    dp[i][j] += dp[k - 1][j - k] * dp[i - k][j]\n                }\n            }\n        }\n        return dp[n][n]\n    }\n}"}
{"kt_path": "quincy__euler-kotlin__01d96f6/src/main/kotlin/com/quakbo/euler/Euler4.kt", "Mellum-4b-base": ""}
{"kt_path": "getupminaaa__Algorithm__01187e2/Algorithm/src/main/kotlin/programmers/level1/personalInfoCollectionValidityPeriod.kt", "Mellum-4b-base": "// personalInfoCollectionValidityPeriod.kt\n\nclass Solution {\n    fun solution(\n            personalInfoCollection: Array<String>,\n            personalInfoCollectionValidityPeriod: Array<String>,\n            personalInfoCollectionValidityPeriodType: Array<String>\n    ): Array<Int> {\n        val result = IntArray(personalInfoCollection.size)\n        for (i in result.indices) {\n            val personalInfo = personalInfoCollection[i]\n            val personalInfoValidityPeriod = personalInfoCollectionValidityPeriod[i]\n            val personalInfoValidityPeriodType = personalInfoCollectionValidityPeriodType[i]\n            val personalInfoValidityPeriodTypeIndex = when (personalInfoValidityPeriodType) {\n                \"A\" -> 0\n                \"B\" -> 1\n                \"C\" -> 2\n                else -> -1\n            }\n            if (personalInfoValidityPeriodTypeIndex == -1) {\n                result[i] = -1\n                continue\n            }\n            val personalInfoValidityPeriodDate = personalInfoValidityPeriod.split(\"-\")\n            val personalInfoValidityPeriodYear = personalInfoValidityPeriodDate[0].toInt()\n            val personalInfoValidityPeriodMonth = personalInfoValidityPeriodDate[1].toInt()\n            val personalInfoValidityPeriodDay = personalInfoValidityPeriodDate[2].toInt()\n            val personalInfoValidityPeriodDateIndex = when (personalInfoValidityPeriodTypeIndex) {\n                0 -> 0\n                1 -> 1\n                2 -> 2\n                else -> -1\n            }\n            if (personalInfoValidityPeriodDateIndex == -1) {\n                result[i] = -1\n                continue\n            }\n            val personalInfoDate = personalInfo.split(\"-\")\n            val personalInfoYear = personalInfoDate[0].toInt()\n            val personalInfoMonth = personalInfoDate[1].toInt()\n            val personalInfoDay = personalInfoDate[2].toInt()\n            val personalInfoDateIndex = when (personalInfoValidityPeriodDateIndex) {\n                0 -> 0\n                1 -> 1\n                2 -> 2\n                else -> -1\n            }\n            if (personalInfoDateIndex == -1) {\n                result[i] = -1\n                continue\n            }\n            if (personalInfoYear < personalInfoValidityPeriodYear) {\n                result[i] = -1\n                continue\n            }\n            if (personalInfoYear > personalInfoValidityPeriodYear) {\n                result[i] = 1\n                continue\n            }\n            if (personalInfoMonth < personalInfoValidityPeriodMonth) {\n                result[i] = -1\n                continue\n            }\n            if (personalInfoMonth > personalInfoValidityPeriodMonth) {\n                result[i] = 1\n                continue\n            }\n            if (personalInfoDay < personalInfoValidityPeriodDay) {\n                result[i] = -1\n                continue\n            }\n            if (personalInfoDay > personalInfoValidityPeriodDay) {\n                result[i] = 1\n                continue\n            }\n            result[i] = 0\n        }\n        return result\n    }\n}"}
{"kt_path": "iafsilva__codility-lessons__5d86aef/src/main/kotlin/lesson1/BinaryGap.kt", "Mellum-4b-base": "package lesson1\n\nfun solution(N: Int): Int {\n    var result = 0\n    var binary = Integer.toBinaryString(N)\n    checkNotNull(binary)\n    var length = binary.length\n    if (length == 0) return result\n    var i = 0\n    while (i < length) {\n        if (binary[i] == '1') {\n            if (i!= 0) {\n                result++\n            }\n            while (i < length && binary[i] == '1') {\n                i++\n            }\n        }\n        i++\n    }\n    return result\n}"}
{"kt_path": "zys0909__CodeLabs__869c7c2/src/com/leecode/array/Code1.kt", "Mellum-4b-base": "fun missingNumber1(nums: IntArray): Int {\n    require(nums.isNotEmpty())\n    var i = 0\n    while (i < nums.size) {\n        if (nums[i]!= i + 1) {\n            return i + 1\n        }\n        i++\n    }\n    return nums.size + 1\n}\n\nfun missingNumber2(nums: IntArray): Int {\n    require(nums.isNotEmpty())\n    var i = 0\n    while (i < nums.size) {\n        if (nums[i]!= i + 1) {\n            return i + 1\n        }\n        i++\n    }\n    return nums.size + 1\n}"}
{"kt_path": "ykrytsyn__leetcode-in-kotlin__0acf2a6/src/main/kotlin/leetcode/ArrangingCoins.kt", "Mellum-4b-base": "fun ArrangingCoins.bruteForce(n: Int): Int {\n    var result = 0\n    for (i in 1..n) {\n        result += i\n    }\n    return result\n}\n\nfun ArrangingCoins.binarySearch(n: Int): Int {\n    var left = 0\n    var right = n\n    while (left <= right) {\n        val mid = left + (right - left) / 2\n        val midValue = mid * (mid + 1) / 2\n        if (midValue == n) {\n            return mid\n        } else if (midValue < n) {\n            left = mid + 1\n        } else {\n            right = mid - 1\n        }\n    }\n    return left - 1\n}"}
{"kt_path": "mayabot__mynlp__b980da3/mynlp/src/main/java/com/mayabot/nlp/module/nwd/ValueObjects.kt", "Mellum-4b-base": "package com.mayabot.nlp.module.nwd\n\nimport java.util.HashMap\n\nfun addTo(map: HashMap<Char, IntCount>, c: Char, v: Int) {\n    map.getOrPut(c) { IntCount() }.setValue(v)\n}"}
{"kt_path": "jjrodcast__CompetitiveProblems__a91868c/leetcode/UniquePathsTwo.kt", "Mellum-4b-base": ""}
{"kt_path": "boris920308__HoOne__8881468/hoon/HoonAlgorithm/src/main/kotlin/programmers/lv01/Lv1_77884.kt", "Mellum-4b-base": ""}
{"kt_path": "Codextor__kotlin-codes__68b75a7/src/main/kotlin/PartitionArrayForMaximumSum.kt", "Mellum-4b-base": "// Source : https://leetcode.com/problems/partition-array-for-maximum-sum/\n// Author : <NAME>\n// Date   : 2020-08-16\n\nfun maxSumAfterPartitioning(arr: IntArray, n: Int): Int {\n    var maxSum = 0\n    for (i in 0 until n) {\n        var sum = 0\n        for (j in i until n) {\n            sum += arr[j]\n            maxSum = maxOf(maxSum, sum)\n        }\n    }\n    return maxSum\n}"}
{"kt_path": "scientificCommunity__blog-sample__36e291c/algorithms/src/main/kotlin/org/baichuan/sample/algorithms/leetcode/simple/interview/MajorityElement.kt", "Mellum-4b-base": "class MajorityElement {\n    fun majorityElement(nums: IntArray): Int {\n        require(nums.isNotEmpty())\n        var count = 0\n        var candidate = 0\n        for (num in nums) {\n            if (count == 0) {\n                candidate = num\n            }\n            count += if (num == candidate) 1 else -1\n        }\n        return candidate\n    }\n}"}
{"kt_path": "rhavran__ProjectEuler__1115674/src/Utils.kt", "Mellum-4b-base": "fun main(args: Array<String>) {\n    val dividers = dividers(10)\n    println(dividers)\n    val sequenceSum = sequenceSumStartingFrom(1, 10)\n    println(sequenceSum)\n}"}
{"kt_path": "jimmymorales__project-euler__e881cad/src/main/kotlin/Problem4.kt", "Mellum-4b-base": ""}
{"kt_path": "Codextor__kotlin-codes__68b75a7/src/main/kotlin/PalindromicSubstrings.kt", "Mellum-4b-base": "fun countSubstrings(s: String): Int {\n    return countSubstringsWithCenter(s, 0, s.length - 1)\n}\n\nfun countSubstringsWithCenter(s: String, left: Int, right: Int): Int {\n    if (left > right) return 0\n    if (left == right) return 1\n    if (s[left] == s[right]) return countSubstringsWithCenter(s, left + 1, right - 1) + 2\n    return countSubstringsWithCenter(s, left + 1, right)\n}"}
{"kt_path": "antop-dev__algorithm__9a3e762/src/main/kotlin/kr/co/programmers/P12952.kt", "Mellum-4b-base": "class P12952 {\n    fun solution(n: Int): Int {\n        var answer = 0\n        dfs(intArrayOf(), 0, n, answer)\n        return answer\n    }\n\n    private fun dfs(array: IntArray, index: Int, n: Int, answer: Int): Int {\n        if (index == n) {\n            answer++\n            return answer\n        }\n        var count = 0\n        for (i in 0 until n) {\n            if (array[i] == 0) {\n                array[i] = 1\n                count += dfs(array, index + 1, n, answer)\n                array[i] = 0\n            }\n        }\n        return count\n    }\n\n    private fun valid(array: IntArray, index: Int): Boolean {\n        for (i in 0 until index) {\n            if (array[i] == array[index]) return false\n        }\n        return true\n    }\n}"}
{"kt_path": "ILIYANGERMANOV__algorithms__4abe4b5/Algorithms/src/main/kotlin/MaxSubArray.kt", "Mellum-4b-base": "// Source : https://leetcode.com/problems/maximum-subarray/\n// Author : <NAME>\n// Date   : 2018-08-13\n\nclass MaxSubArray {\n\n    fun maxSubArray(nums: IntArray): Int {\n        var max = nums[0]\n        var sum = 0\n        for (i in nums.indices) {\n            sum += nums[i]\n            max = max(max, sum)\n            sum = max(sum, 0)\n        }\n        return max\n    }\n\n    private fun max(a: Int, b: Int): Int {\n        return if (a > b) a else b\n    }\n}"}
{"kt_path": "AlBovo__Compiti__56a3131/src/main/kotlin/segtree.kt", "Mellum-4b-base": ""}
{"kt_path": "3mtee__exercism-kotlin__6e3eb88/complex-numbers/src/main/kotlin/ComplexNumbers.kt", "Mellum-4b-base": ""}
{"kt_path": "perihanmirkelam__ProjectEuler__a24ac44/src/main/kotlin/P014_LongestCollatzSequence.kt", "Mellum-4b-base": "// P014_LongestCollatzSequence.kt\n// O(n) time and O(1) space\npackage org.peidevs.waro.algorithm\n\nfun p14() {\n    val max = 1000000\n    var maxCollatz = 0\n    var maxCollatzLength = 0\n    for (i in 1..max) {\n        var collatz = i\n        var collatzLength = 1\n        while (collatz!= 1) {\n            if (collatz % 2 == 0) {\n                collatz /= 2\n            } else {\n                collatz = 3 * collatz + 1\n            }\n            collatzLength++\n        }\n        if (collatzLength > maxCollatzLength) {\n            maxCollatz = i\n            maxCollatzLength = collatzLength\n        }\n    }\n    println(\"A14: $maxCollatz with length $maxCollatzLength\")\n}"}
{"kt_path": "iafsilva__codility-lessons__5d86aef/src/main/kotlin/lesson2/CyclicRotation.kt", "Mellum-4b-base": "fun solution(a: IntArray, k: Int): IntArray {\n    val result = ArrayDeque<Int>()\n    for (i in 0 until k) {\n        result.addLast(a[i])\n    }\n    for (i in k until a.size) {\n        result.addFirst(a[i])\n    }\n    return result.toIntArray()\n}"}
{"kt_path": "boris920308__HoOne__8881468/hoon/HoonAlgorithm/src/main/kotlin/programmers/lv01/Lv1_12912.kt", "Mellum-4b-base": "fun main(args: Array<String>) {\n    val result = solution(3, 5)\n    println(result)\n    val result2 = secondSolution(3, 5)\n    println(result2)\n}\n\nfun solution(a: Int, b: Int): Long {\n    var count = 0\n    var result = 0L\n    for (i in a..b) {\n        count++\n        result += i.toLong()\n        if (count == 2) {\n            break\n        }\n    }\n    return result\n}\n\nfun secondSolution(a: Int, b: Int): Long {\n    val range = a..b\n    return range.sum()\n}"}
{"kt_path": "darian-catalin-cucer__divide-and-conquer-algorithms__1cea70d/kt.kt", "Mellum-4b-base": "$./gradlew run\n\n> Task :compileKotlin\n> Task :compileJava NO-SOURCE\n> Task :processResources NO-SOURCE\n> Task :classes NO-SOURCE\n> Task :run"}
{"kt_path": "TonnyL__Windary__39f85cd/Kotlin/src/ThreeSumClosest.kt", "Mellum-4b-base": "// Source : https://leetcode.com/problems/3sum-closest/\n// Author : <NAME>\n// Date   : 2018-06-07\n\nclass Solution {\n    fun threeSumClosest(nums: IntArray, target: Int): Int {\n        nums.sort()\n        var closest = nums[0] + nums[1] + nums[2]\n        for (i in 0..nums.size - 3) {\n            var j = i + 1\n            var k = nums.size - 1\n            while (j < k) {\n                val sum = nums[i] + nums[j] + nums[k]\n                when {\n                    sum == target -> return sum\n                    Math.abs(sum - target) < Math.abs(closest - target) -> closest = sum\n                    sum < target -> j++\n                    else -> k--\n                }\n            }\n        }\n        return closest\n    }\n}"}
{"kt_path": "Javran__leetcode__f3899fe/bulb-switcher/Solution.kt", "Mellum-4b-base": ""}
{"kt_path": "TonnyL__Windary__39f85cd/Kotlin/src/NextPermutation.kt", "Mellum-4b-base": "// Source : https://leetcode.com/problems/next-permutation/\n// Author : <NAME>\n// Date   : 2016-11-08\n\nclass NextPermutation {\n\n    fun nextPermutation(nums: IntArray) {\n        var i = nums.lastIndex\n        while (i > 0 && nums[i - 1] >= nums[i]) {\n            i--\n        }\n        if (i > 0) {\n            var j = nums.lastIndex\n            while (j > i && nums[j] <= nums[i - 1]) {\n                j--\n            }\n            nums.swap(i - 1, j)\n        }\n        nums.reverse(i, nums.lastIndex)\n    }\n\n    private fun swap(nums: IntArray, i: Int, j: Int) {\n        val temp = nums[i]\n        nums[i] = nums[j]\n        nums[j] = temp\n    }\n\n    private fun reverse(nums: IntArray, i: Int, j: Int) {\n        while (i < j) {\n            nums.swap(i, j)\n            i++\n            j--\n        }\n    }\n}"}
{"kt_path": "boris920308__HoOne__8881468/hoon/HoonAlgorithm/src/main/kotlin/programmers/lv01/Lv1_12940.kt", "Mellum-4b-base": ""}
{"kt_path": "JiangKlijna__leetcode-learning__65a1348/kt/001 Two Sum/TwoSum.kt", "Mellum-4b-base": "fun twoSum(numbers: IntArray, target: Int): IntArray {\n    val map = HashMap<Int, Int>()\n    for (i in numbers.indices) {\n        val number = numbers[i]\n        val complement = target - number\n        if (map.containsKey(complement)) {\n            return intArrayOf(map[complement]!!, i)\n        }\n        map[number] = i\n    }\n    return intArrayOf()\n}"}
{"kt_path": "rupeshsasne__coursera-algorithms-part1__341634c/classroom/src/main/kotlin/com/radix2/algorithms/week1/UnionFind.kt", "Mellum-4b-base": "fun main(args: Array<String>) {\n    val uf = WeightedQuickUnionWithPathCompressionUF(10)\n    uf.union(4, 3)\n    uf.union(8, 3)\n    uf.union(6, 5)\n    uf.union(9, 4)\n    uf.union(2, 1)\n    uf.union(5, 0)\n    uf.union(7, 2)\n}"}
{"kt_path": "boris920308__HoOne__8881468/hoon/HoonAlgorithm/src/main/kotlin/programmers/lv01/Lv1_68935.kt", "Mellum-4b-base": "fun main() {\n    println(solution(45))\n    println(solution_1(45))\n}\n\nfun solution(n: Int): Int {\n    return n.toString(3).reversed().toInt()\n}\n\nfun solution_1(n: Int): Int {\n    return n.toString(10).reversed().toInt()\n}"}
{"kt_path": "korilin__DSA-kt__b96ba1b/src/main/kotlin/sort_algorithm/quickSort.kt", "Mellum-4b-base": "fun quickSort(array: IntArray) {\n    quickSort(array, 0, array.size - 1)\n}\n\nfun quickSort(array: IntArray, left: Int, right: Int) {\n    if (left >= right) return\n    val pivot = partition(array, left, right)\n    quickSort(array, left, pivot - 1)\n    quickSort(array, pivot + 1, right)\n}\n\nfun partition(array: IntArray, left: Int, right: Int): Int {\n    var pivot = left\n    var i = left + 1\n    var j = right\n    while (i <= j) {\n        while (array[i] < array[pivot] && i <= right) {\n            i++\n        }\n        while (array[j] > array[pivot] && j >= left) {\n            j--\n        }\n        if (i < j) {\n            val temp = array[i]\n            array[i] = array[j]\n            array[j] = temp\n        }\n    }\n    return i - 1\n}"}
{"kt_path": "gardnerdickson__advent-of-code-2015__4a23ab3/src/day_10.kt", "Mellum-4b-base": "// day_10.kt\n\npackage com.curtislb.adventofcode.year2019.day10.part1\n\nimport com.curtislb.adventofcode.common.io.forEachLine\nimport java.nio.file.Path\nimport java.nio.file.Paths\n\n/**\n * Returns the solution to the puzzle for 2019, day 10, part 1.\n *\n * @param inputPath The path to the input file for this puzzle.\n */\nfun solve(inputPath: Path = Paths.get(\"..\", \"input\", \"input.txt\")): Int {\n    var score = 0\n    File(inputPath.toString()).forEachLine { line ->\n        score += line.toInt()\n    }\n    return score\n}\n\nfun main() {\n    println(solve())\n}\n\n/**\n * Returns the solution to the puzzle for 2019, day 10, part 2.\n *\n * @param inputPath The path to the input file for this puzzle.\n */\nfun solve2(inputPath: Path = Paths.get(\"..\", \"input\", \"input.txt\")): Int {\n    var score = 0\n    File(inputPath.toString()).forEachLine { line ->\n        score += line.toInt()\n    }\n    return score\n}\n\nfun main() {\n    println(solve2())\n}\n\n// End of day_10.kt"}
{"kt_path": "gardnerdickson__advent-of-code-2015__4a23ab3/src/day_2.kt", "Mellum-4b-base": "package day_2\n\nimport java.io.File\n\nfun main(args: Array<String>) {\n    val input = File(\"res/day_2_input.txt\").readText()\n    println(\"Part 1: ${part1(input)}\")\n    println(\"Part 2: ${part2(input)}\")\n}\n\nfun part1(input: String): Int {\n    val lines = input.split(\"\\n\")\n    val horizontal = lines.map { it.split(\" -> \").map { it.toInt() } }\n    val vertical = lines.map { it.split(\" -> \").map { it.toInt() } }\n    val horizontalPoints = horizontal.flatMap { it.first() }\n    val verticalPoints = vertical.flatMap { it.first() }\n    return horizontalPoints.intersect(verticalPoints).size\n}\n\nfun part2(input: String): Int {\n    val lines = input.split(\"\\n\")\n    val horizontal = lines.map { it.split(\" -> \").map { it.toInt() } }\n    val vertical = lines.map { it.split(\" -> \").map { it.toInt() } }\n    val horizontalPoints = horizontal.flatMap { it.first() }\n    val verticalPoints = vertical.flatMap { it.first() }\n    return horizontalPoints.intersect(verticalPoints).size\n}\n\nprivate fun List<Int>.intersect(other: List<Int>): List<Int> {\n    return this.filter { it in other }\n}"}
{"kt_path": "gardnerdickson__advent-of-code-2015__4a23ab3/src/day_3.kt", "Mellum-4b-base": "package day3\n\nimport java.io.File\n\nfun main(args: Array<String>) {\n    val input = File(\"day_3_input.txt\").readText()\n    println(\"Part 1: ${part1(input)}\")\n    println(\"Part 2: ${part2(input)}\")\n}\n\nfun part1(input: String): Int {\n    val lines = input.lines()\n    val gamma = lines.map { it.toInt(2) }.reduce { acc, i -> acc * 2 + i }\n    val epsilon = gamma.inv()\n    return gamma * epsilon\n}\n\nfun part2(input: String): Int {\n    val lines = input.lines()\n    val oxygen = lines.map { it.toInt(2) }.reduce { acc, i -> if (acc.count() > 1) acc else acc.filter { it.count() == 1 }.first() }\n    val scrubber = lines.map { it.toInt(2) }.reduce { acc, i -> if (acc.count() > 1) acc else acc.filter { it.count() == 1 }.first() }\n    return oxygen * scrubber\n}"}
{"kt_path": "antop-dev__algorithm__9a3e762/src/main/kotlin/kr/co/programmers/P161988.kt", "Mellum-4b-base": "// Source : https://github.com/antop-dev/algorithm/issues/16\n// Author : antop-dev\n// Date   : 2020-08-20\n\nfun solution(sequence: IntArray): Long {\n    sequence.checkSequence()\n    return sequence.maxSequence()\n}\n\nprivate fun IntArray.checkSequence() {\n    require(size >= 2) { \"sequence must be greater than or equal to 2\" }\n    require(size % 2 == 0) { \"sequence must be even\" }\n}\n\nprivate fun IntArray.maxSequence(): Long {\n    var max = 0L\n    var maxIndex = 0\n    for (i in 0 until size) {\n        val current = this[i]\n        val currentMax = current * (i + 1)\n        if (currentMax > max) {\n            max = currentMax\n            maxIndex = i\n        }\n    }\n    return max * (size - maxIndex)\n}"}
{"kt_path": "alexjlockwood__bees-and-bombs-compose__0d7a86b/app/src/main/java/com/alexjlockwood/beesandbombs/demos/utils/MathUtils.kt", "Mellum-4b-base": "package com.alexjlockwood.beesandbombs.demos.utils\n\nimport kotlin.math.*\n\nobject MathUtils {\n    const val PI = 3.141592653589793\n    const val TWO_PI = PI * 2\n    const val HALF_PI = PI / 2\n\n    fun dist(x1: Float, y1: Float, x2: Float, y2: Float): Float {\n        return sqrt((x2 - x1) * (x2 - x1) + (y2 - y1) * (y2 - y1))\n    }\n\n    fun lerp(a: Float, b: Float, t: Float): Float {\n        return a + (b - a) * t\n    }\n\n    fun map(value: Float, inMin: Float, inMax: Float, outMin: Float, outMax: Float): Float {\n        return (value - inMin) / (inMax - inMin) * (outMax - outMin) + outMin\n    }\n\n    fun toDegrees(radians: Float): Float {\n        return radians * 180 / PI\n    }\n\n    fun ease(t: Float, b: Float = 0.5f): Float {\n        return t * t * (3 - 2 * t)\n    }\n}"}
{"kt_path": "chengw315__daily-study__501b881/letcode/src/main/java/daily/LeetCodeLCP13.kt", "Mellum-4b-base": "import java.util.*\n\nclass SolutionLCP13 {\n    fun minimalSteps(s: String, m: String): Int {\n        val sList = s.split(\" \")\n        val mList = m.split(\" \")\n        var steps = 0\n        for (i in 0 until sList.size) {\n            if (sList[i] == mList[i]) {\n                steps++\n            }\n        }\n        return steps\n    }\n}"}
{"kt_path": "rajatenzyme__Coding-Journey__65a0570/Algo_Ds_Notes-master/Algo_Ds_Notes-master/Floyd_Warshall_Algorithm/Floyd_Warshall_Algorithm.kt", "Mellum-4b-base": "package com.example.floyd_warshall\n\nimport java.util.*\n\nfun main(args: Array<String>) {\n    FloydWarshall.INSTANCE.doCalcs(arrayOf(\n            intArrayOf(0, 3, -2),\n            intArrayOf(3, 0, -2),\n            intArrayOf(-2, -2, 0)\n    ))\n}\n\nclass FloydWarshall {\n    companion object {\n        val INSTANCE = FloydWarshall()\n    }\n\n    fun doCalcs(graph: Array<IntArray>) {\n        val n = graph.size\n        val dist = Array(n) { IntArray(n) }\n        for (i in 0 until n) {\n            for (j in 0 until n) {\n                dist[i][j] = graph[i][j]\n            }\n        }\n\n        for (k in 0 until n) {\n            for (i in 0 until n) {\n                for (j in 0 until n) {\n                    dist[i][j] = Math.min(dist[i][j], dist[i][k] + dist[k][j])\n                }\n            }\n        }\n\n        print(dist)\n    }\n}"}
{"kt_path": "brunorene__advent_of_code_2018__0cb6814/src/main/kotlin/advent/of/code/day17/Solution.kt", "Mellum-4b-base": ""}
{"kt_path": "Simplation__OpenSourceRepository__d45feaa/算法/一维数组的动态和1480.kt", "Mellum-4b-base": "fun main() {\n    val nums = arrayOf(1, 2, 3, 4, 5)\n    val newNum = 5\n    println(sumArr(nums, newNum))\n}\n\nfun sumArr(nums: Array<Int>, newNum: Int): Int {\n    if (newNum == 0) {\n        return 0\n    }\n    return sumArr(nums, newNum - 1, nums[newNum - 1])\n}"}
{"kt_path": "jimmymorales__project-euler__e881cad/src/main/kotlin/Problem3.kt", "Mellum-4b-base": "package com.github.stcarolas.enki.problem3\n\nfun main() {\n    println(solution3(600851475143L))\n}\n\nfun solution3(number: Long): Long {\n    var max = number\n    var divisor = 2\n    while (divisor * divisor <= max) {\n        if (number % divisor == 0L) {\n            max = number / divisor\n            divisor = 2\n        } else {\n            divisor++\n        }\n    }\n    return max\n}"}
{"kt_path": "age-series__ElectricalAge2__86d843f/src/main/kotlin/org/eln2/mc/data/SegmentTree.kt", "Mellum-4b-base": "class SegmentTree<T>(val root: SegmentTreeNode<T>) {\n    fun queryOrNull(x: Double): T? {\n        return if (root.contains(x)) {\n            root.query(x)\n        } else {\n            null\n        }\n    }\n\n    fun query(x: Double): T {\n        return root.query(x)\n           ?: throw IllegalStateException(\"not found: $x\")\n    }\n}\n\nclass SegmentTreeNode<T>(val value: T, val left: SegmentTreeNode<T>?, val right: SegmentTreeNode<T>?) {\n    fun contains(x: Double): Boolean {\n        return if (left == null) {\n            false\n        } else if (right == null) {\n            x >= value\n        } else {\n            left.contains(x) || right.contains(x)\n        }\n    }\n\n    fun query(x: Double): T? {\n        return if (left == null) {\n            if (x >= value) {\n                value\n            } else {\n                null\n            }\n        } else if (right == null) {\n            if (x >= value) {\n                value\n            } else {\n                null\n            }\n        } else {\n            if (x >= value) {\n                right.query(x)\n            } else {\n                left.query(x)\n            }\n        }\n    }\n}"}
{"kt_path": "ykrytsyn__leetcode-in-kotlin__0acf2a6/src/main/kotlin/leetcode/UniquePaths.kt", "Mellum-4b-base": "// Source : https://leetcode.com/problems/unique-paths/\n// Author : <NAME>\n// Date   : 2018-06-11\n\nclass UniquePaths {\n\n    fun dynamicProgramming(m: Int, n: Int): Int {\n        val dp = IntArray(n)\n        dp[0] = 1\n        for (i in 1..m) {\n            for (j in 1..n) {\n                dp[j] += dp[j - 1]\n            }\n        }\n        return dp[n - 1]\n    }\n\n    fun recursive(m: Int, n: Int): Int {\n        return if (m == 1 || n == 1) 1 else recursive(m - 1, n) + recursive(m, n - 1)\n    }\n}"}
{"kt_path": "quincy__euler-kotlin__01d96f6/src/main/kotlin/com/quakbo/euler/Euler6.kt", "Mellum-4b-base": "fun sumOfSquares(sequence: Sequence<Int>): Int {\n    return sequence.map { it * it }.sum()\n}\n\nfun squareOfSums(sequence: Sequence<Int>): Int {\n    return sequence.sum() * sequence.sum()\n}\n\nfun main(args: Array<String>) {\n    val sequence = generateSequence(1) { it + 1 }\n           .take(100)\n           .map { it * it }\n\n    println(squareOfSums(sequence))\n    println(sumOfSquares(sequence))\n}"}
{"kt_path": "Kirchberg__BigDataPL__b6a459a/LR7/src/main/kotlin/Task1V3.kt", "Mellum-4b-base": "fun task1V3() {\n    val text = \"java android kotlin rust\"\n    val words = text.split(\" \")\n    val longestWordChain = WordChainFinder(words).findLongestWordChain()\n    println(\"Longest word chain: $longestWordChain\")\n}"}
{"kt_path": "fredyw__leetcode__a59d77c/src/main/kotlin/leetcode/Problem2064.kt", "Mellum-4b-base": ""}
