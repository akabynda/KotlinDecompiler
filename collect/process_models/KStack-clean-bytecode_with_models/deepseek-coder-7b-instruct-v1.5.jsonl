{"kt_path": "remisultan__multiarm-bandit-algorithm-kotlin__ead934d/core-bandit/src/main/kotlin/org/rsultan/bandit/algorithms/BanditAlgorithm.kt", "deepseek-coder-7b-instruct-v1.5": "interface BanditAlgorithm {\n    fun selectArm(): Int\n    fun update(arm: Int, reward: Float)\n}"}
{"kt_path": "n81ur3__kotlin-coding-challenges__fdc5941/src/main/kotlin/adventofcode2018/Day22ModeMaze.kt", "deepseek-coder-7b-instruct-v1.5": "class Day22ModeMaze {\n    constructor() {\n    }\n}"}
{"kt_path": "n81ur3__kotlin-coding-challenges__fdc5941/src/main/kotlin/adventofcode2017/Day21FractalArt.kt", "deepseek-coder-7b-instruct-v1.5": "class Day21FractalArt {\n    init {\n        // Initialization code here\n    }\n}"}
{"kt_path": "n81ur3__kotlin-coding-challenges__fdc5941/src/main/kotlin/adventofcode2017/Day03SpiralMemory.kt", "deepseek-coder-7b-instruct-v1.5": "class Day03SpiralMemory {\n    // No need to write anything here, as this class is empty\n}"}
{"kt_path": "n81ur3__kotlin-coding-challenges__fdc5941/src/main/kotlin/adventofcode2019/Day03CrossedWires.kt", "deepseek-coder-7b-instruct-v1.5": "class Day03CrossedWires {\n    constructor() {\n    }\n}"}
{"kt_path": "n81ur3__kotlin-coding-challenges__fdc5941/src/main/kotlin/adventofcode2018/Day04ReposeRecord.kt", "deepseek-coder-7b-instruct-v1.5": "class Day04ReposeRecord"}
{"kt_path": "n81ur3__kotlin-coding-challenges__fdc5941/src/main/kotlin/adventofcode2017/Day08LikeRegisters.kt", "deepseek-coder-7b-instruct-v1.5": "class Day08LikeRegisters {\n    init {\n        // No code here, just initialization\n    }\n}"}
{"kt_path": "n81ur3__kotlin-coding-challenges__fdc5941/src/main/kotlin/adventofcode2018/Day11ChronalCharge.kt", "deepseek-coder-7b-instruct-v1.5": "class Day11ChronalCharge {\n    // Kotlin code goes here\n}"}
{"kt_path": "n81ur3__kotlin-coding-challenges__fdc5941/src/main/kotlin/adventofcode2020/Day19MonsterMessage.kt", "deepseek-coder-7b-instruct-v1.5": "class Day19MonsterMessage {\n    constructor() {\n    }\n}"}
{"kt_path": "n81ur3__kotlin-coding-challenges__fdc5941/src/main/kotlin/adventofcode2017/Day07RecursiveCircus.kt", "deepseek-coder-7b-instruct-v1.5": "class Day07RecursiveCircus {\n    init {\n        // Initialization code here\n    }\n}"}
{"kt_path": "n81ur3__kotlin-coding-challenges__fdc5941/src/main/kotlin/adventofcode2019/Day12TheNbodyProblem.kt", "deepseek-coder-7b-instruct-v1.5": "class Day12TheNbodyProblem {\n    constructor() {\n    }\n}"}
{"kt_path": "n81ur3__kotlin-coding-challenges__fdc5941/src/main/kotlin/adventofcode2018/Day15BeverageBandits.kt", "deepseek-coder-7b-instruct-v1.5": "class Day15BeverageBandits {\n    constructor() {\n    }\n}"}
{"kt_path": "n81ur3__kotlin-coding-challenges__fdc5941/src/main/kotlin/adventofcode2020/Day07HandyHaversacks.kt", "deepseek-coder-7b-instruct-v1.5": "class Day07HandyHaversacks"}
{"kt_path": "n81ur3__kotlin-coding-challenges__fdc5941/src/main/kotlin/adventofcode2018/Day07TheSumOfItsParts.kt", "deepseek-coder-7b-instruct-v1.5": "class Day07TheSumOfItsParts {\n    init {\n        // Initialization code goes here\n    }\n}"}
{"kt_path": "n81ur3__kotlin-coding-challenges__fdc5941/src/main/kotlin/adventofcode2017/Day25TheHaltingProblem.kt", "deepseek-coder-7b-instruct-v1.5": "class Day25TheHaltingProblem {\n    constructor() {\n    }\n}"}
{"kt_path": "n81ur3__kotlin-coding-challenges__fdc5941/src/main/kotlin/adventofcode2019/Day06UniversalOrbitMap.kt", "deepseek-coder-7b-instruct-v1.5": "class Day06UniversalOrbitMap"}
{"kt_path": "n81ur3__kotlin-coding-challenges__fdc5941/src/main/kotlin/adventofcode2019/Day10MonitoringStation.kt", "deepseek-coder-7b-instruct-v1.5": "class Day10MonitoringStation {\n    // Empty class body\n}"}
{"kt_path": "n81ur3__kotlin-coding-challenges__fdc5941/src/main/kotlin/adventofcode2018/Day06ChronalCoordinates.kt", "deepseek-coder-7b-instruct-v1.5": "class Day06ChronalCoordinates {\n    constructor() {\n    }\n}"}
{"kt_path": "n81ur3__kotlin-coding-challenges__fdc5941/src/main/kotlin/adventofcode2020/Day21AllergenAssessment.kt", "deepseek-coder-7b-instruct-v1.5": "class Day21AllergenAssessment {\n    // No need to write anything here as the class is empty\n}"}
{"kt_path": "n81ur3__kotlin-coding-challenges__fdc5941/src/main/kotlin/adventofcode2017/Day24ElectromagneticMoat.kt", "deepseek-coder-7b-instruct-v1.5": "class Day24ElectromagneticMoat {\n    init {\n        println(\"Hello, World!\")\n    }\n}"}
{"kt_path": "n81ur3__kotlin-coding-challenges__fdc5941/src/main/kotlin/adventofcode2018/Day12SubterraneanSustainability.kt", "deepseek-coder-7b-instruct-v1.5": "class Day12SubterraneanSustainability {\n    constructor() {\n    }\n}"}
{"kt_path": "n81ur3__kotlin-coding-challenges__fdc5941/src/main/kotlin/adventofcode2018/Day23ExperimentalEmergencyTeleportation.kt", "deepseek-coder-7b-instruct-v1.5": "class Day23ExperimentalEmergencyTeleportation {\n    constructor() {\n    }\n}"}
{"kt_path": "alebedev__aoc2022__d6ba46b/src/main/kotlin/Map.kt", "deepseek-coder-7b-instruct-v1.5": "object MapKt {\n    fun main() {\n        AocMap.INSTANCE.solve()\n    }\n\n    @JvmStatic\n    fun main(args: Array<String>) {\n        main()\n    }\n}"}
{"kt_path": "andrewrlee__adventOfCode2020__a9c21a6/src/main/kotlin/File09.kt", "deepseek-coder-7b-instruct-v1.5": "class Challenge09 {\n    fun solve() {\n        // Your code here\n    }\n}\n\nfun main() {\n    val challenge09 = Challenge09()\n    challenge09.solve()\n}"}
{"kt_path": "andrewrlee__adventOfCode2020__a9c21a6/src/main/kotlin/File08.kt", "deepseek-coder-7b-instruct-v1.5": "class Challenge08 {\n    fun solve() {\n        // Your code here\n    }\n}\n\nfun main() {\n    val challenge08 = Challenge08()\n    challenge08.solve()\n}"}
{"kt_path": "andrewrlee__adventOfCode2020__a9c21a6/src/main/kotlin/File02.kt", "deepseek-coder-7b-instruct-v1.5": "class Challenge02 {\n    fun solve() {\n        // Your code here\n    }\n}\n\nfun main() {\n    val challenge02 = Challenge02()\n    challenge02.solve()\n}"}
{"kt_path": "andrewrlee__adventOfCode2020__a9c21a6/src/main/kotlin/File07.kt", "deepseek-coder-7b-instruct-v1.5": "class Challenge07 {\n    fun solve() {\n        // Your code here\n    }\n}\n\nfun main() {\n    val challenge07 = Challenge07()\n    challenge07.solve()\n}"}
{"kt_path": "charlesfranciscodev__codingame__3ec8060/puzzles/kotlin/src/war/war.kt", "deepseek-coder-7b-instruct-v1.5": "class Game {\n    fun play() {\n        // Implement the game logic here\n    }\n}\n\nfun main(args: Array<String>) {\n    val game = Game()\n    game.play()\n}"}
{"kt_path": "al-volkov__spbu_2020_kotlin_homeworks__5049681/src/main/kotlin/homework_5/Task1.kt", "deepseek-coder-7b-instruct-v1.5": "fun sum(a: Int, b: Int): Int {\n    return a + b\n}"}
{"kt_path": "iafsilva__codility-lessons__5d86aef/src/main/kotlin/lesson3/FrogJmp.kt", "deepseek-coder-7b-instruct-v1.5": "class FrogJmp {\n    fun solution(x: Int, y: Int, d: Int): Int {\n        val distance = y - x\n        val jumps = distance / d\n        return if (distance % d == 0) jumps else jumps + 1\n    }\n}"}
{"kt_path": "mikhalchenko-alexander__advent-of-kotlin-2018-week1__c483ade/src/main/kotlin/com/anahoret/pathfinding/MarkingWayOnMap.kt", "deepseek-coder-7b-instruct-v1.5": "fun addPath(map: String): String {\n    return Graph.INSTANCE.getMapWithPath(map)\n}"}
{"kt_path": "charlesfranciscodev__codingame__3ec8060/puzzles/kotlin/src/surface/surface.kt", "deepseek-coder-7b-instruct-v1.5": "val LAND = 'L'\nval WATER = 'W'\nconst val DEFAULT_INDEX = 0\n\nfun main(args: Array<String>) {\n    val grid = Grid()\n    grid.readGameInput()\n    grid.test()\n}"}
{"kt_path": "andrew-suprun__AoC-2023__dd5f53e/src/main/kotlin/day03_oop/day03_oop.kt", "deepseek-coder-7b-instruct-v1.5": "package day03_oop\n\nclass Part1(val data: String) {\n    fun run() {\n        // implementation\n    }\n}\n\nclass Part2(val data: String) {\n    fun run() {\n        // implementation\n    }\n}\n\nfun main() {\n    val part1 = Part1(\"input.data\")\n    part1.run()\n\n    val part2 = Part2(\"input.data\")\n    part2.run()\n}"}
{"kt_path": "getnahid__programing-problem-solves-kotlin__589c392/CyclicRotation.kt", "deepseek-coder-7b-instruct-v1.5": "fun solution(a: IntArray, k: Int): IntArray {\n    val n = a.size\n    val b = IntArray(n)\n    for (i in 0 until n) {\n        b[(i + k) % n] = a[i]\n    }\n    return b\n}"}
{"kt_path": "linisme__LeetCodeInKotlin__4382afc/LongestPalindrome.kt", "deepseek-coder-7b-instruct-v1.5": "class LongestPalindromeSolution {\n    fun longestPalindrome(s: String): String {\n        val n = s.length\n        val dp = Array(n) { BooleanArray(n) }\n        var ans = \"\"\n        for (len in 1..n) {\n            for (i in 0 until n - len + 1) {\n                val j = i + len - 1\n                if (len == 1) {\n                    dp[i][j] = true\n                } else if (len == 2) {\n                    dp[i][j] = (s[i] == s[j])\n                } else {\n                    dp[i][j] = (s[i] == s[j] && dp[i + 1][j - 1])\n                }\n                if (dp[i][j] && len > ans.length) {\n                    ans = s.substring(i, j + 1)\n                }\n            }\n        }\n        return ans\n    }\n}\n\nfun main(args: Array<String>) {\n    val solution = LongestPalindromeSolution()\n    val s = \"abbccbbdl\"\n    val result = solution.longestPalindrome(s)\n    println(result)\n}"}
{"kt_path": "iafsilva__codility-lessons__5d86aef/src/main/kotlin/lesson2/OddOccurrencesInArray.kt", "deepseek-coder-7b-instruct-v1.5": "fun solution(A: IntArray): Int {\n    var result = 0\n    for (number in A) {\n        result = result xor number\n    }\n    return result\n}"}
{"kt_path": "jjeda__playground__5d1ee6c/src/oop/algorithm/ProgressionNextNumber.kt", "deepseek-coder-7b-instruct-v1.5": "class ProgressionNextNumber {\n    fun solution(numbers: IntArray): Int {\n        val helper = ProgressionHelper(numbers.toList())\n        return helper.nextInt()\n    }\n}"}
{"kt_path": "linisme__LeetCodeInKotlin__4382afc/LengthOfLongestSubstring.kt", "deepseek-coder-7b-instruct-v1.5": "fun main(args: Array<String>) {\n    val solution = LengthOfLongestSubstringSolution2()\n    val length = solution.lengthOfLongestSubstring(\"abba\")\n    println(length)\n}\n\nclass LengthOfLongestSubstringSolution2 {\n    fun lengthOfLongestSubstring(s: String): Int {\n        var maxLength = 0\n        var startIndex = 0\n        val charMap = HashMap<Char, Int>()\n\n        for ((index, char) in s.withIndex()) {\n            if (charMap.containsKey(char) && charMap[char]!! >= startIndex) {\n                maxLength = maxOf(maxLength, index - startIndex)\n                startIndex = charMap[char]!! + 1\n            }\n            charMap[char] = index\n        }\n\n        return maxOf(maxLength, s.length - startIndex)\n    }\n}"}
{"kt_path": "nschulzke__mancala-puzzle-solver__b130d3b/src/main/kotlin/Main.kt", "deepseek-coder-7b-instruct-v1.5": "val mancalaIndices: Set<Int> by lazy {\n    setOf(6, 13)\n}"}
{"kt_path": "sysion__DataStructureAlgorithmKt__6f9afda/TwoSumLessThanTarget.kt", "deepseek-coder-7b-instruct-v1.5": "fun main() {\n    val intArray = intArrayOf(10, 20, 30)\n    val target = 15\n    println(SumTwoNumbersLessThanTarget(intArray, target))\n}\n\nfun SumTwoNumbersLessThanTarget(intArray: IntArray, target: Int): Int {\n    var result = Int.MIN_VALUE\n    for (i in 0 until intArray.size) {\n        for (j in i + 1 until intArray.size) {\n            val sum = intArray[i] + intArray[j]\n            if (sum < target && sum > result) {\n                result = sum\n            }\n        }\n    }\n    return result\n}"}
{"kt_path": "linisme__LeetCodeInKotlin__4382afc/FineMedianSortedArrays.kt", "deepseek-coder-7b-instruct-v1.5": "class FindMedianSortedArraysSolution {\n    fun findMedianSortedArrays(nums1: IntArray, nums2: IntArray): Double {\n        val merged = IntArray(nums1.size + nums2.size)\n        System.arraycopy(nums1, 0, merged, 0, nums1.size)\n        System.arraycopy(nums2, 0, merged, nums1.size, nums2.size)\n        Arrays.sort(merged)\n        return if (merged.size % 2 == 0) (merged[merged.size / 2 - 1].toDouble() + merged[merged.size / 2].toDouble()) / 2\n        else merged[merged.size / 2].toDouble()\n    }\n}\n\nfun main(args: Array<String>) {\n    val solution = FindMedianSortedArraysSolution()\n    val nums1 = intArrayOf(2, 3)\n    val nums2 = intArrayOf(1)\n    val median = solution.findMedianSortedArrays(nums1, nums2)\n    println(median)\n}"}
{"kt_path": "n81ur3__kotlin-coding-challenges__fdc5941/src/main/kotlin/adventofcode2018/Day18SettlersOfTheNorthPole.kt", "deepseek-coder-7b-instruct-v1.5": "import java.util.*\n\nfun hash(list: List<List<AreaElement>>): Int {\n    val collection = list as Collection<*>\n    var result = 0\n    val array = collection.toArray(arrayOfNulls<Any>(collection.size))\n    result = Arrays.deepHashCode(array as Array<Any>)\n    return result\n}\n\nclass Day18SettlersOfTheNorthPole"}
{"kt_path": "iafsilva__codility-lessons__5d86aef/src/main/kotlin/lesson3/PermMissingElem.kt", "deepseek-coder-7b-instruct-v1.5": "fun solution(A: IntArray): Int {\n    val a = A.toMutableList()\n    a.sort()\n    for (i in 0 until a.size) {\n        if (a[i] != i + 1) {\n            return i + 1\n        }\n    }\n    return a.size + 1\n}"}
{"kt_path": "getnahid__programing-problem-solves-kotlin__589c392/OddOccurrencesInArray.kt", "deepseek-coder-7b-instruct-v1.5": "fun solution(array: IntArray): Int {\n    array.sort()\n    val n = array.size\n    var result = 0\n    var i = 0\n    while (i < n) {\n        if (i + 1 == n || array[i] != array[i + 1]) {\n            result = array[i]\n            break\n        }\n        i += 2\n    }\n    return result\n}"}
{"kt_path": "rupeshsasne__coursera-algorithms-part1__341634c/classroom/src/main/kotlin/com/radix2/algorithms/week3/SortingLinkedList.kt", "deepseek-coder-7b-instruct-v1.5": "fun main(args: Array<String>) {\n    val list = LinkedList()\n    var i = 0\n    while (i < 11) {\n        list.add(i)\n        i++\n    }\n    list.reverseRecursive()\n    println(list)\n}"}
{"kt_path": "boris920308__HoOne__8881468/hoon/HoonAlgorithm/src/main/kotlin/boj/week02/recursive_function/FibonacciSequence5.kt", "deepseek-coder-7b-instruct-v1.5": "import java.util.Scanner\n\nfun main() {\n    val scanner = Scanner(System.`in`)\n    val number = scanner.nextInt()\n    println(fibonacci(number))\n}\n\nfun fibonacci(n: Int): Int {\n    return if (n > 1) fibonacci(n - 1) + fibonacci(n - 2) else n\n}"}
{"kt_path": "Codextor__kotlin-codes__68b75a7/src/main/kotlin/PerfectSquares.kt", "deepseek-coder-7b-instruct-v1.5": ""}
{"kt_path": "Laomedeia__Java8InAction__0dcd843/src/main/java/leetcode/a167_twoSumInputSortArray_SIMPLE/Solution.kt", "deepseek-coder-7b-instruct-v1.5": "class Solution {\n    fun twoSum(numbers: IntArray, target: Int): IntArray {\n        var i = 0\n        var j = numbers.size - 1\n        while (i < j) {\n            val sum = numbers[i] + numbers[j]\n            if (sum == target) {\n                return intArrayOf(i + 1, j + 1)\n            } else if (sum < target) {\n                i++\n            } else {\n                j--\n            }\n        }\n        return intArrayOf()\n    }\n}"}
{"kt_path": "ariannysOronoz__tutorialKotlin__a779f54/CombinacionesPalabras/src/main/java/Main.kt", "deepseek-coder-7b-instruct-v1.5": "import com.includehelp.basic.Permutation\n\nfun main(args: Array<String>) {\n    val permutation = Permutation()\n    val str = \"CARACOL\"\n    val length = str.length\n    permutation.findPermutation(str, 0, length)\n    println()\n    val str2 = \"caracol\"\n    val length2 = str2.length\n    permutation.findPermutation(str2, 0, length2)\n}"}
{"kt_path": "scientificCommunity__blog-sample__36e291c/algorithms/src/main/kotlin/org/baichuan/sample/algorithms/leetcode/middle/MaxArea.kt", "deepseek-coder-7b-instruct-v1.5": "fun maxArea(height: IntArray): Int {\n    var maxArea = 0\n    var left = 0\n    var right = height.size - 1\n\n    while (left < right) {\n        val currentArea = (right - left) * minOf(height[left], height[right])\n        maxArea = maxOf(maxArea, currentArea)\n\n        if (height[left] < height[right]) {\n            left++\n        } else {\n            right--\n        }\n    }\n\n    return maxArea\n}"}
{"kt_path": "boris920308__HoOne__8881468/hoon/HoonAlgorithm/src/main/kotlin/programmers/lv01/Lv1_70128.kt", "deepseek-coder-7b-instruct-v1.5": "fun main() {\n    val arr = intArrayOf(1, 2, 3, 4)\n    val arr2 = intArrayOf(-3, -1, 0, 2)\n    val result = solution(arr, arr2)\n    println(result)\n}\n\nfun solution(arr1: IntArray, arr2: IntArray): Int {\n    var sum = 0\n    for (i in arr1.indices) {\n        sum += arr1[i] * arr2[i]\n    }\n    return sum\n}"}
{"kt_path": "kotler-dev__kotlin-leetcode__0659e72/src/main/kotlin/exercise/easy/id121/Solution121.kt", "deepseek-coder-7b-instruct-v1.5": "fun maxProfit(prices: IntArray): Int {\n    var maxProfit = 0\n    var minPrice = Int.MAX_VALUE\n    var i = 0\n    while (i < prices.size) {\n        if (prices[i] < minPrice) {\n            minPrice = prices[i]\n        } else if (prices[i] - minPrice > maxProfit) {\n            maxProfit = prices[i] - minPrice\n        }\n        i++\n    }\n    return maxProfit\n}"}
{"kt_path": "marc-bouvier-katas__Kotlin_EduTools_Advent_of_Code_2021__12cf74c/Day 5/Part 1/src/Task.kt", "deepseek-coder-7b-instruct-v1.5": "fun overlaps(ventsLines: Array<String>): Int {\n    val lines = Lines()\n    for (i in 0 until ventsLines.size) {\n        val lineOfVent = LineOfVent.Companion.fromString(ventsLines[i])\n        lines.mergeWith(lineOfVent)\n    }\n    return lines.overlaps()\n}"}
{"kt_path": "Laomedeia__Java8InAction__0dcd843/src/main/java/leetcode/a392_isSubSequence_HARD/Solution.kt", "deepseek-coder-7b-instruct-v1.5": "fun isSubsequence(s: String?, t: String?): Boolean {\n    if (s == null || s.isEmpty()) return true\n    if (t == null) return false\n    var i = 0\n    var j = 0\n    while (i < s.length && j < t.length) {\n        if (s[i] == t[j]) i++\n        j++\n    }\n    return i == s.length\n}"}
{"kt_path": "nickperov__Algorithms__6696f5d/fibonacci/src/main/kotlin/com/nickperov/stud/algorithms/fibonacci/FibonacciLargeGenerator.kt", "deepseek-coder-7b-instruct-v1.5": "import java.math.BigInteger\n\nfun main() {\n    println(\"Hello, large Fibonacci numbers\")\n    val fibonacciGenerator = FibonacciLargeTailRecursiveOptimisedGenerator()\n    println(fibonacciGenerator.calculate(1000000))\n}\n\nabstract class FibonacciLargeGenerator {\n    constructor()\n\n    abstract fun calculate(n: Int): BigInteger\n}"}
{"kt_path": "TonnyL__Windary__39f85cd/Kotlin/src/UniqueBinarySearchTrees.kt", "deepseek-coder-7b-instruct-v1.5": "fun numTrees(n: Int): Int {\n    if (n <= 1) return n\n    val dp = IntArray(n + 1)\n    dp[0] = 1\n    dp[1] = 1\n    for (i in 2..n) {\n        var sum = 0\n        for (j in 0 until i) {\n            sum += dp[j] * dp[i - j - 1]\n        }\n        dp[i] = sum\n    }\n    return dp[n]\n}"}
{"kt_path": "quincy__euler-kotlin__01d96f6/src/main/kotlin/com/quakbo/euler/Euler4.kt", "deepseek-coder-7b-instruct-v1.5": "fun isPalindrome(n: Int): Boolean {\n    val str = n.toString()\n    val reversedStr = str.reversed()\n    return str == reversedStr\n}\n\nfun main(args: Array<String>) {\n    var i = 999\n    var j = 899\n    while (i >= 999) {\n        while (j >= 899) {\n            val product = i * j\n            if (isPalindrome(product)) {\n                println(product)\n            }\n            j--\n        }\n        i--\n        j = 899\n    }\n}"}
{"kt_path": "getupminaaa__Algorithm__01187e2/Algorithm/src/main/kotlin/programmers/level1/personalInfoCollectionValidityPeriod.kt", "deepseek-coder-7b-instruct-v1.5": "fun main() {\n    val solution = Solution()\n    val array1 = arrayOf(\"A 6\", \"B 12\", \"C 3\")\n    val array2 = arrayOf(\"2021.05.02 A\", \"2021.07.01 B\", \"2022.02.19 C\", \"2022.02.20 C\")\n    val result = solution.solution(\"2022.05.19\", array1, array2)\n    println(result.contentToString())\n}"}
{"kt_path": "iafsilva__codility-lessons__5d86aef/src/main/kotlin/lesson1/BinaryGap.kt", "deepseek-coder-7b-instruct-v1.5": "class BinaryGap {\n    fun solution(N: Int): Int {\n        var result = 0\n        var currentGap = 0\n        var lastOnePosition = -1\n        var binaryString = Integer.toBinaryString(N)\n\n        for (i in 0 until binaryString.length) {\n            val char = binaryString[i]\n            if (char == '1') {\n                if (lastOnePosition != -1) {\n                    currentGap = i - lastOnePosition - 1\n                    if (currentGap > result) {\n                        result = currentGap\n                    }\n                }\n                lastOnePosition = i\n            }\n        }\n        return result\n    }\n}"}
{"kt_path": "zys0909__CodeLabs__869c7c2/src/com/leecode/array/Code1.kt", "deepseek-coder-7b-instruct-v1.5": "fun missingNumber1(nums: IntArray): Int {\n    var missing = 0\n    var index = 0\n    nums.forEach {\n        if (it != missing) return missing\n        missing++\n        index++\n    }\n    return missing\n}\n\nfun missingNumber2(nums: IntArray): Int {\n    var missing = 0\n    val length = nums.size\n    val lastElement = nums[length - 1]\n    if (lastElement != length) return lastElement + 1\n    for (i in 0 until length - 1) {\n        if (nums[i] != i) {\n            missing = i\n            break\n        }\n    }\n    return missing\n}"}
{"kt_path": "ykrytsyn__leetcode-in-kotlin__0acf2a6/src/main/kotlin/leetcode/ArrangingCoins.kt", "deepseek-coder-7b-instruct-v1.5": "class ArrangingCoins {\n    fun bruteForce(n: Int): Int {\n        var n = n\n        var count = 0\n        while (n > 0) {\n            n -= ++count\n        }\n        return count\n    }\n\n    fun binarySearch(n: Int): Int {\n        var left = 0L\n        var right = n.toLong()\n        while (left <= right) {\n            val mid = (left + right) / 2\n            val sum = mid * (mid + 1) / 2\n            if (sum == n.toLong()) {\n                return mid.toInt()\n            } else if (sum < n.toLong()) {\n                left = mid + 1\n            } else {\n                right = mid - 1\n            }\n        }\n        return right.toInt()\n    }\n}"}
{"kt_path": "mayabot__mynlp__b980da3/mynlp/src/main/java/com/mayabot/nlp/module/nwd/ValueObjects.kt", "deepseek-coder-7b-instruct-v1.5": "import java.util.HashMap\n\nfun addTo(map: HashMap<Char, IntCount>, char: Char, value: Int) {\n    val key = char\n    var count = 0\n    val existing = map[key]\n    if (existing != null) {\n        count = existing.value\n    }\n    val newCount = IntCount(count + value)\n    map[key] = newCount\n}\n\nclass IntCount(var value: Int = 0)"}
{"kt_path": "jjrodcast__CompetitiveProblems__a91868c/leetcode/UniquePathsTwo.kt", "deepseek-coder-7b-instruct-v1.5": "class Solution {\n    fun uniquePathsWithObstacles(obstacleGrid: Array<IntArray>): Int {\n        val m = obstacleGrid.size\n        val n = obstacleGrid[0].size\n        val dp = Array(m) { IntArray(n) }\n        dp[0][0] = if (obstacleGrid[0][0] == 0) 1 else 0\n        for (i in 0 until m) {\n            for (j in 0 until n) {\n                if (obstacleGrid[i][j] == 1) {\n                    dp[i][j] = 0\n                    continue\n                }\n                if (i > 0) dp[i][j] += dp[i - 1][j]\n                if (j > 0) dp[i][j] += dp[i][j - 1]\n            }\n        }\n        return dp[m - 1][n - 1]\n    }\n}\n\nfun main() {\n    val solution = Solution()\n    val obstacleGrid = arrayOf(intArrayOf(0, 0, 0), intArrayOf(0, 1, 0), intArrayOf(0, 0, 0))\n    val result = solution.uniquePathsWithObstacles(obstacleGrid)\n    println(result)\n}"}
{"kt_path": "boris920308__HoOne__8881468/hoon/HoonAlgorithm/src/main/kotlin/programmers/lv01/Lv1_77884.kt", "deepseek-coder-7b-instruct-v1.5": "fun main() {\n    solution(13, 17)\n}\n\nprivate fun solution(n: Int, m: Int): Int {\n    var sum = 0\n    var i = n\n    while (i <= m) {\n        if (countDivisors(i) % 2 == 0) {\n            sum += i\n        } else {\n            sum -= i\n        }\n        i++\n    }\n    println(sum)\n    return sum\n}\n\nprivate fun countDivisors(n: Int): Int {\n    var count = 0\n    var i = 1\n    while (i * i <= n) {\n        if (n % i == 0) {\n            if (n / i == i) {\n                count += 1\n            } else {\n                count += 2\n            }\n        }\n        i++\n    }\n    return count\n}"}
{"kt_path": "Codextor__kotlin-codes__68b75a7/src/main/kotlin/PartitionArrayForMaximumSum.kt", "deepseek-coder-7b-instruct-v1.5": "fun maxSumAfterPartitioning(arr: IntArray, k: Int): Int {\n    val n = arr.size\n    val dp = IntArray(n + 1)\n    dp[0] = 0\n    for (i in 1..n) {\n        var maxVal = arr[i - 1]\n        for (j in 1..k) {\n            if (i - j >= 0) {\n                maxVal = maxOf(maxVal, arr[i - j])\n                dp[i] = maxOf(dp[i], dp[i - j] + maxVal * j)\n            }\n        }\n    }\n    return dp[n]\n}"}
{"kt_path": "scientificCommunity__blog-sample__36e291c/algorithms/src/main/kotlin/org/baichuan/sample/algorithms/leetcode/simple/interview/MajorityElement.kt", "deepseek-coder-7b-instruct-v1.5": "fun majorityElement(nums: IntArray): Int {\n    var count = 0\n    var candidate = 0\n\n    for (num in nums) {\n        if (count == 0) {\n            candidate = num\n        }\n        count += if (num == candidate) 1 else -1\n    }\n\n    return candidate\n}"}
{"kt_path": "rhavran__ProjectEuler__1115674/src/Utils.kt", "deepseek-coder-7b-instruct-v1.5": "fun dividers(n: Long): Long {\n    var result = 1L\n    val primeFactorization = PrimeFactorization.INSTANCE\n    val primeFactors = primeFactorization.primeFactors(n)\n    val iterator = primeFactors.entries.iterator()\n    while (iterator.hasNext()) {\n        val entry = iterator.next()\n        result *= (entry.value.toLong() + 1)\n    }\n    return result\n}\n\nfun sequenceSumStartingFrom(start: Long, end: Long): Long {\n    return sumFromTo(start, end)\n}\n\nfun sumFromTo(start: Long, end: Long): Long {\n    val range = end - start + 1\n    return (range / 2.0 * (start.toDouble() + end)).toLong()\n}"}
{"kt_path": "jimmymorales__project-euler__e881cad/src/main/kotlin/Problem4.kt", "deepseek-coder-7b-instruct-v1.5": "fun main() {\n    val largestPalindrome = largestPalindrome()\n    println(largestPalindrome)\n}\n\nfun largestPalindrome(): Int {\n    var max = 0\n    var i = 999\n    while (i > 99) {\n        var j = 999\n        while (j >= i) {\n            val product = i * j\n            if (product > max && isPalindrome(product)) {\n                max = product\n            }\n            j--\n        }\n        i--\n    }\n    return max\n}\n\nfun isPalindrome(n: Int): Boolean {\n    val reversed = reverse(n)\n    return n == reversed\n}\n\nfun reverse(n: Int): Int {\n    var number = n\n    var reversed = 0\n    while (number > 0) {\n        reversed = reversed * 10 + number % 10\n        number /= 10\n    }\n    return reversed\n}"}
{"kt_path": "Codextor__kotlin-codes__68b75a7/src/main/kotlin/PalindromicSubstrings.kt", "deepseek-coder-7b-instruct-v1.5": "fun countSubstrings(s: String): Int {\n    var count = 0\n    var center = 0\n    while (center < s.length) {\n        count += countSubstringsWithCenter(s, center, center)\n        count += countSubstringsWithCenter(s, center, center + 1)\n        center++\n    }\n    return count\n}\n\nprivate fun countSubstringsWithCenter(s: String, left: Int, right: Int): Int {\n    var count = 0\n    while (left >= 0 && right < s.length) {\n        if (s[left] != s[right]) break\n        count++\n        left--\n        right++\n    }\n    return count\n}"}
{"kt_path": "antop-dev__algorithm__9a3e762/src/main/kotlin/kr/co/programmers/P12952.kt", "deepseek-coder-7b-instruct-v1.5": "class P12952 {\n    fun solution(n: Int): Int {\n        val arr = IntArray(n)\n        var result = 0\n        dfs(arr, 0, result)\n        return result\n    }\n\n    private fun dfs(arr: IntArray, index: Int, result: Int): Int {\n        if (index == arr.size) {\n            result++\n            return result\n        }\n        arr[index] = 0\n        if (valid(arr, index)) {\n            result = dfs(arr, index + 1, result)\n        }\n        arr[index] = 1\n        if (valid(arr, index)) {\n            result = dfs(arr, index + 1, result)\n        }\n        return result\n    }\n\n    private fun valid(arr: IntArray, index: Int): Boolean {\n        for (i in 0 until index) {\n            if (Math.abs(index - i) == Math.abs(arr[index] - arr[i])) {\n                return false\n            }\n        }\n        return true\n    }\n}"}
{"kt_path": "ILIYANGERMANOV__algorithms__4abe4b5/Algorithms/src/main/kotlin/MaxSubArray.kt", "deepseek-coder-7b-instruct-v1.5": "fun maxSubArray(nums: IntArray): Int {\n    val len = nums.size\n    var max = nums[0]\n    var currentSum = nums[0]\n\n    for (i in 1 until len) {\n        currentSum = maxOf(nums[i], currentSum + nums[i])\n        max = maxOf(max, currentSum)\n    }\n\n    return max\n}"}
{"kt_path": "AlBovo__Compiti__56a3131/src/main/kotlin/segtree.kt", "deepseek-coder-7b-instruct-v1.5": "class SegmentTree(private val arr: Array<Int>) {\n    fun getSum(l: Int, r: Int): Int {\n        var l = l\n        var r = r\n        var sum = 0\n        for (i in l..r) {\n            sum += arr[i]\n        }\n        return sum\n    }\n}\n\nfun main() {\n    val arr = arrayOf(2, 4, 2, 1, 3, 4, 5)\n    val segmentTree = SegmentTree(arr)\n    val sum = segmentTree.getSum(0, 4)\n    print(sum)\n}"}
{"kt_path": "3mtee__exercism-kotlin__6e3eb88/complex-numbers/src/main/kotlin/ComplexNumbers.kt", "deepseek-coder-7b-instruct-v1.5": "import kotlin.math.*\n\nclass ComplexNumber(val real: Double, val imag: Double) {\n    operator fun times(other: ComplexNumber): ComplexNumber {\n        val realPart = this.real * other.real - this.imag * other.imag\n        val imagPart = this.real * other.imag + this.imag * other.real\n        return ComplexNumber(realPart, imagPart)\n    }\n}\n\nfun exponential(c: ComplexNumber): ComplexNumber {\n    if (c.real == 0.0) {\n        return ComplexNumber(1, 0)\n    } else {\n        val euler = exp(c.real)\n        val realPart = euler * cos(c.imag)\n        val imagPart = euler * sin(c.imag)\n        return ComplexNumber(realPart, imagPart)\n    }\n}\n\nfun main() {\n    val c = ComplexNumber(1.0, 2.0)\n    val result = exponential(c)\n    println(\"The exponential of ${c.real} + ${c.imag}i is ${result.real} + ${result.imag}i\")\n}"}
{"kt_path": "perihanmirkelam__ProjectEuler__a24ac44/src/main/kotlin/P014_LongestCollatzSequence.kt", "deepseek-coder-7b-instruct-v1.5": "fun p14() {\n    var longestChainLength = 0L\n    var longestStartingNumber = 0\n    var max = 1000000\n    var currentNumber = 0\n\n    while (currentNumber < max) {\n        var number = currentNumber.toLong()\n        var chainLength = 1L\n\n        while (number != 1L) {\n            if (number % 2 == 0L) {\n                number /= 2\n            } else {\n                number = number * 3 + 1\n            }\n            chainLength++\n        }\n\n        if (chainLength > longestChainLength) {\n            longestChainLength = chainLength\n            longestStartingNumber = currentNumber\n        }\n\n        currentNumber++\n    }\n\n    println(\"A14: $longestStartingNumber\")\n}"}
{"kt_path": "iafsilva__codility-lessons__5d86aef/src/main/kotlin/lesson2/CyclicRotation.kt", "deepseek-coder-7b-instruct-v1.5": "class CyclicRotation {\n    fun solution(a: IntArray, k: Int): IntArray {\n        if (a.isEmpty() || k % a.size == 0) return a\n        val deque = ArrayDeque<Int>()\n        a.forEach { deque.add(it) }\n        repeat(k % a.size) {\n            deque.addFirst(deque.removeLast())\n        }\n        return deque.toTypedArray()\n    }\n}"}
{"kt_path": "boris920308__HoOne__8881468/hoon/HoonAlgorithm/src/main/kotlin/programmers/lv01/Lv1_12912.kt", "deepseek-coder-7b-instruct-v1.5": "fun main() {\n    println(solution(3, 5))\n    println(solution(3, 3))\n    println(solution(5, 3))\n}\n\nprivate fun solution(a: Int, b: Int): Long {\n    var sum = 0L\n    var i = a\n    while (i <= b) {\n        sum += i.toLong()\n        i++\n    }\n    return sum\n}\n\nfun main(args: Array<String>) {\n    main()\n}"}
{"kt_path": "darian-catalin-cucer__divide-and-conquer-algorithms__1cea70d/kt.kt", "deepseek-coder-7b-instruct-v1.5": "fun quickSort(arr: IntArray, low: Int, high: Int) {\n    if (low < high) {\n        val pi = partition(arr, low, high)\n        quickSort(arr, low, pi - 1)\n        quickSort(arr, pi + 1, high)\n    }\n}\n\nfun partition(arr: IntArray, low: Int, high: Int): Int {\n    val pivot = arr[high]\n    var i = low - 1\n    for (j in low until high) {\n        if (arr[j] < pivot) {\n            i++\n            arr[i] = arr[j].also { arr[j] = arr[i] }\n        }\n    }\n    arr[i + 1] = arr[high].also { arr[high] = arr[i + 1] }\n    return i + 1\n}"}
{"kt_path": "TonnyL__Windary__39f85cd/Kotlin/src/ThreeSumClosest.kt", "deepseek-coder-7b-instruct-v1.5": "fun threeSumClosest(nums: IntArray, target: Int): Int {\n    nums.sort()\n    var result = nums[0] + nums[1] + nums[2]\n    var minDiff = Int.MAX_VALUE\n\n    for (i in nums.indices) {\n        var left = i + 1\n        var right = nums.size - 1\n\n        while (left < right) {\n            val sum = nums[i] + nums[left] + nums[right]\n            val diff = Math.abs(sum - target)\n\n            if (diff < minDiff) {\n                minDiff = diff\n                result = sum\n            }\n\n            if (sum < target) {\n                left++\n            } else {\n                right--\n            }\n        }\n    }\n\n    return result\n}"}
{"kt_path": "Javran__leetcode__f3899fe/bulb-switcher/Solution.kt", "deepseek-coder-7b-instruct-v1.5": "fun bulbSwitch(n: Int): Int {\n    return Math.floor(Math.sqrt(n.toDouble())).toInt()\n}\n\nobject Solution {\n    @JvmStatic\n    fun main(args: Array<String>) {\n        val result = bulbSwitch(10)\n        println(result)\n    }\n}"}
{"kt_path": "TonnyL__Windary__39f85cd/Kotlin/src/NextPermutation.kt", "deepseek-coder-7b-instruct-v1.5": "class NextPermutation {\n    fun nextPermutation(nums: IntArray) {\n        val n = nums.size - 2\n        var i = n\n        while (i >= 0 && nums[i] >= nums[i + 1]) i--\n        if (i >= 0) {\n            var j = nums.size - 1\n            while (j >= 0 && nums[j] <= nums[i]) j--\n            swap(nums, i, j)\n        }\n        reverse(nums, i + 1, nums.size - 1)\n    }\n\n    private fun swap(nums: IntArray, i: Int, j: Int) {\n        val temp = nums[i]\n        nums[i] = nums[j]\n        nums[j] = temp\n    }\n\n    private fun reverse(nums: IntArray, i: Int, j: Int) {\n        var start = i\n        var end = j\n        while (start < end) {\n            swap(nums, start, end)\n            start++\n            end--\n        }\n    }\n}"}
{"kt_path": "boris920308__HoOne__8881468/hoon/HoonAlgorithm/src/main/kotlin/programmers/lv01/Lv1_12940.kt", "deepseek-coder-7b-instruct-v1.5": "fun main() {\n    val result = solution(3, 12)\n    println(result.joinToString(\" \"))\n}\n\nfun solution(n: Int, m: Int): List<Int> {\n    val arr = IntArray(2)\n    arr[0] = 0\n    arr[1] = 0\n    val list = arr.toList()\n    println(list)\n\n    val gcd = findGCD(n, m)\n    val lcm = findLCM(n, m)\n\n    return listOf(gcd, lcm)\n}\n\nfun findGCD(a: Int, b: Int): Int {\n    return if (b != 0) findGCD(b, a % b) else a\n}\n\nfun findLCM(a: Int, b: Int): Int {\n    return (a * b) / findGCD(a, b)\n}"}
{"kt_path": "JiangKlijna__leetcode-learning__65a1348/kt/001 Two Sum/TwoSum.kt", "deepseek-coder-7b-instruct-v1.5": "fun twoSum(numbers: IntArray, target: Int): IntArray? {\n    val map = HashMap<Int, Int>()\n    for ((index, number) in numbers.withIndex()) {\n        val complement = target - number\n        map[complement]?.let {\n            return intArrayOf(it, index)\n        }\n        map[number] = index\n    }\n    return null\n}"}
{"kt_path": "rupeshsasne__coursera-algorithms-part1__341634c/classroom/src/main/kotlin/com/radix2/algorithms/week1/UnionFind.kt", "deepseek-coder-7b-instruct-v1.5": "import kotlin.test.assertEquals\n\nclass WeightedQuickUnionWithPathCompressionUF(val size: Int) {\n    val id = IntArray(size)\n    val sz = IntArray(size)\n\n    init {\n        for (i in 0 until size) {\n            id[i] = i\n            sz[i] = 1\n        }\n    }\n\n    fun root(i: Int): Int {\n        var root = i\n        while (root != id[root]) {\n            id[root] = id[id[root]] // path compression\n            root = id[root]\n        }\n        return root\n    }\n\n    fun connected(p: Int, q: Int): Boolean {\n        return root(p) == root(q)\n    }\n\n    fun union(p: Int, q: Int) {\n        val i = root(p)\n        val j = root(q)\n        if (i == j) return\n        if (sz[i] < sz[j]) {\n            id[i] = j\n            sz[j] += sz[i]\n        } else {\n            id[j] = i\n            sz[i] += sz[j]\n        }\n    }\n}\n\nfun main(args: Array<String>) {\n    val uf = WeightedQuickUnionWithPathCompressionUF(10)\n    uf.union(4, 3)\n    uf.union(3, 8)\n    uf.union(6, 5)\n    uf.union(9, 4)\n    uf.union(2, 1)\n    uf.union(5, 0)\n    uf.union(7, 2)\n    uf.union(6, 1)\n    uf.union(7, 3)\n}"}
{"kt_path": "boris920308__HoOne__8881468/hoon/HoonAlgorithm/src/main/kotlin/programmers/lv01/Lv1_68935.kt", "deepseek-coder-7b-instruct-v1.5": "fun main() {\n    println(solution(45))\n}\n\nprivate fun solution(n: Int): Int {\n    val toString = n.toString()\n    val reversed = toString.reversed()\n    return reversed.toInt()\n}\n\nprivate fun solution_1(n: Int): Int {\n    val toString = n.toString()\n    val reversed = toString.reversed()\n    return reversed.toInt(10)\n}"}
{"kt_path": "korilin__DSA-kt__b96ba1b/src/main/kotlin/sort_algorithm/quickSort.kt", "deepseek-coder-7b-instruct-v1.5": "fun quickSort(array: IntArray) {\n    checkNotNull(array)\n    quickSortInner(array, 0, array.size - 1)\n}\n\nprivate fun quickSortInner(array: IntArray, low: Int, high: Int) {\n    if (low < high) {\n        val pi = partition(array, low, high)\n        quickSortInner(array, low, pi - 1)\n        quickSortInner(array, pi + 1, high)\n    }\n}\n\nprivate fun partition(array: IntArray, low: Int, high: Int): Int {\n    val pivot = array[high]\n    var i = low - 1\n    for (j in low until high) {\n        if (array[j] < pivot) {\n            i++\n            val temp = array[i]\n            array[i] = array[j]\n            array[j] = temp\n        }\n    }\n    val temp = array[i + 1]\n    array[i + 1] = array[high]\n    array[high] = temp\n    return i + 1\n}"}
{"kt_path": "gardnerdickson__advent-of-code-2015__4a23ab3/src/day_10.kt", "deepseek-coder-7b-instruct-v1.5": "fun main(args: Array<String>) {\n    val input = \"1113222113\"\n    val part1 = Day10().part1(input)\n    println(\"Part 1: $part1\")\n    val part2 = Day10().part2(input)\n    println(\"Part 2: $part2\")\n}\n\nclass Day10 {\n    fun part1(input: String): Int {\n        var result = input\n        repeat(40) {\n            result = lookAndSay(result)\n        }\n        return result.length\n    }\n\n    fun part2(input: String): Int {\n        var result = input\n        repeat(50) {\n            result = lookAndSay(result)\n        }\n        return result.length\n    }\n\n    private fun lookAndSay(input: String): String {\n        var result = \"\"\n        var currentChar = input[0]\n        var currentCount = 1\n        for (i in 1 until input.length) {\n            if (input[i] == currentChar) {\n                currentCount++\n            } else {\n                result += \"$currentCount$currentChar\"\n                currentChar = input[i]\n                currentCount = 1\n            }\n        }\n        result += \"$currentCount$currentChar\"\n        return result\n    }\n}"}
{"kt_path": "gardnerdickson__advent-of-code-2015__4a23ab3/src/day_2.kt", "deepseek-coder-7b-instruct-v1.5": "import java.io.File\n\nfun main(args: Array<String>) {\n    val fileName = \"res/day_2_input.txt\"\n    val day2 = Day2()\n    val part1Result = day2.part1(fileName)\n    println(\"Part 1: $part1Result\")\n    val part2Result = day2.part2(fileName)\n    println(\"Part 2: $part2Result\")\n}\n\nclass Day2 {\n    fun part1(fileName: String): Int {\n        val file = File(fileName)\n        val lines = file.readLines()\n        // Implement part 1 logic here\n        return 0\n    }\n\n    fun part2(fileName: String): Int {\n        val file = File(fileName)\n        val lines = file.readLines()\n        // Implement part 2 logic here\n        return 0\n    }\n}"}
{"kt_path": "gardnerdickson__advent-of-code-2015__4a23ab3/src/day_3.kt", "deepseek-coder-7b-instruct-v1.5": "import java.io.File\n\nfun main(args: Array<String>) {\n    val fileName = \"res/day_3_input.txt\"\n    val day3 = Day3()\n    val part1Result = day3.part1(fileName)\n    println(\"Part 1: $part1Result\")\n    val part2Result = day3.part2(fileName)\n    println(\"Part 2: $part2Result\")\n}\n\nclass Day3 {\n    fun part1(fileName: String): Int {\n        val file = File(fileName)\n        val lines = file.readLines()\n        var count = 0\n        for (line in lines) {\n            val middle = line.length / 2\n            val firstHalf = line.substring(0 until middle)\n            val secondHalf = line.substring(middle until line.length)\n            val common = firstHalf.toSet().intersect(secondHalf.toSet())\n            count += common.map { getPriority(it) }.sum()\n        }\n        return count\n    }\n\n    fun part2(fileName: String): Int {\n        val file = File(fileName)\n        val lines = file.readLines()\n        var count = 0\n        for (i in 0 until lines.size step 3) {\n            val common = lines[i].toSet().intersect(lines[i + 1].toSet()).intersect(lines[i + 2].toSet())\n            count += common.map { getPriority(it) }.sum()\n        }\n        return count\n    }\n\n    private fun getPriority(item: Char): Int {\n        return if (item.isLowerCase()) item - 'a' + 1 else item - 'A' + 27\n    }\n}"}
{"kt_path": "antop-dev__algorithm__9a3e762/src/main/kotlin/kr/co/programmers/P161988.kt", "deepseek-coder-7b-instruct-v1.5": "class P161988 {\n    fun solution(sequence: IntArray): Long {\n        val max1 = max(sequence, 1)\n        val max2 = max(sequence, -1)\n        return Math.max(max1, max2)\n    }\n\n    private fun max(sequence: IntArray, direction: Int): Long {\n        val len = sequence.size\n        val result = LongArray(len)\n        var currentMax = 0L\n        var index = 0\n        while (index < len) {\n            result[index] = currentMax\n            currentMax += sequence[index] * direction\n            index++\n        }\n        return result[0]\n    }\n}"}
{"kt_path": "alexjlockwood__bees-and-bombs-compose__0d7a86b/app/src/main/java/com/alexjlockwood/beesandbombs/demos/utils/MathUtils.kt", "deepseek-coder-7b-instruct-v1.5": "const val PI: Float = 3.141592653589793f\nconst val TWO_PI: Float = 6.283185307179586f\nconst val HALF_PI: Float = 1.5707963267948966f\n\nfun dist(x1: Float, y1: Float, x2: Float, y2: Float): Float {\n    val dx = x2 - x1\n    val dy = y2 - y1\n    return Math.sqrt((dx * dx + dy * dy).toDouble()).toFloat()\n}\n\nfun lerp(start: Float, stop: Float, amt: Float): Float {\n    return start + (stop - start) * amt\n}\n\nfun map(value: Float, start1: Float, stop1: Float, start2: Float, stop2: Float): Float {\n    val mappedValue = (value - start1) / (stop1 - start1) * (stop2 - start2) + start2\n    return mappedValue\n}\n\nfun toDegrees(radians: Float): Float {\n    return radians * (180f / PI)\n}\n\nfun ease(x: Float): Float {\n    return 3f * x * x * x * (x * (6f * x * x * x * x - 15f * x * x * x + 10f * x * x) - 1f)\n}\n\nfun ease(x: Float, amp: Float): Float {\n    return if (x < 0.5f) {\n        amp * 2f * x * x * x * (3f * x * x - 2f * x * x * x)\n    } else {\n        amp * (1f - 2f * (x - 1f) * (x - 1f) * (x - 1f) * (3f * x - 5f * x * x + 2f * x * x * x))\n    }\n}"}
{"kt_path": "chengw315__daily-study__501b881/letcode/src/main/java/daily/LeetCodeLCP13.kt", "deepseek-coder-7b-instruct-v1.5": "class SolutionLCP13 {\n    fun minimalSteps(arr: Array<String>): Int {\n        val n = arr.size\n        val dp = Array(n) { IntArray(n) { Int.MAX_VALUE } }\n        val pos = HashMap<Char, IntArray>()\n\n        for (i in 0 until n) {\n            for (j in 0 until arr[i].length) {\n                val c = arr[i][j]\n                pos.getOrPut(c) { IntArray(2) }.apply {\n                    this[0] = i\n                    this[1] = j\n                }\n            }\n        }\n\n        for ((_, indices) in pos) {\n            indices.sort()\n        }\n\n        for (i in 0 until n) {\n            for (j in 0 until n) {\n                if (i == j) {\n                    dp[i][j] = 0\n                } else {\n                    for ((_, indices) in pos) {\n                        var min = Int.MAX_VALUE\n                        for (k in 1 until indices.size) {\n                            val dist = Math.abs(indices[k - 1] - indices[k])\n                            min = min.coerceAtMost(dist + dp[indices[k - 1]][j] + dp[indices[k]][i])\n                        }\n                        dp[i][j] = dp[j][i].coerceAtMost(min)\n                    }\n                }\n            }\n        }\n\n        return dp[0][n - 1]\n    }\n}\n\nfun main() {\n    val solution = SolutionLCP13()\n    val arr = arrayOf(\"S#O\", \"M.#\", \"M.T\")\n    println(solution.minimalSteps(arr))\n\n    val arr2 = arrayOf(\"S#O\", \"M.T\", \"M..\")\n    println(solution.minimalSteps(arr2))\n\n    val arr3 = arrayOf(\"S#O\", \"M.#\", \"M.T\")\n    println(solution.minimalSteps(arr3))\n}"}
{"kt_path": "rajatenzyme__Coding-Journey__65a0570/Algo_Ds_Notes-master/Algo_Ds_Notes-master/Floyd_Warshall_Algorithm/Floyd_Warshall_Algorithm.kt", "deepseek-coder-7b-instruct-v1.5": "fun main(args: Array<String>) {\n    val array = Array(5) { IntArray(4) }\n    array[0] = intArrayOf(1, 3, -2, Int.MAX_VALUE)\n    array[1] = intArrayOf(2, 1, 4, Int.MAX_VALUE)\n    array[2] = intArrayOf(3, 3, 3, Int.MAX_VALUE)\n    array[3] = intArrayOf(4, 2, -1, Int.MAX_VALUE)\n    array[4] = intArrayOf(3, 2, Int.MAX_VALUE, Int.MAX_VALUE)\n    FloydWarshall.INSTANCE.doCalcs(array, 4)\n}\n\nclass FloydWarshall {\n    companion object {\n        val INSTANCE = FloydWarshall()\n    }\n\n    fun doCalcs(array: Array<IntArray>, n: Int) {\n        for (k in 0 until n) {\n            for (i in 0 until n) {\n                for (j in 0 until n) {\n                    array[i][j] = minOf(array[i][j], array[i][k] + array[k][j])\n                }\n            }\n        }\n    }\n}"}
{"kt_path": "brunorene__advent_of_code_2018__0cb6814/src/main/kotlin/advent/of/code/day17/Solution.kt", "deepseek-coder-7b-instruct-v1.5": "import java.io.File\nimport kotlin.text.Regex\n\nval input = File(\"day17.txt\")\nval multipleCoord = Regex(\"(x|y)=([.0-9]+)\\\\.\\\\.([.0-9]+)\")\nval oneCoord = Regex(\"(x|y)=([.0-9]+)\")\n\nfun part1() {\n    val underground = Underground(input)\n    println(underground.getClay())\n    return 1\n}\n\nfun part2(): Int {\n    return 2\n}\n\ninit {\n    input = File(\"day17.txt\")\n    multipleCoord = Regex(\"(x|y)=([.0-9]+)\\\\.\\\\.([.0-9]+)\")\n    oneCoord = Regex(\"(x|y)=([.0-9]+)\")\n}"}
{"kt_path": "Simplation__OpenSourceRepository__d45feaa/算法/一维数组的动态和1480.kt", "deepseek-coder-7b-instruct-v1.5": "fun main() {\n    val nums = intArrayOf(1, 1, 1, 1, 1)\n    val newNum = IntArray(nums.size)\n    newNum[0] = nums[0]\n    for (i in 1 until nums.size) {\n        newNum[i] = newNum[i - 1] + nums[i]\n    }\n    println(newNum.joinToString())\n}\n\nfun sumArr(nums: IntArray, newNum: IntArray, i: Int): Int {\n    if (i == 0) {\n        newNum[0] = nums[0]\n        return newNum[0]\n    } else {\n        newNum[i] = sumArr(nums, newNum, i - 1) + nums[i]\n        return newNum[i]\n    }\n}"}
{"kt_path": "jimmymorales__project-euler__e881cad/src/main/kotlin/Problem3.kt", "deepseek-coder-7b-instruct-v1.5": "fun main() {\n    val result = solution3(600851475143L)\n    println(result)\n}\n\nprivate fun solution3(n: Long): Long {\n    var num = n\n    var factor = 2L\n    while (num % factor == 0L) {\n        num /= factor\n    }\n    while (factor <= num) {\n        if (num % factor == 0L) {\n            num /= factor\n            while (num % factor == 0L) {\n                num /= factor\n            }\n        } else {\n            factor += 1\n        }\n    }\n    return factor\n}"}
{"kt_path": "age-series__ElectricalAge2__86d843f/src/main/kotlin/org/eln2/mc/data/SegmentTree.kt", "deepseek-coder-7b-instruct-v1.5": "class SegmentTree<T>(val root: SegmentTreeNode<T>) {\n    fun queryOrNull(value: Double): T? {\n        return if (root.contains(value)) {\n            root.query(value) as T\n        } else {\n            null\n        }\n    }\n\n    fun query(value: Double): T {\n        val result = queryOrNull(value)\n        if (result != null) {\n            return result\n        } else {\n            throw IllegalStateException(\"${value} not found\")\n        }\n    }\n}"}
{"kt_path": "ykrytsyn__leetcode-in-kotlin__0acf2a6/src/main/kotlin/leetcode/UniquePaths.kt", "deepseek-coder-7b-instruct-v1.5": "class UniquePaths {\n    fun dynamicProgramming(m: Int, n: Int): Int {\n        val dp = Array(m) { IntArray(n) }\n        for (i in 0 until m) {\n            for (j in 0 until n) {\n                if (i == 0 || j == 0) {\n                    dp[i][j] = 1\n                } else {\n                    dp[i][j] = dp[i - 1][j] + dp[i][j - 1]\n                }\n            }\n        }\n        return dp[m - 1][n - 1]\n    }\n\n    fun recursive(m: Int, n: Int): Int {\n        if (m == 1 || n == 1) return 1\n        return recursive(m - 1, n) + recursive(m, n - 1)\n    }\n}"}
{"kt_path": "quincy__euler-kotlin__01d96f6/src/main/kotlin/com/quakbo/euler/Euler6.kt", "deepseek-coder-7b-instruct-v1.5": "fun sumOfSquares(sequence: Sequence<Int>): Int = sequence.map { it * it }.sum()\n\nfun squareOfSums(sequence: Sequence<Int>): Int = sequence.sum().let { it * it }\n\nfun main(args: Array<String>) {\n    val sequence = generateSequence(1) { it + 1 }.take(100)\n    val sumOfSquares = sumOfSquares(sequence)\n    val squareOfSums = squareOfSums(sequence)\n    val result = squareOfSums - sumOfSquares\n    println(result)\n}"}
{"kt_path": "Kirchberg__BigDataPL__b6a459a/LR7/src/main/kotlin/Task1V3.kt", "deepseek-coder-7b-instruct-v1.5": "fun task1V3() {\n    val str = \"java android kotlin rust\"\n    val words = str.split(\" \").toMutableList()\n    val wordChainFinder = WordChainFinder(words)\n    val longestWordChain = wordChainFinder.findLongestWordChain()\n    val result = longestWordChain.joinToString(\", \")\n    println(\"Longest word chain: $result\")\n}"}
{"kt_path": "fredyw__leetcode__a59d77c/src/main/kotlin/leetcode/Problem2064.kt", "deepseek-coder-7b-instruct-v1.5": "class Problem2064 {\n    fun minimizedMaximum(n: Int, quantities: IntArray): Int {\n        var max = 1\n        var min = quantities[0]\n        for (quantity in quantities) {\n            max = maxOf(max, quantity)\n            min = minOf(min, quantity)\n        }\n        var left = min\n        var right = max\n        while (left < right) {\n            val mid = left + (right - left) / 2\n            var total = 0\n            for (quantity in quantities) {\n                total += (quantity + mid - 1) / mid\n            }\n            if (total > n) {\n                left = mid + 1\n            } else {\n                right = mid\n            }\n        }\n        return left\n    }\n\n    private fun canDistribute(n: Int, quantities: IntArray, max: Int): Boolean {\n        var total = 0\n        for (quantity in quantities) {\n            total += (quantity + max - 1) / max\n        }\n        return total <= n\n    }\n}"}
