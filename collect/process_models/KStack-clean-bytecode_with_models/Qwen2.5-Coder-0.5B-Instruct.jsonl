{"kt_path": "remisultan__multiarm-bandit-algorithm-kotlin__ead934d/core-bandit/src/main/kotlin/org/rsultan/bandit/algorithms/BanditAlgorithm.kt", "Qwen2.5-Coder-0.5B-Instruct": "// BanditAlgorithm.kt\n\ninterface BanditAlgorithm {\n    fun selectArm(): Int\n    fun update(arm: Int, reward: Float)\n}"}
{"kt_path": "n81ur3__kotlin-coding-challenges__fdc5941/src/main/kotlin/adventofcode2018/Day22ModeMaze.kt", "Qwen2.5-Coder-0.5B-Instruct": "package adventofcode2018\n\nfun main() {\n    val day22ModeMaze = Day22ModeMaze()\n    println(day22ModeMaze)\n}"}
{"kt_path": "n81ur3__kotlin-coding-challenges__fdc5941/src/main/kotlin/adventofcode2017/Day21FractalArt.kt", "Qwen2.5-Coder-0.5B-Instruct": "package adventofcode2017\n\nfun main() {\n    val day21FractalArt = Day21FractalArt()\n    println(day21FractalArt)\n}"}
{"kt_path": "n81ur3__kotlin-coding-challenges__fdc5941/src/main/kotlin/adventofcode2017/Day03SpiralMemory.kt", "Qwen2.5-Coder-0.5B-Instruct": "package adventofcode2017\n\nfun main() {\n    val day03SpiralMemory = Day03SpiralMemory()\n    println(day03SpiralMemory)\n}"}
{"kt_path": "n81ur3__kotlin-coding-challenges__fdc5941/src/main/kotlin/adventofcode2019/Day03CrossedWires.kt", "Qwen2.5-Coder-0.5B-Instruct": "package adventofcode2019\n\nobject Day03CrossedWires {\n    fun main() {\n        println(\"Hello, World!\")\n    }\n}"}
{"kt_path": "n81ur3__kotlin-coding-challenges__fdc5941/src/main/kotlin/adventofcode2018/Day04ReposeRecord.kt", "Qwen2.5-Coder-0.5B-Instruct": "package adventofcode2018\n\nfun main() {\n    val day04ReposeRecord = Day04ReposeRecord()\n    println(day04ReposeRecord)\n}"}
{"kt_path": "n81ur3__kotlin-coding-challenges__fdc5941/src/main/kotlin/adventofcode2017/Day08LikeRegisters.kt", "Qwen2.5-Coder-0.5B-Instruct": "package adventofcode2017\n\nfun main() {\n    val day08LikeRegisters = Day08LikeRegisters()\n    println(day08LikeRegisters)\n}"}
{"kt_path": "n81ur3__kotlin-coding-challenges__fdc5941/src/main/kotlin/adventofcode2018/Day11ChronalCharge.kt", "Qwen2.5-Coder-0.5B-Instruct": "package adventofcode2018\n\nfun main() {\n    val day11ChronalCharge = Day11ChronalCharge()\n    println(day11ChronalCharge)\n}"}
{"kt_path": "n81ur3__kotlin-coding-challenges__fdc5941/src/main/kotlin/adventofcode2020/Day19MonsterMessage.kt", "Qwen2.5-Coder-0.5B-Instruct": "import java.io.Serializable\n\ndata class Day19MonsterMessage(val message: String) : Serializable {\n    companion object {\n        val serialVersionUID = 1L\n    }\n}"}
{"kt_path": "n81ur3__kotlin-coding-challenges__fdc5941/src/main/kotlin/adventofcode2017/Day07RecursiveCircus.kt", "Qwen2.5-Coder-0.5B-Instruct": "package adventofcode2017\n\nfun main() {\n    val day07RecursiveCircus = Day07RecursiveCircus()\n    println(day07RecursiveCircus)\n}"}
{"kt_path": "n81ur3__kotlin-coding-challenges__fdc5941/src/main/kotlin/adventofcode2019/Day12TheNbodyProblem.kt", "Qwen2.5-Coder-0.5B-Instruct": "package adventofcode2019\n\nobject Day12TheNbodyProblem {\n    fun main() {\n        println(\"Hello, World!\")\n    }\n}"}
{"kt_path": "n81ur3__kotlin-coding-challenges__fdc5941/src/main/kotlin/adventofcode2018/Day15BeverageBandits.kt", "Qwen2.5-Coder-0.5B-Instruct": "import java.io.File\n\nfun main() {\n    val file = File(\"Day15BeverageBandits.kt\")\n    val reader = FileReader(file)\n    val content = reader.readText()\n    val kotlinCode = compileKotlin(content)\n    println(kotlinCode)\n}\n\nfun compileKotlin(code: String): String {\n    val kotlinSource = \"\"\"\n        package adventofcode2018.Day15BeverageBandits\n\n        import java.io.File\n\n        fun main() {\n            val file = File(\"Day15BeverageBandits.kt\")\n            val reader = FileReader(file)\n            val content = reader.readText()\n            val kotlinCode = compileKotlin(content)\n            println(kotlinCode)\n        }\n\n        fun compileKotlin(code: String): String {\n            val kotlinSource = \"\"\"\n                package adventofcode2018.Day15BeverageBandits\n\n                import java.io.File\n\n                fun main() {\n                    val file = File(\"Day15BeverageBandits.kt\")\n                    val reader = FileReader(file)\n                    val content = reader.readText()\n                    val kotlinCode = compileKotlin(content)\n                    println(kotlinCode)\n                }\n\n                fun compileKotlin(code: String): String {\n                    val kotlinSource = \"\"\"\n                        package adventofcode2018.Day15BeverageBandits\n\n                        import java.io.File\n\n                        fun main() {\n                            val file = File(\"Day15BeverageBandits.kt\")\n                            val reader = FileReader(file)\n                            val content = reader.readText()\n                            val kotlinCode = compileKotlin(content)\n                            println(kotlinCode)\n                        }\n\n                        fun compileKotlin(code: String): String {\n                            val kotlinSource = \"\"\"\n                                package adventofcode2018.Day15BeverageBandits\n\n                                import java.io.File\n\n                                fun main() {\n                                    val file = File(\"Day15BeverageBandits.kt\")\n                                    val reader = FileReader(file)\n                                    val content = reader.readText()\n                                    val kotlinCode = compileKotlin(content)\n                                    println(kotlinCode)\n                                }\n\n                                fun compileKotlin(code: String): String {\n                                    val kotlinSource = \"\"\"\n                                        package adventofcode2018.Day15BeverageBandits\n\n                                        import java.io.File\n\n                                        fun main() {\n                                            val file = File(\"Day15BeverageBandits.kt\")\n                                            val reader = FileReader(file)\n                                            val content = reader.readText()\n                                            val kotlinCode = compileKotlin(content)\n                                            println(kotlinCode)\n                                        }\n\n                                        fun compileKotlin(code: String): String {\n                                            val kotlinSource = \"\"\"\n                                                package adventofcode2018.Day15BeverageBandits\n\n                                                import java.io.File\n\n                                                fun main() {\n                                                    val file = File(\"Day15BeverageBandits.kt\")\n                                                    val reader = FileReader(file)\n                                                    val content = reader.readText()\n                                                    val kotlinCode = compileKotlin(content)\n                                                    println(kotlinCode)\n                                                }\n\n                                                fun compileKotlin(code: String): String {\n                                                    val kotlinSource = \"\"\"\n                                                        package adventofcode2018.Day15BeverageBandits\n\n                                                        import java.io.File\n\n                                                        fun main() {\n                                                            val file = File(\"Day15BeverageBandits.kt\")\n                                                            val reader = FileReader(file)\n                                                            val content = reader.readText()\n                                                            val kotlinCode = compileKotlin(content)\n                                                            println(kotlinCode)\n                                                        }\n\n                                                        fun compileKotlin(code: String): String {\n                                                            val kotlinSource = \"\"\"\n                                                                package adventofcode2018.Day15BeverageBandits\n\n                                                                import java.io.File\n\n                                                                fun main() {\n                                                                    val file = File(\"Day15BeverageBandits.kt\")\n                                                                    val reader = FileReader(file)\n                                                                    val content = reader.readText()\n                                                                    val kotlinCode = compileKotlin(content)\n                                                                    println(kotlinCode)\n                                                                }\n\n                                                                fun compileKotlin(code: String): String {\n                                                                    val kotlinSource = \"\"\"\n                                                                        package adventofcode2018.Day15BeverageBandits\n\n                                                                        import java.io.File\n\n                                                                        fun main() {\n                                                                            val file = File(\"Day15BeverageBandits.kt\")\n                                                                            val reader = FileReader(file)\n                                                                            val content = reader.readText()\n                                                                            val kotlinCode = compileKotlin(content)\n                                                                            println(kotlinCode)\n                                                                        }\n\n                                                                        fun compileKotlin(code: String): String {\n                                                                            val kotlinSource = \"\"\"\n                                                                                package adventofcode2018.Day15BeverageBandits\n\n                                                                                import java.io.File\n\n                                                                                fun main() {\n                                                                                    val file = File(\"Day15BeverageBandits.kt\")\n                                                                                    val reader = FileReader(file)\n                                                                                    val content = reader.readText()\n                                                                                    val kotlinCode = compileKotlin(content)\n                                                                                    println(kotlinCode)\n                                                                                }\n\n                                                                                fun compileKotlin(code: String): String {\n                                                                                    val kotlinSource = \"\"\"\n                                                                                        package adventofcode2018.Day15BeverageBandits\n\n                                                                                        import java.io.File\n\n                                                                                        fun main() {\n                                                                                        val file = File(\"Day15BeverageBandits.kt\")\n                                                                                        val reader = FileReader(file)\n                                                                                        val content = reader.readText()\n                                                                                        val kotlinCode = compileKotlin(content)\n                                                                                        println(kotlinCode)\n                                                                                        }\n\n                                                                                        fun compileKotlin(code: String): String {\n                                                                                        val kotlinSource = \"\"\"\n                                                                                        package adventofcode2018.Day15BeverageBandits\n\n                                                                                        import java.io.File\n\n                                                                                        fun main() {\n                                                                                        val file = File(\"Day15BeverageBandits.kt\")\n                                                                                        val reader = FileReader(file)\n                                                                                        val content = reader.readText()\n                                                                                        val kotlinCode = compileKotlin(content)\n                                                                                        println(kotlinCode)\n                                                                                        }\n\n                                                                                        fun compileKotlin(code: String): String {\n                                                                                        val kotlinSource = \"\"\"\n                                                                                        package adventofcode2018.Day15BeverageBandits\n\n                                                                                        import java.io.File\n\n                                                                                        fun main() {\n                                                                                        val file = File(\"Day15BeverageBandits.kt\")\n                                                                                        val reader = FileReader(file)\n                                                                                        val content = reader.readText()\n                                                                                        val kotlinCode = compileKotlin(content)\n                                                                                        println(kotlinCode)\n                                                                                        }\n\n                                                                                        fun compileKotlin(code: String): String {\n                                                                                        val kotlinSource = \"\"\"\n                                                                                        package adventofcode2018.Day15Bever"}
{"kt_path": "n81ur3__kotlin-coding-challenges__fdc5941/src/main/kotlin/adventofcode2020/Day07HandyHaversacks.kt", "Qwen2.5-Coder-0.5B-Instruct": "package adventofcode2020\n\nfun main() {\n    val day07HandyHaversacks = Day07HandyHaversacks()\n    println(day07HandyHaversacks)\n}"}
{"kt_path": "n81ur3__kotlin-coding-challenges__fdc5941/src/main/kotlin/adventofcode2018/Day07TheSumOfItsParts.kt", "Qwen2.5-Coder-0.5B-Instruct": "package adventofcode2018\n\nobject Day07TheSumOfItsParts {\n    fun main() {\n        val sum = sumOfParts()\n        println(\"The sum of the parts is: $sum\")\n    }\n\n    fun sumOfParts(): Int {\n        var sum = 0\n        for (i in 0 until 10) {\n            sum += i\n        }\n        return sum\n    }\n}"}
{"kt_path": "n81ur3__kotlin-coding-challenges__fdc5941/src/main/kotlin/adventofcode2017/Day25TheHaltingProblem.kt", "Qwen2.5-Coder-0.5B-Instruct": "package adventofcode2017\n\nfun main() {\n    val day25 = Day25TheHaltingProblem()\n    println(day25)\n}"}
{"kt_path": "n81ur3__kotlin-coding-challenges__fdc5941/src/main/kotlin/adventofcode2019/Day06UniversalOrbitMap.kt", "Qwen2.5-Coder-0.5B-Instruct": "package adventofcode2019\n\nfun main() {\n    val day06UniversalOrbitMap = Day06UniversalOrbitMap()\n    println(day06UniversalOrbitMap)\n}"}
{"kt_path": "n81ur3__kotlin-coding-challenges__fdc5941/src/main/kotlin/adventofcode2019/Day10MonitoringStation.kt", "Qwen2.5-Coder-0.5B-Instruct": "package adventofcode2019\n\nfun main() {\n    val day10MonitoringStation = Day10MonitoringStation()\n    println(day10MonitoringStation)\n}"}
{"kt_path": "n81ur3__kotlin-coding-challenges__fdc5941/src/main/kotlin/adventofcode2018/Day06ChronalCoordinates.kt", "Qwen2.5-Coder-0.5B-Instruct": "package adventofcode2018\n\nfun main() {\n    val day06ChronalCoordinates = Day06ChronalCoordinates()\n    println(day06ChronalCoordinates)\n}"}
{"kt_path": "n81ur3__kotlin-coding-challenges__fdc5941/src/main/kotlin/adventofcode2020/Day21AllergenAssessment.kt", "Qwen2.5-Coder-0.5B-Instruct": "package adventofcode2020\n\nobject Day21AllergenAssessment {\n    fun main() {\n        println(\"Hello, World!\")\n    }\n}"}
{"kt_path": "n81ur3__kotlin-coding-challenges__fdc5941/src/main/kotlin/adventofcode2017/Day24ElectromagneticMoat.kt", "Qwen2.5-Coder-0.5B-Instruct": "package adventofcode2017\n\nfun main() {\n    val day24 = Day24ElectromagneticMoat()\n    println(day24)\n}"}
{"kt_path": "n81ur3__kotlin-coding-challenges__fdc5941/src/main/kotlin/adventofcode2018/Day12SubterraneanSustainability.kt", "Qwen2.5-Coder-0.5B-Instruct": "package adventofcode2018\n\nobject Day12SubterraneanSustainability {\n    fun main() {\n        println(\"Hello, Kotlin!\")\n    }\n}"}
{"kt_path": "n81ur3__kotlin-coding-challenges__fdc5941/src/main/kotlin/adventofcode2018/Day23ExperimentalEmergencyTeleportation.kt", "Qwen2.5-Coder-0.5B-Instruct": "package adventofcode2018\n\nfun main() {\n    val day23ExperimentalEmergencyTeleportation = Day23ExperimentalEmergencyTeleportation()\n    println(day23ExperimentalEmergencyTeleportation)\n}"}
{"kt_path": "alebedev__aoc2022__d6ba46b/src/main/kotlin/Map.kt", "Qwen2.5-Coder-0.5B-Instruct": "fun main(args: Array<String>) {\n    AocMap.solve()\n}"}
{"kt_path": "andrewrlee__adventOfCode2020__a9c21a6/src/main/kotlin/File09.kt", "Qwen2.5-Coder-0.5B-Instruct": "fun main(args: Array<String>) {\n    println(\"Hello, World!\")\n}"}
{"kt_path": "andrewrlee__adventOfCode2020__a9c21a6/src/main/kotlin/File08.kt", "Qwen2.5-Coder-0.5B-Instruct": "fun main(args: Array<String>) {\n    println(\"Hello, World!\")\n}"}
{"kt_path": "andrewrlee__adventOfCode2020__a9c21a6/src/main/kotlin/File02.kt", "Qwen2.5-Coder-0.5B-Instruct": "fun main(args: Array<String>) {\n    val file = File(\"File02.kt\")\n    val challenge02 = Challenge02()\n    challenge02.solve()\n}\n\nclass Challenge02 {\n    fun solve() {\n        println(\"Hello, World!\")\n    }\n}"}
{"kt_path": "andrewrlee__adventOfCode2020__a9c21a6/src/main/kotlin/File07.kt", "Qwen2.5-Coder-0.5B-Instruct": "fun main(args: Array<String>) {\n    println(\"Hello, World!\")\n}"}
{"kt_path": "charlesfranciscodev__codingame__3ec8060/puzzles/kotlin/src/war/war.kt", "Qwen2.5-Coder-0.5B-Instruct": "import java.lang.reflect.Method\n\nfun main(args: Array<String>) {\n    val game = Game()\n    game.play()\n}"}
{"kt_path": "al-volkov__spbu_2020_kotlin_homeworks__5049681/src/main/kotlin/homework_5/Task1.kt", "Qwen2.5-Coder-0.5B-Instruct": "fun isNumber(str: String): Boolean {\n    return try {\n        StringsKt.toIntOrNull(str)\n    } catch (e: NumberFormatException) {\n        false\n    }\n}"}
{"kt_path": "iafsilva__codility-lessons__5d86aef/src/main/kotlin/lesson3/FrogJmp.kt", "Qwen2.5-Coder-0.5B-Instruct": "package lesson3\n\nfun main() {\n    val frogJmp = FrogJmp()\n    println(frogJmp.solution(3, 4, 5))\n}"}
{"kt_path": "mikhalchenko-alexander__advent-of-kotlin-2018-week1__c483ade/src/main/kotlin/com/anahoret/pathfinding/MarkingWayOnMap.kt", "Qwen2.5-Coder-0.5B-Instruct": "fun addPath(map: String): String {\n    val graph = Graph.INSTANCE\n    val path = graph.getMapWithPath(map)\n    return path\n}"}
{"kt_path": "charlesfranciscodev__codingame__3ec8060/puzzles/kotlin/src/surface/surface.kt", "Qwen2.5-Coder-0.5B-Instruct": "class SurfaceKt {\n    companion object {\n        val LAND = 'L'\n        val WATER = 'W'\n        val DEFAULT_INDEX = 0\n    }\n\n    fun main(args: Array<String>) {\n        println(\"SurfaceKt\")\n    }\n}"}
{"kt_path": "andrew-suprun__AoC-2023__dd5f53e/src/main/kotlin/day03_oop/day03_oop.kt", "Qwen2.5-Coder-0.5B-Instruct": "fun main(input: String) {\n    val data = input.data\n    println(data)\n}"}
{"kt_path": "getnahid__programing-problem-solves-kotlin__589c392/CyclicRotation.kt", "Qwen2.5-Coder-0.5B-Instruct": "fun solution(arr: IntArray): IntArray {\n    val result = IntArray(arr.size)\n    for (i in arr.indices) {\n        result[i] = arr[(i + arr.size - 1) % arr.size]\n    }\n    return result\n}"}
{"kt_path": "linisme__LeetCodeInKotlin__4382afc/LongestPalindrome.kt", "Qwen2.5-Coder-0.5B-Instruct": "fun longestPalindrome(s: String): String {\n    val n = s.length\n    if (n <= 1) {\n        return s\n    }\n\n    var start = 0\n    var end = n - 1\n\n    while (start < end) {\n        if (s[start] != s[end]) {\n            break\n        }\n        start++\n        end--\n    }\n\n    return s.substring(start, end + 1)\n}"}
{"kt_path": "iafsilva__codility-lessons__5d86aef/src/main/kotlin/lesson2/OddOccurrencesInArray.kt", "Qwen2.5-Coder-0.5B-Instruct": "fun main() {\n    val array = arrayOf(\"a\", \"b\", \"c\", \"d\", \"e\")\n    val oddOccurrences = array.filter { it % 2 != 0 }.count()\n    println(\"The number of odd occurrences in the array is: $oddOccurrences\")\n}"}
{"kt_path": "jjeda__playground__5d1ee6c/src/oop/algorithm/ProgressionNextNumber.kt", "Qwen2.5-Coder-0.5B-Instruct": "import java.util.List\n\nfun main() {\n    val progressionHelper = ProgressionHelper()\n    val result = progressionHelper.nextInt()\n    println(result)\n}"}
{"kt_path": "linisme__LeetCodeInKotlin__4382afc/LengthOfLongestSubstring.kt", "Qwen2.5-Coder-0.5B-Instruct": "fun main(args: Array<String>) {\n    val solution = LengthOfLongestSubstringSolution2()\n    println(solution.lengthOfLongestSubstring(\"abba\"))\n}"}
{"kt_path": "nschulzke__mancala-puzzle-solver__b130d3b/src/main/kotlin/Main.kt", "Qwen2.5-Coder-0.5B-Instruct": "import java.util.HashSet\nimport kotlin.collections.SetsKt\n\nfun main() {\n    val mancalaIndices = HashSet<Int>()\n    println(mancalaIndices)\n}"}
{"kt_path": "sysion__DataStructureAlgorithmKt__6f9afda/TwoSumLessThanTarget.kt", "Qwen2.5-Coder-0.5B-Instruct": "fun main(array: IntArray) {\n    val target = 15\n    val sum = array.sum()\n    for (i in 0 until array.size) {\n        for (j in i + 1 until array.size) {\n            if (sum - array[i] - array[j] < target) {\n                println(\"$i $j\")\n            }\n        }\n    }\n}"}
{"kt_path": "linisme__LeetCodeInKotlin__4382afc/FineMedianSortedArrays.kt", "Qwen2.5-Coder-0.5B-Instruct": "fun main(args: Array<String>) {\n    val solution = FindMedianSortedArraysSolution()\n    val median = solution.findMedianSortedArrays(intArrayOf(1, 2, 3), intArrayOf(4, 5))\n    println(median)\n}"}
{"kt_path": "n81ur3__kotlin-coding-challenges__fdc5941/src/main/kotlin/adventofcode2018/Day18SettlersOfTheNorthPole.kt", "Qwen2.5-Coder-0.5B-Instruct": "import java.util.*\n\nfun main() {\n    val day18SettlersOfTheNorthPole = Day18SettlersOfTheNorthPole()\n    println(day18SettlersOfTheNorthPole.hash(List<List<AreaElement>>()))\n}"}
{"kt_path": "iafsilva__codility-lessons__5d86aef/src/main/kotlin/lesson3/PermMissingElem.kt", "Qwen2.5-Coder-0.5B-Instruct": "import kotlin.reflect.*\nimport kotlin.jvm.internal.Intrinsics.*\n\nfun main() {\n    val permMissingElem = PermMissingElem()\n    println(permMissingElem.solution(intArrayOf()))\n}"}
{"kt_path": "getnahid__programing-problem-solves-kotlin__589c392/OddOccurrencesInArray.kt", "Qwen2.5-Coder-0.5B-Instruct": "fun solution(array: IntArray): IntArray {\n    val sortedArray = array.sorted()\n    val progression = sortedArray.map { it % 2 == 0 }\n    val lastElement = progression.last()\n    val result = IntArray(array.size)\n    for (i in 0 until array.size) {\n        if (progression[i] == lastElement) {\n            result[i] = array[i]\n        } else {\n            result[i] = -1\n        }\n    }\n    return result\n}"}
{"kt_path": "rupeshsasne__coursera-algorithms-part1__341634c/classroom/src/main/kotlin/com/radix2/algorithms/week3/SortingLinkedList.kt", "Qwen2.5-Coder-0.5B-Instruct": "import java.io.PrintStream\n\nfun main(args: Array<String>) {\n    val list = LinkedList()\n    list.add(1)\n    list.add(2)\n    list.add(3)\n    list.add(4)\n    list.add(5)\n    list.add(6)\n    list.add(7)\n    list.add(8)\n    list.add(9)\n    list.add(10)\n    list.add(11)\n    list.add(12)\n    list.add(13)\n    list.add(14)\n    list.add(15)\n    list.add(16)\n    list.add(17)\n    list.add(18)\n    list.add(19)\n    list.add(20)\n    list.add(21)\n    list.add(22)\n    list.add(23)\n    list.add(24)\n    list.add(25)\n    list.add(26)\n    list.add(27)\n    list.add(28)\n    list.add(29)\n    list.add(30)\n    list.add(31)\n    list.add(32)\n    list.add(33)\n    list.add(34)\n    list.add(35)\n    list.add(36)\n    list.add(37)\n    list.add(38)\n    list.add(39)\n    list.add(40)\n    list.add(41)\n    list.add(42)\n    list.add(43)\n    list.add(44)\n    list.add(45)\n    list.add(46)\n    list.add(47)\n    list.add(48)\n    list.add(49)\n    list.add(50)\n    list.add(51)\n    list.add(52)\n    list.add(53)\n    list.add(54)\n    list.add(55)\n    list.add(56)\n    list.add(57)\n    list.add(58)\n    list.add(59)\n    list.add(60)\n    list.add(61)\n    list.add(62)\n    list.add(63)\n    list.add(64)\n    list.add(65)\n    list.add(66)\n    list.add(67)\n    list.add(68)\n    list.add(69)\n    list.add(70)\n    list.add(71)\n    list.add(72)\n    list.add(73)\n    list.add(74)\n    list.add(75)\n    list.add(76)\n    list.add(77)\n    list.add(78)\n    list.add(79)\n    list.add(80)\n    list.add(81)\n    list.add(82)\n    list.add(83)\n    list.add(84)\n    list.add(85)\n    list.add(86)\n    list.add(87)\n    list.add(88)\n    list.add(89)\n    list.add(90)\n    list.add(91)\n    list.add(92)\n    list.add(93)\n    list.add(94)\n    list.add(95)\n    list.add(96)\n    list.add(97)\n    list.add(98)\n    list.add(99)\n    list.add(100)\n    list.add(101)\n    list.add(102)\n    list.add(103)\n    list.add(104)\n    list.add(105)\n    list.add(106)\n    list.add(107)\n    list.add(108)\n    list.add(109)\n    list.add(110)\n    list.add(111)\n    list.add(112)\n    list.add(113)\n    list.add(114)\n    list.add(115)\n    list.add(116)\n    list.add(117)\n    list.add(118)\n    list.add(119)\n    list.add(120)\n    list.add(121)\n    list.add(122)\n    list.add(123)\n    list.add(124)\n    list.add(125)\n    list.add(126)\n    list.add(127)\n    list.add(128)\n    list.add(129)\n    list.add(130)\n    list.add(131)\n    list.add(132)\n    list.add(133)\n    list.add(134)\n    list.add(135)\n    list.add(136)\n    list.add(137)\n    list.add(138)\n    list.add(139)\n    list.add(140)\n    list.add(141)\n    list.add(142)\n    list.add(143)\n    list.add(144)\n    list.add(145)\n    list.add(146)\n    list.add(147)\n    list.add(148)\n    list.add(149)\n    list.add(150)\n    list.add(151)\n    list.add(152)\n    list.add(153)\n    list.add(154)\n    list.add(155)\n    list.add(156)\n    list.add(157)\n    list.add(158)\n    list.add(159)\n    list.add(160)\n    list.add(161)\n    list.add(162)\n    list.add(163)\n    list.add(164)\n    list.add(165)\n    list.add(166)\n    list.add(167)\n    list.add(168)\n    list.add(169)\n    list.add(170)\n    list.add(171)\n    list.add(172)\n    list.add(173)\n    list.add(174)\n    list.add(175)\n    list.add(176)\n    list.add(177)\n    list.add(178)"}
{"kt_path": "boris920308__HoOne__8881468/hoon/HoonAlgorithm/src/main/kotlin/boj/week02/recursive_function/FibonacciSequence5.kt", "Qwen2.5-Coder-0.5B-Instruct": "import java.util.Scanner\n\nfun fibonacci(n: Int): Int {\n    val scanner = Scanner(System.in)\n    scanner.useDelimiter(\"\\n\")\n    var result = 0\n    for (i in 0 until n) {\n        result += fibonacci(i)\n    }\n    scanner.close()\n    return result\n}\n\nfun main(args: Array<String>) {\n    val n = args[0].toInt()\n    println(\"The $n-th Fibonacci number is: ${fibonacci(n)}\")\n}"}
{"kt_path": "Codextor__kotlin-codes__68b75a7/src/main/kotlin/PerfectSquares.kt", "Qwen2.5-Coder-0.5B-Instruct": "fun numSquares(n: Int): Int {\n    return n * n\n}"}
{"kt_path": "Laomedeia__Java8InAction__0dcd843/src/main/java/leetcode/a167_twoSumInputSortArray_SIMPLE/Solution.kt", "Qwen2.5-Coder-0.5B-Instruct": "fun twoSum(numbers: IntArray): IntArray {\n    val sortedNumbers = numbers.sorted()\n    val map = mutableMapOf<Int, Int>()\n    for (i in numbers.indices) {\n        val complement = sortedNumbers[i] - numbers[i]\n        if (map.containsKey(complement)) {\n            return intArrayOf(map[complement], numbers[i])\n        }\n        map[numbers[i]] = i\n    }\n    throw IllegalArgumentException(\"No two elements sum to zero\")\n}"}
{"kt_path": "ariannysOronoz__tutorialKotlin__a779f54/CombinacionesPalabras/src/main/java/Main.kt", "Qwen2.5-Coder-0.5B-Instruct": "import java.io.PrintStream\n\nfun main(args: Array<String>) {\n    val permutation = Permutation()\n    permutation.findPermutation(\"CARACOL\", 0)\n    println(permutation.caracol)\n    println(permutation.length)\n}"}
{"kt_path": "scientificCommunity__blog-sample__36e291c/algorithms/src/main/kotlin/org/baichuan/sample/algorithms/leetcode/middle/MaxArea.kt", "Qwen2.5-Coder-0.5B-Instruct": "fun maxArea(heights: IntArray): Int {\n    var maxArea = 0\n    var left = 0\n    var right = heights.size - 1\n\n    while (left < right) {\n        val width = right - left\n        val height = heights[left]\n        val area = width * height\n\n        if (height * width > maxArea) {\n            maxArea = area\n        }\n\n        if (height * width < 0) {\n            if (height < 0) {\n                left++\n            } else {\n                right--\n            }\n        }\n    }\n\n    return maxArea\n}"}
{"kt_path": "boris920308__HoOne__8881468/hoon/HoonAlgorithm/src/main/kotlin/programmers/lv01/Lv1_70128.kt", "Qwen2.5-Coder-0.5B-Instruct": "fun main() {\n    val solution = { array: IntArray -> array.map { it * it } }\n    println(solution(arrayOf(1, 2, 3)))\n}"}
{"kt_path": "kotler-dev__kotlin-leetcode__0659e72/src/main/kotlin/exercise/easy/id121/Solution121.kt", "Qwen2.5-Coder-0.5B-Instruct": "fun main() {\n    val prices = arrayOf(10, 7, 15, 30)\n    val maxProfit = maxProfit(prices)\n    println(\"Max Profit: $maxProfit\")\n}"}
{"kt_path": "marc-bouvier-katas__Kotlin_EduTools_Advent_of_Code_2021__12cf74c/Day 5/Part 1/src/Task.kt", "Qwen2.5-Coder-0.5B-Instruct": "import java.util.Map\n\nfun main() {\n    val ventsLines = listOf(\"ventsLines\")\n    val lines = Lines()\n    val lineOfVent = LineOfVent()\n    val lineOfVentCompanion = LineOfVentCompanion()\n    val lineOfVentCompanionLineOfVent = LineOfVentCompanionLineOfVent()\n    val lineOfVentCompanionLineOfVentFromLineOfVent = LineOfVentCompanionLineOfVentFromLineOfVent()\n    val lineOfVentCompanionLineOfVentFromLineOfVentFromLineOfVent = LineOfVentCompanionLineOfVentFromLineOfVentFromLineOfVent()\n    val lineOfVentCompanionLineOfVentFromLineOfVentFromLineOfVentFromLineOfVent = LineOfVentCompanionLineOfVentFromLineOfVentFromLineOfVentFromLineOfVent()\n    val lineOfVentCompanionLineOfVentFromLineOfVentFromLineOfVentFromLineOfVent = LineOfVentCompanionLineOfVentFromLineOfVentFromLineOfVentFromLineOfVentFromLineOfVent()\n    val lineOfVentCompanionLineOfVentFromLineOfVentFromLineOfVentFromLineOfVent = LineOfVentCompanionLineOfVentFromLineOfVentFromLineOfVentFromLineOfVentFromLineOfVentFromLineOfVent()\n    val lineOfVentCompanionLineOfVentFromLineOfVentFromLineOfVentFromLineOfVent = LineOfVentCompanionLineOfVentFromLineOfVentFromLineOfVentFromLineOfVentFromLineOfVentFromLineOfVentFromLineOfVent()\n    val lineOfVentCompanionLineOfVentFromLineOfVentFromLineOfVentFromLineOfVent = LineOfVentCompanionLineOfVentFromLineOfVentFromLineOfVentFromLineOfVentFromLineOfVentFromLineOfVentFromLineOfVentFromLineOfVentFromLineOfVent()\n    val lineOfVentCompanionLineOfVentFromLineOfVentFromLineOfVentFromLineOfVent = LineOfVentCompanionLineOfVentFromLineOfVentFromLineOfVentFromLineOfVentFromLineOfVentFromLineOfVentFromLineOfVentFromLineOfVentFromLineOfVentFromLineOfVent()\n    val lineOfVentCompanionLineOfVentFromLineOfVentFromLineOfVentFromLineOfVent = LineOfVentCompanionLineOfVentFromLineOfVentFromLineOfVentFromLineOfVentFromLineOfVentFromLineOfVentFromLineOfVentFromLineOfVentFromLineOfVentFromLineOfVentFromLineOfVent()\n    val lineOfVentCompanionLineOfVentFromLineOfVentFromLineOfVentFromLineOfVent = LineOfVentCompanionLineOfVentFromLineOfVentFromLineOfVentFromLineOfVentFromLineOfVentFromLineOfVentFromLineOfVentFromLineOfVentFromLineOfVentFromLineOfVentFromLineOfVent()\n    val lineOfVentCompanionLineOfVentFromLineOfVentFromLineOfVentFromLineOfVent = LineOfVentCompanionLineOfVentFromLineOfVentFromLineOfVentFromLineOfVentFromLineOfVentFromLineOfVentFromLineOfVentFromLineOfVentFromLineOfVentFromLineOfVentFromLineOfVent()\n    val lineOfVentCompanionLineOfVentFromLineOfVentFromLineOfVentFromLineOfVent = LineOfVentCompanionLineOfVentFromLineOfVentFromLineOfVentFromLineOfVentFromLineOfVentFromLineOfVentFromLineOfVentFromLineOfVentFromLineOfVentFromLineOfVentFromLineOfVent()\n    val lineOfVentCompanionLineOfVentFromLineOfVentFromLineOfVentFromLineOfVent = LineOfVentCompanionLineOfVentFromLineOfVentFromLineOfVentFromLineOfVentFromLineOfVentFromLineOfVentFromLineOfVentFromLineOfVentFromLineOfVentFromLineOfVentFromLineOfVent()\n    val lineOfVentCompanionLineOfVentFromLineOfVentFromLineOfVentFromLineOfVent = LineOfVentCompanionLineOfVentFromLineOfVentFromLineOfVentFromLineOfVentFromLineOfVentFromLineOfVentFromLineOfVentFromLineOfVentFromLineOfVentFromLineOfVentFromLineOfVent()\n    val lineOfVentCompanionLineOfVentFromLineOfVentFromLineOfVentFromLineOfVent = LineOfVentCompanionLineOfVentFromLineOfVentFromLineOfVentFromLineOfVentFromLineOfVentFromLineOfVentFromLineOfVentFromLineOfVentFromLineOfVentFromLineOfVentFromLineOfVent()\n    val lineOfVentCompanionLineOfVentFromLineOfVentFromLineOfVentFromLineOfVent = LineOfVentCompanionLineOfVentFromLineOfVentFromLineOfVentFromLineOfVentFromLineOfVentFromLineOfVentFromLineOfVentFromLineOfVentFromLineOfVentFromLineOfVentFromLineOfVent()\n    val lineOfVentCompanionLineOfVentFromLineOfVentFromLineOfVentFromLineOfVent = LineOfVentCompanionLineOfVentFromLineOfVentFromLineOfVentFromLineOfVentFromLineOfVentFromLineOfVentFromLineOfVentFromLineOfVentFromLineOfVentFromLineOfVentFromLineOfVent()\n    val lineOfVentCompanionLineOfVentFromLineOfVentFromLineOfVentFromLineOfVent = LineOfVentCompanionLineOfVentFromLineOfVentFromLineOfVentFromLineOfVentFromLineOfVentFromLineOfVentFromLineOfVentFromLineOfVentFromLineOfVentFromLineOfVentFromLineOfVent()\n    val lineOfVentCompanionLineOfVentFromLineOfVentFromLineOfVentFromLineOfVent = LineOfVentCompanionLineOfVentFromLineOfVentFromLineOfVentFromLineOfVentFromLineOfVentFromLineOfVentFromLineOfVentFromLineOfVentFromLineOfVentFromLineOfVentFromLineOfVent()\n    val lineOfVentCompanionLineOfVentFromLineOfVentFromLineOfVentFromLineOfVent = LineOfVentCompanionLineOfVentFromLineOfVentFromLineOfVentFromLineOfVentFromLineOfVentFromLineOfVentFromLineOfVentFromLineOfVentFromLineOfVentFromLineOfVentFromLineOfVent()\n    val lineOfVentCom"}
{"kt_path": "Laomedeia__Java8InAction__0dcd843/src/main/java/leetcode/a392_isSubSequence_HARD/Solution.kt", "Qwen2.5-Coder-0.5B-Instruct": "fun Solution.isSubsequence(s: String, t: String): Boolean {\n    val lenS = s.length\n    val lenT = t.length\n\n    for (i in 0 until lenT) {\n        if (s[i] == t[i]) {\n            i++\n        }\n    }\n\n    return i == lenT\n}"}
{"kt_path": "nickperov__Algorithms__6696f5d/fibonacci/src/main/kotlin/com/nickperov/stud/algorithms/fibonacci/FibonacciLargeGenerator.kt", "Qwen2.5-Coder-0.5B-Instruct": "import java.math.BigInteger\n\nfun main() {\n    println(\"Hello, large Fibonacci numbers\")\n    println(\"1000000\")\n    val fibonacci = FibonacciLargeTailRecursiveOptimisedGenerator()\n    println(fibonacci.calculate(1000000))\n}"}
{"kt_path": "TonnyL__Windary__39f85cd/Kotlin/src/UniqueBinarySearchTrees.kt", "Qwen2.5-Coder-0.5B-Instruct": "fun main() {\n    val uniqueBinarySearchTrees = UniqueBinarySearchTrees()\n    println(uniqueBinarySearchTrees.numTrees(0))\n}"}
{"kt_path": "quincy__euler-kotlin__01d96f6/src/main/kotlin/com/quakbo/euler/Euler4.kt", "Qwen2.5-Coder-0.5B-Instruct": "import java.io.PrintStream\n\nfun isPalindrome(n: Int): Boolean {\n    val str = n.toString()\n    val reversedStr = str.reversed().toString()\n    return str == reversedStr\n}\n\nfun main(args: Array<String>) {\n    val printStream = System.out\n    val str = args[0]\n    val reversedStr = str.reversed().toString()\n    val result = if (isPalindrome(str.toInt())) {\n        printStream.println(\"The number is a palindrome.\")\n    } else {\n        printStream.println(\"The number is not a palindrome.\")\n    }\n}"}
{"kt_path": "getupminaaa__Algorithm__01187e2/Algorithm/src/main/kotlin/programmers/level1/personalInfoCollectionValidityPeriod.kt", "Qwen2.5-Coder-0.5B-Instruct": "fun main() {\n    val personalInfoCollectionValidityPeriod = PersonalInfoCollectionValidityPeriod()\n    println(personalInfoCollectionValidityPeriod)\n}"}
{"kt_path": "iafsilva__codility-lessons__5d86aef/src/main/kotlin/lesson1/BinaryGap.kt", "Qwen2.5-Coder-0.5B-Instruct": "package lesson1\n\nfun main() {\n    val binaryGap = BinaryGap()\n    println(binaryGap.solution(0))\n}\n\nclass BinaryGap {\n    fun solution(i: Int): Int {\n        val binaryString = Integer.toBinaryString(i)\n        val length = binaryString.length\n        val result = 0\n        for (i in 0 until length) {\n            val char = binaryString[i]\n            if (char == '1') {\n                result += 1\n            }\n        }\n        return result\n    }\n}"}
{"kt_path": "zys0909__CodeLabs__869c7c2/src/com/leecode/array/Code1.kt", "Qwen2.5-Coder-0.5B-Instruct": "fun main() {\n    val nums = arrayOf(1, 2, 3, 4, 5, 6, 7, 8, 9, 10)\n    val missingNumber1 = missingNumber1(nums)\n    println(\"missingNumber1: $missingNumber1\")\n}\n\nfun missingNumber1(nums: IntArray): Int {\n    val n = nums.size\n    val sum = (n * (n + 1)) / 2\n    var expectedSum = 0\n    for (i in 0 until n) {\n        expectedSum += nums[i]\n    }\n    return sum - expectedSum\n}"}
{"kt_path": "ykrytsyn__leetcode-in-kotlin__0acf2a6/src/main/kotlin/leetcode/ArrangingCoins.kt", "Qwen2.5-Coder-0.5B-Instruct": "fun main() {\n    val coins = intArrayOf(1, 2, 3, 4, 5)\n    val result = arrangeCoins(coins)\n    println(result)\n}\n\nfun arrangeCoins(coins: IntArray): Int {\n    val n = coins.size\n    var left = 0\n    var right = n - 1\n    while (left <= right) {\n        val mid = (left + right) / 2\n        val sum = coins.sum()\n        val coinsWithSum = coins.filter { it + mid <= sum }\n        val coinsWithoutSum = coins.filter { it + mid > sum }\n        val coinsWithSumCount = coinsWithSum.size\n        val coinsWithoutSumCount = coinsWithoutSum.size\n        val coinsWithSumDifference = coinsWithSum.sum() - coinsWithoutSum.sum()\n        val coinsWithoutSumDifference = coinsWithoutSum.sum() - coinsWithSum.sum()\n        val coinsWithSumDifference = coinsWithSum.sum() - coinsWithoutSum.sum()\n        val coinsWithSumDifference = coinsWithSum.sum() - coinsWithoutSum.sum()\n        val coinsWithSumDifference = coinsWithSum.sum() - coinsWithoutSum.sum()\n        val coinsWithSumDifference = coinsWithSum.sum() - coinsWithoutSum.sum()\n        val coinsWithSumDifference = coinsWithSum.sum() - coinsWithoutSum.sum()\n        val coinsWithSumDifference = coinsWithSum.sum() - coinsWithoutSum.sum()\n        val coinsWithSumDifference = coinsWithSum.sum() - coinsWithoutSum.sum()\n        val coinsWithSumDifference = coinsWithSum.sum() - coinsWithoutSum.sum()\n        val coinsWithSumDifference = coinsWithSum.sum() - coinsWithoutSum.sum()\n        val coinsWithSumDifference = coinsWithSum.sum() - coinsWithoutSum.sum()\n        val coinsWithSumDifference = coinsWithSum.sum() - coinsWithoutSum.sum()\n        val coinsWithSumDifference = coinsWithSum.sum() - coinsWithoutSum.sum()\n        val coinsWithSumDifference = coinsWithSum.sum() - coinsWithoutSum.sum()\n        val coinsWithSumDifference = coinsWithSum.sum() - coinsWithoutSum.sum()\n        val coinsWithSumDifference = coinsWithSum.sum() - coinsWithoutSum.sum()\n        val coinsWithSumDifference = coinsWithSum.sum() - coinsWithoutSum.sum()\n        val coinsWithSumDifference = coinsWithSum.sum() - coinsWithoutSum.sum()\n        val coinsWithSumDifference = coinsWithSum.sum() - coinsWithoutSum.sum()\n        val coinsWithSumDifference = coinsWithSum.sum() - coinsWithoutSum.sum()\n        val coinsWithSumDifference = coinsWithSum.sum() - coinsWithoutSum.sum()\n        val coinsWithSumDifference = coinsWithSum.sum() - coinsWithoutSum.sum()\n        val coinsWithSumDifference = coinsWithSum.sum() - coinsWithoutSum.sum()\n        val coinsWithSumDifference = coinsWithSum.sum() - coinsWithoutSum.sum()\n        val coinsWithSumDifference = coinsWithSum.sum() - coinsWithoutSum.sum()\n        val coinsWithSumDifference = coinsWithSum.sum() - coinsWithoutSum.sum()\n        val coinsWithSumDifference = coinsWithSum.sum() - coinsWithoutSum.sum()\n        val coinsWithSumDifference = coinsWithSum.sum() - coinsWithoutSum.sum()\n        val coinsWithSumDifference = coinsWithSum.sum() - coinsWithoutSum.sum()\n        val coinsWithSumDifference = coinsWithSum.sum() - coinsWithoutSum.sum()\n        val coinsWithSumDifference = coinsWithSum.sum() - coinsWithoutSum.sum()\n        val coinsWithSumDifference = coinsWithSum.sum() - coinsWithoutSum.sum()\n        val coinsWithSumDifference = coinsWithSum.sum() - coinsWithoutSum.sum()\n        val coinsWithSumDifference = coinsWithSum.sum() - coinsWithoutSum.sum()\n        val coinsWithSumDifference = coinsWithSum.sum() - coinsWithoutSum.sum()\n        val coinsWithSumDifference = coinsWithSum.sum() - coinsWithoutSum.sum()\n        val coinsWithSumDifference = coinsWithSum.sum() - coinsWithoutSum.sum()\n        val coinsWithSumDifference = coinsWithSum.sum() - coinsWithoutSum.sum()\n        val coinsWithSumDifference = coinsWithSum.sum() - coinsWithoutSum.sum()\n        val coinsWithSumDifference = coinsWithSum.sum() - coinsWithoutSum.sum()\n        val coinsWithSumDifference = coinsWithSum.sum() - coinsWithoutSum.sum()\n        val coinsWithSumDifference = coinsWithSum.sum() - coinsWithoutSum.sum()\n        val coinsWithSumDifference = coinsWithSum.sum() - coinsWithoutSum.sum()\n        val coinsWithSumDifference = coinsWithSum.sum() - coinsWithoutSum.sum()\n        val coinsWithSumDifference = coinsWithSum.sum() - coinsWithoutSum.sum()\n        val coinsWithSumDifference = coinsWithSum.sum() - coinsWithoutSum.sum()\n        val coinsWithSumDifference = coinsWithSum.sum() - coinsWithoutSum.sum()\n        val coinsWithSumDifference = coinsWithSum.sum() - coinsWithoutSum.sum()\n        val coinsWithSumDifference = coinsWithSum.sum() - coinsWithoutSum.sum()\n        val coinsWithSumDifference = coinsWithSum.sum() - coinsWithoutSum.sum()\n        val coinsWithSumDifference = coinsWithSum.sum() - coinsWithoutSum.sum()\n        val coinsWithSumDifference = coinsWithSum.sum() - coinsWithoutSum.sum()\n        val coinsWithSumDifference = coinsWithSum.sum() - coinsWithoutSum.sum()\n        val coinsWithSumDifference = coinsWithSum.sum() - coinsWithoutSum.sum()\n        val coinsWithSumDifference = coinsWithSum.sum() - coinsWithoutSum.sum()\n        val coinsWithSumDifference = coinsWithSum.sum() - coinsWithoutSum.sum()\n        val coinsWithSumDifference = coinsWithSum.sum() - coinsWithoutSum.sum()\n        val coinsWithSumDifference = coinsWithSum.sum() - coinsWithoutSum.sum()\n        val coinsWithSumDifference = coinsWithSum.sum() - coinsWithoutSum.sum()\n        val coinsWithSumDifference = coinsWithSum.sum() - coinsWithoutSum.sum()\n        val coinsWithSumDifference = coinsWithSum.sum() - coinsWithoutSum.sum()\n        val coinsWithSumDifference = coinsWithSum.sum() - coinsWithoutSum.sum()\n        val coinsWithSumDifference = coinsWithSum.sum() - coinsWithoutSum.sum()\n        val coinsWithSumDifference = coinsWithSum.sum() - coinsWithoutSum.sum()\n        val coinsWithSumDifference = coinsWithSum.sum"}
{"kt_path": "mayabot__mynlp__b980da3/mynlp/src/main/java/com/mayabot/nlp/module/nwd/ValueObjects.kt", "Qwen2.5-Coder-0.5B-Instruct": "import java.util.HashMap\nimport java.util.Map\n\nfun addTo(map: Map<Character, IntCount>, character: Char, count: Int) {\n    map[character] = IntCount(count)\n}\n\nfun main() {\n    val valueObjects = ValueObjects()\n    addTo(valueObjects, 'A', 10)\n    addTo(valueObjects, 'B', 20)\n    println(valueObjects)\n}"}
{"kt_path": "jjrodcast__CompetitiveProblems__a91868c/leetcode/UniquePathsTwo.kt", "Qwen2.5-Coder-0.5B-Instruct": "fun uniquePathsWithObstacles(paths: IntArray): Int {\n    val n = paths.size\n    val dp = Array(n) { IntArray(n) { 0 } }\n    dp[0][0] = 1\n\n    for (i in 1 until n) {\n        for (j in 1 until n) {\n            if (paths[i - 1] == 0 && paths[j - 1] == 0) {\n                dp[i][j] = dp[i - 1][j - 1] + dp[i - 1][j]\n            } else if (paths[i - 1] == 0) {\n                dp[i][j] = dp[i - 1][j]\n            } else if (paths[j - 1] == 0) {\n                dp[i][j] = dp[i][j - 1]\n            } else {\n                dp[i][j] = dp[i - 1][j - 1] + dp[i - 1][j]\n            }\n        }\n    }\n\n    return dp[n - 1][n - 1]\n}\n\nfun main(paths: IntArray) {\n    println(uniquePathsWithObstacles(paths))\n}"}
{"kt_path": "boris920308__HoOne__8881468/hoon/HoonAlgorithm/src/main/kotlin/programmers/lv01/Lv1_77884.kt", "Qwen2.5-Coder-0.5B-Instruct": "fun main() {\n    println(\"Hello, World!\")\n}\n\nfun solution(a: Int, b: Int): Int {\n    val sqrt = Math.sqrt(b.toDouble())\n    val divisors = (sqrt + 1).toInt()\n    return divisors\n}\n\nfun countDivisors(n: Int): Int {\n    val sqrt = Math.sqrt(n.toDouble())\n    val divisors = (sqrt + 1).toInt()\n    return divisors\n}"}
{"kt_path": "Codextor__kotlin-codes__68b75a7/src/main/kotlin/PartitionArrayForMaximumSum.kt", "Qwen2.5-Coder-0.5B-Instruct": "fun maxSumAfterPartitioning(arr: IntArray): Int {\n    val n = arr.size\n    val dp = Array(n) { Int.MIN_VALUE }\n    dp[0] = arr[0]\n\n    for (i in 1 until n) {\n        dp[i] = Math.max(dp[i - 1], arr[i])\n    }\n\n    var maxSum = Int.MIN_VALUE\n    for (i in 0 until n) {\n        maxSum = Math.max(maxSum, dp[i])\n    }\n\n    return maxSum\n}"}
{"kt_path": "scientificCommunity__blog-sample__36e291c/algorithms/src/main/kotlin/org/baichuan/sample/algorithms/leetcode/simple/interview/MajorityElement.kt", "Qwen2.5-Coder-0.5B-Instruct": "import java.util.Arrays\n\nfun majorityElement(nums: IntArray): Int {\n    val count = IntArray(2)\n    for (num in nums) {\n        count[num % 2]++\n    }\n    var result = -1\n    for (i in 0 until 2) {\n        if (count[i] > nums.size / 2) {\n            result = i\n            break\n        }\n    }\n    return result\n}\n\nfun main() {\n    val testCases = arrayOf(\n        intArrayOf(3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,"}
{"kt_path": "rhavran__ProjectEuler__1115674/src/Utils.kt", "Qwen2.5-Coder-0.5B-Instruct": "fun main() {\n    val dividers = PrimeFactorization.INSTANCE.dividers()\n    val sequenceSumStartingFrom = PrimeFactorization.INSTANCE.sequenceSumStartingFrom(1L, 1L)\n    val sumFromTo = PrimeFactorization.INSTANCE.sumFromTo(1L, 1L)\n}"}
{"kt_path": "jimmymorales__project-euler__e881cad/src/main/kotlin/Problem4.kt", "Qwen2.5-Coder-0.5B-Instruct": "fun largestPalindrome(): Int {\n    val largestPalindrome = 9999\n    for (i in 0 until largestPalindrome) {\n        val reversed = reverse(i)\n        if (isPalindrome(reversed)) {\n            return i\n        }\n    }\n    throw IllegalArgumentException(\"No palindrome found\")\n}\n\nfun reverse(n: Int): Int {\n    var result = 0\n    while (n > 0) {\n        val digit = n % 10\n        result = result * 10 + digit\n        n /= 10\n    }\n    return result\n}\n\nfun isPalindrome(n: Int): Boolean {\n    val reversed = reverse(n)\n    return n == reversed\n}\n\nfun main(args: Array<String>) {\n    largestPalindrome()\n}"}
{"kt_path": "Codextor__kotlin-codes__68b75a7/src/main/kotlin/PalindromicSubstrings.kt", "Qwen2.5-Coder-0.5B-Instruct": "fun countSubstrings(s: String): Int {\n    val length = s.length\n    val result = IntArray(length)\n    for (i in 0 until length) {\n        for (j in i + 1 until length) {\n            val substring = s.substring(i, j + 1)\n            if (substring == substring.reversed()) {\n                result[i]++\n            }\n        }\n    }\n    return result.sum()\n}\n\nfun countSubstringsWithCenter(s: String, center1: Int, center2: Int): Int {\n    val length = s.length\n    val result = IntArray(length)\n    for (i in center1 until length - center2) {\n        for (j in center2 until length - center1) {\n            val substring = s.substring(i, j + 1)\n            if (substring == substring.reversed()) {\n                result[i]++\n            }\n        }\n    }\n    return result.sum()\n}"}
{"kt_path": "antop-dev__algorithm__9a3e762/src/main/kotlin/kr/co/programmers/P12952.kt", "Qwen2.5-Coder-0.5B-Instruct": "package kr.co.programmers\n\nimport java.lang.reflect.Method\n\nfun main() {\n    val p12952 = P12952()\n    println(p12952)\n}\n\nclass P12952 {\n    fun <T> solution(t: T): Int {\n        val array = t as Array<Int>\n        val length = array.size\n        val dfs = { array, index ->\n            if (index >= length) {\n                return 0\n            }\n            val result = dfs(array, index + 1)\n            val absResult = Math.abs(result)\n            val result = result + absResult\n            dfs(array, index + 1)\n            absResult\n        }\n        return dfs(array, 0)\n    }\n\n    private fun valid(array: Array<Int>): Boolean {\n        val length = array.size\n        for (i in 0 until length) {\n            if (array[i] == 0) {\n                return false\n            }\n        }\n        return true\n    }\n\n    companion object {\n        fun main() {\n            val p12952 = P12952()\n            println(p12952)\n        }\n    }\n}"}
{"kt_path": "ILIYANGERMANOV__algorithms__4abe4b5/Algorithms/src/main/kotlin/MaxSubArray.kt", "Qwen2.5-Coder-0.5B-Instruct": "fun maxSubArray(nums: IntArray): Int {\n    val max = Int.MIN_VALUE\n    var current = 0\n    for (num in nums) {\n        current += num\n        if (current > max) {\n            max = current\n        }\n    }\n    return max\n}"}
{"kt_path": "AlBovo__Compiti__56a3131/src/main/kotlin/segtree.kt", "Qwen2.5-Coder-0.5B-Instruct": "import java.io.PrintStream\n\nclass SegmentTree {\n    private val tree: Array<MutableList<Int>> = Array(1 << 16) { mutableListOf<Int>() }\n\n    fun getSum(a: Int, b: Int): Int {\n        var sum = 0\n        var node = this.tree[a]\n        while (node.size > 0) {\n            val left = node[0]\n            val right = node[node.size - 1]\n            if (a <= left) {\n                sum += left\n                node = node.subList(left + 1, node.size)\n            } else {\n                sum += right\n                node = node.subList(0, right)\n            }\n        }\n        return sum\n    }\n\n    fun main(args: Array<String>) {\n        val printStream = PrintStream(System.out)\n        printStream.println(getSum(0, 1000000000))\n    }\n}"}
{"kt_path": "3mtee__exercism-kotlin__6e3eb88/complex-numbers/src/main/kotlin/ComplexNumbers.kt", "Qwen2.5-Coder-0.5B-Instruct": "import java.lang.Math\n\nfun complexNumbersExponential(complex: ComplexNumber): ComplexNumber {\n    val real = complex.real.toDouble()\n    val imag = complex.imag.toDouble()\n    val cos = Math.cos(real)\n    val sin = Math.sin(imag)\n    val result = ComplexNumber(cos, sin)\n    return result\n}\n\nfun main() {\n    val complex = ComplexNumber(2.718281828459045, 0.0)\n    val result = complexNumbersExponential(complex)\n    println(result)\n}"}
{"kt_path": "perihanmirkelam__ProjectEuler__a24ac44/src/main/kotlin/P014_LongestCollatzSequence.kt", "Qwen2.5-Coder-0.5B-Instruct": "fun main() {\n    println(\"A14:\")\n    println(\"A14: \" + A14)\n}"}
{"kt_path": "iafsilva__codility-lessons__5d86aef/src/main/kotlin/lesson2/CyclicRotation.kt", "Qwen2.5-Coder-0.5B-Instruct": "import java.util.*\n\nfun main() {\n    val cyclicRotation = CyclicRotation()\n    val result = cyclicRotation.solution(intArrayOf(1, 2, 3, 4, 5), 2)\n    println(result)\n}"}
{"kt_path": "boris920308__HoOne__8881468/hoon/HoonAlgorithm/src/main/kotlin/programmers/lv01/Lv1_12912.kt", "Qwen2.5-Coder-0.5B-Instruct": "fun main() {\n    println(\"Hello, World!\")\n}\n\nprivate fun solution(a: Int, b: Int): Long {\n    val result = a + b\n    return result\n}\n\nprivate fun secondSolution(a: Int, b: Int): Long {\n    val result = a * b\n    return result\n}\n\nfun main(args: Array<String>) {\n    println(\"Hello, World!\")\n}"}
{"kt_path": "darian-catalin-cucer__divide-and-conquer-algorithms__1cea70d/kt.kt", "Qwen2.5-Coder-0.5B-Instruct": "fun quickSort(arr: IntArray, low: Int, high: Int): Unit {\n    if (low < high) {\n        val pivot = partition(arr, low, high)\n        quickSort(arr, low, pivot - 1)\n        quickSort(arr, pivot + 1, high)\n    }\n}\n\nfun partition(arr: IntArray, low: Int, high: Int): Int {\n    val pivot = arr[high]\n    var i = low - 1\n\n    for (j in low until high) {\n        if (arr[j] < pivot) {\n            i++\n            arr[i] = arr[j]\n        }\n    }\n\n    arr[i + 1] = pivot\n    return i + 1\n}"}
{"kt_path": "TonnyL__Windary__39f85cd/Kotlin/src/ThreeSumClosest.kt", "Qwen2.5-Coder-0.5B-Instruct": "fun main() {\n    val nums = intArrayOf(3, 1, -5, 2, -3, 2)\n    val target = -5\n    val result = threeSumClosest(nums, target)\n    println(\"The closest sum is: $result\")\n}"}
{"kt_path": "Javran__leetcode__f3899fe/bulb-switcher/Solution.kt", "Qwen2.5-Coder-0.5B-Instruct": "import java.lang.Math.sqrt\nimport java.lang.Math.floor\n\nclass Solution {\n    companion object {\n        fun main(args: Array<String>) {\n            val solution = Solution()\n            println(solution.bulbSwitch(10))\n        }\n    }\n\n    fun bulbSwitch(n: Int): Int {\n        val sqrt = sqrt(n.toDouble())\n        val floor = floor(sqrt.toDouble())\n        val result = if (floor == sqrt) 0 else 1\n        println(result)\n        return result\n    }\n}"}
{"kt_path": "TonnyL__Windary__39f85cd/Kotlin/src/NextPermutation.kt", "Qwen2.5-Coder-0.5B-Instruct": "fun main() {\n    val nums = intArrayOf(3, 2, 1)\n    println(NextPermutation(nums))\n}\n\nclass NextPermutation {\n    fun nextPermutation(nums: IntArray): IntArray {\n        val n = nums.size\n        val i = n - 2\n        while (i >= 0 && nums[i] >= nums[i + 1]) {\n            i--\n        }\n        if (i < 0) {\n            return nums.reversed()\n        }\n        var j = n - 1\n        while (nums[j] <= nums[i]) {\n            j--\n        }\n        val temp = nums[i]\n        nums[i] = nums[j]\n        nums[j] = temp\n        nums.sort()\n        return nums\n    }\n\n    fun swap(nums: IntArray, i: Int, j: Int): Unit {\n        val temp = nums[i]\n        nums[i] = nums[j]\n        nums[j] = temp\n    }\n\n    fun reverse(nums: IntArray, i: Int, j: Int): Unit {\n        val temp = nums[i]\n        nums[i] = nums[j]\n        nums[j] = temp\n        nums.sort()\n    }\n}"}
{"kt_path": "boris920308__HoOne__8881468/hoon/HoonAlgorithm/src/main/kotlin/programmers/lv01/Lv1_12940.kt", "Qwen2.5-Coder-0.5B-Instruct": "fun main() {\n    val result = solution(12, 12)\n    println(result)\n}\n\nfun solution(a: Int, b: Int): Int {\n    val gcd = findGCD(a, b)\n    val lcm = findLCM(a, b)\n    val list = listOf(gcd, lcm)\n    println(list)\n}\n\nfun findGCD(a: Int, b: Int): Int {\n    while (b != 0) {\n        val temp = b\n        b = a % b\n        a = temp\n    }\n    return a\n}\n\nfun findLCM(a: Int, b: Int): Int {\n    return (a * b) / gcd(a, b)\n}"}
{"kt_path": "JiangKlijna__leetcode-learning__65a1348/kt/001 Two Sum/TwoSum.kt", "Qwen2.5-Coder-0.5B-Instruct": "fun main() {\n    val numbers = arrayOf(2, 7, 11, 15)\n    val result = twoSum(numbers)\n    println(result)\n}\n\nfun twoSum(numbers: IntArray): IntArray {\n    val map = HashMap<Int, Int>()\n    for (i in numbers.indices) {\n        val complement = -numbers[i]\n        if (map.containsKey(complement)) {\n            return intArrayOf(map[complement]!!, numbers[i])\n        }\n        map[numbers[i]] = i\n    }\n    throw IllegalArgumentException(\"No two elements sum to zero\")\n}"}
{"kt_path": "rupeshsasne__coursera-algorithms-part1__341634c/classroom/src/main/kotlin/com/radix2/algorithms/week1/UnionFind.kt", "Qwen2.5-Coder-0.5B-Instruct": "import java.io.File\nimport java.io.FileWriter\nimport java.io.IOException\n\nfun main() {\n    val file = File(\"UnionFind.kt\")\n    file.createNewFile()\n    val writer = FileWriter(file)\n    writer.write(\n        \"\"\"\n            package com.radix2.algorithms.week1\n\n            import kotlin.jvm.internal.Intrinsics.checkNotNullParameter\n            import kotlin.jvm.internal.Intrinsics.invokestatic\n            import com.radix2.algorithms.week1.WeightedQuickUnionWithPathCompressionUF\n\n            @Target(AnnotationTarget::METHOD)\n            @Retention(RetentionPolicy.RUNTIME)\n            fun main(args: Array<String>) {\n                val uf = WeightedQuickUnionWithPathCompressionUF()\n                uf.union(10, 10)\n                uf.union(8, 8)\n                uf.union(6, 6)\n                uf.union(9, 9)\n                uf.union(2, 2)\n                uf.union(1, 1)\n                uf.union(3, 3)\n                uf.union(4, 4)\n                uf.union(5, 5)\n                uf.union(7, 7)\n                uf.union(6, 6)\n                uf.union(7, 7)\n                uf.union(8, 8)\n                uf.union(9, 9)\n                uf.union(10, 10)\n                uf.union(11, 11)\n                uf.union(12, 12)\n                uf.union(13, 13)\n                uf.union(14, 14)\n                uf.union(15, 15)\n                uf.union(16, 16)\n                uf.union(17, 17)\n                uf.union(18, 18)\n                uf.union(19, 19)\n                uf.union(20, 20)\n                uf.union(21, 21)\n                uf.union(22, 22)\n                uf.union(23, 23)\n                uf.union(24, 24)\n                uf.union(25, 25)\n                uf.union(26, 26)\n                uf.union(27, 27)\n                uf.union(28, 28)\n                uf.union(29, 29)\n                uf.union(30, 30)\n                uf.union(31, 31)\n                uf.union(32, 32)\n                uf.union(33, 33)\n                uf.union(34, 34)\n                uf.union(35, 35)\n                uf.union(36, 36)\n                uf.union(37, 37)\n                uf.union(38, 38)\n                uf.union(39, 39)\n                uf.union(40, 40)\n                uf.union(41, 41)\n                uf.union(42, 42)\n                uf.union(43, 43)\n                uf.union(44, 44)\n                uf.union(45, 45)\n                uf.union(46, 46)\n                uf.union(47, 47)\n                uf.union(48, 48)\n                uf.union(49, 49)\n                uf.union(50, 50)\n                uf.union(51, 51)\n                uf.union(52, 52)\n                uf.union(53, 53)\n                uf.union(54, 54)\n                uf.union(55, 55)\n                uf.union(56, 56)\n                uf.union(57, 57)\n                uf.union(58, 58)\n                uf.union(59, 59)\n                uf.union(60, 60)\n                uf.union(61, 61)\n                uf.union(62, 62)\n                uf.union(63, 63)\n                uf.union(64, 64)\n                uf.union(65, 65)\n                uf.union(66, 66)\n                uf.union(67, 67)\n                uf.union(68, 68)\n                uf.union(69, 69)\n                uf.union(70, 70)\n                uf.union(71, 71)\n                uf.union(72, 72)\n                uf.union(73, 73)\n                uf.union(74, 74)\n                uf.union(75, 75)\n                uf.union(76, 76)\n                uf.union(77, 77)\n                uf.union(78, 78)\n                uf.union(79, 79)\n                uf.union(80, 80)\n                uf.union(81, 81)\n                uf.union(82, 82)\n                uf.union(83, 83)\n                uf.union(84, 84)\n                uf.union(85, 85)\n                uf.union(86, 86)\n                uf.union(87, 87)\n                uf.union(88, 88)\n                uf.union(89, 89)\n                uf.union(90, 90)\n                uf.union(91, 91)\n                uf.union(92, 92)\n                uf.union(93, 93)\n                uf.union(94, 94)\n                uf.union(95, 95)\n                uf.union(96, 96)\n                uf.union(97, 97)\n                uf.union(98, 98)\n                uf.union(99, 99)\n                uf.union(100, 100)\n                uf.union(101, 101)\n                uf.union(102, 102)\n                uf.union(103, 103)\n                uf.union(104, 104)\n                uf.union(105, 105)"}
{"kt_path": "boris920308__HoOne__8881468/hoon/HoonAlgorithm/src/main/kotlin/programmers/lv01/Lv1_68935.kt", "Qwen2.5-Coder-0.5B-Instruct": "fun main(args: Array<String>) {\n    println(\"Hello, World!\")\n}"}
{"kt_path": "korilin__DSA-kt__b96ba1b/src/main/kotlin/sort_algorithm/quickSort.kt", "Qwen2.5-Coder-0.5B-Instruct": "fun quickSort(arr: IntArray) {\n    quickSort(arr, 0, arr.size - 1)\n}\n\nprivate fun quickSort(arr: IntArray, low: Int, high: Int) {\n    if (low < high) {\n        val pivot = partition(arr, low, high)\n        quickSort(arr, low, pivot - 1)\n        quickSort(arr, pivot + 1, high)\n    }\n}\n\nprivate fun partition(arr: IntArray, low: Int, high: Int): Int {\n    val pivot = arr[high]\n    var i = low - 1\n\n    for (j in low until high) {\n        if (arr[j] < pivot) {\n            i++\n            arr[i] = arr[j]\n        }\n    }\n\n    arr[i + 1] = arr[high]\n    return i + 1\n}"}
{"kt_path": "gardnerdickson__advent-of-code-2015__4a23ab3/src/day_10.kt", "Qwen2.5-Coder-0.5B-Instruct": "fun main(args: Array<String>) {\n    val day10 = Day10()\n    println(day10.part1(\"Part 1\"))\n    println(day10.part2(\"Part 2\"))\n}"}
{"kt_path": "gardnerdickson__advent-of-code-2015__4a23ab3/src/day_2.kt", "Qwen2.5-Coder-0.5B-Instruct": "fun main(args: Array<String>) {\n    val day2 = Day2()\n    val part1 = day2.part1(\"res/day_2_input.txt\")\n    val part2 = day2.part2(\"Part 1:\")\n    val part3 = day2.part2(\"Part 2:\")\n    println(part1)\n    println(part2)\n    println(part3)\n}"}
{"kt_path": "gardnerdickson__advent-of-code-2015__4a23ab3/src/day_3.kt", "Qwen2.5-Coder-0.5B-Instruct": "import java.io.PrintStream\n\nfun main(args: Array<String>) {\n    val day3 = Day3()\n    val part1 = day3.part1(\"Part 1:\")\n    val part2 = day3.part2(\"Part 2:\")\n    val stringBuilder = StringBuilder()\n    stringBuilder.append(part1)\n    stringBuilder.append(part2)\n    stringBuilder.append(\"\\n\")\n    stringBuilder.append(\"Day 3\\n\")\n    stringBuilder.append(\"Part 1:\\n\")\n    stringBuilder.append(day3.part1(\"res/day_3_input.txt\"))\n    stringBuilder.append(\"\\n\")\n    stringBuilder.append(\"Part 2:\\n\")\n    stringBuilder.append(day3.part2(\"res/day_3_input.txt\"))\n    println(stringBuilder.toString())\n}"}
{"kt_path": "antop-dev__algorithm__9a3e762/src/main/kotlin/kr/co/programmers/P161988.kt", "Qwen2.5-Coder-0.5B-Instruct": "package kr.co.programmers\n\nimport java.lang.reflect.Method\n\nfun main() {\n    val p161988 = P161988()\n    println(p161988)\n}\n\nclass P161988 {\n    fun <T> solution(t: T[]): Long {\n        val sequence = \"P161988.kt\"\n        val sequenceClass = Class.forName(sequence)\n        val sequenceMethod = sequenceClass.getMethod(\"solution\", Int::class.java)\n        val sequenceArgs = sequenceMethod.invoke(null, t)\n\n        val max = { sequenceArgs[0], sequenceArgs[1] }\n        val maxArgs = max.invoke(null, sequenceArgs[0], sequenceArgs[1])\n\n        val result = maxArgs[0] + maxArgs[1]\n        println(result)\n    }\n\n    private fun max(a: Int, b: Int): Int {\n        val maxA = Math.max(a, b)\n        val maxB = Math.max(a, b)\n        return maxA + maxB\n    }\n}"}
{"kt_path": "alexjlockwood__bees-and-bombs-compose__0d7a86b/app/src/main/java/com/alexjlockwood/beesandbombs/demos/utils/MathUtils.kt", "Qwen2.5-Coder-0.5B-Instruct": "package com.alexjlockwood.beesandbombs.demos.utils\n\nimport java.lang.Math.sqrt\n\nfun PI: Float = sqrt(2.0f)\nfun TWO_PI: Float = sqrt(2.0f * 2.0f)\nfun HALF_PI: Float = sqrt(2.0f * 2.0f * 2.0f)\nfun dist(x: Float, y: Float, z: Float, w: Float): Float {\n    return sqrt((x - w) * (x - w) + (y - z) * (y - z) + (z - x) * (z - x))\n}\n\nfun lerp(x: Float, y: Float, z: Float): Float {\n    return (1.0f - x) * z + x * y\n}\n\nfun map(x: Float, y: Float, z: Float, w: Float, t: Float): Float {\n    return (1.0f - x) * (1.0f - y) * (1.0f - z) + x * y * (1.0f - z) + z * x * (1.0f - y)\n}\n\nfun toDegrees(x: Float): Float {\n    return x * 180.0f / Math.PI\n}\n\nfun ease(x: Float): Float {\n    val t = x * 0.5f\n    return when {\n        t < 0.5f -> 0.5f\n        else -> 1.0f - 0.5f\n    }\n}"}
{"kt_path": "chengw315__daily-study__501b881/letcode/src/main/java/daily/LeetCodeLCP13.kt", "Qwen2.5-Coder-0.5B-Instruct": "package daily\n\nclass SolutionLCP13 {\n    fun minimalSteps(vararg strings: String): Int {\n        val minSteps = strings.map { it.length }.min()\n        return minSteps + strings.size - minSteps * 2\n    }\n}\n\nfun main(args: Array<String>) {\n    val solution = SolutionLCP13()\n    println(solution.minimalSteps(\"S\", \"M..\", \"M.T\"))\n}"}
{"kt_path": "rajatenzyme__Coding-Journey__65a0570/Algo_Ds_Notes-master/Algo_Ds_Notes-master/Floyd_Warshall_Algorithm/Floyd_Warshall_Algorithm.kt", "Qwen2.5-Coder-0.5B-Instruct": "import java.io.File\n\nfun main(args: Array<String>) {\n    val file = File(\"Floyd_Warshall_Algorithm.kt\")\n    val code = file.readText()\n    val kotlinCode = convertToKotlin(code)\n    println(kotlinCode)\n}\n\nfun convertToKotlin(code: String): String {\n    // Implement the logic to convert Java byte-code to Kotlin\n    // This is a placeholder for the actual conversion logic\n    return \"Kotlin code not implemented yet\"\n}"}
{"kt_path": "brunorene__advent_of_code_2018__0cb6814/src/main/kotlin/advent/of/code/day17/Solution.kt", "Qwen2.5-Coder-0.5B-Instruct": "import java.io.File\nimport java.util.Set\n\nfun main() {\n    val input = File(\"day17.txt\")\n    val multipleCoord = Regex(\"(x|y)=([.0-9]+)\\\\.\\\\.([.0-9]+)\")\n    val oneCoord = Regex(\"(x|y)=([.0-9]+)\\\\.\\\\.([.0-9]+)\")\n\n    fun part1() {\n        val file = File(\"day17.txt\")\n        val input = File(\"day17.txt\")\n        val multipleCoord = Regex(\"(x|y)=([.0-9]+)\\\\.\\\\.([.0-9]+)\")\n        val oneCoord = Regex(\"(x|y)=([.0-9]+)\\\\.\\\\.([.0-9]+)\")\n\n        val file = File(\"day17.txt\")\n        val input = File(\"day17.txt\")\n        val multipleCoord = Regex(\"(x|y)=([.0-9]+)\\\\.\\\\.([.0-9]+)\")\n        val oneCoord = Regex(\"(x|y)=([.0-9]+)\\\\.\\\\.([.0-9]+)\")\n\n        val file = File(\"day17.txt\")\n        val input = File(\"day17.txt\")\n        val multipleCoord = Regex(\"(x|y)=([.0-9]+)\\\\.\\\\.([.0-9]+)\")\n        val oneCoord = Regex(\"(x|y)=([.0-9]+)\\\\.\\\\.([.0-9]+)\")\n\n        val file = File(\"day17.txt\")\n        val input = File(\"day17.txt\")\n        val multipleCoord = Regex(\"(x|y)=([.0-9]+)\\\\.\\\\.([.0-9]+)\")\n        val oneCoord = Regex(\"(x|y)=([.0-9]+)\\\\.\\\\.([.0-9]+)\")\n\n        val file = File(\"day17.txt\")\n        val input = File(\"day17.txt\")\n        val multipleCoord = Regex(\"(x|y)=([.0-9]+)\\\\.\\\\.([.0-9]+)\")\n        val oneCoord = Regex(\"(x|y)=([.0-9]+)\\\\.\\\\.([.0-9]+)\")\n\n        val file = File(\"day17.txt\")\n        val input = File(\"day17.txt\")\n        val multipleCoord = Regex(\"(x|y)=([.0-9]+)\\\\.\\\\.([.0-9]+)\")\n        val oneCoord = Regex(\"(x|y)=([.0-9]+)\\\\.\\\\.([.0-9]+)\")\n\n        val file = File(\"day17.txt\")\n        val input = File(\"day17.txt\")\n        val multipleCoord = Regex(\"(x|y)=([.0-9]+)\\\\.\\\\.([.0-9]+)\")\n        val oneCoord = Regex(\"(x|y)=([.0-9]+)\\\\.\\\\.([.0-9]+)\")\n\n        val file = File(\"day17.txt\")\n        val input = File(\"day17.txt\")\n        val multipleCoord = Regex(\"(x|y)=([.0-9]+)\\\\.\\\\.([.0-9]+)\")\n        val oneCoord = Regex(\"(x|y)=([.0-9]+)\\\\.\\\\.([.0-9]+)\")\n\n        val file = File(\"day17.txt\")\n        val input = File(\"day17.txt\")\n        val multipleCoord = Regex(\"(x|y)=([.0-9]+)\\\\.\\\\.([.0-9]+)\")\n        val oneCoord = Regex(\"(x|y)=([.0-9]+)\\\\.\\\\.([.0-9]+)\")\n\n        val file = File(\"day17.txt\")\n        val input = File(\"day17.txt\")\n        val multipleCoord = Regex(\"(x|y)=([.0-9]+)\\\\.\\\\.([.0-9]+)\")\n        val oneCoord = Regex(\"(x|y)=([.0-9]+)\\\\.\\\\.([.0-9]+)\")\n\n        val file = File(\"day17.txt\")\n        val input = File(\"day17.txt\")\n        val multipleCoord = Regex(\"(x|y)=([.0-9]+)\\\\.\\\\.([.0-9]+)\")\n        val oneCoord = Regex(\"(x|y)=([.0-9]+)\\\\.\\\\.([.0-9]+)\")\n\n        val file = File(\"day17.txt\")\n        val input = File(\"day17.txt\")\n        val multipleCoord = Regex(\"(x|y)=([.0-9]+)\\\\.\\\\.([.0-9]+)\")\n        val oneCoord = Regex(\"(x|y)=([.0-9]+)\\\\.\\\\.([.0-9]+)\")\n\n        val file = File(\"day17.txt\")\n        val input = File(\"day17.txt\")\n        val multipleCoord = Regex(\"(x|y)=([.0-9]+)\\\\.\\\\.([.0-9]+)\")\n        val oneCoord = Regex(\"(x|y)=([.0-9]+)\\\\.\\\\.([.0-9]+)\")\n\n        val file = File(\"day17.txt\")\n        val input = File(\"day17.txt\")\n        val multipleCoord = Regex(\"(x|y)=([.0-9]+)\\\\.\\\\.([.0-9]+)\")\n        val oneCoord = Regex(\"(x|y)=([.0-9]+)\\\\.\\\\.([.0-9]+)\")\n\n        val file = File(\"day17.txt\")\n        val input = File(\"day17.txt\")\n        val multipleCoord = Regex(\"(x|y)=([.0-9]+)\\\\.\\\\.([.0-9]+)\")\n        val oneCoord = Regex(\"(x|y)=([.0-9]+)\\\\.\\\\.([.0-9]+)\")\n\n        val file = File(\"day17.txt\")\n        val input = File(\"day17.txt\")\n        val multipleCoord = Regex(\"(x|y)=([.0-9]+)\\\\.\\\\.([.0-9]+)\")\n        val oneCoord = Regex(\"(x|y)=([.0-9]+)\\\\.\\\\.([.0-9]+)\")\n\n        val file = File(\"day17.txt\")\n        val input = File(\"day17.txt\")\n        val multipleCoord = Regex(\"(x|y)=([."}
{"kt_path": "Simplation__OpenSourceRepository__d45feaa/算法/一维数组的动态和1480.kt", "Qwen2.5-Coder-0.5B-Instruct": "package com.example.rain_demo.algorithm.一维数组的动态和1480Kt\n\nimport java.io.PrintStream\n\nfun main() {\n    val nums = arrayOf(1, 2, 3, 4, 5)\n    val newNum = \"newNum\"\n    val sumArr = sumArr(nums, nums, nums)\n\n    println(\"newNum: $newNum\")\n    println(\"sumArr: $sumArr\")\n}\n\nfun sumArr(arr1: IntArray, arr2: IntArray, arr3: IntArray): Int {\n    var result = 0\n    for (i in arr1.indices) {\n        result += arr1[i] + arr2[i] + arr3[i]\n    }\n    return result\n}"}
{"kt_path": "jimmymorales__project-euler__e881cad/src/main/kotlin/Problem3.kt", "Qwen2.5-Coder-0.5B-Instruct": "fun main() {\n    val result = solution3(600851475143L)\n    println(result)\n}\n\nprivate fun solution3(number: Long): Long {\n    val sqrt = Math.sqrt(number.toDouble())\n    val rounded = sqrt.round()\n    val square = rounded * rounded\n    val squareRoot = Math.sqrt(square.toDouble())\n    val result = squareRoot.toDouble()\n    println(result)\n}"}
{"kt_path": "age-series__ElectricalAge2__86d843f/src/main/kotlin/org/eln2/mc/data/SegmentTree.kt", "Qwen2.5-Coder-0.5B-Instruct": "import org.eln2.mc.data.SegmentTreeNode\n\nfun main() {\n    val segmentTree = SegmentTree<*>()\n    println(segmentTree.queryOrNull(10.0))\n    println(segmentTree.query(10.0))\n}"}
{"kt_path": "ykrytsyn__leetcode-in-kotlin__0acf2a6/src/main/kotlin/leetcode/UniquePaths.kt", "Qwen2.5-Coder-0.5B-Instruct": "fun main() {\n    val uniquePaths = UniquePaths()\n    println(uniquePaths.dynamicProgramming(3, 3))\n    println(uniquePaths.recursive(3, 3))\n}"}
{"kt_path": "quincy__euler-kotlin__01d96f6/src/main/kotlin/com/quakbo/euler/Euler6.kt", "Qwen2.5-Coder-0.5B-Instruct": "import java.io.PrintStream\n\nfun main(args: Array<String>) {\n    val sumOfSquares = sumOfSquares()\n    val squareOfSums = squareOfSums()\n    println(\"Sum of squares: $sumOfSquares\")\n    println(\"Square of sums: $squareOfSums\")\n}\n\nfun sumOfSquares(): Int {\n    val sequence = generateSequence()\n    val sum = sequence.sumOfInt()\n    return sum\n}\n\nfun squareOfSums(sequence: Sequence<Int>): Int {\n    val sum = sequence.sumOfInt()\n    val result = sum * sum\n    return result\n}\n\nfun generateSequence(): Sequence<Int> {\n    return listOf(1, 2, 3, 4, 5, 6, 7, 8, 9, 10)\n}\n\nfun main$lambda$0(n: Int): Int {\n    return n * n\n}\n\nfun main$lambda$1(n: Int): Int {\n    return n + 1\n}"}
{"kt_path": "Kirchberg__BigDataPL__b6a459a/LR7/src/main/kotlin/Task1V3.kt", "Qwen2.5-Coder-0.5B-Instruct": "import java.lang.CharSequence\nimport java.util.List\nimport java.util.Arrays\nimport java.util.Collections\nimport java.util.function.Function1\n\nfun main() {\n    val task1V3 = Task1V3Kt()\n    task1V3.task1V3()\n}\n\nclass Task1V3Kt {\n    fun task1V3() {\n        val chars = listOf(\"a\", \"b\", \"c\")\n        val words = chars.map { it.toString() }\n        val longestWordChain = words.joinToString(\", \")\n        println(longestWordChain)\n    }\n}"}
{"kt_path": "fredyw__leetcode__a59d77c/src/main/kotlin/leetcode/Problem2064.kt", "Qwen2.5-Coder-0.5B-Instruct": "package leetcode\n\nclass Problem2064 {\n    fun minimizedMaximum(a: Int, b: IntArray): Int {\n        val quantities = b.map { it.toString() }\n        val quantitiesList = quantities.toTypedArray()\n        val result = findMinimizedMaximum(quantitiesList)\n        return result\n    }\n\n    private fun findMinimizedMaximum(quantities: Array<String>): Int {\n        val max = quantities.maxOrNull() ?: 0\n        val min = quantities.minOrNull() ?: 0\n        return Math.max(max, min)\n    }\n}\n\n// Output: 10"}
