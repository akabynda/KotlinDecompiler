{"kt_path": "remisultan__multiarm-bandit-algorithm-kotlin__ead934d/core-bandit/src/main/kotlin/org/rsultan/bandit/algorithms/BanditAlgorithm.kt", "CodeLlama-7b-Instruct-hf": "interface BanditAlgorithm {\n    fun selectArm(): Int\n    fun update(arm: Int, reward: Float)\n}"}
{"kt_path": "n81ur3__kotlin-coding-challenges__fdc5941/src/main/kotlin/adventofcode2018/Day22ModeMaze.kt", "CodeLlama-7b-Instruct-hf": "class Day22ModeMaze {\n    constructor()\n}"}
{"kt_path": "n81ur3__kotlin-coding-challenges__fdc5941/src/main/kotlin/adventofcode2017/Day21FractalArt.kt", "CodeLlama-7b-Instruct-hf": "class Day21FractalArt {\n    constructor()\n}"}
{"kt_path": "n81ur3__kotlin-coding-challenges__fdc5941/src/main/kotlin/adventofcode2017/Day03SpiralMemory.kt", "CodeLlama-7b-Instruct-hf": "class Day03SpiralMemory {\n    constructor()\n}"}
{"kt_path": "n81ur3__kotlin-coding-challenges__fdc5941/src/main/kotlin/adventofcode2019/Day03CrossedWires.kt", "CodeLlama-7b-Instruct-hf": "class Day03CrossedWires {\n    constructor()\n}"}
{"kt_path": "n81ur3__kotlin-coding-challenges__fdc5941/src/main/kotlin/adventofcode2018/Day04ReposeRecord.kt", "CodeLlama-7b-Instruct-hf": "class Day04ReposeRecord {\n    constructor()\n}"}
{"kt_path": "n81ur3__kotlin-coding-challenges__fdc5941/src/main/kotlin/adventofcode2017/Day08LikeRegisters.kt", "CodeLlama-7b-Instruct-hf": "class Day08LikeRegisters {\n    constructor()\n}"}
{"kt_path": "n81ur3__kotlin-coding-challenges__fdc5941/src/main/kotlin/adventofcode2018/Day11ChronalCharge.kt", "CodeLlama-7b-Instruct-hf": "class Day11ChronalCharge {\n    constructor()\n}"}
{"kt_path": "n81ur3__kotlin-coding-challenges__fdc5941/src/main/kotlin/adventofcode2020/Day19MonsterMessage.kt", "CodeLlama-7b-Instruct-hf": "class Day19MonsterMessage {\n    constructor()\n}"}
{"kt_path": "n81ur3__kotlin-coding-challenges__fdc5941/src/main/kotlin/adventofcode2017/Day07RecursiveCircus.kt", "CodeLlama-7b-Instruct-hf": "class Day07RecursiveCircus {\n    constructor()\n}"}
{"kt_path": "n81ur3__kotlin-coding-challenges__fdc5941/src/main/kotlin/adventofcode2019/Day12TheNbodyProblem.kt", "CodeLlama-7b-Instruct-hf": "package adventofcode2019\n\nclass Day12TheNbodyProblem {\n    constructor()\n}"}
{"kt_path": "n81ur3__kotlin-coding-challenges__fdc5941/src/main/kotlin/adventofcode2018/Day15BeverageBandits.kt", "CodeLlama-7b-Instruct-hf": "class Day15BeverageBandits {\n    constructor()\n}"}
{"kt_path": "n81ur3__kotlin-coding-challenges__fdc5941/src/main/kotlin/adventofcode2020/Day07HandyHaversacks.kt", "CodeLlama-7b-Instruct-hf": "class Day07HandyHaversacks {\n    constructor()\n}"}
{"kt_path": "n81ur3__kotlin-coding-challenges__fdc5941/src/main/kotlin/adventofcode2018/Day07TheSumOfItsParts.kt", "CodeLlama-7b-Instruct-hf": "class Day07TheSumOfItsParts {\n    constructor()\n}"}
{"kt_path": "n81ur3__kotlin-coding-challenges__fdc5941/src/main/kotlin/adventofcode2017/Day25TheHaltingProblem.kt", "CodeLlama-7b-Instruct-hf": "class Day25TheHaltingProblem {\n    constructor()\n}"}
{"kt_path": "n81ur3__kotlin-coding-challenges__fdc5941/src/main/kotlin/adventofcode2019/Day06UniversalOrbitMap.kt", "CodeLlama-7b-Instruct-hf": "class Day06UniversalOrbitMap {\n    constructor()\n}"}
{"kt_path": "n81ur3__kotlin-coding-challenges__fdc5941/src/main/kotlin/adventofcode2019/Day10MonitoringStation.kt", "CodeLlama-7b-Instruct-hf": "class Day10MonitoringStation {\n    constructor()\n}"}
{"kt_path": "n81ur3__kotlin-coding-challenges__fdc5941/src/main/kotlin/adventofcode2018/Day06ChronalCoordinates.kt", "CodeLlama-7b-Instruct-hf": "class Day06ChronalCoordinates {\n    constructor()\n}"}
{"kt_path": "n81ur3__kotlin-coding-challenges__fdc5941/src/main/kotlin/adventofcode2020/Day21AllergenAssessment.kt", "CodeLlama-7b-Instruct-hf": "class Day21AllergenAssessment {\n    constructor()\n}"}
{"kt_path": "n81ur3__kotlin-coding-challenges__fdc5941/src/main/kotlin/adventofcode2017/Day24ElectromagneticMoat.kt", "CodeLlama-7b-Instruct-hf": "class Day24ElectromagneticMoat {\n    constructor()\n}"}
{"kt_path": "n81ur3__kotlin-coding-challenges__fdc5941/src/main/kotlin/adventofcode2018/Day12SubterraneanSustainability.kt", "CodeLlama-7b-Instruct-hf": "class Day12SubterraneanSustainability {\n    constructor()\n}"}
{"kt_path": "n81ur3__kotlin-coding-challenges__fdc5941/src/main/kotlin/adventofcode2018/Day23ExperimentalEmergencyTeleportation.kt", "CodeLlama-7b-Instruct-hf": "class Day23ExperimentalEmergencyTeleportation {\n    constructor()\n}"}
{"kt_path": "alebedev__aoc2022__d6ba46b/src/main/kotlin/Map.kt", "CodeLlama-7b-Instruct-hf": "class MapKt {\n    companion object {\n        @JvmStatic\n        fun main(args: Array<String>) {\n            AocMap.INSTANCE.solve()\n        }\n    }\n}"}
{"kt_path": "andrewrlee__adventOfCode2020__a9c21a6/src/main/kotlin/File09.kt", "CodeLlama-7b-Instruct-hf": "class Challenge09 {\n    fun solve() {\n        val a = 10\n        val b = 20\n        val c = 30\n        val d = 40\n        val e = 50\n        val f = 60\n        val g = 70\n        val h = 80\n        val i = 90\n        val j = 100\n        val k = 110\n        val l = 120\n        val m = 130\n        val n = 140\n        val o = 150\n        val p = 160\n        val q = 170\n        val r = 180\n        val s = 190\n        val t = 200\n        val u = 210\n        val v = 220\n        val w = 230\n        val x = 240\n        val y = 250\n        val z = 260\n    }\n}"}
{"kt_path": "andrewrlee__adventOfCode2020__a9c21a6/src/main/kotlin/File08.kt", "CodeLlama-7b-Instruct-hf": "class Challenge08 {\n    fun solve() {\n        val numbers = listOf(1, 2, 3, 4, 5)\n        val sum = numbers.sum()\n        println(sum)\n    }\n}\n\nfun main(args: Array<String>) {\n    Challenge08().solve()\n}"}
{"kt_path": "andrewrlee__adventOfCode2020__a9c21a6/src/main/kotlin/File02.kt", "CodeLlama-7b-Instruct-hf": "class Challenge02 {\n    fun solve() {\n        println(\"Hello, World!\")\n    }\n}\n\nfun main(args: Array<String>) {\n    Challenge02().solve()\n}"}
{"kt_path": "andrewrlee__adventOfCode2020__a9c21a6/src/main/kotlin/File07.kt", "CodeLlama-7b-Instruct-hf": "class Challenge07 {\n    fun solve() {\n        println(\"Hello World\")\n    }\n}\n\nfun main(args: Array<String>) {\n    Challenge07().solve()\n}"}
{"kt_path": "charlesfranciscodev__codingame__3ec8060/puzzles/kotlin/src/war/war.kt", "CodeLlama-7b-Instruct-hf": "package war\n\nimport kotlin.jvm.internal.Intrinsics\n\npublic final class WarKt {\n    public static final void main(String[] args) {\n        Intrinsics.checkNotNullParameter(args, \"args\")\n        val game = Game()\n        game.play()\n    }\n}"}
{"kt_path": "al-volkov__spbu_2020_kotlin_homeworks__5049681/src/main/kotlin/homework_5/Task1.kt", "CodeLlama-7b-Instruct-hf": "fun isNumber(s: String): Boolean {\n    s.checkNotNullParameter(\"s\")\n    return s.toIntOrNull() != null\n}"}
{"kt_path": "iafsilva__codility-lessons__5d86aef/src/main/kotlin/lesson3/FrogJmp.kt", "CodeLlama-7b-Instruct-hf": "class FrogJmp {\n    fun solution(x: Int, y: Int, d: Int): Int {\n        val l = x - y\n        val n = l / d\n        val m = l % d\n        return if (m == 0) n else n + 1\n    }\n}"}
{"kt_path": "mikhalchenko-alexander__advent-of-kotlin-2018-week1__c483ade/src/main/kotlin/com/anahoret/pathfinding/MarkingWayOnMap.kt", "CodeLlama-7b-Instruct-hf": "package com.anahoret.pathfinding\n\nimport kotlin.jvm.internal.Intrinsics\n\npublic class MarkingWayOnMapKt {\n    public companion object {\n        public final fun addPath(map: String): String {\n            Intrinsics.checkNotNullParameter(map, \"map\")\n            return Graph.INSTANCE.getMapWithPath(map)\n        }\n    }\n}"}
{"kt_path": "charlesfranciscodev__codingame__3ec8060/puzzles/kotlin/src/surface/surface.kt", "CodeLlama-7b-Instruct-hf": "class SurfaceKt {\n    companion object {\n        const val LAND = 'L'\n        const val WATER = 'W'\n        const val DEFAULT_INDEX = 0\n    }\n\n    fun main(args: Array<String>) {\n        val grid = Grid()\n        grid.readGameInput()\n        grid.test()\n    }\n}\n\nclass Grid {\n    fun readGameInput() {\n        // TODO\n    }\n\n    fun test() {\n        // TODO\n    }\n}"}
{"kt_path": "andrew-suprun__AoC-2023__dd5f53e/src/main/kotlin/day03_oop/day03_oop.kt", "CodeLlama-7b-Instruct-hf": "package day03_oop\n\nclass Part1(val data: String) {\n    fun run() {\n        println(\"Part1: $data\")\n    }\n}\n\nclass Part2(val data: String) {\n    fun run() {\n        println(\"Part2: $data\")\n    }\n}\n\nfun main() {\n    Part1(\"input.data\").run()\n    Part2(\"input.data\").run()\n}"}
{"kt_path": "getnahid__programing-problem-solves-kotlin__589c392/CyclicRotation.kt", "CodeLlama-7b-Instruct-hf": "fun solution(A: IntArray, K: Int): IntArray {\n    val N = A.size\n    val result = IntArray(N)\n    var i = 0\n    var j = 0\n    while (j < N) {\n        result[j] = A[(i + K) % N]\n        i++\n        j++\n    }\n    return result\n}"}
{"kt_path": "linisme__LeetCodeInKotlin__4382afc/LongestPalindrome.kt", "CodeLlama-7b-Instruct-hf": "class LongestPalindromeSolution {\n    fun longestPalindrome(s: String): String {\n        val len = s.length\n        val dp = Array(len) { IntArray(len) }\n        var maxLen = 0\n        var maxStart = 0\n        for (i in 0 until len) {\n            for (j in i + 1 until len) {\n                if (s[i] == s[j]) {\n                    if (j - i < 3) {\n                        dp[i][j] = 2\n                    } else {\n                        dp[i][j] = dp[i + 1][j - 1] + 2\n                    }\n                    if (dp[i][j] > maxLen) {\n                        maxLen = dp[i][j]\n                        maxStart = i\n                    }\n                }\n            }\n        }\n        return s.substring(maxStart, maxStart + maxLen)\n    }\n}"}
{"kt_path": "iafsilva__codility-lessons__5d86aef/src/main/kotlin/lesson2/OddOccurrencesInArray.kt", "CodeLlama-7b-Instruct-hf": "class OddOccurrencesInArray {\n    fun solution(A: IntArray): Int {\n        var a = 0\n        var b = 0\n        var c = A.size\n        var d = 0\n        while (d < c) {\n            d = A[d]\n            a = a xor d\n            b++\n        }\n        return a\n    }\n}"}
{"kt_path": "jjeda__playground__5d1ee6c/src/oop/algorithm/ProgressionNextNumber.kt", "CodeLlama-7b-Instruct-hf": "package oop.algorithm\n\nclass ProgressionNextNumber {\n    fun solution(arr: IntArray): Int {\n        ProgressionHelper(arr.toList()).nextInt()\n    }\n}\n\nclass ProgressionHelper(private val list: List<Int>) {\n    fun nextInt(): Int {\n        return list.first()\n    }\n}"}
{"kt_path": "linisme__LeetCodeInKotlin__4382afc/LengthOfLongestSubstring.kt", "CodeLlama-7b-Instruct-hf": "class LengthOfLongestSubstringSolution2 {\n    fun lengthOfLongestSubstring(s: String): Int {\n        if (s.isEmpty()) return 0\n        var max = 1\n        var start = 0\n        var end = 0\n        for (i in 1 until s.length) {\n            if (s[i] != s[start]) {\n                max = max(max, i - start)\n                start = i\n            }\n            end = i\n        }\n        return max(max, end - start + 1)\n    }\n}"}
{"kt_path": "nschulzke__mancala-puzzle-solver__b130d3b/src/main/kotlin/Main.kt", "CodeLlama-7b-Instruct-hf": "package com.nschulzke\n\nimport java.util.Set\n\nclass MainKt {\n    companion object {\n        private val mancalaIndices: Set<Int> = setOf(6, 13)\n    }\n}"}
{"kt_path": "sysion__DataStructureAlgorithmKt__6f9afda/TwoSumLessThanTarget.kt", "CodeLlama-7b-Instruct-hf": "package com.example\n\nfun main() {\n    val intArray = intArrayOf(10, 20, 30)\n    val sum = SumTwoNumbersLessThanTarget(intArray, 15)\n    println(sum)\n}\n\nfun SumTwoNumbersLessThanTarget(intArray: IntArray, target: Int): Int {\n    var sum = -1\n    for (i in intArray.indices) {\n        for (j in intArray.indices) {\n            if (intArray[i] + intArray[j] < target) {\n                sum = intArray[i] + intArray[j]\n                break\n            }\n        }\n    }\n    return sum\n}"}
{"kt_path": "linisme__LeetCodeInKotlin__4382afc/FineMedianSortedArrays.kt", "CodeLlama-7b-Instruct-hf": "fun main(args: Array<String>) {\n    val solution = FindMedianSortedArraysSolution()\n    val nums1 = intArrayOf(0, 2)\n    val nums2 = intArrayOf(1, 3)\n    val median = solution.findMedianSortedArrays(nums1, nums2)\n    println(median)\n}"}
{"kt_path": "n81ur3__kotlin-coding-challenges__fdc5941/src/main/kotlin/adventofcode2018/Day18SettlersOfTheNorthPole.kt", "CodeLlama-7b-Instruct-hf": "package adventofcode2018\n\nimport java.util.Arrays\n\nclass Day18SettlersOfTheNorthPole {\n    fun hash(list: List<List<AreaElement>>): Int {\n        val list = list.toTypedArray()\n        return Arrays.deepHashCode(list)\n    }\n}\n\nclass AreaElement"}
{"kt_path": "iafsilva__codility-lessons__5d86aef/src/main/kotlin/lesson3/PermMissingElem.kt", "CodeLlama-7b-Instruct-hf": "class PermMissingElem {\n    fun solution(a: IntArray): Int {\n        if (a.size == 1) return 1\n        if (a.size == 0) return 0\n        a.sort()\n        var i = 0\n        while (i < a.size - 1) {\n            if (a[i] == a[i + 1] - 1) return i + 1\n            i++\n        }\n        return a.size + 1\n    }\n}"}
{"kt_path": "getnahid__programing-problem-solves-kotlin__589c392/OddOccurrencesInArray.kt", "CodeLlama-7b-Instruct-hf": "package code\n\nimport kotlin.collections.ArraysKt.sort\n\nclass OddOccurrencesInArray {\n    companion object {\n        fun solution(A: IntArray): Int {\n            A.sort()\n            var i = 0\n            var j = A.size - 1\n            var result = 0\n            while (i < j) {\n                if (A[i] == A[j]) {\n                    j--\n                } else {\n                    result = A[i]\n                    i += 2\n                }\n            }\n            return result\n        }\n    }\n}"}
{"kt_path": "rupeshsasne__coursera-algorithms-part1__341634c/classroom/src/main/kotlin/com/radix2/algorithms/week3/SortingLinkedList.kt", "CodeLlama-7b-Instruct-hf": "package com.radix2.algorithms.week3\n\nimport java.util.*\n\nfun main(args: Array<String>) {\n    val list = LinkedList<Int>()\n    for (i in 0..10) {\n        list.add(i)\n    }\n    list.reverseRecurrsive()\n    println(list)\n}\n\nclass LinkedList<T : Comparable<T>> {\n    private var head: Node<T>? = null\n    private var tail: Node<T>? = null\n\n    fun add(element: T) {\n        val node = Node(element)\n        if (head == null) {\n            head = node\n            tail = node\n        } else {\n            tail!!.next = node\n            tail = node\n        }\n    }\n\n    fun reverseRecurrsive() {\n        if (head == null) return\n        var current = head\n        var next = current?.next\n        while (next != null) {\n            current?.next = next?.next\n            next?.next = current\n            current = next\n            next = current?.next\n        }\n        val temp = head\n        head = tail\n        tail = temp\n    }\n\n    override fun toString(): String {\n        val result = StringBuilder()\n        var current = head\n        while (current != null) {\n            result.append(current.element)\n            current = current.next\n        }\n        return result.toString()\n    }\n\n    private class Node<T>(val element: T) {\n        var next: Node<T>? = null\n    }\n}"}
{"kt_path": "boris920308__HoOne__8881468/hoon/HoonAlgorithm/src/main/kotlin/boj/week02/recursive_function/FibonacciSequence5.kt", "CodeLlama-7b-Instruct-hf": "package boj.week02.recursive_function\n\nimport java.util.Scanner\n\nfun main() {\n    val scanner = Scanner(System.`in`)\n    val n = scanner.nextInt()\n    println(fibonacci(n))\n}\n\nfun fibonacci(n: Int): Int {\n    return if (n > 1) fibonacci(n - 1) + fibonacci(n - 2) else n\n}"}
{"kt_path": "Codextor__kotlin-codes__68b75a7/src/main/kotlin/PerfectSquares.kt", "CodeLlama-7b-Instruct-hf": "fun numSquares(n: Int): Int {\n    var i = 0\n    var j = n + 1\n    val squares = IntArray(n + 1)\n    while (i < j) {\n        val k = i * i\n        squares[i] = 2147483647\n        i++\n        if (k >= j) continue\n        val l = i + 1\n        squares[l] = 2147483647\n        i = l\n    }\n    var result = 0\n    var m = 0\n    while (m < n) {\n        val n = m * m\n        if (n > j) break\n        if (n == j) {\n            result = 1\n            break\n        }\n        val o = m + 1\n        squares[o] = 2147483647\n        m = o\n    }\n    return squares[0]\n}"}
{"kt_path": "Laomedeia__Java8InAction__0dcd843/src/main/java/leetcode/a167_twoSumInputSortArray_SIMPLE/Solution.kt", "CodeLlama-7b-Instruct-hf": "class Solution {\n    fun twoSum(numbers: IntArray, target: Int): IntArray {\n        var i = 0\n        var j = numbers.size - 1\n        while (i < j) {\n            val sum = numbers[i] + numbers[j]\n            if (sum == target) {\n                return intArrayOf(i + 1, j + 1)\n            }\n            if (sum < target) {\n                i++\n            } else {\n                j--\n            }\n        }\n        return intArrayOf()\n    }\n}"}
{"kt_path": "ariannysOronoz__tutorialKotlin__a779f54/CombinacionesPalabras/src/main/java/Main.kt", "CodeLlama-7b-Instruct-hf": "package com.includehelp.basic\n\nimport java.util.Arrays\n\nclass Permutation {\n    private val permutations = mutableListOf<String>()\n\n    fun findPermutation(input: String, start: Int, end: Int) {\n        if (start == end) {\n            permutations.add(input)\n        } else {\n            for (i in start until end) {\n                val temp = input[i]\n                input[i] = input[start]\n                input[start] = temp\n                findPermutation(input, start + 1, end)\n                val temp2 = input[i]\n                input[i] = input[start]\n                input[start] = temp2\n            }\n        }\n    }\n\n    fun printPermutations(input: String) {\n        permutations.clear()\n        findPermutation(input, 0, input.length)\n        println(permutations)\n    }\n}\n\nfun main(args: Array<String>) {\n    val permutation = Permutation()\n    permutation.printPermutations(\"CARACOL\")\n}"}
{"kt_path": "scientificCommunity__blog-sample__36e291c/algorithms/src/main/kotlin/org/baichuan/sample/algorithms/leetcode/middle/MaxArea.kt", "CodeLlama-7b-Instruct-hf": "class MaxArea {\n    fun maxArea(height: IntArray): Int {\n        var maxArea = 0\n        var left = 0\n        var right = 0\n        var leftHeight = 0\n        var rightHeight = 0\n        for (i in 1 until height.size) {\n            leftHeight = height[i - 1]\n            rightHeight = height[i]\n            if (leftHeight < rightHeight) {\n                left = i - 1\n                right = i\n                maxArea = max(maxArea, (right - left) * rightHeight)\n            } else if (leftHeight > rightHeight) {\n                left = i\n                right = i + 1\n                maxArea = max(maxArea, (right - left) * leftHeight)\n            }\n        }\n        return maxArea\n    }\n}"}
{"kt_path": "boris920308__HoOne__8881468/hoon/HoonAlgorithm/src/main/kotlin/programmers/lv01/Lv1_70128.kt", "CodeLlama-7b-Instruct-hf": "package programmers.lv01\n\nfun main() {\n    val arr = intArrayOf(4, 1, 2, 3, 4)\n    val arr2 = intArrayOf(-3, 0, 0, 2, 2, 3, 3, 4, 4)\n    val result = solution(arr, arr2)\n    println(result)\n}\n\nfun solution(arr: IntArray, arr2: IntArray): Int {\n    var answer = 0\n    var i = 0\n    while (i < arr.size) {\n        answer += arr[i] * arr2[i]\n        i++\n    }\n    return answer\n}"}
{"kt_path": "kotler-dev__kotlin-leetcode__0659e72/src/main/kotlin/exercise/easy/id121/Solution121.kt", "CodeLlama-7b-Instruct-hf": "package exercise.easy.id121\n\nclass Solution121 {\n    fun maxProfit(prices: IntArray): Int {\n        if (prices.size < 2) return 0\n        var maxProfit = 0\n        var minPrice = Int.MAX_VALUE\n        var buyPrice = 0\n        var sellPrice = 0\n        var i = 0\n        var j = 0\n        while (j < prices.size) {\n            if (prices[j] < minPrice) {\n                minPrice = prices[j]\n                buyPrice = prices[j]\n            }\n            if (prices[j] - minPrice > maxProfit) {\n                maxProfit = prices[j] - minPrice\n                sellPrice = prices[j]\n            }\n            j++\n        }\n        return if (sellPrice == 0) 0 else sellPrice - buyPrice\n    }\n}"}
{"kt_path": "marc-bouvier-katas__Kotlin_EduTools_Advent_of_Code_2021__12cf74c/Day 5/Part 1/src/Task.kt", "CodeLlama-7b-Instruct-hf": "class Task {\n    companion object {\n        fun overlaps(ventsLines: Array<String>): Int {\n            val lines = Lines(ventsLines.map { LineOfVent.fromString(it) }.toList())\n            return lines.overlaps()\n        }\n    }\n}"}
{"kt_path": "Laomedeia__Java8InAction__0dcd843/src/main/java/leetcode/a392_isSubSequence_HARD/Solution.kt", "CodeLlama-7b-Instruct-hf": "class Solution {\n    fun isSubsequence(s: String, t: String): Boolean {\n        if (s.isEmpty()) return true\n        var i = 0\n        var j = 0\n        while (j < t.length) {\n            if (s[i] == t[j]) i++\n            j++\n            if (i == s.length) return true\n        }\n        return false\n    }\n}"}
{"kt_path": "nickperov__Algorithms__6696f5d/fibonacci/src/main/kotlin/com/nickperov/stud/algorithms/fibonacci/FibonacciLargeGenerator.kt", "CodeLlama-7b-Instruct-hf": "package com.nickperov.stud.algorithms.fibonacci\n\nimport java.math.BigInteger\n\nclass FibonacciLargeGenerator {\n    fun calculate(n: Int): BigInteger {\n        TODO(\"Not yet implemented\")\n    }\n}\n\nclass FibonacciLargeTailRecursiveOptimisedGenerator : FibonacciLargeGenerator() {\n    override fun calculate(n: Int): BigInteger {\n        TODO(\"Not yet implemented\")\n    }\n}\n\nfun main() {\n    println(\"Hello, large Fibonacci numbers\")\n    val generator = FibonacciLargeTailRecursiveOptimisedGenerator()\n    val result = generator.calculate(1000000)\n    println(result)\n}"}
{"kt_path": "TonnyL__Windary__39f85cd/Kotlin/src/UniqueBinarySearchTrees.kt", "CodeLlama-7b-Instruct-hf": "class UniqueBinarySearchTrees {\n    fun numTrees(n: Int): Int {\n        var count = 0\n        var max = 2 * n\n        val result = IntArray(max)\n        result[0] = 1\n        result[1] = 1\n        for (i in 2..max) {\n            var j = 0\n            while (j < i) {\n                result[i] = (result[i] + result[j]) % 1000000007\n                j++\n            }\n        }\n        return result[n]\n    }\n}"}
{"kt_path": "quincy__euler-kotlin__01d96f6/src/main/kotlin/com/quakbo/euler/Euler4.kt", "CodeLlama-7b-Instruct-hf": "package com.quakbo.euler\n\nfun isPalindrome(n: Int): Boolean {\n    val str = n.toString()\n    return str.reversed() == str\n}\n\nfun main(args: Array<String>) {\n    for (i in 999 downTo 100) {\n        for (j in 999 downTo 100) {\n            if (i * j == isPalindrome(i * j)) {\n                println(i * j)\n            }\n        }\n    }\n}"}
{"kt_path": "getupminaaa__Algorithm__01187e2/Algorithm/src/main/kotlin/programmers/level1/personalInfoCollectionValidityPeriod.kt", "CodeLlama-7b-Instruct-hf": "fun main() {\n    val solution = Solution()\n    val input1 = arrayOf(\"A\", \"B\", \"C\")\n    val input2 = arrayOf(\"2021.05.02 A\", \"2021.07.01 B\", \"2022.02.19 C\", \"2022.02.20 C\")\n    val output = solution.solution(\"2022.05.19\", input1, input2)\n    println(output.joinToString())\n}\n\nclass Solution {\n    fun solution(input: String, input1: Array<String>, input2: Array<String>): Array<Int> {\n        val output = Array(4) { 0 }\n        for (i in 0..3) {\n            for (j in 0..3) {\n                if (input1[i] == input2[j]) {\n                    output[i]++\n                }\n            }\n        }\n        return output\n    }\n}"}
{"kt_path": "iafsilva__codility-lessons__5d86aef/src/main/kotlin/lesson1/BinaryGap.kt", "CodeLlama-7b-Instruct-hf": "class BinaryGap {\n    fun solution(N: Int): Int {\n        var maxGap = 0\n        var currentGap = 0\n        var lastNonZeroDigitIndex = -1\n\n        for (i in N.toString().indices) {\n            val digit = N.toString()[i]\n            if (digit == '1') {\n                if (currentGap > maxGap) {\n                    maxGap = currentGap\n                }\n                currentGap = 0\n                lastNonZeroDigitIndex = i\n            } else {\n                currentGap++\n            }\n        }\n\n        return if (lastNonZeroDigitIndex >= 0 && currentGap > maxGap) {\n            currentGap\n        } else {\n            0\n        }\n    }\n}"}
{"kt_path": "zys0909__CodeLabs__869c7c2/src/com/leecode/array/Code1.kt", "CodeLlama-7b-Instruct-hf": "package com.leecode.array\n\nimport kotlin.jvm.internal.Intrinsics\n\npublic final class Code1Kt {\n    public static final int missingNumber1(int[] nums) {\n        Intrinsics.checkNotNullParameter(nums, \"nums\")\n        var i = 0\n        var j = 0\n        val length = nums.size\n        while (j < length) {\n            val num = nums[j]\n            if (num != i) {\n                i++\n            } else {\n                j++\n            }\n        }\n        return i\n    }\n\n    public static final int missingNumber2(int[] nums) {\n        Intrinsics.checkNotNullParameter(nums, \"nums\")\n        var i = 0\n        var j = nums.size - 1\n        while (i < j) {\n            if (nums[i] == nums[j]) {\n                j--\n            } else {\n                i++\n            }\n        }\n        return nums[i]\n    }\n}"}
{"kt_path": "ykrytsyn__leetcode-in-kotlin__0acf2a6/src/main/kotlin/leetcode/ArrangingCoins.kt", "CodeLlama-7b-Instruct-hf": "class ArrangingCoins {\n    fun bruteForce(amount: Int): Int {\n        var total = 0\n        for (i in 1..amount) {\n            if (amount < i) break\n            total++\n        }\n        return total\n    }\n\n    fun binarySearch(amount: Int): Int {\n        var left = 0L\n        var right = amount.toLong()\n        var mid = 0L\n        var total = 0\n        while (left <= right) {\n            mid = (left + right) / 2\n            if (mid * 2 - amount < amount) {\n                left = mid * 2\n            } else {\n                right = mid - 1\n            }\n            total++\n        }\n        return total\n    }\n}"}
{"kt_path": "mayabot__mynlp__b980da3/mynlp/src/main/java/com/mayabot/nlp/module/nwd/ValueObjects.kt", "CodeLlama-7b-Instruct-hf": "package com.mayabot.nlp.module.nwd\n\nimport java.util.HashMap\n\nclass ValueObjects {\n    companion object {\n        fun addTo(map: HashMap<Char, IntCount>, c: Char, i: Int) {\n            map[c] = map.getOrPut(c) { IntCount() }.also { it.value += i }\n        }\n    }\n}\n\nclass IntCount {\n    var value: Int = 0\n        set(value) {\n            field = value\n        }\n\n    fun setValue(value: Int) {\n        this.value = value\n    }\n}"}
{"kt_path": "jjrodcast__CompetitiveProblems__a91868c/leetcode/UniquePathsTwo.kt", "CodeLlama-7b-Instruct-hf": "class Solution {\n    fun uniquePathsWithObstacles(obstacleGrid: Array<IntArray>): Int {\n        val m = obstacleGrid.size\n        val n = obstacleGrid[0].size\n        val dp = Array(m) { IntArray(n) }\n        dp[0][0] = if (obstacleGrid[0][0] == 0) 1 else 0\n        for (i in 1..m - 1) {\n            dp[i][0] = if (obstacleGrid[i][0] == 0 && dp[i - 1][0] != 0) 1 else 0\n        }\n        for (j in 1..n - 1) {\n            dp[0][j] = if (obstacleGrid[0][j] == 0 && dp[0][j - 1] != 0) 1 else 0\n        }\n        for (i in 1..m - 1) {\n            for (j in 1..n - 1) {\n                dp[i][j] = if (obstacleGrid[i][j] == 0 && dp[i - 1][j] != 0 && dp[i][j - 1] != 0) dp[i - 1][j] + dp[i][j - 1] else 0\n            }\n        }\n        return dp[m - 1][n - 1]\n    }\n}"}
{"kt_path": "boris920308__HoOne__8881468/hoon/HoonAlgorithm/src/main/kotlin/programmers/lv01/Lv1_77884.kt", "CodeLlama-7b-Instruct-hf": "package programmers.lv01\n\nfun main() {\n    val a = 13\n    val b = 17\n    println(solution(a, b))\n}\n\nfun solution(a: Int, b: Int): Int {\n    var result = 0\n    for (i in 1..b) {\n        if (a % i == 0) {\n            result += 2\n        } else {\n            result += 1\n        }\n    }\n    return result\n}\n\nfun countDivisors(n: Int): Int {\n    var count = 0\n    for (i in 1..n) {\n        if (n % i == 0) {\n            count += 2\n        } else {\n            count += 1\n        }\n    }\n    return count\n}"}
{"kt_path": "Codextor__kotlin-codes__68b75a7/src/main/kotlin/PartitionArrayForMaximumSum.kt", "CodeLlama-7b-Instruct-hf": "package code.vipul.partitionarrayformaximumsum\n\nimport kotlin.math.min\n\nclass PartitionArrayForMaximumSumKt {\n    companion object {\n        fun maxSumAfterPartitioning(arr: IntArray, k: Int): Int {\n            val n = arr.size\n            val dp = IntArray(n + 1)\n            var i = 1\n            while (i <= n) {\n                var j = k\n                while (j > 1) {\n                    dp[i] = maxOf(dp[i], dp[i - j] + arr[i - 1] * j)\n                    j--\n                }\n                i++\n            }\n            return dp[n]\n        }\n    }\n}"}
{"kt_path": "scientificCommunity__blog-sample__36e291c/algorithms/src/main/kotlin/org/baichuan/sample/algorithms/leetcode/simple/interview/MajorityElement.kt", "CodeLlama-7b-Instruct-hf": "class MajorityElement {\n    fun majorityElement(nums: IntArray): Int {\n        var count1 = 0\n        var count2 = 0\n        var candidate1 = 0\n        var candidate2 = 0\n        for (i in nums.indices) {\n            if (nums[i] == candidate1) {\n                count1++\n            } else if (nums[i] == candidate2) {\n                count2++\n            } else if (count1 == 0) {\n                candidate1 = nums[i]\n                count1 = 1\n            } else if (count2 == 0) {\n                candidate2 = nums[i]\n                count2 = 1\n            } else {\n                count1--\n                count2--\n            }\n        }\n        count1 = 0\n        count2 = 0\n        for (i in nums.indices) {\n            if (nums[i] == candidate1) {\n                count1++\n            } else if (nums[i] == candidate2) {\n                count2++\n            }\n        }\n        return if (count1 > nums.size / 2) candidate1 else if (count2 > nums.size / 2) candidate2 else -1\n    }\n}"}
{"kt_path": "rhavran__ProjectEuler__1115674/src/Utils.kt", "CodeLlama-7b-Instruct-hf": "class UtilsKt {\n    companion object {\n        fun dividers(n: Long): Long {\n            var sum = 1L\n            for (entry in PrimeFactorization.INSTANCE.primeFactors(n).entries) {\n                sum *= (entry.value as Number).toLong() + 1\n            }\n            return sum\n        }\n\n        fun sequenceSumStartingFrom(n: Long, m: Long): Long {\n            return sumFromTo(n, m)\n        }\n\n        fun sumFromTo(n: Long, m: Long): Long {\n            var sum = 0L\n            for (i in n..m) {\n                sum += i\n            }\n            return sum\n        }\n    }\n}"}
{"kt_path": "jimmymorales__project-euler__e881cad/src/main/kotlin/Problem4.kt", "CodeLlama-7b-Instruct-hf": "fun main(args: Array<String>) {\n    println(largestPalindrome())\n}\n\nfun largestPalindrome(): Int {\n    var largest = 0\n    for (i in 999 downTo 99) {\n        for (j in 999 downTo 99) {\n            if (isPalindrome(i * j)) {\n                largest = i * j\n            }\n        }\n    }\n    return largest\n}\n\nfun isPalindrome(n: Int): Boolean {\n    return n.toString() == n.toString().reversed()\n}\n\nfun Int.reversed(): String {\n    var reversed = \"\"\n    var temp = this\n    while (temp > 0) {\n        reversed = reversed.plus(temp % 10)\n        temp /= 10\n    }\n    return reversed\n}"}
{"kt_path": "Codextor__kotlin-codes__68b75a7/src/main/kotlin/PalindromicSubstrings.kt", "CodeLlama-7b-Instruct-hf": "class PalindromicSubstrings {\n    fun countSubstrings(s: String): Int {\n        var count = 0\n        for (i in 0..s.length - 1) {\n            count += countSubstringsWithCenter(s, i, i)\n            count += countSubstringsWithCenter(s, i, i + 1)\n        }\n        return count\n    }\n\n    private fun countSubstringsWithCenter(s: String, left: Int, right: Int): Int {\n        var count = 0\n        while (left >= 0 && right < s.length && s[left] == s[right]) {\n            count++\n            left--\n            right++\n        }\n        return count\n    }\n}"}
{"kt_path": "antop-dev__algorithm__9a3e762/src/main/kotlin/kr/co/programmers/P12952.kt", "CodeLlama-7b-Instruct-hf": "class P12952 {\n    fun solution(n: Int): Int {\n        val arr = IntArray(n)\n        return dfs(arr, 0)\n    }\n\n    private fun dfs(arr: IntArray, index: Int): Int {\n        if (index == arr.size) return 1\n        var answer = 0\n        for (i in 0 until arr.size) {\n            arr[i] = index\n            if (valid(arr, index)) {\n                answer += dfs(arr, index + 1)\n            }\n        }\n        return answer\n    }\n\n    private fun valid(arr: IntArray, index: Int): Boolean {\n        var count = 0\n        for (i in 0 until arr.size) {\n            if (arr[i] == index) count++\n        }\n        return count == 1\n    }\n}"}
{"kt_path": "ILIYANGERMANOV__algorithms__4abe4b5/Algorithms/src/main/kotlin/MaxSubArray.kt", "CodeLlama-7b-Instruct-hf": "class MaxSubArray {\n    fun maxSubArray(nums: IntArray): Int {\n        var maxSum = 0\n        var currentSum = 0\n        var start = 0\n        for (i in 1..nums.size) {\n            if (i == nums.size) {\n                if (currentSum > maxSum) {\n                    maxSum = currentSum\n                }\n            } else {\n                val num = nums[i]\n                if (num > currentSum) {\n                    currentSum = num\n                }\n                if (num > maxSum) {\n                    maxSum = num\n                }\n            }\n        }\n        return maxSum\n    }\n}"}
{"kt_path": "AlBovo__Compiti__56a3131/src/main/kotlin/segtree.kt", "CodeLlama-7b-Instruct-hf": "class SegtreeKt {\n    companion object {\n        @JvmStatic\n        fun main() {\n            val arr = arrayOfNulls<Int>(7)\n            arr[0] = 2\n            arr[1] = 4\n            arr[2] = 2\n            arr[3] = 1\n            arr[4] = 3\n            arr[5] = 4\n            arr[6] = 5\n            val segtree = SegmentTree(arr)\n            val sum = segtree.getSum(0, 4)\n            println(sum)\n        }\n    }\n}\n\nclass SegmentTree(private val arr: Array<Int?>) {\n    fun getSum(left: Int, right: Int): Int {\n        TODO(\"not implemented\") //To change body of created functions use File | Settings | File Templates.\n    }\n}"}
{"kt_path": "3mtee__exercism-kotlin__6e3eb88/complex-numbers/src/main/kotlin/ComplexNumbers.kt", "CodeLlama-7b-Instruct-hf": "class ComplexNumbers {\n    companion object {\n        fun exponential(c: ComplexNumber): ComplexNumber {\n            requireNotNull(c) { \"c\" }\n            if (c.real == 0.0) {\n                return ComplexNumber(1.0, 0.0)\n            }\n            return ComplexNumber(Math.cos(c.imag), Math.sin(c.imag))\n        }\n    }\n}"}
{"kt_path": "perihanmirkelam__ProjectEuler__a24ac44/src/main/kotlin/P014_LongestCollatzSequence.kt", "CodeLlama-7b-Instruct-hf": "fun p14() {\n    var longestSequence = 0L\n    var currentSequence = 0L\n    var i = 0\n    var max = 1000000\n    var n = 0\n    while (n < max) {\n        n++\n        if (n == 1) {\n            currentSequence = 1\n        } else {\n            if (n % 2 == 0) {\n                currentSequence = n / 2\n            } else {\n                currentSequence = 3 * n + 1\n            }\n        }\n        if (currentSequence > longestSequence) {\n            longestSequence = currentSequence\n        }\n    }\n    println(\"A14: $longestSequence\")\n}"}
{"kt_path": "iafsilva__codility-lessons__5d86aef/src/main/kotlin/lesson2/CyclicRotation.kt", "CodeLlama-7b-Instruct-hf": "class CyclicRotation {\n    fun solution(a: IntArray, k: Int): IntArray {\n        if (a.size == 0) return intArrayOf()\n        if (a.size == 1) return a\n        if (k == 0) return a\n        if (k % a.size == 0) return a\n        val result = ArrayDeque<Int>()\n        var i = 0\n        while (i < k) {\n            result.addFirst(a.last())\n            result.removeLast()\n            i++\n        }\n        return result.toIntArray()\n    }\n}"}
{"kt_path": "boris920308__HoOne__8881468/hoon/HoonAlgorithm/src/main/kotlin/programmers/lv01/Lv1_12912.kt", "CodeLlama-7b-Instruct-hf": "fun main(args: Array<String>) {\n    println(solution(3, 5))\n    println(solution(3, 3))\n    println(solution(5, 3))\n}\n\nfun solution(a: Int, b: Int): Long {\n    var sum = 0L\n    if (a > b) {\n        sum = b\n    } else {\n        sum = a\n    }\n    if (a > b) {\n        sum += b\n    } else {\n        sum += a\n    }\n    return sum\n}\n\nfun secondSolution(a: Int, b: Int): Long {\n    var sum = 0L\n    if (a > b) {\n        sum = b\n    } else {\n        sum = a\n    }\n    if (a > b) {\n        sum += b\n    } else {\n        sum += a\n    }\n    return sum\n}"}
{"kt_path": "darian-catalin-cucer__divide-and-conquer-algorithms__1cea70d/kt.kt", "CodeLlama-7b-Instruct-hf": "package com.example\n\nimport kotlin.jvm.internal.Intrinsics\n\npublic final class KtKt {\n    public static final void quickSort(int[] arr, int start, int end) {\n        Intrinsics.checkNotNullParameter(arr, \"arr\")\n        if (start >= end) return\n        val pivot = partition(arr, start, end)\n        quickSort(arr, start, pivot - 1)\n        quickSort(arr, pivot + 1, end)\n    }\n\n    public static final int partition(int[] arr, int start, int end) {\n        Intrinsics.checkNotNullParameter(arr, \"arr\")\n        val pivot = arr[start]\n        var left = start + 1\n        var right = end\n        while (true) {\n            while (left <= right && arr[left] <= pivot) left++\n            while (right >= left && arr[right] > pivot) right--\n            if (left >= right) break\n            val tmp = arr[left]\n            arr[left] = arr[right]\n            arr[right] = tmp\n        }\n        arr[start] = arr[right]\n        arr[right] = pivot\n        return right\n    }\n}"}
{"kt_path": "TonnyL__Windary__39f85cd/Kotlin/src/ThreeSumClosest.kt", "CodeLlama-7b-Instruct-hf": "class ThreeSumClosest {\n    fun threeSumClosest(nums: IntArray, target: Int): Int {\n        nums.sort()\n        var closest = 0\n        for (i in 0..nums.size - 2) {\n            for (j in i + 1..nums.size - 1) {\n                for (k in j + 1..nums.size - 1) {\n                    if (nums[i] + nums[j] + nums[k] == target) {\n                        return nums[i] + nums[j] + nums[k]\n                    }\n                    if (nums[i] + nums[j] + nums[k] > target) {\n                        closest = if (Math.abs(nums[i] + nums[j] + nums[k] - target) < Math.abs(closest - target)) nums[i] + nums[j] + nums[k] else closest\n                    }\n                }\n            }\n        }\n        return closest\n    }\n}"}
{"kt_path": "Javran__leetcode__f3899fe/bulb-switcher/Solution.kt", "CodeLlama-7b-Instruct-hf": "class Solution {\n    companion object {\n        fun main(args: Array<String>) {\n            Solution().bulbSwitch(10).let { println(it) }\n        }\n    }\n\n    fun bulbSwitch(n: Int): Int {\n        return (Math.sqrt(n.toDouble())).floor().toInt()\n    }\n}"}
{"kt_path": "TonnyL__Windary__39f85cd/Kotlin/src/NextPermutation.kt", "CodeLlama-7b-Instruct-hf": "class NextPermutation {\n    fun nextPermutation(nums: IntArray) {\n        require(nums.isNotEmpty()) { \"nums must not be empty\" }\n        var i = nums.lastIndex - 1\n        while (i >= 0 && nums[i] >= nums[i + 1]) i--\n        if (i >= 0) {\n            var j = nums.lastIndex\n            while (nums[i] >= nums[j]) j--\n            swap(nums, i, j)\n            reverse(nums, i + 1, nums.lastIndex)\n        }\n    }\n\n    private fun swap(nums: IntArray, i: Int, j: Int) {\n        val temp = nums[i]\n        nums[i] = nums[j]\n        nums[j] = temp\n    }\n\n    private fun reverse(nums: IntArray, i: Int, j: Int) {\n        var i = i\n        var j = j\n        while (i < j) {\n            swap(nums, i, j)\n            i++\n            j--\n        }\n    }\n}"}
{"kt_path": "boris920308__HoOne__8881468/hoon/HoonAlgorithm/src/main/kotlin/programmers/lv01/Lv1_12940.kt", "CodeLlama-7b-Instruct-hf": "package programmers.lv01\n\nfun main() {\n    val result = solution(3, 12)\n    println(\"- - - - - - - - - -\")\n    val result2 = solution(2, 5)\n}\n\nfun solution(a: Int, b: Int): IntArray {\n    val result = IntArray(2)\n    result[0] = findGCD(a, b)\n    result[1] = findLCM(a, b)\n    println(result.toList())\n    return result\n}\n\nfun findGCD(a: Int, b: Int): Int {\n    if (b == 0) return a\n    return findGCD(b, a % b)\n}\n\nfun findLCM(a: Int, b: Int): Int {\n    return a * b / findGCD(a, b)\n}"}
{"kt_path": "JiangKlijna__leetcode-learning__65a1348/kt/001 Two Sum/TwoSum.kt", "CodeLlama-7b-Instruct-hf": "class TwoSum {\n    fun twoSum(numbers: IntArray, target: Int): IntArray {\n        val map = HashMap<Int, Int>()\n        val result = IntArray(2)\n        for (i in numbers.indices) {\n            val complement = map[target - numbers[i]]\n            if (complement != null) {\n                result[0] = complement\n                result[1] = numbers[i]\n                return result\n            }\n            map[numbers[i]] = i\n        }\n        return result\n    }\n}"}
{"kt_path": "rupeshsasne__coursera-algorithms-part1__341634c/classroom/src/main/kotlin/com/radix2/algorithms/week1/UnionFind.kt", "CodeLlama-7b-Instruct-hf": "package com.radix2.algorithms.week1\n\nclass UnionFindKt {\n    fun main(args: Array<String>) {\n        val uf = WeightedQuickUnionWithPathCompressionUF(10)\n        uf.union(4, 3)\n        uf.union(3, 8)\n        uf.union(6, 5)\n        uf.union(9, 4)\n        uf.union(2, 1)\n        uf.union(5, 0)\n        uf.union(7, 2)\n        uf.union(6, 1)\n        uf.union(7, 3)\n    }\n}"}
{"kt_path": "boris920308__HoOne__8881468/hoon/HoonAlgorithm/src/main/kotlin/programmers/lv01/Lv1_68935.kt", "CodeLlama-7b-Instruct-hf": "package programmers.lv01\n\nfun solution(n: Int): Int {\n    return Integer.parseInt(n.toString(), 3).toString(10).toInt()\n}\n\nfun solution_1(n: Int): Int {\n    return Integer.parseInt(n.toString(), 3).toString(10).toInt()\n}\n\nfun main() {\n    solution(45)\n}"}
{"kt_path": "korilin__DSA-kt__b96ba1b/src/main/kotlin/sort_algorithm/quickSort.kt", "CodeLlama-7b-Instruct-hf": "package sort_algorithm\n\nimport kotlin.Unit\n\npublic final class QuickSortKt {\n    public static final void quickSort(int[] array) {\n        Intrinsics.checkNotNullParameter(array, \"array\")\n        quickSort$inner(array, 0, array.size - 1)\n    }\n\n    private static final int quickSort$partition(int[] array, int low, int high) {\n        int pivot = array[low];\n        int i = low + 1;\n        int j = high;\n        while (true) {\n            while (i <= high && array[i] <= pivot) {\n                i++;\n            }\n            while (j >= low && array[j] >= pivot) {\n                j--;\n            }\n            if (i > j) {\n                break;\n            }\n            int tmp = array[i];\n            array[i] = array[j];\n            array[j] = tmp;\n            i++;\n            j--;\n        }\n        array[low] = array[j];\n        array[j] = pivot;\n        return j;\n    }\n\n    private static final void quickSort$inner(int[] array, int low, int high) {\n        if (low < high) {\n            int pivot = quickSort$partition(array, low, high);\n            quickSort$inner(array, low, pivot - 1);\n            quickSort$inner(array, pivot + 1, high);\n        }\n    }\n}"}
{"kt_path": "gardnerdickson__advent-of-code-2015__4a23ab3/src/day_10.kt", "CodeLlama-7b-Instruct-hf": "class Day10 {\n    companion object {\n        val INSTANCE = Day10()\n    }\n\n    fun part1(input: String): Int {\n        val stack = Stack<Char>()\n        input.forEach {\n            when (it) {\n                '(' -> stack.push(')')\n                '[' -> stack.push(']')\n                '{' -> stack.push('}')\n                ')' -> if (stack.pop() != it) return 3\n                ']' -> if (stack.pop() != it) return 57\n                '}' -> if (stack.pop() != it) return 1197\n            }\n        }\n        return 0\n    }\n\n    fun part2(input: String): Int {\n        val stack = Stack<Char>()\n        input.forEach {\n            when (it) {\n                '(' -> stack.push(')')\n                '[' -> stack.push(']')\n                '{' -> stack.push('}')\n                ')' -> if (stack.pop() != it) return 1\n                ']' -> if (stack.pop() != it) return 2\n                '}' -> if (stack.pop() != it) return 3\n            }\n        }\n        return 0\n    }\n}\n\nfun main(args: Array<String>) {\n    val input = \"1113222113\"\n    val part1 = Day10.INSTANCE.part1(input)\n    println(\"Part 1: $part1\")\n    val part2 = Day10.INSTANCE.part2(input)\n    println(\"Part 2: $part2\")\n}"}
{"kt_path": "gardnerdickson__advent-of-code-2015__4a23ab3/src/day_2.kt", "CodeLlama-7b-Instruct-hf": "package com.github.shmish11.day2\n\nimport java.io.File\nimport java.io.FileReader\nimport java.util.regex.Pattern\n\nclass Day2 {\n    companion object {\n        val INSTANCE = Day2()\n    }\n\n    fun part1(input: String): Int {\n        val pattern = Pattern.compile(\"(\\\\d+)-(\\\\d+)\\\\s+(\\\\w):\\\\s+(\\\\w+)\")\n        val reader = FileReader(File(\"src/main/resources/day_2_input.txt\"))\n        var count = 0\n        var line: String?\n        while (reader.readLine().also { line = it } != null) {\n            val matcher = pattern.matcher(line)\n            if (matcher.find()) {\n                val min = matcher.group(1).toInt()\n                val max = matcher.group(2).toInt()\n                val letter = matcher.group(3)[0]\n                val password = matcher.group(4)\n                val letterCount = password.count { it == letter }\n                if (letterCount in min..max) {\n                    count++\n                }\n            }\n        }\n        return count\n    }\n\n    fun part2(input: String): Int {\n        val pattern = Pattern.compile(\"(\\\\d+)-(\\\\d+)\\\\s+(\\\\w):\\\\s+(\\\\w+)\")\n        val reader = FileReader(File(\"src/main/resources/day_2_input.txt\"))\n        var count = 0\n        var line: String?\n        while (reader.readLine().also { line = it } != null) {\n            val matcher = pattern.matcher(line)\n            if (matcher.find()) {\n                val firstIndex = matcher.group(1).toInt() - 1\n                val secondIndex = matcher.group(2).toInt() - 1\n                val letter = matcher.group(3)[0]\n                val password = matcher.group(4)\n                if (password[firstIndex] == letter && password[secondIndex] != letter) {\n                    count++\n                } else if (password[firstIndex] != letter && password[secondIndex] == letter) {\n                    count++\n                }\n            }\n        }\n        return count\n    }\n}"}
{"kt_path": "gardnerdickson__advent-of-code-2015__4a23ab3/src/day_3.kt", "CodeLlama-7b-Instruct-hf": "package day_3\n\nimport java.io.File\nimport java.io.FileReader\n\nclass Day3 {\n    companion object {\n        val INSTANCE = Day3()\n    }\n\n    fun part1(input: String): Int {\n        val lines = input.split(\"\\n\")\n        val (x, y) = lines[0].split(\",\").map { it.toInt() }\n        val (x2, y2) = lines[1].split(\",\").map { it.toInt() }\n        val (x3, y3) = lines[2].split(\",\").map { it.toInt() }\n        val (x4, y4) = lines[3].split(\",\").map { it.toInt() }\n        val (x5, y5) = lines[4].split(\",\").map { it.toInt() }\n        val (x6, y6) = lines[5].split(\",\").map { it.toInt() }\n        val (x7, y7) = lines[6].split(\",\").map { it.toInt() }\n        val (x8, y8) = lines[7].split(\",\").map { it.toInt() }\n        val (x9, y9) = lines[8].split(\",\").map { it.toInt() }\n        val (x10, y10) = lines[9].split(\",\").map { it.toInt() }\n        val (x11, y11) = lines[10].split(\",\").map { it.toInt() }\n        val (x12, y12) = lines[11].split(\",\").map { it.toInt() }\n        val (x13, y13) = lines[12].split(\",\").map { it.toInt() }\n        val (x14, y14) = lines[13].split(\",\").map { it.toInt() }\n        val (x15, y15) = lines[14].split(\",\").map { it.toInt() }\n        val (x16, y16) = lines[15].split(\",\").map { it.toInt() }\n        val (x17, y17) = lines[16].split(\",\").map { it.toInt() }\n        val (x18, y18) = lines[17].split(\",\").map { it.toInt() }\n        val (x19, y19) = lines[18].split(\",\").map { it.toInt() }\n        val (x20, y20) = lines[19].split(\",\").map { it.toInt() }\n        val (x21, y21) = lines[20].split(\",\").map { it.toInt() }\n        val (x22, y22) = lines[21].split(\",\").map { it.toInt() }\n        val (x23, y23) = lines[22].split(\",\").map { it.toInt() }\n        val (x24, y24) = lines[23].split(\",\").map { it.toInt() }\n        val (x25, y25) = lines[24].split(\",\").map { it.toInt() }\n        val (x26, y26) = lines[25].split(\",\").map { it.toInt() }\n        val (x27, y27) = lines[26].split(\",\").map { it.toInt() }\n        val (x28, y28) = lines[27].split(\",\").map { it.toInt() }\n        val (x29, y29) = lines[28].split(\",\").map { it.toInt() }\n        val (x30, y30) = lines[29].split(\",\").map { it.toInt() }\n        val (x31, y31) = lines[30].split(\",\").map { it.toInt() }\n        val (x32, y32) = lines[31].split(\",\").map { it.toInt() }\n        val (x33, y33) = lines[32].split(\",\").map { it.toInt() }\n        val (x34, y34) = lines[33].split(\",\").map { it.toInt() }\n        val (x35, y35) = lines[34].split(\",\").map { it.toInt() }\n        val (x36, y36) = lines[35].split(\",\").map { it.toInt() }\n        val (x37, y37) = lines[36].split(\",\").map { it.toInt() }\n        val (x38, y38) = lines[37].split(\",\").map { it.toInt() }\n        val (x39, y39) = lines[38].split(\",\").map { it.toInt() }\n        val (x40, y40) = lines[39].split(\",\").map { it.toInt() }\n        val (x41, y41) = lines[40].split(\",\").map { it.toInt() }\n        val (x42, y42) = lines[41].split(\",\").map { it.toInt() }\n        val (x43, y43) = lines[42].split(\",\").map { it.toInt() }\n        val (x44, y44) = lines[43].split(\",\").map { it.toInt() }\n        val (x45, y45) = lines[44].split(\",\").map { it.toInt() }\n        val (x46, y46) = lines[45].split(\",\").map { it.toInt() }\n        val (x47, y47) = lines[46].split(\",\").map { it.toInt() }\n        val (x48, y48) = lines[47].split(\",\").map { it.toInt() }\n        val (x49, y49) = lines[48].split(\",\").map { it.toInt() }\n        val (x50, y50) = lines[49].split(\",\").map { it.toInt() }\n        val (x51, y51) = lines[50].split(\",\").map { it.toInt() }\n        val (x52, y52) = lines[51].split(\",\").map { it.toInt() }\n        val (x53, y53) = lines[52].split(\",\").map { it.toInt() }\n        val (x54, y54) = lines[53].split(\",\").map { it.toInt() }\n        val (x55, y55) = lines[54].split(\",\").map { it.toInt() }\n        val (x56, y56) = lines[55].split(\",\").map { it.toInt() }\n        val (x57, y57) = lines[56].split(\",\").map { it.toInt() }\n        val (x58, y58) = lines[57].split(\",\").map { it.toInt() }\n        val (x59, y59) = lines[58].split(\",\").map { it.toInt() }\n        val (x60, y60) = lines[59].split(\",\").map {"}
{"kt_path": "antop-dev__algorithm__9a3e762/src/main/kotlin/kr/co/programmers/P161988.kt", "CodeLlama-7b-Instruct-hf": "package kr.co.programmers\n\nclass P161988 {\n    fun solution(numbers: IntArray): Long {\n        val sequence = \"sequence\"\n        Intrinsics.checkNotNullParameter(numbers, sequence)\n        val max1 = max(numbers, 1)\n        val max2 = max(numbers, -1)\n        return Math.max(max1, max2)\n    }\n\n    private fun max(numbers: IntArray, index: Int): Long {\n        val length = numbers.size\n        val result = LongArray(length)\n        var max = 0L\n        var i = 0\n        while (i < length) {\n            result[i] = (numbers[i] * index).toLong()\n            max = Math.max(max, result[i])\n            i++\n        }\n        max = Math.max(max, (index * -1).toLong())\n        var j = 1\n        while (j < length) {\n            result[j] = Math.max(result[j], result[j - 1] + numbers[j])\n            max = Math.max(max, result[j])\n            j++\n        }\n        return max\n    }\n}"}
{"kt_path": "alexjlockwood__bees-and-bombs-compose__0d7a86b/app/src/main/java/com/alexjlockwood/beesandbombs/demos/utils/MathUtils.kt", "CodeLlama-7b-Instruct-hf": "package com.alexjlockwood.beesandbombs.demos.utils\n\nimport kotlin.math.PI\nimport kotlin.math.TWO_PI\nimport kotlin.math.HALF_PI\n\nfun dist(x1: Float, y1: Float, x2: Float, y2: Float): Float {\n    return sqrt((x2 - x1) * (x2 - x1) + (y2 - y1) * (y2 - y1))\n}\n\nfun lerp(start: Float, end: Float, amount: Float): Float {\n    return start + (end - start) * amount\n}\n\nfun map(value: Float, start1: Float, stop1: Float, start2: Float, stop2: Float): Float {\n    return start2 + (stop2 - start2) * ((value - start1) / (stop1 - start1))\n}\n\nfun toDegrees(radians: Float): Float {\n    return radians * (180f / PI)\n}\n\nfun ease(t: Float): Float {\n    return if (t < 0.5f) 3f * t * t else 3f - 2f * t * t\n}\n\nfun ease(t: Float, power: Float): Float {\n    return if (t < 0.5f) 3f * t * t * power else 3f - 2f * t * t * power\n}"}
{"kt_path": "chengw315__daily-study__501b881/letcode/src/main/java/daily/LeetCodeLCP13.kt", "CodeLlama-7b-Instruct-hf": "class SolutionLCP13 {\n    fun minimalSteps(S: Array<String>): Int {\n        var steps = 0\n        for (i in S.indices) {\n            if (S[i].contains('#')) {\n                steps++\n            }\n        }\n        return steps\n    }\n}\n\nfun main() {\n    val S = arrayOf(\"S#O\", \"M..\", \"M.T\")\n    val solution = SolutionLCP13()\n    val steps1 = solution.minimalSteps(S)\n    val steps2 = solution.minimalSteps(arrayOf(\"S#O\", \"M.#\", \"M.T\"))\n    val steps3 = solution.minimalSteps(arrayOf(\"S#O\", \"M.T\", \"M..\"))\n    println(\"steps1 = $steps1\")\n    println(\"steps2 = $steps2\")\n    println(\"steps3 = $steps3\")\n}"}
{"kt_path": "rajatenzyme__Coding-Journey__65a0570/Algo_Ds_Notes-master/Algo_Ds_Notes-master/Floyd_Warshall_Algorithm/Floyd_Warshall_Algorithm.kt", "CodeLlama-7b-Instruct-hf": "package com.example.floydwarshall\n\nimport com.example.floydwarshall.FloydWarshall\n\nfun main(args: Array<String>) {\n    val matrix = Array(5) { IntArray(5) }\n    matrix[0][0] = 0\n    matrix[0][1] = 3\n    matrix[0][2] = -2\n    matrix[0][3] = 1\n    matrix[0][4] = 2\n    matrix[1][0] = 1\n    matrix[1][1] = 3\n    matrix[1][2] = 2\n    matrix[1][3] = 4\n    matrix[1][4] = 3\n    matrix[2][0] = -2\n    matrix[2][1] = 2\n    matrix[2][2] = 3\n    matrix[2][3] = 4\n    matrix[2][4] = 3\n    matrix[3][0] = 1\n    matrix[3][1] = 4\n    matrix[3][2] = 3\n    matrix[3][3] = 2\n    matrix[3][4] = 1\n    matrix[4][0] = 2\n    matrix[4][1] = 3\n    matrix[4][2] = 4\n    matrix[4][3] = 3\n    matrix[4][4] = 2\n    FloydWarshall.INSTANCE.doCalcs(matrix)\n}"}
{"kt_path": "brunorene__advent_of_code_2018__0cb6814/src/main/kotlin/advent/of/code/day17/Solution.kt", "CodeLlama-7b-Instruct-hf": "import java.io.File\nimport java.util.regex.Pattern\n\nobject Solution {\n    private val input = File(\"day17.txt\")\n    private val multipleCoord = Pattern.compile(\"(x|y)=([.0-9]+)\\\\.\\\\.([.0-9]+)\")\n    private val oneCoord = Pattern.compile(\"(x|y)=([.0-9]+)\")\n\n    fun getInput() = input\n    fun getMultipleCoord() = multipleCoord\n    fun getOneCoord() = oneCoord\n\n    fun part1() = Underground(input).getClay().also { println(it) }.size\n    fun part2() = 2\n}\n\nclass Underground(input: File) {\n    private val clay = mutableSetOf<Pair<Int, Int>>()\n\n    init {\n        input.readLines().forEach { line ->\n            val match = Solution.getMultipleCoord().matchEntire(line)\n            if (match != null) {\n                val (axis, start, end) = match.destructured\n                (start.toInt()..end.toInt()).forEach {\n                    clay.add(axis to it)\n                }\n            } else {\n                val match = Solution.getOneCoord().matchEntire(line)\n                if (match != null) {\n                    val (axis, value) = match.destructured\n                    clay.add(axis to value.toInt())\n                }\n            }\n        }\n    }\n\n    fun getClay() = clay\n}"}
{"kt_path": "Simplation__OpenSourceRepository__d45feaa/算法/一维数组的动态和1480.kt", "CodeLlama-7b-Instruct-hf": "package com.example.rain_demo.algorithm\n\nfun main() {\n    val newNum = intArrayOf(1, 1, 1, 1, 1)\n    val nums = intArrayOf(1, 1, 1, 1, 1)\n    val sum = sumArr(newNum, nums, 1)\n    println(sum)\n}\n\nfun sumArr(newNum: IntArray, nums: IntArray, index: Int): Int {\n    if (index == 0) {\n        newNum[0] = nums[0]\n        return newNum[0]\n    }\n    newNum[index] = nums[index - 1] + sumArr(newNum, nums, index - 1)\n    return newNum[index]\n}"}
{"kt_path": "jimmymorales__project-euler__e881cad/src/main/kotlin/Problem3.kt", "CodeLlama-7b-Instruct-hf": "fun main(args: Array<String>) {\n    val n = 600851475143L\n    println(solution3(n))\n}\n\nprivate fun solution3(n: Long): Long {\n    var i = n\n    var j = 2L\n    while (i % j != 0L) {\n        i = i % j\n        j += 2\n    }\n    return j\n}"}
{"kt_path": "age-series__ElectricalAge2__86d843f/src/main/kotlin/org/eln2/mc/data/SegmentTree.kt", "CodeLlama-7b-Instruct-hf": "class SegmentTree<T>(val root: SegmentTreeNode<T>) {\n    fun queryOrNull(x: Double): T? {\n        if (!root.contains(x)) return null\n        return root.query(x)\n    }\n\n    fun query(x: Double): T {\n        val result = queryOrNull(x)\n        if (result == null) throw IllegalStateException(\"$x not found\")\n        return result\n    }\n}"}
{"kt_path": "ykrytsyn__leetcode-in-kotlin__0acf2a6/src/main/kotlin/leetcode/UniquePaths.kt", "CodeLlama-7b-Instruct-hf": "class UniquePaths {\n    fun dynamicProgramming(m: Int, n: Int): Int {\n        var dp = IntArray(n)\n        for (i in 0..m - 1) {\n            for (j in i..m - 1) {\n                dp[j] = dp[j] + dp[j - 1]\n            }\n        }\n        return dp[m - 1]\n    }\n\n    fun recursive(m: Int, n: Int): Int {\n        if (m == 1 || n == 1) return 1\n        if (m == n) return 1\n        return recursive(m - 1, n) + recursive(m, n - 1)\n    }\n}"}
{"kt_path": "quincy__euler-kotlin__01d96f6/src/main/kotlin/com/quakbo/euler/Euler6.kt", "CodeLlama-7b-Instruct-hf": "package com.quakbo.euler\n\nimport kotlin.math.pow\n\nfun sumOfSquares(numbers: Sequence<Int>): Int {\n    return numbers.map { it * it }.sum()\n}\n\nfun squareOfSums(numbers: Sequence<Int>): Int {\n    return numbers.sum() * numbers.sum()\n}\n\nfun main(args: Array<String>) {\n    val numbers = generateSequence(1) { it + 1 }.take(100)\n    val difference = squareOfSums(numbers) - sumOfSquares(numbers)\n    println(difference)\n}"}
{"kt_path": "Kirchberg__BigDataPL__b6a459a/LR7/src/main/kotlin/Task1V3.kt", "CodeLlama-7b-Instruct-hf": "package com.example\n\nimport java.util.*\n\nfun task1V3() {\n    val words = \"java android kotlin rust\".split(\" \")\n    val finder = WordChainFinder(words)\n    val longestWordChain = finder.findLongestWordChain()\n    val sb = StringBuilder()\n    sb.append(\"Longest word chain: \")\n    sb.append(longestWordChain.joinToString(\",\"))\n    println(sb.toString())\n}\n\nclass WordChainFinder(val words: List<String>) {\n    fun findLongestWordChain(): List<String> {\n        // TODO\n        return emptyList()\n    }\n}"}
{"kt_path": "fredyw__leetcode__a59d77c/src/main/kotlin/leetcode/Problem2064.kt", "CodeLlama-7b-Instruct-hf": "class Problem2064 {\n    fun minimizedMaximum(n: Int, quantities: IntArray): Int {\n        var max = 1\n        var sum = 0\n        var i = 1\n        var j = 0\n        var k = quantities.size\n        while (j < k) {\n            max = Math.max(max, quantities[j])\n            j++\n        }\n        while (i < n) {\n            sum += max\n            i++\n        }\n        return sum / 2\n    }\n\n    private fun canDistribute(n: Int, quantities: IntArray, m: Int): Boolean {\n        var i = 0\n        var j = 0\n        var k = quantities.size\n        while (j < k) {\n            if (quantities[j] % m != 0) {\n                return false\n            }\n            j++\n        }\n        return true\n    }\n}"}
