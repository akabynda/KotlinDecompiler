{"kt_path": "7824/solution_7824.kt", "Qwen2.5-Coder-0.5B-Instruct-KExercises-KStack-clean-bytecode-4bit-lora": "/**\n * This function tests the countOddNumbers function to ensure it works correctly.\n */\nfun testCountOddNumbers() {\n}"}
{"kt_path": "remisultan__multiarm-bandit-algorithm-kotlin__ead934d/core-bandit/src/main/kotlin/org/rsultan/bandit/algorithms/BanditAlgorithm.kt", "Qwen2.5-Coder-0.5B-Instruct-KExercises-KStack-clean-bytecode-4bit-lora": "package org.rsultan.bandit.algorithms\n\n/**\n * An algorithm that selects an arm based on the expected reward and updates the policy accordingly.\n *\n * @param selectArm The function that selects an arm.\n * @param update The function that updates the policy based on the selected arm and reward.\n */\npublic interface BanditAlgorithm {\n    /**\n     * Selects an arm.\n     *\n     * @return The index of the selected arm.\n     */\n    fun selectArm(): Int\n\n    /**\n     * Updates the policy based on the selected arm and reward.\n     *\n     * @param armIndex The index of the selected arm.\n     * @param reward The reward received for selecting the arm.\n     */\n    fun update(armIndex: Int, reward: Float)\n}"}
{"kt_path": "13864/solution_13864.kt", "Qwen2.5-Coder-0.5B-Instruct-KExercises-KStack-clean-bytecode-4bit-lora": "/**\n * Calculates the score based on the number of wins and losses.\n *\n * @param wins The number of wins.\n * @param losses The number of losses.\n * @return The calculated score.\n */\nfun calculateScore(wins: Int, losses: Int): Int {\nreturn wins * losses\n}"}
{"kt_path": "9763/solution_9763.kt", "Qwen2.5-Coder-0.5B-Instruct-KExercises-KStack-clean-bytecode-4bit-lora": "/**\n * Calculates the final price of a product after applying a discount.\n *\n * @param originalPrice The original price of the product.\n * @param discount The discount percentage to be applied.\n * @return The final price after applying the discount.\n */\nfun calculateFinalPrice(originalPrice: Double, discount: Double): Double {\nreturn originalPrice - (originalPrice * discount / 100)\n}"}
{"kt_path": "8545/solution_8545.kt", "Qwen2.5-Coder-0.5B-Instruct-KExercises-KStack-clean-bytecode-4bit-lora": "/**\n * Calculates the conversion rate between two currencies.\n *\n * @param amount The amount of money in the first currency.\n * @param targetCurrency The target currency.\n * @return The conversion rate between the two currencies.\n */\nfun calculateConversionRate(amount: Int, targetCurrency: Int): Double {\nvar conversionRate = 0.0\n    conversionRate = amount / targetCurrency\n    return conversionRate\n}"}
{"kt_path": "13968/solution_13968.kt", "Qwen2.5-Coder-0.5B-Instruct-KExercises-KStack-clean-bytecode-4bit-lora": "/**\n * Calculates the distance of an athlete based on their speed and time.\n *\n * @param speed The speed of the athlete in meters per second.\n * @param time The time taken by the athlete to complete a distance in seconds.\n * @return The distance of the athlete in meters.\n */\nfun athletePerformanceDistance(speed: Double, time: Double): Double {\nreturn speed / time\n}"}
{"kt_path": "14509/solution_14509.kt", "Qwen2.5-Coder-0.5B-Instruct-KExercises-KStack-clean-bytecode-4bit-lora": "/**\n * Calculates the area of a room given its length and width.\n *\n * @param length The length of the room in meters.\n * @param width The width of the room in meters.\n * @return The area of the room in square meters.\n */\nfun calculateRoomArea(length: Int, width: Int): Int {\nval area = length * width\n    return area\n}"}
{"kt_path": "7670/solution_7670.kt", "Qwen2.5-Coder-0.5B-Instruct-KExercises-KStack-clean-bytecode-4bit-lora": "/**\n * This function checks if a given number is equal to its identity assignment.\n *\n * @return true if the number is equal to its identity assignment, false otherwise.\n */\nfun identityAssignment(): Boolean {\nval num = 5\n    return num == num\n}"}
{"kt_path": "224/solution_224.kt", "Qwen2.5-Coder-0.5B-Instruct-KExercises-KStack-clean-bytecode-4bit-lora": "/**\n * Calculates the salary of an employee based on their hourly rate and hours worked.\n *\n * @param hourlyRate The hourly rate of the employee.\n * @param hoursWorked The number of hours worked by the employee.\n * @return The calculated salary of the employee.\n */\nfun calculateSalary(hourlyRate: Double, hoursWorked: Double): Long {\nreturn Math.round(hourlyRate * hoursWorked)\n}"}
{"kt_path": "11310/solution_11310.kt", "Qwen2.5-Coder-0.5B-Instruct-KExercises-KStack-clean-bytecode-4bit-lora": "/**\n * Calculates the total expenses for a given number of hours worked and hourly rate.\n *\n * @param hours The number of hours worked.\n * @param rate The hourly rate.\n * @return The total expenses.\n */\nfun calculateExpenses(hours: Int, rate: Float): Float {\nval expenses = hours * rate\n    return expenses\n}"}
{"kt_path": "10330/solution_10330.kt", "Qwen2.5-Coder-0.5B-Instruct-KExercises-KStack-clean-bytecode-4bit-lora": "/**\n * Calculates the power of a given base raised to a specified exponent.\n *\n * @param base The base number.\n * @param exponent The exponent to which the base is raised.\n * @return The result of base raised to the power of exponent.\n */\nfun calculatePower(base: Double, exponent: Double): Double {\nval result = base * exponent\n    return result\n}"}
{"kt_path": "11101/solution_11101.kt", "Qwen2.5-Coder-0.5B-Instruct-KExercises-KStack-clean-bytecode-4bit-lora": "/**\n * This function checks if a given integer is positive.\n *\n * @param num The integer to be checked.\n * @return True if the integer is positive, False otherwise.\n */\nfun checkPositiveInteger(num: Int): Boolean {\nreturn num > 0\n}"}
{"kt_path": "432/solution_432.kt", "Qwen2.5-Coder-0.5B-Instruct-KExercises-KStack-clean-bytecode-4bit-lora": "/**\n * Calculates the resistance of a circuit given its voltage and current.\n *\n * @param voltage The voltage of the circuit in volts.\n * @param current The current flowing through the circuit in amperes.\n * @return The resistance of the circuit in ohms.\n */\nfun calculateResistance(voltage: Double, current: Double): Double {\nval resistance = voltage / current\n    return resistance\n}"}
{"kt_path": "n81ur3__kotlin-coding-challenges__fdc5941/src/main/kotlin/adventofcode2018/Day04ReposeRecord.kt", "Qwen2.5-Coder-0.5B-Instruct-KExercises-KStack-clean-bytecode-4bit-lora": "package adventofcode2018\n\nimport kotlin.math.abs\n\nclass Day04ReposeRecord {\n\n    fun part1(input: String): Int {\n        val lines = input.split(\"\\n\").filter { it.isNotEmpty() }\n        var count = 0\n        for (line in lines) {\n            val (x, y) = line.split(\",\").map { it.toInt() }\n            if (x == 0 && y == 0) continue\n            if (x > 0) count++\n            else if (x < 0) count--\n        }\n        return count\n    }\n\n    fun part2(input: String): Int {\n        val lines = input.split(\"\\n\").filter { it.isNotEmpty() }\n        var count = 0\n        for (line in lines) {\n            val (x, y) = line.split(\",\").map { it.toInt() }\n            if (x == 0 && y == 0) continue\n            if (x > 0) count += abs(y)\n            else if (x < 0) count -= abs(y)\n        }\n        return count\n    }\n}"}
{"kt_path": "8671/solution_8671.kt", "Qwen2.5-Coder-0.5B-Instruct-KExercises-KStack-clean-bytecode-4bit-lora": "/**\n * Calculates the average speed of a cyclist given their distance and time.\n *\n * @param distance The total distance covered by the cyclist in kilometers.\n * @param time The total time taken by the cyclist in hours.\n * @return The average speed of the cyclist in kilometers per hour.\n */\nfun calculateAverageSpeed(distance: Double, time: Double): Double {\nval averageSpeed = distance / time\n    return averageSpeed\n}"}
{"kt_path": "5601/solution_5601.kt", "Qwen2.5-Coder-0.5B-Instruct-KExercises-KStack-clean-bytecode-4bit-lora": "/**\n * Calculates the power of a circuit given its resistance and voltage.\n *\n * @param resistance The resistance of the circuit in ohms.\n * @param voltage The voltage across the circuit in volts.\n * @return The power of the circuit in watts.\n */\nfun calculateCircuitPower(resistance: Double, voltage: Double): Double {\nval power = resistance * voltage\n    return power\n}"}
{"kt_path": "10329/solution_10329.kt", "Qwen2.5-Coder-0.5B-Instruct-KExercises-KStack-clean-bytecode-4bit-lora": "/**\n * Calculates the resistance of a circuit given its voltage and current.\n *\n * @param voltage The voltage of the circuit in volts.\n * @param current The current flowing through the circuit in amperes.\n * @return The resistance of the circuit in ohms.\n */\nfun calculateResistance(voltage: Double, current: Double): Double {\nval resistance = voltage / current\n    return resistance\n}"}
{"kt_path": "n81ur3__kotlin-coding-challenges__fdc5941/src/main/kotlin/adventofcode2020/Day19MonsterMessage.kt", "Qwen2.5-Coder-0.5B-Instruct-KExercises-KStack-clean-bytecode-4bit-lora": "package adventofcode2020\n\nimport kotlin.math.maxOf\n\nclass Day19MonsterMessage {\n\n    fun part1(input: String): Int {\n        val (inputLines, _) = input.split(\"\\n\\n\").let { it.first().split(\" \").map { it.toInt() } to it.second().split(\" \").map { it.toInt() } }\n        val (width, height) = maxOf(inputLines[0].length, inputLines[1].length)\n        val (x, y) = maxOf(inputLines[0].first(), inputLines[1].first()) to maxOf(inputLines[0].last(), inputLines[1].last())\n        var count = 0\n        for (i in x..x + width - 1) {\n            for (j in y..y + height - 1) {\n                if (inputLines[i % width][j % width] == 1) {\n                    count++\n                }\n            }\n        }\n        return count\n    }\n\n    fun part2(input: String): Int {\n        val (inputLines, _) = input.split(\"\\n\\n\").let { it.first().split(\" \").map { it.toInt() } to it.second().split(\" \").map { it.toInt() } }\n        val (width, height) = maxOf(inputLines[0].length, inputLines[1].length)\n        val (x, y) = maxOf(inputLines[0].first(), inputLines[1].first()) to maxOf(inputLines[0].last(), inputLines[1].last())\n        var count = 0\n        for (i in x..x + width - 1) {\n            for (j in y..y + height - 1) {\n                if (inputLines[i % width][j % width] == 0) {\n                    count++\n                }\n            }\n        }\n        return count\n    }\n}"}
{"kt_path": "n81ur3__kotlin-coding-challenges__fdc5941/src/main/kotlin/adventofcode2020/Day07HandyHaversacks.kt", "Qwen2.5-Coder-0.5B-Instruct-KExercises-KStack-clean-bytecode-4bit-lora": "package adventofcode2020\n\nimport kotlin.math.maxOf\n\nclass Day07HandyHaversacks {\n\n    fun part1(input: String): Int {\n        val rules = input.split(\"\\n\").map { line ->\n            val (from, to) = line.split(\" \").filterIndexed { index, _ -> index % 2 == 0 }\n            val (toCount, fromCount) = to.split(\", \").map { it.toInt() }.fold(0) { acc, count -> acc + count }\n            Pair(from, toCount)\n        }\n\n        val bagCounts = mutableMapOf<String, Int>()\n        for ((bag, count) in rules) {\n            if (bagCounts.containsKey(bag)) {\n                bagCounts[bag] += count\n            } else {\n                bagCounts[bag] = count\n            }\n        }\n\n        var totalWeight = 0\n        for ((bag, count) in bagCounts) {\n            totalWeight += maxOf(count, calculateWeight(bagCounts[bag] ?: 0))\n        }\n\n        return totalWeight\n    }\n\n    private fun calculateWeight(bags: Int): Int {\n        return bags * (bags - 1) / 2\n    }\n\n    fun part2(input: String): Int {\n        val rules = input.split(\"\\n\").map { line ->\n            val (from, to) = line.split(\" \").filterIndexed { index, _ -> index % 2 == 0 }\n            val (toCount, fromCount) = to.split(\", \").map { it.toInt() }.fold(0) { acc, count -> acc + count }\n            Pair(from, toCount)\n        }\n\n        val bagCounts = mutableMapOf<String, Int>()\n        for ((bag, count) in rules) {\n            if (bagCounts.containsKey(bag)) {\n                bagCounts[bag] += count\n            } else {\n                bagCounts[bag] = count\n            }\n        }\n\n        var totalWeight = 0\n        for ((bag, count) in bagCounts) {\n            totalWeight += maxOf(count, calculate"}
{"kt_path": "7007/solution_7007.kt", "Qwen2.5-Coder-0.5B-Instruct-KExercises-KStack-clean-bytecode-4bit-lora": "/**\n * Determines whether a flight is long or not based on the distance and speed of the aircraft.\n *\n * @param distance The total distance of the flight in kilometers.\n * @param speed The speed of the aircraft in kilometers per hour.\n * @return True if the flight is long, False otherwise.\n */\nfun isLongFlight(distance: Int, speed: Int): Boolean {\nreturn distance > speed\n}"}
{"kt_path": "3696/solution_3696.kt", "Qwen2.5-Coder-0.5B-Instruct-KExercises-KStack-clean-bytecode-4bit-lora": "/**\n * This function calculates the area of a rectangle given its length and width.\n *\n * @param length The length of the rectangle.\n * @param width The width of the rectangle.\n * @return The area of the rectangle.\n */\nfun findCommonArea(length: Float, width: Float, height: Float): Float {\nval area = length * width\n    return area\n}"}
{"kt_path": "9314/solution_9314.kt", "Qwen2.5-Coder-0.5B-Instruct-KExercises-KStack-clean-bytecode-4bit-lora": "/**\n * This function checks if a given number is even or odd.\n *\n * @param num The number to check.\n * @return True if the number is even, False otherwise.\n */\nfun isEven(num: Int): Boolean {\nreturn num % 2 == 0\n}"}
{"kt_path": "10577/solution_10577.kt", "Qwen2.5-Coder-0.5B-Instruct-KExercises-KStack-clean-bytecode-4bit-lora": "/**\n * This function checks if a given number is even or odd.\n *\n * @param num The number to check.\n * @return True if the number is even, False otherwise.\n */\nfun isEven(num: Int): Boolean {\nreturn num % 2 == 0\n}"}
{"kt_path": "n81ur3__kotlin-coding-challenges__fdc5941/src/main/kotlin/adventofcode2018/Day06ChronalCoordinates.kt", "Qwen2.5-Coder-0.5B-Instruct-KExercises-KStack-clean-bytecode-4bit-lora": "import kotlin.math.abs\n\nclass Day06ChronalCoordinates {\n\n    fun part1(input: String): Int {\n        val lines = input.split(\"\\n\").map { line ->\n            val (x, y) = line.split(\",\").map { it.toInt() }\n            x to y\n        }\n\n        var maxDistance = 0\n        for ((x1, y1), (x2, y2) in lines) {\n            val distance = abs(x2 - x1) + abs(y2 - y1)\n            if (distance > maxDistance) {\n                maxDistance = distance\n            }\n        }\n\n        return maxDistance\n    }\n\n    fun part2(input: String): Int {\n        val lines = input.split(\"\\n\").map { line ->\n            val (x, y) = line.split(\",\").map { it.toInt() }\n            x to y\n        }\n\n        var minDistance = Int.MAX_VALUE\n        for ((x1, y1), (x2, y2) in lines) {\n            val distance = abs(x2 - x1) + abs(y2 - y1)\n            if (distance < minDistance) {\n                minDistance = distance\n            }\n        }\n\n        return minDistance\n    }\n}"}
{"kt_path": "7819/solution_7819.kt", "Qwen2.5-Coder-0.5B-Instruct-KExercises-KStack-clean-bytecode-4bit-lora": "/**\n * Calculates the power consumption of a device based on its voltage and current.\n *\n * @param voltage The voltage of the device in volts.\n * @param current The current flowing through the device in amperes.\n * @return The power consumption of the device in watts.\n */\nfun calculatePowerConsumption(voltage: Double): Double {\nval resistance = 1000 // Resistance in ohms (assuming a typical household circuit)\n    val powerConsumption = voltage / resistance\n    return powerConsumption\n}"}
{"kt_path": "8829/solution_8829.kt", "Qwen2.5-Coder-0.5B-Instruct-KExercises-KStack-clean-bytecode-4bit-lora": "/**\n * Calculates the daily calorie needs based on the weight and height of a person.\n *\n * @param weight The weight of the person in kilograms.\n * @param height The height of the person in meters.\n * @return The daily calorie needs in kilojoules.\n */\nfun calculateDailyCaloricNeeds(weight: Float, height: Float): Float {\nval dailyCalories = weight * 24 * height\n    return dailyCalories\n}"}
{"kt_path": "6256/solution_6256.kt", "Qwen2.5-Coder-0.5B-Instruct-KExercises-KStack-clean-bytecode-4bit-lora": "/**\n * This function checks if two numbers are not equal to each other.\n *\n * @param num1 The first number.\n * @param num2 The second number.\n * @return True if the numbers are not equal, False otherwise.\n */\nfun notEqualNone(num1: Int?, num2: Int?): Boolean {\nif (num1 != null && num2 != null) {\n        return num1 != num2\n    }\n    return false\n}"}
{"kt_path": "4238/solution_4238.kt", "Qwen2.5-Coder-0.5B-Instruct-KExercises-KStack-clean-bytecode-4bit-lora": "/**\n * This function checks if a driver's speed is within the speed limit.\n *\n * @param speed The speed of the driver in km/h.\n * @param speedLimit The speed limit in km/h.\n * @return True if the speed is within the speed limit, False otherwise.\n */\nfun checkSpeedLimit(speed: Float, speedLimit: Float): Boolean {\nval isWithinLimit = speed <= speedLimit\n    return isWithinLimit\n}"}
{"kt_path": "3868/solution_3868.kt", "Qwen2.5-Coder-0.5B-Instruct-KExercises-KStack-clean-bytecode-4bit-lora": "/**\n * This function takes two integers as input and returns the sum of all numbers between them (inclusive).\n *\n * @param start The starting integer.\n * @param end The ending integer.\n * @return The sum of all numbers between start and end (inclusive).\n */\nfun sumOfNumbers(start: Int, end: Int): Int {\nvar total = 0\n\n    // Loop through all numbers from start to end (inclusive)\n    while (start <= end) {\n        total += start\n        start++\n    }\n\n    return total\n}"}
{"kt_path": "5766/solution_5766.kt", "Qwen2.5-Coder-0.5B-Instruct-KExercises-KStack-clean-bytecode-4bit-lora": "/**\n * This function takes two integers as input and performs a left shift operation on the first integer,\n * then multiplies the result by the second integer, and finally returns the final value.\n *\n * @param num1 The first integer.\n * @param num2 The second integer.\n * @return The final value after performing the left shift and multiplication.\n */\nfun shiftAndMultiplyAssignment(num1: Int, num2: Int): Int {\nval shiftedNum = num1 shl num2\n    val multipliedNum = shiftedNum ushr num2\n    return multipliedNum\n}"}
{"kt_path": "4304/solution_4304.kt", "Qwen2.5-Coder-0.5B-Instruct-KExercises-KStack-clean-bytecode-4bit-lora": "/**\n * This function calculates the total number of floors in a building given the number of rooms and the number of floors per room.\n *\n * @param rooms The number of rooms in the building.\n * @param floorsPerRoom The number of floors per room.\n * @return The total number of floors in the building.\n */\nfun architectMath(rooms: Int, floorsPerRoom: Int): Int {\nval totalFloors = rooms * floorsPerRoom\n    return totalFloors\n}"}
{"kt_path": "alebedev__aoc2022__d6ba46b/src/main/kotlin/Map.kt", "Qwen2.5-Coder-0.5B-Instruct-KExercises-KStack-clean-bytecode-4bit-lora": "import AocMap\n\nfun main() {\n    AocMap.solve()\n}\n\nprivate fun AocMap.solve() {\n    val (a, b) = AocMap.readInput()\n    val (x, y) = AocMap.readInput()\n    val (w, h) = AocMap.readInput()\n\n    val (a1, a2) = AocMap.readInput()\n    val (b1, b2) = AocMap.readInput()\n    val (c1, c2) = AocMap.readInput()\n    val (d1, d2) = AocMap.readInput()\n\n    println(a)\n    println(b)\n    println(c)\n    println(d)\n\n    println(AocMap.countOverlaps(a, b))\n    println(AocMap.countOverlaps(a1, a2))\n    println(AocMap.countOverlaps(b1, b2))\n    println(AocMap.countOverlaps(c1, c2))\n    println(AocMap.countOverlaps(d1, d2))\n}"}
{"kt_path": "7168/solution_7168.kt", "Qwen2.5-Coder-0.5B-Instruct-KExercises-KStack-clean-bytecode-4bit-lora": "/**\n * This function takes three integers as input and performs multiplication and modulus operations.\n *\n * @param a The first integer.\n * @param b The second integer.\n * @param c The third integer.\n * @param d The fourth integer.\n * @return The result of multiplying the first two integers by the third integer and then taking the modulus of the result with the fourth integer.\n */\nfun multiplyAndModulo(a: Int, b: Int, c: Int, d: Int): Int {\nval result = a * b\n    val remainder = result % d\n    return remainder\n}"}
{"kt_path": "5304/solution_5304.kt", "Qwen2.5-Coder-0.5B-Instruct-KExercises-KStack-clean-bytecode-4bit-lora": "/**\n * This function calculates the number of circuits required to complete a given task.\n *\n * @param totalTasks The total number of tasks to be completed.\n * @param tasksPerCircuit The number of tasks that can be completed in one circuit.\n * @return The number of circuits required to complete the task.\n */\nfun numberOfCircuits(totalTasks: Int, tasksPerCircuit: Int): Int {\nvar circuits = totalTasks / tasksPerCircuit\n    var remainingTasks = totalTasks % tasksPerCircuit\n\n    while (remainingTasks > 0) {\n        circuits++\n        remainingTasks--\n    }\n\n    return circuits\n}"}
{"kt_path": "7099/solution_7099.kt", "Qwen2.5-Coder-0.5B-Instruct-KExercises-KStack-clean-bytecode-4bit-lora": "/**\n * Calculates the distance between two points in a 3D space.\n *\n * @param x1 The x-coordinate of the first point.\n * @param y1 The y-coordinate of the first point.\n * @param z1 The z-coordinate of the first point.\n * @param x2 The x-coordinate of the second point.\n * @param y2 The y-coordinate of the second point.\n * @param z2 The z-coordinate of the second point.\n * @return The distance between the two points.\n */\nfun calculateDistance(x1: Double, y1: Double, z1: Double, x2: Double, y2: Double, z2: Double): Double {\nval dx = x2 - x1\n    val dy = y2 - y1\n    val dz = z2 - z1\n    val distance = (dx * dx + dy * dy + dz * dz) / 2\n    return distance\n}"}
{"kt_path": "8138/solution_8138.kt", "Qwen2.5-Coder-0.5B-Instruct-KExercises-KStack-clean-bytecode-4bit-lora": "/**\n * Calculates the total points scored by an athlete based on their performance and goals.\n *\n * @param score The total score of the athlete.\n * @param goal True if the athlete scored a goal, False otherwise.\n * @param isGoalTrue True if the goal was true, False otherwise.\n * @return The total points scored by the athlete.\n */\nfun athletePoints(score: Int, goal: Boolean, isGoalTrue: Boolean): Int {\nreturn when {\n        goal -> score + 3\n        else -> score\n    }\n}"}
{"kt_path": "6625/solution_6625.kt", "Qwen2.5-Coder-0.5B-Instruct-KExercises-KStack-clean-bytecode-4bit-lora": "/**\n * Calculates the length of a cut using the formula: length = (length - width) / (1 - percentage)\n *\n * @param length The original length of the cut.\n * @param width The width of the cut.\n * @param percentage The percentage of the cut that needs to be removed.\n * @return The length of the cut after removing the specified percentage.\n */\nfun calculateCutLength(length: Float, width: Float, percentage: Int): Float {\nval cutLength = (length - width) / (1 - percentage)\n    return cutLength\n}"}
{"kt_path": "14820/solution_14820.kt", "Qwen2.5-Coder-0.5B-Instruct-KExercises-KStack-clean-bytecode-4bit-lora": "/**\n * This function takes an integer as input and returns the sum of all positive integers less than or equal to that integer.\n *\n * @param n An integer representing the upper limit (inclusive).\n * @return The sum of all positive integers less than or equal to n.\n */\nfun positiveIntegersSum(n: Int): Int {\nvar sum = 0\n    var i = 1\n    while (i <= n) {\n        sum += i\n        i++\n    }\n    return sum\n}"}
{"kt_path": "3808/solution_3808.kt", "Qwen2.5-Coder-0.5B-Instruct-KExercises-KStack-clean-bytecode-4bit-lora": "/**\n * This function counts the number of negative numbers in a given range.\n *\n * @param start The starting value of the range.\n * @param end The ending value of the range.\n * @return The count of negative numbers in the range.\n */\nfun countNegative(start: Int, end: Int): Int {\nvar count = 0\n    for (num in start..end) {\n        if (num < 0) {\n            count++\n        }\n    }\n    return count\n}"}
{"kt_path": "677/solution_677.kt", "Qwen2.5-Coder-0.5B-Instruct-KExercises-KStack-clean-bytecode-4bit-lora": "/**\n * This function takes two complex numbers as input and returns their modulus.\n *\n * @param a The real part of the first complex number.\n * @param b The imaginary part of the first complex number.\n * @return The modulus of the two complex numbers.\n */\nfun modulusComplexNumbers(a: Float, b: Float): Float {\nval modulus = Math.sqrt(a * a + b * b)\n    return modulus\n}"}
{"kt_path": "1838/solution_1838.kt", "Qwen2.5-Coder-0.5B-Instruct-KExercises-KStack-clean-bytecode-4bit-lora": "/**\n * This function calculates the sum of all numbers from 1 to n (inclusive).\n *\n * @param n The upper limit of the range.\n * @return The sum of all numbers from 1 to n.\n */\nfun calculateSum(n: Int): Int {\nvar sum = 0\n    var i = 1\n    while (i <= n) {\n        sum += i\n        i++\n    }\n    return sum\n}"}
{"kt_path": "3178/solution_3178.kt", "Qwen2.5-Coder-0.5B-Instruct-KExercises-KStack-clean-bytecode-4bit-lora": "/**\n * Calculates the salary of a graphic designer based on their experience.\n *\n * @param experience The number of years of experience in graphic design.\n * @return The calculated salary of the graphic designer.\n */\nfun graphicDesignerSalary(experience: Int): Int {\nvar salary = 0\n\n    // Check if the graphic designer has more than 1 year of experience\n    if (experience > 1) {\n        salary = 2500\n    }\n\n    // Calculate the salary based on the experience\n    salary += experience * 500\n\n    return salary\n}"}
{"kt_path": "9504/solution_9504.kt", "Qwen2.5-Coder-0.5B-Instruct-KExercises-KStack-clean-bytecode-4bit-lora": "/**\n * This function checks if a given number is prime or not.\n *\n * @param num The number to be checked.\n * @return True if the number is prime, False otherwise.\n */\nfun checkPrimeNumbers(num: Int): Boolean {\nvar count = 2\n    while (count <= num) {\n        if (num % count == 0) {\n            return false\n        }\n        count++\n    }\n    return true\n}"}
{"kt_path": "5182/solution_5182.kt", "Qwen2.5-Coder-0.5B-Instruct-KExercises-KStack-clean-bytecode-4bit-lora": "/**\n * This function checks if a given number is divisible by any of the numbers from 2 to 10.\n *\n * @param num The number to be checked.\n * @return True if the number is divisible by any of the numbers from 2 to 10, False otherwise.\n */\nfun checkDivisible(num: Int): Boolean {\nvar count = 2\n    while (count <= 10) {\n        if (num % count == 0) {\n            return true\n        }\n        count++\n    }\n    return false\n}"}
{"kt_path": "7650/solution_7650.kt", "Qwen2.5-Coder-0.5B-Instruct-KExercises-KStack-clean-bytecode-4bit-lora": "/**\n * This function calculates the sum of squares of all numbers from 1 to n (inclusive).\n *\n * @param n The upper limit (exclusive) for calculating the sum of squares.\n * @return The sum of squares from 1 to n.\n */\nfun sumOfSquares(n: Int): Int {\nvar total = 0\n    var i = 1\n    while (i <= n) {\n        total += i * i\n        i++\n    }\n    return total\n}"}
{"kt_path": "6824/solution_6824.kt", "Qwen2.5-Coder-0.5B-Instruct-KExercises-KStack-clean-bytecode-4bit-lora": "/**\n * Calculates the score based on the given number of attempts and the difficulty level.\n *\n * @param attempts The number of attempts made by the player.\n * @param difficultyLevel The difficulty level of the game (1-5).\n * @return The calculated score based on the given number of attempts and difficulty level.\n */\nfun calculateScore(attempts: Int, difficultyLevel: Int): Int {\nval score = (attempts * 10) - (difficultyLevel * 5)\n    return if (score < 0) -1 else score\n}"}
{"kt_path": "1825/solution_1825.kt", "Qwen2.5-Coder-0.5B-Instruct-KExercises-KStack-clean-bytecode-4bit-lora": "/**\n * Calculates the total salary of a carpenter based on their experience and hourly rate.\n *\n * @param experience The number of years of experience the carpenter has.\n * @param hourlyRate The hourly rate at which the carpenter works.\n * @return The total salary of the carpenter.\n */\nfun calculateCarpenterSalary(experience: Int, hourlyRate: Double): Double {\nval totalSalary = (experience * hourlyRate) * 100\n    return totalSalary\n}"}
{"kt_path": "1332/solution_1332.kt", "Qwen2.5-Coder-0.5B-Instruct-KExercises-KStack-clean-bytecode-4bit-lora": "/**\n * This function takes in a temperature and returns the number of times the fire should be extinguished based on the given temperature.\n *\n * @param temperature The temperature at which the fire is located.\n * @return The number of times the fire should be extinguished.\n */\nfun extinguishFire(temperature: Double): Int {\nvar count = 0\n    var currentTemperature = temperature\n\n    while (currentTemperature > 0) {\n        currentTemperature /= 2\n        count++\n    }\n\n    return count\n}"}
{"kt_path": "10817/solution_10817.kt", "Qwen2.5-Coder-0.5B-Instruct-KExercises-KStack-clean-bytecode-4bit-lora": "/**\n * This function takes three integers as input and returns the maximum of them.\n *\n * @param a The first integer.\n * @param b The second integer.\n * @param c The third integer.\n * @return The maximum of the three integers.\n */\nfun maxOfThree(a: Int, b: Int, c: Int): Int {\nif (a > b && a > c) {\n        return a\n    } else if (b > a && b > c) {\n        return b\n    } else {\n        return c\n    }\n}"}
{"kt_path": "11536/solution_11536.kt", "Qwen2.5-Coder-0.5B-Instruct-KExercises-KStack-clean-bytecode-4bit-lora": "/**\n * This function checks if a given value is a float.\n *\n * @param value The value to check.\n * @return True if the value is a float, False otherwise.\n */\nfun isFloat(value: Any): Boolean {\nreturn value is Float\n}"}
{"kt_path": "13694/solution_13694.kt", "Qwen2.5-Coder-0.5B-Instruct-KExercises-KStack-clean-bytecode-4bit-lora": "/**\n * Calculates the salary of a carpenter based on their experience and hourly rate.\n *\n * @param experience The number of years of experience the carpenter has.\n * @param hourlyRate The hourly rate at which the carpenter works.\n * @return The calculated salary of the carpenter.\n */\nfun calculateCarpenterSalary(experience: Int, hourlyRate: Double): Double {\nval salary = (experience * hourlyRate) * 12\n    return salary\n}"}
{"kt_path": "7127/solution_7127.kt", "Qwen2.5-Coder-0.5B-Instruct-KExercises-KStack-clean-bytecode-4bit-lora": "/**\n * This function checks if a given object is an instance of Integer.\n *\n * @param number The object to be checked.\n * @return True if the object is an instance of Integer, False otherwise.\n */\nfun checkInteger(number: Any): Boolean {\nreturn number is Int\n}"}
{"kt_path": "7144/solution_7144.kt", "Qwen2.5-Coder-0.5B-Instruct-KExercises-KStack-clean-bytecode-4bit-lora": "/**\n * This function checks if two floating-point numbers are equal within a certain tolerance.\n *\n * @param num1 The first floating-point number.\n * @param num2 The second floating-point number.\n * @return True if the numbers are equal within the given tolerance, False otherwise.\n */\nfun identityComparisonAndFloatingPointOperations(num1: Double, num2: Double): Boolean {\n// Check if the absolute difference between the two numbers is less than the specified tolerance\n    return Math.abs(num1 - num2) < 0.01\n}"}
{"kt_path": "8240/solution_8240.kt", "Qwen2.5-Coder-0.5B-Instruct-KExercises-KStack-clean-bytecode-4bit-lora": "/**\n * Calculate the factorial of a given number using a while loop.\n *\n * @param num The number to calculate the factorial for.\n * @return The factorial of the given number.\n */\nfun calculateFactorial(num: Int): Int {\nvar result = 1\n    var i = 1\n    while (i <= num) {\n        result *= i\n        i++\n    }\n    return result\n}"}
{"kt_path": "2140/solution_2140.kt", "Qwen2.5-Coder-0.5B-Instruct-KExercises-KStack-clean-bytecode-4bit-lora": "/**\n * Calculates the commission earned by a salesperson based on their sales and commission rate.\n *\n * @param sales The total sales made by the salesperson.\n * @param commissionRate The commission rate as a percentage (e.g., 10% = 0.10).\n * @return The commission earned by the salesperson.\n */\nfun commissionCalculator(sales: Double, commissionRate: Double): Double {\nvar commission = 0.0\n\n    // Check if sales is greater than zero\n    if (sales > 0) {\n        // Check if commission rate is greater than zero\n        if (commissionRate > 0) {\n            // Calculate commission\n            commission = sales * commissionRate\n        }\n    }\n\n    return commission\n}"}
{"kt_path": "14315/solution_14315.kt", "Qwen2.5-Coder-0.5B-Instruct-KExercises-KStack-clean-bytecode-4bit-lora": "/**\n * This function takes a positive integer as input and returns the sum of all positive integers less than or equal to it.\n *\n * @param n A positive integer\n * @return The sum of all positive integers less than or equal to n\n */\nfun sumPositiveIntegers(n: Int): Int {\nvar total = 0\n    var i = 1\n\n    while (i <= n) {\n        total += i\n        i++\n    }\n\n    return total\n}"}
{"kt_path": "2523/solution_2523.kt", "Qwen2.5-Coder-0.5B-Instruct-KExercises-KStack-clean-bytecode-4bit-lora": "/**\n * This function takes two integers as input and returns the sum of all even numbers between them (inclusive).\n *\n * @param start The starting integer.\n * @param end The ending integer.\n * @return The sum of all even numbers between start and end (inclusive).\n */\nfun sumEvenNumbers(start: Int, end: Int): Int {\nvar sum = 0\n    for (num in start..end) {\n        if (num % 2 == 0) {\n            sum += num\n        }\n    }\n    return sum\n}"}
{"kt_path": "918/solution_918.kt", "Qwen2.5-Coder-0.5B-Instruct-KExercises-KStack-clean-bytecode-4bit-lora": "/**\n * This function checks if a user has enough budget to perform a marketing campaign.\n *\n * @param budget The total amount of money available in the user's account.\n * @return A message indicating whether the user has enough budget or not.\n */\nfun checkBudget(budget: Int): String {\nval requiredBudget = 4000\n\n    if (budget >= requiredBudget) {\n        return \"Insufficient budget, please allocate more funds for the campaign.\"\n    } else {\n        return \"Budget is sufficient for the marketing campaign.\"\n    }\n}"}
{"kt_path": "10520/solution_10520.kt", "Qwen2.5-Coder-0.5B-Instruct-KExercises-KStack-clean-bytecode-4bit-lora": "/**\n * This function takes two integers as input and returns the sum of all even numbers between them (inclusive).\n *\n * @param start The starting integer.\n * @param end The ending integer.\n * @return The sum of all even numbers between start and end (inclusive).\n */\nfun sumOfEvenNumbers(start: Int, end: Int): Int {\nvar sum = 0\n    for (num in start..end) {\n        if (num % 2 == 0) {\n            sum += num\n        }\n    }\n    return sum\n}"}
{"kt_path": "6399/solution_6399.kt", "Qwen2.5-Coder-0.5B-Instruct-KExercises-KStack-clean-bytecode-4bit-lora": "/**\n * This function checks whether a given percentage is within the acceptable range or not.\n *\n * @param percentage The percentage to be checked.\n * @return A message indicating whether the percentage is within the acceptable range or not.\n */\nfun checkPercentage(percentage: Int): String {\nif (percentage >= 95 && percentage <= 98) {\n        return \"Within acceptable range\"\n    } else {\n        return \"Outside acceptable range\"\n    }\n}"}
{"kt_path": "10731/solution_10731.kt", "Qwen2.5-Coder-0.5B-Instruct-KExercises-KStack-clean-bytecode-4bit-lora": "/**\n * This function checks if a person is eligible for a certain job based on their age, experience, and salary.\n *\n * @param age The age of the person.\n * @param experience The number of years of experience the person has.\n * @param salary The annual salary of the person.\n * @return A string indicating whether the person is eligible or not.\n */\nfun checkEligibility(age: Int, experience: Int, salary: Int): String {\nif (age >= 18 && experience >= 5 && salary >= 2) {\n        return \"Eligible\"\n    } else {\n        return \"Not Eligible\"\n    }\n}"}
{"kt_path": "8756/solution_8756.kt", "Qwen2.5-Coder-0.5B-Instruct-KExercises-KStack-clean-bytecode-4bit-lora": "/**\n * This function finds the maximum value among three given numbers.\n *\n * @param a The first number.\n * @param b The second number.\n * @param c The third number.\n * @return The maximum value among the three numbers.\n */\nfun findMax(a: Int, b: Int, c: Int): Int {\nvar max = a\n\n    if (b > max) {\n        max = b\n    }\n\n    if (c > max) {\n        max = c\n    }\n\n    return max\n}"}
{"kt_path": "10964/solution_10964.kt", "Qwen2.5-Coder-0.5B-Instruct-KExercises-KStack-clean-bytecode-4bit-lora": "/**\n * Calculates the growth of an investment over a specified number of years.\n *\n * @param initialInvestment The initial amount of money invested.\n * @param annualRate The annual interest rate (in percentage).\n * @param years The number of years the investment will be grown.\n * @return The final amount of money after the investment grows.\n */\nfun calculateInvestmentGrowth(initialInvestment: Double, annualRate: Double, years: Int): Double {\nvar investment = initialInvestment\n\n    for (year in 0 until years) {\n        investment *= 1 + annualRate / 100\n    }\n\n    return investment\n}"}
{"kt_path": "9201/solution_9201.kt", "Qwen2.5-Coder-0.5B-Instruct-KExercises-KStack-clean-bytecode-4bit-lora": "/**\n * Determines whether a given number is close to zero using absolute value and floating-point comparison.\n *\n * @param num The number to check.\n * @return True if the number is close to zero, False otherwise.\n */\nfun isCloseToZero(num: Double, epsilon: Double): Boolean {\nreturn Math.abs(num) < epsilon\n}"}
{"kt_path": "14784/solution_14784.kt", "Qwen2.5-Coder-0.5B-Instruct-KExercises-KStack-clean-bytecode-4bit-lora": "/**\n * This function calculates the sum of all multiples of a given number within a specified range.\n *\n * @param num The number to find multiples of.\n * @param limit The upper limit (exclusive) for finding multiples.\n * @return The sum of all multiples of num within the range.\n */\nfun sumOfMultiples(num: Int, limit: Int): Int {\nvar sum = 0\n    var i = 1\n\n    while (i <= limit) {\n        if (i % num == 0) {\n            sum += i\n        }\n        i++\n    }\n\n    return sum\n}"}
{"kt_path": "12550/solution_12550.kt", "Qwen2.5-Coder-0.5B-Instruct-KExercises-KStack-clean-bytecode-4bit-lora": "/**\n * This function checks if a player has met certain conditions for winning the game.\n *\n * @param score The current score of the player.\n * @param level The current level of the game.\n * @param maxLevel The maximum level that the player can reach.\n * @param isGameOver Whether the game is over or not.\n * @return True if the player has met all the conditions, False otherwise.\n */\nfun checkGameConditions(score: Int, level: Int, maxLevel: Int, isGameOver: Boolean): Boolean {\nif (score >= 1000 && level >= 50 && maxLevel >= 10) {\n        return true\n    }\n    return false\n}"}
{"kt_path": "2717/solution_2717.kt", "Qwen2.5-Coder-0.5B-Instruct-KExercises-KStack-clean-bytecode-4bit-lora": "/**\n * Given a list, return the first element of the list.\n *\n * @param lst The input list.\n * @return The first element of the list.\n */\nfun getFirstElement(lst: List<Any>): Any? {\nreturn lst[0]\n}"}
{"kt_path": "10259/solution_10259.kt", "Qwen2.5-Coder-0.5B-Instruct-KExercises-KStack-clean-bytecode-4bit-lora": "/**\n * Calculates the total price of a meal after applying a discount.\n *\n * @param mealCost The cost of the meal before discount.\n * @param discount The discount percentage applied to the meal.\n * @return The total price of the meal after applying the discount.\n */\nfun calculateTotalPrice(mealCost: Float, discount: Float): Float {\nval discountedPrice = Math.abs(mealCost - mealCost * discount / 100)\n    return discountedPrice\n}"}
{"kt_path": "1510/solution_1510.kt", "Qwen2.5-Coder-0.5B-Instruct-KExercises-KStack-clean-bytecode-4bit-lora": "/**\n * Given a list, return the last element of the list.\n *\n * @param lst The input list.\n * @return The last element of the list.\n */\nfun getLastElement(lst: List<Any>): Any? {\nreturn lst.last()\n}"}
{"kt_path": "2099/solution_2099.kt", "Qwen2.5-Coder-0.5B-Instruct-KExercises-KStack-clean-bytecode-4bit-lora": "/**\n * Calculates the total distance traveled by a cyclist given their speed and time.\n *\n * @param speed The speed of the cyclist in km/h.\n * @param time The time taken by the cyclist in hours.\n * @return The total distance traveled by the cyclist in km.\n */\nfun calculateTotalDistance(speed: Float, time: Float): Float {\nvar totalDistance = 0f\n    var count = 1\n\n    while (count <= time) {\n        totalDistance += speed\n        count++\n    }\n\n    return totalDistance\n}"}
{"kt_path": "9202/solution_9202.kt", "Qwen2.5-Coder-0.5B-Instruct-KExercises-KStack-clean-bytecode-4bit-lora": "/**\n * This function checks if a given number has a significant decimal part.\n *\n * @param num The number to check.\n * @param epsilon The maximum allowed difference between two consecutive decimal parts.\n * @return True if the number has a significant decimal part, False otherwise.\n */\nfun hasSignificantDecimalPart(num: Double, epsilon: Double): Boolean {\nval absNum = Math.abs(num)\n    val absEpsilon = Math.abs(epsilon)\n\n    return absNum > absEpsilon\n}"}
{"kt_path": "9289/solution_9289.kt", "Qwen2.5-Coder-0.5B-Instruct-KExercises-KStack-clean-bytecode-4bit-lora": "/**\n * Slices a tuple using negative indices.\n *\n * Given a tuple 't' and two integers 'start' and 'end', this function returns a new tuple\n * that contains elements from 't' starting from 'start' (inclusive) to 'end' (exclusive).\n *\n * @param t The input tuple.\n * @param start The starting index of the slice.\n * @param end The ending index of the slice (exclusive).\n * @return A new tuple containing the sliced elements.\n */\nfun sliceTuple(t: List<Any>, start: Int, end: Int): List<Any> {\nreturn t.subList(start, end)\n}"}
{"kt_path": "222/solution_222.kt", "Qwen2.5-Coder-0.5B-Instruct-KExercises-KStack-clean-bytecode-4bit-lora": "/**\n * Calculates the profit earned by a farmer given their income and expenses.\n *\n * @param income The farmer's total income.\n * @param expenses The farmer's total expenses.\n * @return The farmer's profit.\n */\nfun calculateProfit(income: Double, expenses: Double): Double {\nval profit = income - expenses\n    return if (profit > 0) profit else -profit\n}"}
{"kt_path": "2704/solution_2704.kt", "Qwen2.5-Coder-0.5B-Instruct-KExercises-KStack-clean-bytecode-4bit-lora": "/**\n * This function calculates the sum of a series of numbers using a while loop and a break statement.\n *\n * @return The sum of the series.\n */\nfun calculateSum(): Double {\nvar total = 0.0\n    var increment = 0.1\n\n    while (true) {\n        total += increment\n        increment *= 0.01\n\n        if (total > 1000.0) {\n            break\n        }\n    }\n\n    return total\n}"}
{"kt_path": "7036/solution_7036.kt", "Qwen2.5-Coder-0.5B-Instruct-KExercises-KStack-clean-bytecode-4bit-lora": "/**\n * This function calculates the total expenses of a list of expenses.\n *\n * @param expensesList A list of expenses.\n * @return The total expenses.\n */\nfun calculateExpenses(expensesList: List<Double>): Double {\nreturn expensesList.sum()\n}"}
{"kt_path": "7097/solution_7097.kt", "Qwen2.5-Coder-0.5B-Instruct-KExercises-KStack-clean-bytecode-4bit-lora": "/**\n * Given a list of animals and an index, return the animal at that index.\n *\n * @param animalTuple A tuple containing the names of the animals.\n * @param index The index of the animal to be returned.\n * @return The animal at the given index.\n */\nfun findAnimal(animalTuple: List<String>, index: Int): String {\nreturn animalTuple[index]\n}"}
{"kt_path": "6743/solution_6743.kt", "Qwen2.5-Coder-0.5B-Instruct-KExercises-KStack-clean-bytecode-4bit-lora": "/**\n * Converts a list of integers into a set.\n *\n * @param data A list of integers.\n * @return A set containing all the unique integers in the list.\n */\nfun toSet(data: List<Int>): Set<Int> {\nreturn data.toSet()\n}"}
{"kt_path": "14646/solution_14646.kt", "Qwen2.5-Coder-0.5B-Instruct-KExercises-KStack-clean-bytecode-4bit-lora": "/**\n * This function checks if a person is eligible for a promotion based on their age and salary.\n *\n * @param age The age of the person.\n * @param salary The salary of the person.\n * @return True if the person is eligible for promotion, False otherwise.\n */\nfun checkPromotionEligibility(age: Int, salary: Double): Boolean {\nreturn when {\n        age >= 25 && salary > 4000 -> true\n        else -> false\n    }\n}"}
{"kt_path": "1671/solution_1671.kt", "Qwen2.5-Coder-0.5B-Instruct-KExercises-KStack-clean-bytecode-4bit-lora": "/**\n * Given a dictionary, create a tuple from it.\n *\n * @param dictionary The input dictionary.\n * @return A tuple containing the keys and values of the dictionary.\n */\nfun createTupleFromDictionary(dictionary: Map<String, Any>): List<Pair<String, Any>> {\nreturn dictionary.toList()\n}"}
{"kt_path": "13442/solution_13442.kt", "Qwen2.5-Coder-0.5B-Instruct-KExercises-KStack-clean-bytecode-4bit-lora": "/**\n * This function prints all even numbers between two given integers.\n *\n * @param start The starting integer.\n * @param end The ending integer.\n */\nfun printEvenNumbers(start: Int, end: Int) {\nfor (num in start..end) {\n        if (num % 2 == 0) {\n            println(num)\n        }\n    }\n}"}
{"kt_path": "13338/solution_13338.kt", "Qwen2.5-Coder-0.5B-Instruct-KExercises-KStack-clean-bytecode-4bit-lora": "/**\n * Converts a list of photo data into a set.\n *\n * @param photoData A list of photo data.\n * @return A set containing unique photo data.\n */\nfun convertToSet(photoData: List<String>): Set<String> {\nreturn photoData.toSet()\n}"}
{"kt_path": "8409/solution_8409.kt", "Qwen2.5-Coder-0.5B-Instruct-KExercises-KStack-clean-bytecode-4bit-lora": "/**\n * Calculates the total cost of a product based on its price and quantity.\n *\n * @param price The price of the product in dollars.\n * @param quantity The quantity of the product to be purchased.\n * @return The total cost of the product.\n */\nfun calculateTotalCost(price: Double, quantity: Double): Double {\nval totalCost = price * quantity\n    val discount = if (totalCost > 1000) 0.1 else 0.0\n    val discountedTotalCost = totalCost - discount\n    return discountedTotalCost\n}"}
{"kt_path": "5263/solution_5263.kt", "Qwen2.5-Coder-0.5B-Instruct-KExercises-KStack-clean-bytecode-4bit-lora": "/**\n * This function checks if a set of conditions is met for a given boolean value.\n *\n * @param condition1 The first condition to check.\n * @param condition2 The second condition to check.\n * @param condition3 The third condition to check.\n * @param condition4 The fourth condition to check.\n * @return True if all conditions are met, False otherwise.\n */\nfun operationsQuiz(condition1: Boolean, condition2: Boolean, condition3: Boolean, condition4: Boolean): Boolean {\nvar count = 0\n\n    while (count < 4) {\n        if (condition1) {\n            count++\n        }\n        if (condition2) {\n            count++\n        }\n        if (condition3) {\n            count++\n        }\n        if (condition4) {\n            count++\n        }\n\n        if (count == 4) {\n            return true\n        }\n    }\n\n    return false\n}"}
{"kt_path": "7005/solution_7005.kt", "Qwen2.5-Coder-0.5B-Instruct-KExercises-KStack-clean-bytecode-4bit-lora": "/**\n * Converts a set to a list.\n *\n * @param s The set to be converted.\n * @return A list containing all elements of the set.\n */\nfun convertSetToList(s: Set<Any>): List<Any> {\nreturn s.toList()\n}"}
{"kt_path": "7004/solution_7004.kt", "Qwen2.5-Coder-0.5B-Instruct-KExercises-KStack-clean-bytecode-4bit-lora": "/**\n * Converts a list to a set.\n *\n * @param lst The input list.\n * @return A set containing all unique elements from the input list.\n */\nfun convertListToSet(lst: List<Any>): Set<Any> {\nreturn lst.toSet()\n}"}
{"kt_path": "1559/solution_1559.kt", "Qwen2.5-Coder-0.5B-Instruct-KExercises-KStack-clean-bytecode-4bit-lora": "/**\n * Converts a list of game data into a set.\n *\n * @param gameData A list of game data.\n * @return A set containing unique game data.\n */\nfun convertToSet(gameData: List<Any>): Set<Any> {\nreturn gameData.toSet()\n}"}
{"kt_path": "14689/solution_14689.kt", "Qwen2.5-Coder-0.5B-Instruct-KExercises-KStack-clean-bytecode-4bit-lora": "/**\n * This function takes an integer as input and prints all the odd numbers between 1 and the given number.\n *\n * @param num The upper limit (exclusive) for printing odd numbers.\n */\nfun printOddNumbers(num: Int) {\nvar count = 1\n    while (count <= num) {\n        if (count % 2 != 0) {\n            println(count)\n        }\n        count++\n    }\n}"}
{"kt_path": "13400/solution_13400.kt", "Qwen2.5-Coder-0.5B-Instruct-KExercises-KStack-clean-bytecode-4bit-lora": "/**\n * This function takes four numbers as input and returns the larger number.\n *\n * @param a The first number.\n * @param b The second number.\n * @param c The third number.\n * @param d The fourth number.\n * @return The larger number.\n */\nfun findBiggerNumber(a: Int, b: Int, c: Int, d: Int): Int {\nvar larger = a\n\n    if (b > larger) {\n        larger = b\n    }\n\n    if (c > larger) {\n        larger = c\n    }\n\n    if (d > larger) {\n        larger = d\n    }\n\n    return larger\n}"}
{"kt_path": "9661/solution_9661.kt", "Qwen2.5-Coder-0.5B-Instruct-KExercises-KStack-clean-bytecode-4bit-lora": "/**\n * This function calculates the sum of all numbers in a given range.\n *\n * @param start The starting number of the range.\n * @param end The ending number of the range.\n * @return The sum of all numbers in the range.\n */\nfun calculateSums(start: Int): Int {\nvar sum = 0\n    var current = 1\n\n    while (current <= end) {\n        if (current % 5 == 0 && current % 35 == 0) {\n            sum += current\n        }\n        current++\n    }\n\n    return sum\n}"}
{"kt_path": "8323/solution_8323.kt", "Qwen2.5-Coder-0.5B-Instruct-KExercises-KStack-clean-bytecode-4bit-lora": "/**\n * Calculates the remaining books after a certain number of days.\n *\n * @param totalBooks The total number of books in the library.\n * @param days The number of days to calculate the remaining books for.\n * @return The remaining number of books after the given number of days.\n */\nfun calculateRemainingBooks(totalBooks: Int, days: Int): Int {\nvar remainingBooks = totalBooks\n    var remainingDays = days\n\n    while (remainingDays > 0) {\n        remainingBooks /= 3\n        remainingDays--\n    }\n\n    return remainingBooks\n}"}
{"kt_path": "236/solution_236.kt", "Qwen2.5-Coder-0.5B-Instruct-KExercises-KStack-clean-bytecode-4bit-lora": "/**\n * This function calculates the area of a floor given its length and width.\n *\n * @param length The length of the floor in meters.\n * @param width The width of the floor in meters.\n * @return The area of the floor in square meters.\n * @throws IllegalArgumentException If either length or width is negative.\n */\nfun computeFloorArea(length: Float, width: Float): Any {\nif (length < 0 || width < 0) {\n        throw IllegalArgumentException(\"Invalid length or width\")\n    }\n\n    return length * width\n}"}
{"kt_path": "14771/solution_14771.kt", "Qwen2.5-Coder-0.5B-Instruct-KExercises-KStack-clean-bytecode-4bit-lora": "/**\n * Given a list of nurses and an index, return a new list containing the nurse at the specified index.\n *\n * @param nurses A list of nurses.\n * @param index The index of the nurse to retrieve.\n * @return A new list containing the nurse at the specified index.\n */\nfun indexingAndSlicingTuples(nurses: List<String>, index: Int): List<String> {\nreturn nurses.subList(index, index + 1)\n}"}
{"kt_path": "9943/solution_9943.kt", "Qwen2.5-Coder-0.5B-Instruct-KExercises-KStack-clean-bytecode-4bit-lora": "/**\n * This function takes a list of integers and adds all the negative integers to a set.\n *\n * @param numbers A list of integers.\n * @return A set containing all the negative integers from the input list.\n */\nfun addNegIntegersToSet(numbers: List<Int>): Set<Int> {\nval negativeIntegers = numbers.toSet()\n    return negativeIntegers\n}"}
{"kt_path": "8713/solution_8713.kt", "Qwen2.5-Coder-0.5B-Instruct-KExercises-KStack-clean-bytecode-4bit-lora": "/**\n * Given a complex number represented as a pair of real and imaginary parts,\n * return the imaginary part of the complex number.\n *\n * @param complexNumber A pair representing the complex number in the form (realPart, imaginaryPart).\n * @return The imaginary part of the complex number.\n */\nfun accessImaginaryPart(complexNumber: Pair<Double, Double>): Double {\nreturn complexNumber.second\n}"}
{"kt_path": "3773/solution_3773.kt", "Qwen2.5-Coder-0.5B-Instruct-KExercises-KStack-clean-bytecode-4bit-lora": "/**\n * Calculates the salary of a social worker based on their hourly wage and hours worked.\n *\n * @param hourlyWage The hourly wage of the social worker.\n * @param hoursWorked The number of hours worked by the social worker.\n * @return The calculated salary of the social worker.\n */\nfun calculateSocialWorkerSalary(hourlyWage: Double, hoursWorked: Int): Double {\nreturn when {\n        hoursWorked > 10 -> hourlyWage * 1.5\n        hoursWorked > 5 -> hourlyWage * 2\n        else -> hourlyWage * 3\n    }\n}"}
{"kt_path": "11/solution_11.kt", "Qwen2.5-Coder-0.5B-Instruct-KExercises-KStack-clean-bytecode-4bit-lora": "/**\n * This function checks if a given number is odd or even and returns true if it is, otherwise false.\n *\n * @param num The number to be checked.\n * @return True if the number is odd, False if the number is even.\n */\nfun checkOddEvenNumbers(num: Int, divisor1: Int, divisor2: Int): Boolean {\nvar count = 0\n\n    // Check if the number is divisible by both divisors\n    if (num % divisor1 == 0 && num % divisor2 == 0) {\n        count++\n    }\n\n    // Check if the number is divisible by either divisor1 or divisor2\n    if (num % divisor1 == 0 || num % divisor2 == 0) {\n        count++\n    }\n\n    return count > 0\n}"}
{"kt_path": "1118/solution_1118.kt", "Qwen2.5-Coder-0.5B-Instruct-KExercises-KStack-clean-bytecode-4bit-lora": "/**\n * This function creates an empty complement list for a given nurse.\n *\n * @param nurse The name of the nurse.\n * @return An empty complement list for the nurse.\n */\nfun createEmptyComplementList(nurse: String): List<Any> {\nval complementList = mutableListOf<Any>()\n    return complementList\n}"}
{"kt_path": "8385/solution_8385.kt", "Qwen2.5-Coder-0.5B-Instruct-KExercises-KStack-clean-bytecode-4bit-lora": "/**\n * Determines whether a given number is prime or not.\n *\n * @param num The number to check.\n * @return True if the number is prime, False otherwise.\n */\nfun isPrime(num: Int): Boolean {\nif (num <= 1) return false\n\n    var limit = (int)Math.sqrt(num.toDouble()).toInt()\n\n    for (i in 2..limit) {\n        if (num % i == 0) {\n            return false\n        }\n    }\n\n    return true\n}"}
{"kt_path": "14396/solution_14396.kt", "Qwen2.5-Coder-0.5B-Instruct-KExercises-KStack-clean-bytecode-4bit-lora": "/**\n * Given a list of coordinates, return a tuple containing the x and y coordinates.\n *\n * @param coordinatesList A list of coordinates represented as triples (x, y, z).\n * @return A tuple containing the x and y coordinates.\n */\nfun extractCoordinates(coordinatesList: List<Triple<Int, Int, Int>>): Triple<Int, Int, Int> {\nreturn coordinatesList[0]\n}"}
{"kt_path": "5828/solution_5828.kt", "Qwen2.5-Coder-0.5B-Instruct-KExercises-KStack-clean-bytecode-4bit-lora": "/**\n * Calculates the number of paint cans needed for a given wall area.\n *\n * @param wallAreas A list of wall areas in square meters.\n * @param paintPerCan The amount of paint required per can in cubic meters.\n * @return The number of paint cans needed.\n */\nfun calculatePaintCansNeeded(wallAreas: List<Double>, paintPerCan: Double): Int {\nval totalArea = wallAreas.sum()\n    val cansNeeded = totalArea / paintPerCan\n    return cansNeeded.toInt()\n}"}
